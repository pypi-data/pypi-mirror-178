# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['random_forest_mc']

package_data = \
{'': ['*']}

install_requires = \
['numpy>=1.20', 'pandas>=1.3', 'tqdm>=4.60']

setup_kwargs = {
    'name': 'random-forest-mc',
    'version': '1.0.3',
    'description': 'This project is about use Random Forest approach using a dynamic tree selection Monte Carlo based.',
    'long_description': '# Random Forest with Tree Selection Monte Carlo Based (RF-TSMC)\n![](forest.png)\n\n<a href="https://pypi.org/project/random-forest-mc"><img src="https://img.shields.io/pypi/pyversions/random-forest-mc" alt="Python versions"></a>\n<a href="https://pypi.org/project/random-forest-mc"><img src="https://img.shields.io/pypi/v/random-forest-mc?color=blue" alt="PyPI version"></a>\n![](https://img.shields.io/badge/Coverage-100%25-green)\n![](https://img.shields.io/badge/Status-Stable-green)\n![](https://img.shields.io/badge/Dev--status-Released-green)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/ysraell/random-forest-mc.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/ysraell/random-forest-mc/alerts/)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/ysraell/random-forest-mc.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/ysraell/random-forest-mc/context:python)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nThis project is about use Random Forest approach for *multiclass classification* using a dynamic tree selection Monte Carlo based. The first implementation is found in [2] (using Common Lisp).\n\n## Install:\n\nInstall using `pip`:\n\n```bash\n$ pip3 install random-forest-mc\n```\n\nInstall from this repo:\n\n```bash\n$ git clone https://github.com/ysraell/random-forest-mc.git\n$ cd random-forest-mc\n$ pip3 install .\n```\n\n## Usage:\n\nExample of a full cycle using `titanic.csv`:\n\n```python\nimport numpy as np\nimport pandas as pd\n\nfrom random_forest_mc.model import RandomForestMC\nfrom random_forest_mc.utils import LoadDicts, load_file_json, dump_file_json\n\ndicts = LoadDicts("tests/")\ndataset_dict = dicts.datasets_metadata\nds_name = "titanic"\nparams = dataset_dict[ds_name]\ntarget_col = params["target_col"]\ndataset = (\n    pd.read_csv(params["csv_path"])[params["ds_cols"] + [params["target_col"]]]\n    .dropna()\n    .reset_index(drop=True)\n)\ndataset["Age"] = dataset["Age"].astype(np.uint8)\ndataset["SibSp"] = dataset["SibSp"].astype(np.uint8)\ndataset["Pclass"] = dataset["Pclass"].astype(str)\ndataset["Fare"] = dataset["Fare"].astype(np.uint32)\ncls = RandomForestMC(\n    n_trees=8, target_col=target_col, max_discard_trees=4\n)\ncls.process_dataset(dataset)\ncls.fit() # or with cls.fitParallel(max_workers=8)\ny_test = dataset[params["target_col"]].to_list()\ncls.setWeightedTrees(True) # predictions weighted by survive scores\ny_pred = cls.testForest(dataset)\naccuracy_hard = sum([v == p for v, p in zip(y_test, y_pred)]) / len(y_pred)\ncls.setSoftVoting(True) # for predicitons using soft voting strategy\ny_pred = cls.testForest(dataset)\naccuracy_soft = sum([v == p for v, p in zip(y_test, y_pred)]) / len(y_pred)\n\n# Simply predictions:\n\n# One row\nrow = dataset.loc[0]\ncls.predict(row)\n{\'0\': 0.75, \'1\': 0.25}\n\n# Multiple rows (dataset)\ncls.predict(dataset.sample(n=10))\n[\'0\', \'1\', ...]\n\n# Get the probabilities:\ncls.predict_proba(dataset.sample(n=10))\n[\n    {\'0\': 0.75, \'1\': 0.25},\n    {\'0\': 1.0, \'1\': 0.0},\n    ...\n    {\'0\': 0.625, \'1\': 0.375}\n]\n\n# Works with missing values:\n\ncols = list(dataset.columns)\ncols.pop(cols.index(\'Class\'))\nds = dataset[cols[:10]+[\'Class\']]\n\nrow = ds.loc[0]\ncls.predict(row)\n{\'0\': 0.75, \'1\': 0.25}\n\ncls.predict(dataset.sample(n=10))\n[\'0\', \'1\', ...]\n\n# Saving model:\nModelDict = cls.model2dict()\ndump_file_json(path_dict, ModelDict)\ndel ModelDict\n\n# Loading model\nModelDict = load_file_json(path_dict)\ncls = RandomForestMC()\ncls.dict2model(ModelDict)\n# Before run fit again, load dataset. Check if the features are the same!\ncls.process_dataset(dataset)\n\nrow = dataset.loc[0]\n# Feature counting (how much features in each tree):\ncls.featCount() # or cls.sampleClassFeatCount(row, row[target_col])\n(\n    (3.5, 0.5, 3, 4),  # (mean, std, min, max)\n    [3, 4, 3, 4, 3, 4] # List of counting of features in each tree.\n)\n\n# Feature importance:\ncls.featImportance() # or cls.sampleClassFeatImportance(row, row[target_col])\n{\n    \'feat 1\': 0.900000,\n    \'feat 2\': 0.804688,\n    \'feat 3\': 0.398438,\n    ...\n}\n\n# Permutation feature importance:\ncls.featPairImportance() # or cls.sampleClassFeatPairImportance(row, row[target_col])\n{\n    (\'feat 1\', \'feat 2\'): 0.12,\n    (\'feat 1\', \'feat 3\'): 0.13,\n    (\'feat 2\', \'feat 3\'): 0.23,\n    ...\n}\n\n# Permutation feature importance in matrix (dataframe):\ncls.featCorrDataFrame() # or cls.sampleClassFeatCorrDataFrame(row, row[target_col])\n               feat 1     feat 2     feat 3\nfeat 1       0.900000   0.120000   0.130000\nfeat 2       0.120000   0.804688   0.230000\nfeat 3       0.130000   0.230000   0.398438\n\n# For merge different models (forests):\n...\ncls.fit()\ncls2.fit()\n\n# Simply add all trees from cls2 in cls.\ncls.mergeForest(cls2)\n\n# Merge all trees from both models and keep the trees with scores within the top N survived scores.\ncls.mergeForest(cls2, N, \'score\')\n\n# Merge all trees from both models and keep N random trees.\ncls.mergeForest(cls2, N, \'random\')\n\n```\n\n### Notes:\n\n- Classes values must be converted to `str` before make predicts.\n- `fit` always add new trees (keep the trees generated before).\n\n### LoadDicts:\n\nLoadDicts works loading all `JSON` files inside a given path, creating an object helper to use this files as dictionaries.\n\nFor example:\n```python\n>>> from random_forest_mc.utils import LoadDicts\n>>> # JSONs: path/data.json, path/metdada.json\n>>> dicts = LoadDicts("path/")\n>>> # you have: dicts.data and dicts.metdada as dictionaries\n>>> # And a list of dictionaries loaded in:\n>>> dicts.List\n["data", "metdada"]\n```\n\n## Fundamentals:\n\n- Based on Random Forest method principles: ensemble of models (decision trees).\n\n- In bootstrap process:\n\n    - the data sampled ensure the balance between classes, for training and validation;\n\n    - the list of features used are randomly sampled (with random number of features and order).\n\n- For each tree:\n\n    - fallowing the sequence of a given list of features, the data is splited half/half based on meadian value;\n\n    - the splitting process ends when the samples have one only class;\n\n    - validation process based on dynamic threshold can discard the tree.\n\n- For use the forest:\n\n    - all trees predictions are combined as a vote;\n\n    - it is possible to use soft or hard-voting.\n\n- Positive side-effects:\n\n    - possible more generalization caused by the combination of overfitted trees, each tree is highly specialized in a smallest and different set of feature;\n\n    - robustness for unbalanced and missing data, in case of missing data, the feature could be skipped without degrade the optimization process;\n\n    - in prediction process, a missing value could be dealt with a tree replication considering the two possible paths;\n\n    - the survived trees have a potential information about feature importance.\n\n    - Robust for mssing values in categorical features during prediction process.\n\n### References\n\n[2] [Laboratory of Decision Tree and Random Forest (`github/ysraell/random-forest-lab`)](https://github.com/ysraell/random-forest-lab). GitHub repository.\n\n[3] Credit Card Fraud Detection. Anonymized credit card transactions labeled as fraudulent or genuine. Kaggle. Access: <https://www.kaggle.com/mlg-ulb/creditcardfraud>.\n\n### Development Framework (optional)\n\n- [My data science Docker image](https://github.com/ysraell/my-ds).\n\nWith this image you can run all notebooks and scripts Python inside this repository.\n\n### TO-DO list.\n\nFor TO-DO list see `TODO.md`.\n',
    'author': 'Israel Oliveira',
    'author_email': 'israel.oliveira@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/ysraell/random-forest-mc',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7.15,<3.11',
}


setup(**setup_kwargs)
