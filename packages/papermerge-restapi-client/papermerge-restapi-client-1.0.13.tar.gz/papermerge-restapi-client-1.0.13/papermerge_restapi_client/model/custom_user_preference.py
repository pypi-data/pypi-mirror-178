# coding: utf-8

"""
    Papermerge REST API

    Document management system designed for digital archives  # noqa: E501

    The version of the OpenAPI document: 2.1.0b14
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from papermerge_restapi_client import schemas  # noqa: F401


class CustomUserPreference(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "identifier",
            "additional_data",
            "default",
            "verbose_name",
            "field",
            "name",
            "section",
            "id",
            "value",
            "help_text",
        }
        
        class properties:
            section = schemas.StrSchema
            name = schemas.StrSchema
            identifier = schemas.StrSchema
            default = schemas.StrSchema
            value = schemas.StrSchema
            verbose_name = schemas.StrSchema
            help_text = schemas.StrSchema
            additional_data = schemas.StrSchema
            field = schemas.StrSchema
            id = schemas.StrSchema
            __annotations__ = {
                "section": section,
                "name": name,
                "identifier": identifier,
                "default": default,
                "value": value,
                "verbose_name": verbose_name,
                "help_text": help_text,
                "additional_data": additional_data,
                "field": field,
                "id": id,
            }
    
    identifier: MetaOapg.properties.identifier
    additional_data: MetaOapg.properties.additional_data
    default: MetaOapg.properties.default
    verbose_name: MetaOapg.properties.verbose_name
    field: MetaOapg.properties.field
    name: MetaOapg.properties.name
    section: MetaOapg.properties.section
    id: MetaOapg.properties.id
    value: MetaOapg.properties.value
    help_text: MetaOapg.properties.help_text
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verbose_name"]) -> MetaOapg.properties.verbose_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["help_text"]) -> MetaOapg.properties.help_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additional_data"]) -> MetaOapg.properties.additional_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field"]) -> MetaOapg.properties.field: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["section", "name", "identifier", "default", "value", "verbose_name", "help_text", "additional_data", "field", "id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verbose_name"]) -> MetaOapg.properties.verbose_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["help_text"]) -> MetaOapg.properties.help_text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additional_data"]) -> MetaOapg.properties.additional_data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field"]) -> MetaOapg.properties.field: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["section", "name", "identifier", "default", "value", "verbose_name", "help_text", "additional_data", "field", "id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        identifier: typing.Union[MetaOapg.properties.identifier, str, ],
        additional_data: typing.Union[MetaOapg.properties.additional_data, str, ],
        default: typing.Union[MetaOapg.properties.default, str, ],
        verbose_name: typing.Union[MetaOapg.properties.verbose_name, str, ],
        field: typing.Union[MetaOapg.properties.field, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        section: typing.Union[MetaOapg.properties.section, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        value: typing.Union[MetaOapg.properties.value, str, ],
        help_text: typing.Union[MetaOapg.properties.help_text, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomUserPreference':
        return super().__new__(
            cls,
            *args,
            identifier=identifier,
            additional_data=additional_data,
            default=default,
            verbose_name=verbose_name,
            field=field,
            name=name,
            section=section,
            id=id,
            value=value,
            help_text=help_text,
            _configuration=_configuration,
            **kwargs,
        )
