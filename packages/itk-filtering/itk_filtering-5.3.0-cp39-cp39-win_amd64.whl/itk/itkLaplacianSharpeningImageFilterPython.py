# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLaplacianSharpeningImageFilterPython
else:
    import _itkLaplacianSharpeningImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLaplacianSharpeningImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLaplacianSharpeningImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.pyBasePython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkLaplacianSharpeningImageFilterID2ID2_New():
    return itkLaplacianSharpeningImageFilterID2ID2.New()

class itkLaplacianSharpeningImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterID2ID2
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterID2ID2

        Create a new object of the class itkLaplacianSharpeningImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterID2ID2 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2_swigregister(itkLaplacianSharpeningImageFilterID2ID2)
itkLaplacianSharpeningImageFilterID2ID2___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2___New_orig__
itkLaplacianSharpeningImageFilterID2ID2_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID2ID2_cast


def itkLaplacianSharpeningImageFilterID3ID3_New():
    return itkLaplacianSharpeningImageFilterID3ID3.New()

class itkLaplacianSharpeningImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterID3ID3
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterID3ID3

        Create a new object of the class itkLaplacianSharpeningImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterID3ID3 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3_swigregister(itkLaplacianSharpeningImageFilterID3ID3)
itkLaplacianSharpeningImageFilterID3ID3___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3___New_orig__
itkLaplacianSharpeningImageFilterID3ID3_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID3ID3_cast


def itkLaplacianSharpeningImageFilterID4ID4_New():
    return itkLaplacianSharpeningImageFilterID4ID4.New()

class itkLaplacianSharpeningImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterID4ID4
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterID4ID4

        Create a new object of the class itkLaplacianSharpeningImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterID4ID4 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4_swigregister(itkLaplacianSharpeningImageFilterID4ID4)
itkLaplacianSharpeningImageFilterID4ID4___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4___New_orig__
itkLaplacianSharpeningImageFilterID4ID4_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterID4ID4_cast


def itkLaplacianSharpeningImageFilterIF2IF2_New():
    return itkLaplacianSharpeningImageFilterIF2IF2.New()

class itkLaplacianSharpeningImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterIF2IF2
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterIF2IF2

        Create a new object of the class itkLaplacianSharpeningImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterIF2IF2 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2_swigregister(itkLaplacianSharpeningImageFilterIF2IF2)
itkLaplacianSharpeningImageFilterIF2IF2___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2___New_orig__
itkLaplacianSharpeningImageFilterIF2IF2_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF2IF2_cast


def itkLaplacianSharpeningImageFilterIF3IF3_New():
    return itkLaplacianSharpeningImageFilterIF3IF3.New()

class itkLaplacianSharpeningImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterIF3IF3
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterIF3IF3

        Create a new object of the class itkLaplacianSharpeningImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterIF3IF3 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3_swigregister(itkLaplacianSharpeningImageFilterIF3IF3)
itkLaplacianSharpeningImageFilterIF3IF3___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3___New_orig__
itkLaplacianSharpeningImageFilterIF3IF3_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF3IF3_cast


def itkLaplacianSharpeningImageFilterIF4IF4_New():
    return itkLaplacianSharpeningImageFilterIF4IF4.New()

class itkLaplacianSharpeningImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterIF4IF4
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterIF4IF4

        Create a new object of the class itkLaplacianSharpeningImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterIF4IF4 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4_swigregister(itkLaplacianSharpeningImageFilterIF4IF4)
itkLaplacianSharpeningImageFilterIF4IF4___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4___New_orig__
itkLaplacianSharpeningImageFilterIF4IF4_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIF4IF4_cast


def itkLaplacianSharpeningImageFilterISS2ISS2_New():
    return itkLaplacianSharpeningImageFilterISS2ISS2.New()

class itkLaplacianSharpeningImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterISS2ISS2

        Create a new object of the class itkLaplacianSharpeningImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterISS2ISS2 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2_swigregister(itkLaplacianSharpeningImageFilterISS2ISS2)
itkLaplacianSharpeningImageFilterISS2ISS2___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2___New_orig__
itkLaplacianSharpeningImageFilterISS2ISS2_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS2ISS2_cast


def itkLaplacianSharpeningImageFilterISS3ISS3_New():
    return itkLaplacianSharpeningImageFilterISS3ISS3.New()

class itkLaplacianSharpeningImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterISS3ISS3

        Create a new object of the class itkLaplacianSharpeningImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterISS3ISS3 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3_swigregister(itkLaplacianSharpeningImageFilterISS3ISS3)
itkLaplacianSharpeningImageFilterISS3ISS3___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3___New_orig__
itkLaplacianSharpeningImageFilterISS3ISS3_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS3ISS3_cast


def itkLaplacianSharpeningImageFilterISS4ISS4_New():
    return itkLaplacianSharpeningImageFilterISS4ISS4.New()

class itkLaplacianSharpeningImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterISS4ISS4

        Create a new object of the class itkLaplacianSharpeningImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterISS4ISS4 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4_swigregister(itkLaplacianSharpeningImageFilterISS4ISS4)
itkLaplacianSharpeningImageFilterISS4ISS4___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4___New_orig__
itkLaplacianSharpeningImageFilterISS4ISS4_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterISS4ISS4_cast


def itkLaplacianSharpeningImageFilterIUC2IUC2_New():
    return itkLaplacianSharpeningImageFilterIUC2IUC2.New()

class itkLaplacianSharpeningImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterIUC2IUC2

        Create a new object of the class itkLaplacianSharpeningImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterIUC2IUC2 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2_swigregister(itkLaplacianSharpeningImageFilterIUC2IUC2)
itkLaplacianSharpeningImageFilterIUC2IUC2___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2___New_orig__
itkLaplacianSharpeningImageFilterIUC2IUC2_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC2IUC2_cast


def itkLaplacianSharpeningImageFilterIUC3IUC3_New():
    return itkLaplacianSharpeningImageFilterIUC3IUC3.New()

class itkLaplacianSharpeningImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterIUC3IUC3

        Create a new object of the class itkLaplacianSharpeningImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterIUC3IUC3 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3_swigregister(itkLaplacianSharpeningImageFilterIUC3IUC3)
itkLaplacianSharpeningImageFilterIUC3IUC3___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3___New_orig__
itkLaplacianSharpeningImageFilterIUC3IUC3_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC3IUC3_cast


def itkLaplacianSharpeningImageFilterIUC4IUC4_New():
    return itkLaplacianSharpeningImageFilterIUC4IUC4.New()

class itkLaplacianSharpeningImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterIUC4IUC4

        Create a new object of the class itkLaplacianSharpeningImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterIUC4IUC4 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4_swigregister(itkLaplacianSharpeningImageFilterIUC4IUC4)
itkLaplacianSharpeningImageFilterIUC4IUC4___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4___New_orig__
itkLaplacianSharpeningImageFilterIUC4IUC4_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUC4IUC4_cast


def itkLaplacianSharpeningImageFilterIUS2IUS2_New():
    return itkLaplacianSharpeningImageFilterIUS2IUS2.New()

class itkLaplacianSharpeningImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterIUS2IUS2

        Create a new object of the class itkLaplacianSharpeningImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterIUS2IUS2 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2_swigregister(itkLaplacianSharpeningImageFilterIUS2IUS2)
itkLaplacianSharpeningImageFilterIUS2IUS2___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2___New_orig__
itkLaplacianSharpeningImageFilterIUS2IUS2_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS2IUS2_cast


def itkLaplacianSharpeningImageFilterIUS3IUS3_New():
    return itkLaplacianSharpeningImageFilterIUS3IUS3.New()

class itkLaplacianSharpeningImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterIUS3IUS3

        Create a new object of the class itkLaplacianSharpeningImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterIUS3IUS3 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3_swigregister(itkLaplacianSharpeningImageFilterIUS3IUS3)
itkLaplacianSharpeningImageFilterIUS3IUS3___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3___New_orig__
itkLaplacianSharpeningImageFilterIUS3IUS3_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS3IUS3_cast


def itkLaplacianSharpeningImageFilterIUS4IUS4_New():
    return itkLaplacianSharpeningImageFilterIUS4IUS4.New()

class itkLaplacianSharpeningImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkLaplacianSharpeningImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4_GenerateInputRequestedRegion)
    UseImageSpacingOn = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4_UseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4_GetUseImageSpacing)
    __swig_destroy__ = _itkLaplacianSharpeningImageFilterPython.delete_itkLaplacianSharpeningImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSharpeningImageFilterIUS4IUS4

        Create a new object of the class itkLaplacianSharpeningImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSharpeningImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSharpeningImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSharpeningImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSharpeningImageFilterIUS4IUS4 in _itkLaplacianSharpeningImageFilterPython:
_itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4_swigregister(itkLaplacianSharpeningImageFilterIUS4IUS4)
itkLaplacianSharpeningImageFilterIUS4IUS4___New_orig__ = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4___New_orig__
itkLaplacianSharpeningImageFilterIUS4IUS4_cast = _itkLaplacianSharpeningImageFilterPython.itkLaplacianSharpeningImageFilterIUS4IUS4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def laplacian_sharpening_image_filter(*args: itkt.ImageLike,  use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for LaplacianSharpeningImageFilter"""
    import itk

    kwarg_typehints = { 'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.LaplacianSharpeningImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def laplacian_sharpening_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFeature.LaplacianSharpeningImageFilter
    laplacian_sharpening_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    laplacian_sharpening_image_filter.__doc__ = filter_object.__doc__




