import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels as sm

df = pd.read_csv('nfl.csv')
df

##changing column name
df.columns=["Month","Frequency"]
#to drop a column: df.drop(['A'], axis=1)
df

df['Month']=pd.to_datetime(df['Month'])
df.set_index('Month',inplace=True)
df
df.describe()
df['Frequency'].replace('<1',0,inplace=True)
df['Frequency']=df['Frequency'].astype('int')
df.info

df.plot()

#applying ada test to check for stationarity

from statsmodels.tsa.stattools import adfuller
def adfuller_test(trends):
    result = adfuller(trends)
    labels = ['ADF Test Statistic','p-value','#Lags Used','#Observation Used']
    for value,label in zip(result,labels):
        print(label  + ': ' + str(value))
    if result[1]<=0.05:
        print('Strong evidence against the null hypothesis, Hence REJECT Ho. and The series is Stationary')
    else:
        print('week evidence against null hypothesis, Hence ACCEPT Ho. that the series is not stationary.')
        
adfuller_test(df['Frequency'])


#differencing for arima do it again and again till data is stationary

df['Frequency First Difference'] = df['Frequency'] - df['Frequency'].shift(1)
df['Frequency'].shift(1)

#seasonal difference

df['Seasonal First Difference']=df['Frequency']-df['Frequency'].shift(12)
df

#performing adf after first differencing for arima and sarima

adfuller_test(df['Frequency First Difference'].dropna())
adfuller_test(df['Seasonal First Difference'].dropna())

##second round of arima and sarima differencing

df['Frequency Second Difference'] = df['Frequency First Difference'] - df['Frequency First Difference'].shift(1)
df['Seasonal Second Difference']=df['Frequency First Difference']-df['Frequency First Difference'].shift(12)
df

##performing adf after second differencing

#adfuller_test(df_nfl['Frequency Second Difference'].dropna()) for arima
adfuller_test(df['Seasonal Second Difference'].dropna())

df['Seasonal First Difference'].plot()
df['Seasonal Second Difference'].plot()

## PACF PLOTS
from pandas.plotting import autocorrelation_plot
autocorrelation_plot(df['Frequency'])
plt.show()

from statsmodels.graphics.tsaplots import plot_acf,plot_pacf

fig1 = plt.figure(figsize=(12,8))
fig2 = plt.figure(figsize=(12,8))
ax1 = fig1.add_subplot(211)

fig2 = sm.graphics.tsaplots.plot_acf(df['Seasonal Second Difference'].iloc[13:],lags=40,ax=ax1,title='Autocorrelation NFL')
ax2 = fig2.add_subplot(212)
fig2 = sm.graphics.tsaplots.plot_pacf(df['Seasonal Second Difference'].iloc[13:],lags=40,ax=ax2,title='Partial Autocorrelation NFL')


#performing arima

from statsmodels.tsa.arima.model import ARIMA
model_A = ARIMA(df['Frequency'],order=(3,1,3))
model_fit_A = model_A.fit()
model_fit_A.summary()


#forecasting arima plot

df['forecast']=model_fit_A.predict(start=170,end=200,dynamic=True)
df[['Frequency','forecast']].plot(figsize=(12,8))

#performing sarima

model_nfl=sm.tsa.statespace.sarimax.SARIMAX(df['Frequency'],order=(2, 1, 1),seasonal_order=(2,1,1,12))
results_nfl=model_nfl.fit()

# forecasting sarima plot

df['forecast']=results_nfl.predict(start=170,end=200,dynamic=True)
df[['Frequency','forecast']].plot(figsize=(12,8))

results_nfl.summary()


