
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIFleftASSIGN_EQUALleftEXISTSleftFORALLleftAGG_OPERleftEQUIVleftIMPLYleftORleftANDAMPERSANDleftNOTleftCOMP_EQUALNEQLESSLESSEQGREATERGREATEREQleftPLUSMINUSleftTIMESDIVrightUMINUSACTION ACTION_PRECONDITIONS AMPERSAND AND ASSIGN_EQUAL BERNOULLI BOOL CASE CDFS COLON COMMA COMP_EQUAL CPFS DEFAULT DERIVED_FLUENT DIRAC_DELTA DIRICHLET DISCOUNT DISCRETE DIV DOLLAR_SIGN DOMAIN DOT DOUBLE ELSE ENUM_VAL EQUIV EXISTS EXPONENTIAL FALSE FORALL GAMMA GREATER GREATEREQ HORIZON IDENT IF IMPLY INIT_STATE INSTANCE INT INTEGER INTERMEDIATE KRON_DELTA LBRACK LCURLY LESS LESSEQ LEVEL LPAREN MAX_NONDEF_ACTIONS MINUS MULTINOMIAL NEG_INF NEQ NON_FLUENT NON_FLUENTS NORMAL NOT OBJECT OBJECTS OBSERVATION OR OTHERWISE PLUS POISSON POS_INF PVARIABLES QUESTION RBRACK RCURLY REAL REQUIREMENTS REWARD RPAREN SEMI STATE STATE_ACTION_CONSTRAINTS STATE_INVARIANTS SWITCH TERMINAL TERMINATE_WHEN TERMINATION THEN TIMES TRUE TYPES UNDERSCORE UNIFORM VAR WEIBULLrddl : rddl_blockrddl_block : rddl_block domain_block\n                      | rddl_block instance_block\n                      | rddl_block nonfluent_block\n                      | emptydomain_block : DOMAIN IDENT LCURLY req_section domain_list RCURLYreq_section : REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI\n                       | REQUIREMENTS LCURLY string_list RCURLY SEMI\n                       | emptydomain_list : domain_list type_section\n                       | domain_list pvar_section\n                       | domain_list cpf_section\n                       | domain_list reward_section\n                       | domain_list termination_section\n                       | domain_list action_precond_section\n                       | domain_list state_action_constraint_section\n                       | domain_list state_invariant_section\n                       | emptytype_section : TYPES LCURLY type_list RCURLY SEMItype_list : type_list type_def\n                     | emptytype_def : IDENT COLON OBJECT SEMI\n                    | IDENT COLON LCURLY enum_list RCURLY SEMIenum_list : enum_list COMMA ENUM_VAL\n                     | ENUM_VAL\n                     | emptypvar_section : PVARIABLES LCURLY pvar_list RCURLY SEMIpvar_list : pvar_list pvar_def\n                     | emptypvar_def : nonfluent_def\n                    | statefluent_def\n                    | actionfluent_def\n                    | intermfluent_def\n                    | derivedfluent_def\n                    | observfluent_defnonfluent_def : IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIstatefluent_def : IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIactionfluent_def : IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIintermfluent_def : IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI\n                            | IDENT param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMIderivedfluent_def : IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI\n                             | IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMIobservfluent_def : IDENT param_list LCURLY OBSERVATION COMMA type_spec RCURLY SEMIcpf_section : cpf_header LCURLY cpf_list RCURLY SEMIcpf_header : CPFS\n                      | CDFScpf_list : cpf_list cpf_def\n                    | emptycpf_def : pvar_expr ASSIGN_EQUAL expr SEMIreward_section : REWARD ASSIGN_EQUAL expr SEMItermination_section  : TERMINATION LCURLY termination_list RCURLY SEMI\n                                |  TERMINATION LCURLY RCURLY SEMItermination_list : termination_list termination_cond_def\n                            | termination_cond_deftermination_cond_def : expr SEMIaction_precond_section : ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI\n                                  | ACTION_PRECONDITIONS LCURLY RCURLY SEMIaction_precond_list : action_precond_list action_precond_def\n                               | action_precond_defaction_precond_def : expr SEMIstate_action_constraint_section : STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI\n                                           | STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMIstate_cons_list : state_cons_list state_cons_def\n                           | state_cons_defstate_cons_def : expr SEMIstate_invariant_section : STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI\n                                   | STATE_INVARIANTS LCURLY RCURLY SEMIstate_invariant_list : state_invariant_list state_invariant_def\n                                | state_invariant_defstate_invariant_def : expr SEMIterm_list : term_list COMMA term\n                     | term\n                     | emptyterm : VAR\n                | ENUM_VAL\n                | pvar_exprexpr : pvar_expr\n                | group_expr\n                | function_expr\n                | relational_expr\n                | boolean_expr\n                | quantifier_expr\n                | numerical_expr\n                | aggregation_expr\n                | control_expr\n                | randomvar_exprpvar_expr : IDENT LPAREN term_list RPAREN\n                     | IDENTgroup_expr : LBRACK expr RBRACK\n                      | LPAREN expr RPARENfunction_expr : IDENT LBRACK expr_list RBRACKrelational_expr : expr COMP_EQUAL expr\n                           | expr NEQ expr\n                           | expr GREATER expr\n                           | expr GREATEREQ expr\n                           | expr LESS expr\n                           | expr LESSEQ exprboolean_expr : expr AND expr\n                        | expr AMPERSAND expr\n                        | expr OR expr\n                        | expr IMPLY expr\n                        | expr EQUIV expr\n                        | NOT expr %prec UMINUS\n                        | bool_typequantifier_expr : FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr %prec FORALL\n                           | EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr %prec EXISTSnumerical_expr : expr PLUS expr\n                          | expr MINUS expr\n                          | expr TIMES expr\n                          | expr DIV expr\n                          | MINUS expr %prec UMINUS\n                          | PLUS expr %prec UMINUS\n                          | INTEGER\n                          | DOUBLEaggregation_expr : IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr %prec AGG_OPERcontrol_expr : IF LPAREN expr RPAREN THEN expr ELSE expr %prec IF\n                        | SWITCH LPAREN term RPAREN LCURLY case_list RCURLYrandomvar_expr : BERNOULLI LPAREN expr RPAREN\n                          | DIRAC_DELTA LPAREN expr RPAREN\n                          | KRON_DELTA LPAREN expr RPAREN\n                          | UNIFORM LPAREN expr COMMA expr RPAREN\n                          | NORMAL LPAREN expr COMMA expr RPAREN\n                          | EXPONENTIAL LPAREN expr RPAREN\n                          | DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN\n                          | DIRICHLET LPAREN IDENT COMMA expr RPAREN\n                          | POISSON LPAREN expr RPAREN\n                          | WEIBULL LPAREN expr COMMA expr RPAREN\n                          | GAMMA   LPAREN expr COMMA expr RPARENtyped_var_list : typed_var_list COMMA typed_var\n                          | typed_vartyped_var : VAR COLON IDENTexpr_list : expr_list COMMA expr\n                     | exprcase_list : case_list COMMA case_def\n                     | case_defcase_def : CASE term COLON expr\n                    | DEFAULT COLON exprlconst_case_list : lconst COLON expr\n                            | lconst COLON OTHERWISE\n                            | lconst_case_list COMMA lconst COLON exprlconst : IDENT\n                  | ENUM_VALparam_list : COLON\n                      | LPAREN param_list2 RPAREN COLONparam_list2 : type_spec\n                       | param_list2 COMMA type_spectype_spec : IDENT\n                     | INT\n                     | REAL\n                     | BOOLrange_const : bool_type\n                       | double_type\n                       | int_type\n                       | IDENTbool_type : TRUE\n                     | FALSEdouble_type : DOUBLE\n                       | MINUS DOUBLE\n                       | POS_INF\n                       | NEG_INFint_type : INTEGER\n                    | MINUS INTEGERpos_int_type_or_pos_inf : INTEGER\n                                   | POS_INFinstance_block : INSTANCE IDENT LCURLY instance_list RCURLYinstance_list : instance_list domain_section\n                         | instance_list nonfluents_section\n                         | instance_list objects_section\n                         | instance_list init_state_section\n                         | instance_list max_nondef_actions_section\n                         | instance_list horizon_spec_section\n                         | instance_list discount_section\n                         | emptydomain_section : DOMAIN ASSIGN_EQUAL IDENT SEMInonfluents_section : NON_FLUENTS ASSIGN_EQUAL IDENT SEMIobjects_section : OBJECTS LCURLY objects_list RCURLY SEMIinit_state_section : INIT_STATE LCURLY pvar_inst_list RCURLY SEMImax_nondef_actions_section : MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMIhorizon_spec_section : HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI\n                                | HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPARENdiscount_section : DISCOUNT ASSIGN_EQUAL DOUBLE SEMInonfluent_block : NON_FLUENTS IDENT LCURLY nonfluent_list RCURLYnonfluent_list : nonfluent_list domain_section\n                          | nonfluent_list objects_section\n                          | nonfluent_list init_non_fluent_section\n                          | emptyinit_non_fluent_section : NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMIobjects_list : objects_list objects_def\n                        | objects_def\n                        | emptyobjects_def : IDENT COLON LCURLY object_const_list RCURLY SEMIobject_const_list : object_const_list COMMA IDENT\n                             | IDENTpvar_inst_list : pvar_inst_list pvar_inst_def\n                          | pvar_inst_defpvar_inst_def : IDENT LPAREN lconst_list RPAREN SEMI\n                         | IDENT SEMI\n                         | NOT IDENT LPAREN lconst_list RPAREN SEMI\n                         | NOT IDENT SEMI\n                         | IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI\n                         | IDENT ASSIGN_EQUAL range_const SEMIlconst_list : lconst_list COMMA lconst\n                       | lconststring_list : string_list COMMA IDENT\n                       | IDENT\n                       | emptyempty :'
    
_lr_action_items = {'DOMAIN':([0,2,3,4,5,6,14,15,19,20,21,22,27,28,29,30,31,32,33,34,43,44,45,46,47,168,169,179,180,182,256,258,276,338,],[-207,7,-5,-2,-3,-4,-207,-207,35,-173,35,-186,-165,-166,-167,-168,-169,-170,-171,-172,-182,-183,-184,-185,-6,-174,-175,-178,-179,-181,-176,-177,-187,-180,]),'INSTANCE':([0,2,3,4,5,6,27,43,47,],[-207,8,-5,-2,-3,-4,-165,-182,-6,]),'NON_FLUENTS':([0,2,3,4,5,6,14,15,19,20,21,22,27,28,29,30,31,32,33,34,43,44,45,46,47,168,169,179,180,182,256,258,276,338,],[-207,9,-5,-2,-3,-4,-207,-207,36,-173,42,-186,-165,-166,-167,-168,-169,-170,-171,-172,-182,-183,-184,-185,-6,-174,-175,-178,-179,-181,-176,-177,-187,-180,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'rddl':([0,],[1,]),'rddl_block':([0,],[2,]),'empty':([0,13,14,15,16,26,66,72,78,79,80,216,340,],[3,18,20,22,24,69,69,93,107,109,111,302,380,]),'domain_block':([2,],[4,]),'instance_block':([2,],[5,]),'nonfluent_block':([2,],[6,]),'req_section':([13,],[16,]),'instance_list':([14,],[19,]),'nonfluent_list':([15,],[21,]),'domain_list':([16,],[23,]),'domain_section':([19,21,],[28,44,]),'nonfluents_section':([19,],[29,]),'objects_section':([19,21,],[30,45,]),'init_state_section':([19,],[31,]),'max_nondef_actions_section':([19,],[32,]),'horizon_spec_section':([19,],[33,]),'discount_section':([19,],[34,]),'init_non_fluent_section':([21,],[46,]),'type_section':([23,],[48,]),'pvar_section':([23,],[49,]),'cpf_section':([23,],[50,]),'reward_section':([23,],[51,]),'termination_section':([23,],[52,]),'action_precond_section':([23,],[53,]),'state_action_constraint_section':([23,],[54,]),'state_invariant_section':([23,],[55,]),'cpf_header':([23,],[58,]),'string_list':([26,66,],[67,86,]),'objects_list':([72,],[91,]),'objects_def':([72,91,],[92,171,]),'pvar_inst_list':([73,77,],[95,105,]),'pvar_inst_def':([73,77,95,105,],[96,96,174,174,]),'pos_int_type_or_pos_inf':([74,75,],[99,102,]),'type_list':([78,],[106,]),'pvar_list':([79,],[108,]),'cpf_list':([80,],[110,]),'expr':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,392,395,396,397,434,447,451,465,467,],[112,152,156,160,164,219,220,221,224,225,152,156,160,164,275,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,307,313,315,316,317,318,319,320,323,324,325,348,391,399,400,403,404,405,420,423,424,425,453,463,466,476,477,]),'pvar_expr':([81,82,83,84,85,110,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,226,227,228,229,230,231,232,233,236,237,238,284,350,352,363,364,367,369,370,392,395,396,397,428,434,447,451,465,467,],[113,113,113,113,113,198,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,305,113,113,305,113,113,113,113,113,113,113,113,113,113,305,113,113,113,113,113,113,113,113,113,113,305,113,113,113,113,113,]),'group_expr':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,392,395,396,397,434,447,451,465,467,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'function_expr':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,392,395,396,397,434,447,451,465,467,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'relational_expr':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,392,395,396,397,434,447,451,465,467,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'boolean_expr':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,392,395,396,397,434,447,451,465,467,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'quantifier_expr':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,392,395,396,397,434,447,451,465,467,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'numerical_expr':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,392,395,396,397,434,447,451,465,467,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'aggregation_expr':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,392,395,396,397,434,447,451,465,467,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'control_expr':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,392,395,396,397,434,447,451,465,467,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'randomvar_expr':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,392,395,396,397,434,447,451,465,467,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'bool_type':([81,82,83,84,85,124,125,126,130,131,149,153,157,161,177,181,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,217,226,228,229,230,231,232,233,236,237,238,284,352,363,364,367,369,370,374,392,395,396,397,434,447,451,465,467,478,479,480,481,482,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,265,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,265,127,127,127,127,127,127,127,127,127,265,265,265,265,265,]),'termination_list':([82,],[149,]),'termination_cond_def':([82,149,],[151,240,]),'action_precond_list':([83,],[153,]),'action_precond_def':([83,153,],[155,244,]),'state_cons_list':([84,],[157,]),'state_cons_def':([84,157,],[159,248,]),'state_invariant_list':([85,],[161,]),'state_invariant_def':([85,161,],[163,252,]),'type_def':([106,],[185,]),'pvar_def':([108,],[188,]),'nonfluent_def':([108,],[189,]),'statefluent_def':([108,],[190,]),'actionfluent_def':([108,],[191,]),'intermfluent_def':([108,],[192,]),'derivedfluent_def':([108,],[193,]),'observfluent_def':([108,],[194,]),'cpf_def':([110,],[197,]),'lconst_list':([175,273,],[260,337,]),'lconst':([175,273,333,366,432,],[261,261,375,402,452,]),'range_const':([177,374,478,479,480,481,482,],[264,408,483,484,485,486,487,]),'double_type':([177,374,478,479,480,481,482,],[266,266,266,266,266,266,266,]),'int_type':([177,374,478,479,480,481,482,],[267,267,267,267,267,267,267,]),'param_list':([195,],[280,]),'term_list':([216,],[300,]),'term':([216,227,350,428,],[301,314,390,450,]),'expr_list':([217,],[306,]),'object_const_list':([257,],[331,]),'param_list2':([282,],[342,]),'type_spec':([282,388,412,413,414,415,416,417,],[343,419,441,442,443,444,445,446,]),'typed_var_list':([308,311,312,],[353,356,357,]),'typed_var':([308,311,312,393,],[354,354,354,421,]),'enum_list':([340,],[378,]),'lconst_case_list':([366,],[401,]),'case_list':([398,],[426,]),'case_def':([398,449,],[427,464,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> rddl","S'",1,None,None,None),
  ('rddl -> rddl_block','rddl',1,'p_rddl','parser.py',246),
  ('rddl_block -> rddl_block domain_block','rddl_block',2,'p_rddl_block','parser.py',250),
  ('rddl_block -> rddl_block instance_block','rddl_block',2,'p_rddl_block','parser.py',251),
  ('rddl_block -> rddl_block nonfluent_block','rddl_block',2,'p_rddl_block','parser.py',252),
  ('rddl_block -> empty','rddl_block',1,'p_rddl_block','parser.py',253),
  ('domain_block -> DOMAIN IDENT LCURLY req_section domain_list RCURLY','domain_block',6,'p_domain_block','parser.py',262),
  ('req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI','req_section',6,'p_req_section','parser.py',267),
  ('req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI','req_section',5,'p_req_section','parser.py',268),
  ('req_section -> empty','req_section',1,'p_req_section','parser.py',269),
  ('domain_list -> domain_list type_section','domain_list',2,'p_domain_list','parser.py',277),
  ('domain_list -> domain_list pvar_section','domain_list',2,'p_domain_list','parser.py',278),
  ('domain_list -> domain_list cpf_section','domain_list',2,'p_domain_list','parser.py',279),
  ('domain_list -> domain_list reward_section','domain_list',2,'p_domain_list','parser.py',280),
  ('domain_list -> domain_list termination_section','domain_list',2,'p_domain_list','parser.py',281),
  ('domain_list -> domain_list action_precond_section','domain_list',2,'p_domain_list','parser.py',282),
  ('domain_list -> domain_list state_action_constraint_section','domain_list',2,'p_domain_list','parser.py',283),
  ('domain_list -> domain_list state_invariant_section','domain_list',2,'p_domain_list','parser.py',284),
  ('domain_list -> empty','domain_list',1,'p_domain_list','parser.py',285),
  ('type_section -> TYPES LCURLY type_list RCURLY SEMI','type_section',5,'p_type_section','parser.py',294),
  ('type_list -> type_list type_def','type_list',2,'p_type_list','parser.py',299),
  ('type_list -> empty','type_list',1,'p_type_list','parser.py',300),
  ('type_def -> IDENT COLON OBJECT SEMI','type_def',4,'p_type_def','parser.py',308),
  ('type_def -> IDENT COLON LCURLY enum_list RCURLY SEMI','type_def',6,'p_type_def','parser.py',309),
  ('enum_list -> enum_list COMMA ENUM_VAL','enum_list',3,'p_enum_list','parser.py',316),
  ('enum_list -> ENUM_VAL','enum_list',1,'p_enum_list','parser.py',317),
  ('enum_list -> empty','enum_list',1,'p_enum_list','parser.py',318),
  ('pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI','pvar_section',5,'p_pvar_section','parser.py',328),
  ('pvar_list -> pvar_list pvar_def','pvar_list',2,'p_pvar_list','parser.py',333),
  ('pvar_list -> empty','pvar_list',1,'p_pvar_list','parser.py',334),
  ('pvar_def -> nonfluent_def','pvar_def',1,'p_pvar_def','parser.py',342),
  ('pvar_def -> statefluent_def','pvar_def',1,'p_pvar_def','parser.py',343),
  ('pvar_def -> actionfluent_def','pvar_def',1,'p_pvar_def','parser.py',344),
  ('pvar_def -> intermfluent_def','pvar_def',1,'p_pvar_def','parser.py',345),
  ('pvar_def -> derivedfluent_def','pvar_def',1,'p_pvar_def','parser.py',346),
  ('pvar_def -> observfluent_def','pvar_def',1,'p_pvar_def','parser.py',347),
  ('nonfluent_def -> IDENT param_list LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','nonfluent_def',12,'p_nonfluent_def','parser.py',351),
  ('statefluent_def -> IDENT param_list LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','statefluent_def',12,'p_statefluent_def','parser.py',360),
  ('actionfluent_def -> IDENT param_list LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','actionfluent_def',12,'p_actionfluent_def','parser.py',367),
  ('intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI','intermfluent_def',12,'p_intermfluent_def','parser.py',374),
  ('intermfluent_def -> IDENT param_list LCURLY INTERMEDIATE COMMA type_spec RCURLY SEMI','intermfluent_def',8,'p_intermfluent_def','parser.py',375),
  ('derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI','derivedfluent_def',12,'p_derivedfluent_def','parser.py',382),
  ('derivedfluent_def -> IDENT param_list LCURLY DERIVED_FLUENT COMMA type_spec RCURLY SEMI','derivedfluent_def',8,'p_derivedfluent_def','parser.py',383),
  ('observfluent_def -> IDENT param_list LCURLY OBSERVATION COMMA type_spec RCURLY SEMI','observfluent_def',8,'p_observfluent_def','parser.py',390),
  ('cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI','cpf_section',5,'p_cpf_section','parser.py',394),
  ('cpf_header -> CPFS','cpf_header',1,'p_cpf_header','parser.py',400),
  ('cpf_header -> CDFS','cpf_header',1,'p_cpf_header','parser.py',401),
  ('cpf_list -> cpf_list cpf_def','cpf_list',2,'p_cpf_list','parser.py',405),
  ('cpf_list -> empty','cpf_list',1,'p_cpf_list','parser.py',406),
  ('cpf_def -> pvar_expr ASSIGN_EQUAL expr SEMI','cpf_def',4,'p_cpf_def','parser.py',414),
  ('reward_section -> REWARD ASSIGN_EQUAL expr SEMI','reward_section',4,'p_reward_section','parser.py',418),
  ('termination_section -> TERMINATION LCURLY termination_list RCURLY SEMI','termination_section',5,'p_termination_section','parser.py',423),
  ('termination_section -> TERMINATION LCURLY RCURLY SEMI','termination_section',4,'p_termination_section','parser.py',424),
  ('termination_list -> termination_list termination_cond_def','termination_list',2,'p_termination_list','parser.py',432),
  ('termination_list -> termination_cond_def','termination_list',1,'p_termination_list','parser.py',433),
  ('termination_cond_def -> expr SEMI','termination_cond_def',2,'p_termination_cond_def','parser.py',441),
  ('action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI','action_precond_section',5,'p_action_precond_section','parser.py',445),
  ('action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI','action_precond_section',4,'p_action_precond_section','parser.py',446),
  ('action_precond_list -> action_precond_list action_precond_def','action_precond_list',2,'p_action_precond_list','parser.py',454),
  ('action_precond_list -> action_precond_def','action_precond_list',1,'p_action_precond_list','parser.py',455),
  ('action_precond_def -> expr SEMI','action_precond_def',2,'p_action_precond_def','parser.py',463),
  ('state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI','state_action_constraint_section',5,'p_state_action_constraint_section','parser.py',467),
  ('state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI','state_action_constraint_section',4,'p_state_action_constraint_section','parser.py',468),
  ('state_cons_list -> state_cons_list state_cons_def','state_cons_list',2,'p_state_cons_list','parser.py',476),
  ('state_cons_list -> state_cons_def','state_cons_list',1,'p_state_cons_list','parser.py',477),
  ('state_cons_def -> expr SEMI','state_cons_def',2,'p_state_cons_def','parser.py',485),
  ('state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI','state_invariant_section',5,'p_state_invariant_section','parser.py',489),
  ('state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI','state_invariant_section',4,'p_state_invariant_section','parser.py',490),
  ('state_invariant_list -> state_invariant_list state_invariant_def','state_invariant_list',2,'p_state_invariant_list','parser.py',498),
  ('state_invariant_list -> state_invariant_def','state_invariant_list',1,'p_state_invariant_list','parser.py',499),
  ('state_invariant_def -> expr SEMI','state_invariant_def',2,'p_state_invariant_def','parser.py',507),
  ('term_list -> term_list COMMA term','term_list',3,'p_term_list','parser.py',511),
  ('term_list -> term','term_list',1,'p_term_list','parser.py',512),
  ('term_list -> empty','term_list',1,'p_term_list','parser.py',513),
  ('term -> VAR','term',1,'p_term','parser.py',523),
  ('term -> ENUM_VAL','term',1,'p_term','parser.py',524),
  ('term -> pvar_expr','term',1,'p_term','parser.py',525),
  ('expr -> pvar_expr','expr',1,'p_expr','parser.py',529),
  ('expr -> group_expr','expr',1,'p_expr','parser.py',530),
  ('expr -> function_expr','expr',1,'p_expr','parser.py',531),
  ('expr -> relational_expr','expr',1,'p_expr','parser.py',532),
  ('expr -> boolean_expr','expr',1,'p_expr','parser.py',533),
  ('expr -> quantifier_expr','expr',1,'p_expr','parser.py',534),
  ('expr -> numerical_expr','expr',1,'p_expr','parser.py',535),
  ('expr -> aggregation_expr','expr',1,'p_expr','parser.py',536),
  ('expr -> control_expr','expr',1,'p_expr','parser.py',537),
  ('expr -> randomvar_expr','expr',1,'p_expr','parser.py',538),
  ('pvar_expr -> IDENT LPAREN term_list RPAREN','pvar_expr',4,'p_pvar_expr','parser.py',542),
  ('pvar_expr -> IDENT','pvar_expr',1,'p_pvar_expr','parser.py',543),
  ('group_expr -> LBRACK expr RBRACK','group_expr',3,'p_group_expr','parser.py',550),
  ('group_expr -> LPAREN expr RPAREN','group_expr',3,'p_group_expr','parser.py',551),
  ('function_expr -> IDENT LBRACK expr_list RBRACK','function_expr',4,'p_function_expr','parser.py',555),
  ('relational_expr -> expr COMP_EQUAL expr','relational_expr',3,'p_relational_expr','parser.py',559),
  ('relational_expr -> expr NEQ expr','relational_expr',3,'p_relational_expr','parser.py',560),
  ('relational_expr -> expr GREATER expr','relational_expr',3,'p_relational_expr','parser.py',561),
  ('relational_expr -> expr GREATEREQ expr','relational_expr',3,'p_relational_expr','parser.py',562),
  ('relational_expr -> expr LESS expr','relational_expr',3,'p_relational_expr','parser.py',563),
  ('relational_expr -> expr LESSEQ expr','relational_expr',3,'p_relational_expr','parser.py',564),
  ('boolean_expr -> expr AND expr','boolean_expr',3,'p_boolean_expr','parser.py',568),
  ('boolean_expr -> expr AMPERSAND expr','boolean_expr',3,'p_boolean_expr','parser.py',569),
  ('boolean_expr -> expr OR expr','boolean_expr',3,'p_boolean_expr','parser.py',570),
  ('boolean_expr -> expr IMPLY expr','boolean_expr',3,'p_boolean_expr','parser.py',571),
  ('boolean_expr -> expr EQUIV expr','boolean_expr',3,'p_boolean_expr','parser.py',572),
  ('boolean_expr -> NOT expr','boolean_expr',2,'p_boolean_expr','parser.py',573),
  ('boolean_expr -> bool_type','boolean_expr',1,'p_boolean_expr','parser.py',574),
  ('quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr','quantifier_expr',6,'p_quantifier_expr','parser.py',583),
  ('quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr','quantifier_expr',6,'p_quantifier_expr','parser.py',584),
  ('numerical_expr -> expr PLUS expr','numerical_expr',3,'p_numerical_expr','parser.py',588),
  ('numerical_expr -> expr MINUS expr','numerical_expr',3,'p_numerical_expr','parser.py',589),
  ('numerical_expr -> expr TIMES expr','numerical_expr',3,'p_numerical_expr','parser.py',590),
  ('numerical_expr -> expr DIV expr','numerical_expr',3,'p_numerical_expr','parser.py',591),
  ('numerical_expr -> MINUS expr','numerical_expr',2,'p_numerical_expr','parser.py',592),
  ('numerical_expr -> PLUS expr','numerical_expr',2,'p_numerical_expr','parser.py',593),
  ('numerical_expr -> INTEGER','numerical_expr',1,'p_numerical_expr','parser.py',594),
  ('numerical_expr -> DOUBLE','numerical_expr',1,'p_numerical_expr','parser.py',595),
  ('aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr','aggregation_expr',6,'p_aggregation_expr','parser.py',604),
  ('control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr','control_expr',8,'p_control_expr','parser.py',608),
  ('control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY','control_expr',7,'p_control_expr','parser.py',609),
  ('randomvar_expr -> BERNOULLI LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',616),
  ('randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',617),
  ('randomvar_expr -> KRON_DELTA LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',618),
  ('randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',619),
  ('randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',620),
  ('randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',621),
  ('randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',622),
  ('randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',623),
  ('randomvar_expr -> POISSON LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',624),
  ('randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',625),
  ('randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',626),
  ('typed_var_list -> typed_var_list COMMA typed_var','typed_var_list',3,'p_typed_var_list','parser.py',636),
  ('typed_var_list -> typed_var','typed_var_list',1,'p_typed_var_list','parser.py',637),
  ('typed_var -> VAR COLON IDENT','typed_var',3,'p_typed_var','parser.py',645),
  ('expr_list -> expr_list COMMA expr','expr_list',3,'p_expr_list','parser.py',649),
  ('expr_list -> expr','expr_list',1,'p_expr_list','parser.py',650),
  ('case_list -> case_list COMMA case_def','case_list',3,'p_case_list','parser.py',658),
  ('case_list -> case_def','case_list',1,'p_case_list','parser.py',659),
  ('case_def -> CASE term COLON expr','case_def',4,'p_case_def','parser.py',667),
  ('case_def -> DEFAULT COLON expr','case_def',3,'p_case_def','parser.py',668),
  ('lconst_case_list -> lconst COLON expr','lconst_case_list',3,'p_lconst_case_list','parser.py',675),
  ('lconst_case_list -> lconst COLON OTHERWISE','lconst_case_list',3,'p_lconst_case_list','parser.py',676),
  ('lconst_case_list -> lconst_case_list COMMA lconst COLON expr','lconst_case_list',5,'p_lconst_case_list','parser.py',677),
  ('lconst -> IDENT','lconst',1,'p_lconst','parser.py',685),
  ('lconst -> ENUM_VAL','lconst',1,'p_lconst','parser.py',686),
  ('param_list -> COLON','param_list',1,'p_param_list','parser.py',691),
  ('param_list -> LPAREN param_list2 RPAREN COLON','param_list',4,'p_param_list','parser.py',692),
  ('param_list2 -> type_spec','param_list2',1,'p_param_list2','parser.py',699),
  ('param_list2 -> param_list2 COMMA type_spec','param_list2',3,'p_param_list2','parser.py',700),
  ('type_spec -> IDENT','type_spec',1,'p_type_spec','parser.py',718),
  ('type_spec -> INT','type_spec',1,'p_type_spec','parser.py',719),
  ('type_spec -> REAL','type_spec',1,'p_type_spec','parser.py',720),
  ('type_spec -> BOOL','type_spec',1,'p_type_spec','parser.py',721),
  ('range_const -> bool_type','range_const',1,'p_range_const','parser.py',725),
  ('range_const -> double_type','range_const',1,'p_range_const','parser.py',726),
  ('range_const -> int_type','range_const',1,'p_range_const','parser.py',727),
  ('range_const -> IDENT','range_const',1,'p_range_const','parser.py',728),
  ('bool_type -> TRUE','bool_type',1,'p_bool_type','parser.py',732),
  ('bool_type -> FALSE','bool_type',1,'p_bool_type','parser.py',733),
  ('double_type -> DOUBLE','double_type',1,'p_double_type','parser.py',737),
  ('double_type -> MINUS DOUBLE','double_type',2,'p_double_type','parser.py',738),
  ('double_type -> POS_INF','double_type',1,'p_double_type','parser.py',739),
  ('double_type -> NEG_INF','double_type',1,'p_double_type','parser.py',740),
  ('int_type -> INTEGER','int_type',1,'p_int_type','parser.py',744),
  ('int_type -> MINUS INTEGER','int_type',2,'p_int_type','parser.py',745),
  ('pos_int_type_or_pos_inf -> INTEGER','pos_int_type_or_pos_inf',1,'p_pos_int_type_or_pos_inf','parser.py',749),
  ('pos_int_type_or_pos_inf -> POS_INF','pos_int_type_or_pos_inf',1,'p_pos_int_type_or_pos_inf','parser.py',750),
  ('instance_block -> INSTANCE IDENT LCURLY instance_list RCURLY','instance_block',5,'p_instance_block','parser.py',754),
  ('instance_list -> instance_list domain_section','instance_list',2,'p_instance_list','parser.py',759),
  ('instance_list -> instance_list nonfluents_section','instance_list',2,'p_instance_list','parser.py',760),
  ('instance_list -> instance_list objects_section','instance_list',2,'p_instance_list','parser.py',761),
  ('instance_list -> instance_list init_state_section','instance_list',2,'p_instance_list','parser.py',762),
  ('instance_list -> instance_list max_nondef_actions_section','instance_list',2,'p_instance_list','parser.py',763),
  ('instance_list -> instance_list horizon_spec_section','instance_list',2,'p_instance_list','parser.py',764),
  ('instance_list -> instance_list discount_section','instance_list',2,'p_instance_list','parser.py',765),
  ('instance_list -> empty','instance_list',1,'p_instance_list','parser.py',766),
  ('domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI','domain_section',4,'p_domain_section','parser.py',775),
  ('nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI','nonfluents_section',4,'p_nonfluents_section','parser.py',779),
  ('objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI','objects_section',5,'p_objects_section','parser.py',784),
  ('init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI','init_state_section',5,'p_init_state_section','parser.py',789),
  ('max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI','max_nondef_actions_section',4,'p_max_nondef_actions_section','parser.py',794),
  ('horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI','horizon_spec_section',4,'p_horizon_spec_section','parser.py',799),
  ('horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN','horizon_spec_section',6,'p_horizon_spec_section','parser.py',800),
  ('discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI','discount_section',4,'p_discount_section','parser.py',808),
  ('nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY','nonfluent_block',5,'p_nonfluent_block','parser.py',813),
  ('nonfluent_list -> nonfluent_list domain_section','nonfluent_list',2,'p_nonfluent_list','parser.py',818),
  ('nonfluent_list -> nonfluent_list objects_section','nonfluent_list',2,'p_nonfluent_list','parser.py',819),
  ('nonfluent_list -> nonfluent_list init_non_fluent_section','nonfluent_list',2,'p_nonfluent_list','parser.py',820),
  ('nonfluent_list -> empty','nonfluent_list',1,'p_nonfluent_list','parser.py',821),
  ('init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI','init_non_fluent_section',5,'p_init_non_fluent_section','parser.py',830),
  ('objects_list -> objects_list objects_def','objects_list',2,'p_objects_list','parser.py',835),
  ('objects_list -> objects_def','objects_list',1,'p_objects_list','parser.py',836),
  ('objects_list -> empty','objects_list',1,'p_objects_list','parser.py',837),
  ('objects_def -> IDENT COLON LCURLY object_const_list RCURLY SEMI','objects_def',6,'p_objects_def','parser.py',845),
  ('object_const_list -> object_const_list COMMA IDENT','object_const_list',3,'p_object_const_list','parser.py',849),
  ('object_const_list -> IDENT','object_const_list',1,'p_object_const_list','parser.py',850),
  ('pvar_inst_list -> pvar_inst_list pvar_inst_def','pvar_inst_list',2,'p_pvar_inst_list','parser.py',858),
  ('pvar_inst_list -> pvar_inst_def','pvar_inst_list',1,'p_pvar_inst_list','parser.py',859),
  ('pvar_inst_def -> IDENT LPAREN lconst_list RPAREN SEMI','pvar_inst_def',5,'p_pvar_inst_def','parser.py',867),
  ('pvar_inst_def -> IDENT SEMI','pvar_inst_def',2,'p_pvar_inst_def','parser.py',868),
  ('pvar_inst_def -> NOT IDENT LPAREN lconst_list RPAREN SEMI','pvar_inst_def',6,'p_pvar_inst_def','parser.py',869),
  ('pvar_inst_def -> NOT IDENT SEMI','pvar_inst_def',3,'p_pvar_inst_def','parser.py',870),
  ('pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI','pvar_inst_def',7,'p_pvar_inst_def','parser.py',871),
  ('pvar_inst_def -> IDENT ASSIGN_EQUAL range_const SEMI','pvar_inst_def',4,'p_pvar_inst_def','parser.py',872),
  ('lconst_list -> lconst_list COMMA lconst','lconst_list',3,'p_lconst_list','parser.py',887),
  ('lconst_list -> lconst','lconst_list',1,'p_lconst_list','parser.py',888),
  ('string_list -> string_list COMMA IDENT','string_list',3,'p_string_list','parser.py',896),
  ('string_list -> IDENT','string_list',1,'p_string_list','parser.py',897),
  ('string_list -> empty','string_list',1,'p_string_list','parser.py',898),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',908),
]
