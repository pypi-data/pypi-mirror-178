{"version":3,"file":"chunks/27700.107cdc11b57f9b866192.min.js","mappings":"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","sources":["webpack://plone-mosaic/./resources/js/mosaic.actions.js"],"sourcesContent":["// This plugin is used to register and execute actions.\nimport $ from \"jquery\";\nimport logging from \"@patternslib/patternslib/src/core/logging\";\nimport mosaic_utils from \"./utils\";\nimport Modal from \"@plone/mockup/src/pat/modal/modal\";\nimport utils from \"@plone/mockup/src/core/utils\";\nimport \"./mosaic.overlay\";\n\nconst log = logging.getLogger(\"pat-mosaic/actions\");\n\nclass ActionManager {\n    constructor(mosaic) {\n        this.mosaic = mosaic;\n        this.actions = []; // Array with all the actions\n        this.shortcuts = []; // Lookup array for shortcuts\n    }\n\n    registerAction (name, options) {\n        var self = this;\n        // Extend default settings\n        options = $.extend(\n            {\n                // Handler for executing the action\n                exec: function () { },\n\n                // Shortcut can be any key + ctrl/shift/alt or a combination of\n                // those\n                shortcut: {\n                    ctrl: false,\n                    alt: false,\n                    shift: false,\n                    key: \"\",\n                },\n\n                // Method to see if the actions should be visible based on the\n                // current tile state\n                visible: function (tile) {\n                    return true;\n                },\n            },\n            options\n        );\n\n        // Add action to manager\n        self.actions[name] = options;\n\n        // Check if shortcut is defined\n        if (options.shortcut.key !== \"\") {\n            // Set keyCode and charCode\n            options.shortcut.charCode = options.shortcut.key.toUpperCase().charCodeAt(0);\n            options.shortcut.action = name;\n\n            // Set shortcut\n            self.shortcuts.push(options.shortcut);\n        }\n    }\n\n    execAction (action, source) {\n        var self = this;\n        if(!(action in self.actions)) {\n            log.error(`Action ${action} not in \"${self.actions}\"`);\n            return;\n        }\n        return self.actions[action].exec(source);\n    }\n\n    getPrefixedClassName (name) {\n        if (name.indexOf(\"-\") > -1) {\n            // dash-spaced-class-name\n            return \"mosaic-\" + name;\n        } else {\n            // camelCaseClassName\n            return \"mosaic\" + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n    };\n\n    async initActions () {\n        var self = this;\n        var mosaic = self.mosaic;\n\n        // Register generic re-usable toggle tile class format action\n        self.registerAction(\"tile-toggle-class\", {\n            exec: function () {\n                var name;\n                if (arguments.length > 0 && arguments[0].value) {\n                    name = self.getPrefixedClassName(arguments[0].value);\n                    $(\".mosaic-selected-tile\", mosaic.document).toggleClass(name);\n                }\n            },\n        });\n\n        // Register generic re-usable toggle tile class format action\n        self.registerAction(\"tile-remove-format\", {\n            exec: function () {\n                var i, j, group, action, name;\n                for (i = 0; i < mosaic.options.formats.length; i++) {\n                    group = mosaic.options.formats[i];\n                    for (j = 0; j < group.actions.length; j++) {\n                        action = group.actions[j];\n                        if (action.category === \"tile\") {\n                            name = self.getPrefixedClassName(action.name);\n                            $(\".mosaic-selected-tile\", mosaic.document).removeClass(name);\n                        }\n                    }\n                }\n            },\n        });\n\n        // Register generic re-usable toggle row class format action\n        self.registerAction(\"row-toggle-class\", {\n            exec: function () {\n                var name;\n                if (arguments.length > 0 && arguments[0].value) {\n                    name = self.getPrefixedClassName(arguments[0].value);\n                    $(\".mosaic-selected-tile\", mosaic.document)\n                        .parents(\".mosaic-grid-row\")\n                        .first()\n                        .toggleClass(name);\n                }\n            },\n        });\n\n        // Register generic re-usable toggle row class format action\n        self.registerAction(\"row-remove-format\", {\n            exec: function () {\n                var i, j, group, action, name;\n                for (i = 0; i < mosaic.options.formats.length; i++) {\n                    group = mosaic.options.formats[i];\n                    for (j = 0; j < group.actions.length; j++) {\n                        action = group.actions[j];\n                        if (action.category === \"row\") {\n                            name = self.getPrefixedClassName(action.name);\n                            $(\".mosaic-selected-tile\", mosaic.document)\n                                .parents(\".mosaic-grid-row\")\n                                .first()\n                                .removeClass(name)\n                                .removeClass(action.name);\n                        }\n                    }\n                }\n            },\n        });\n\n        // Register tile align block action\n        self.registerAction(\"tile-align-block\", {\n            exec: function () {\n                // Remove left and right align classes\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-right\")\n                    .removeClass(\"mosaic-tile-align-left\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"b\",\n            },\n        });\n\n        // Register tile align left action\n        self.registerAction(\"tile-align-left\", {\n            exec: function () {\n                // Remove right align class, add left align class\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-right\")\n                    .addClass(\"mosaic-tile-align-left\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"l\",\n            },\n        });\n\n        // Register tile align right action\n        self.registerAction(\"tile-align-right\", {\n            exec: function () {\n                // Remove left align class, add right align class\n                $(\".mosaic-selected-tile\", mosaic.document)\n                    .removeClass(\"mosaic-tile-align-left\")\n                    .addClass(\"mosaic-tile-align-right\");\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: true,\n                key: \"r\",\n            },\n        });\n\n        // Register save action\n        self.registerAction(\"save\", {\n            exec: function () {\n                mosaic.saving = true;\n                self.blurSelectedTile();\n                mosaic.toolbar.SelectedTileChange();\n                mosaic.queue(function (next) {\n                    mosaic.layoutManager.saveLayoutToForm();\n                    $(\"#form-buttons-save\").trigger(\"click\");\n                    mosaic.saving = false;\n                    next();\n                });\n            },\n            shortcut: {\n                ctrl: true,\n                alt: false,\n                shift: false,\n                key: \"s\",\n            },\n        });\n\n        // Register cancel action\n        self.registerAction(\"cancel\", {\n            exec: function () {\n                // Cancel form\n                $(\"#form-buttons-cancel\").trigger(\"click\");\n            },\n        });\n\n        // Register preview action\n        self.registerAction(\"preview\", {\n            exec: function () {\n                // Trigger validation => drafting sync\n                $(\n                    \"#form-widgets-ILayoutAware-customContentLayout, \" +\n                    \"[name='form.widgets.ILayoutAware.customContentLayout']\"\n                )\n                    .trigger(\"focus\")\n                    .trigger(\"focusout\");\n\n                // Layout preview\n                setTimeout(function () {\n                    window.open(\n                        mosaic.options.context_url + \"/@@layout_preview\",\n                        \"_blank\"\n                    );\n                }, 1000);\n            },\n        });\n\n        // Register html action\n        self.registerAction(\"html\", {\n            exec: function () {\n                // Local variables\n                var tilecontent, text, height;\n\n                // Get tile content div\n                tilecontent = $(\".mosaic-selected-tile\", mosaic.document).children(\n                    \".mosaic-tile-content\"\n                );\n\n                // Check if not already html editable\n                if (tilecontent.find(\".mosaic-rich-text-textarea\").length === 0) {\n                    // Add new text area and set content\n                    text = tilecontent.html();\n                    height = tilecontent.height();\n                    tilecontent.empty();\n                    tilecontent.prepend(\n                        $(mosaic.document.createElement(\"textarea\"))\n                            .addClass(\"mosaic-rich-text-textarea\")\n                            .html($.trim(text))\n                            .height(height)\n                    );\n                }\n            },\n        });\n\n        // Register page properties action\n        self.registerAction(\"properties\", {\n            exec: function () {\n                mosaic.overlay.open(\"all\");\n            },\n        });\n\n        self.registerAction(\"layout\", {\n            /* layout drop down */\n            exec: function () {\n                var $container = $(\".mosaic-button-group-layout\");\n                $container.toggleClass(\"active\");\n            },\n            visible: function () {\n                return true;\n            },\n        });\n\n        // register customize layout button\n        self.registerAction(\"customizelayout\", {\n            exec: function () {\n                mosaic.setSelectedContentLayout(\"\"); // clear selected layout, will use stored layout then\n                $(\".mosaic-toolbar-secondary-functions\").removeClass(\"d-none\");\n                $(\".mosaic-button-customizelayout\").hide();\n                $(\".mosaic-button-savelayout\").show();\n                // go through each tile and add movable\n                $(\".mosaic-panel .mosaic-tile\", mosaic.document).each(function () {\n                    var $mosaic_tile = $(this).data(\"mosaic-tile\");\n                    $mosaic_tile.makeMovable();\n                    $mosaic_tile.$el.mosaicAddDrag();\n                });\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return mosaic.options.canChangeLayout;\n            },\n        });\n\n        // register change layout button\n        self.registerAction(\"changelayout\", {\n            exec: function () {\n                var yes = mosaic.hasContentLayout;\n                if (!yes) {\n                    yes = confirm(\n                        \"Changing your layout will destroy all existing custom layout \" +\n                        \"settings you have in place. Are you sure you want to continue?\"\n                    );\n                }\n                if (yes) {\n                    mosaic.selectLayout();\n                }\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return mosaic.options.available_layouts.length > 0;\n            },\n        });\n\n        // register change layout button\n        self.registerAction(\"savelayout\", {\n            exec: function () {\n                mosaic.saveLayout();\n                $(\".mosaic-button-group-layout\").removeClass(\"active\");\n            },\n            visible: function () {\n                return true;\n            },\n        });\n\n        // Register add tile action\n        self.registerAction(\"add-tile\", {\n            exec: function () {\n                // Open overlay\n                var m = new Modal(\".mosaic-toolbar\", {\n                    modalSizeClass: \"modal-lg\",\n                    ajaxUrl: mosaic.options.context_url +\n                        \"/@@add-tile?form.button.Create=Create\",\n                });\n                m.show();\n            },\n        });\n\n        // Register format action\n        self.registerAction(\"format\", {\n            exec: function (source) {\n                var val = $(source).val();\n                var action = $(source).find(`[value=\"${val}\"]`).data(\"action\")\n                self.execAction(action, source);\n                // reset selector\n                $(source).select2(\"val\", \"none\");\n            },\n        });\n\n        // Register page-insert action\n        self.registerAction(\"insert\", {\n            exec: function (source) {\n                // Local variables\n                var tile_config, tile_type;\n\n                // Check if value selected\n                if ($(source).val() === \"none\") {\n                    return false;\n                } else {\n                    tile_type = $(source).val();\n                }\n\n                // Deselect tiles\n                self.blurSelectedTile()\n\n                // Set actions\n                mosaic.toolbar.SelectedTileChange();\n\n                // Get tile config\n                for (const tile_group of mosaic.options.tiles) {\n                    for (const tile of tile_group.tiles) {\n                        if (tile.name === tile_type) {\n                            tile_config = tile;\n                        }\n                    }\n                }\n\n                // Create new app tile\n                if (tile_config.tile_type === \"textapp\") {\n                    // an app tile\n                    var uid = mosaic_utils.generate_uid();\n                    var tileUrl = mosaic.options.context_url + \"/@@\" + tile_type + \"/\" + uid;\n                    var html = \"<html><body>\" +\n                        mosaic.layoutManager.getDefaultValue(tile_config) +\n                        \"</body></html>\";\n                    mosaic.layoutManager.addAppTileHTML(tile_type, html, tileUrl);\n                } else if (tile_config.tile_type === \"app\") {\n                    // Load add form form selected tiletype\n                    var initial = true;\n                    utils.loading.show();\n                    $.ajax({\n                        type: \"GET\",\n                        url: mosaic.options.context_url +\n                            \"/@@add-tile?tiletype=\" +\n                            tile_type +\n                            \"&form.button.Create=Create\",\n                        success: function (value, xhr) {\n                            utils.loading.hide();\n                            var $value, action_url, authenticator, openAddFormInModal;\n\n                            // Read form\n                            $value = $(value);\n                            action_url = $value.find(\"#add_tile\").attr(\"action\");\n                            authenticator = $value.find('[name=\"_authenticator\"]').val();\n\n                            // Open add form in modal when requires user input\n                            openAddFormInModal = function (html) {\n                                const m = new Modal(\".mosaic-toolbar\", {\n                                    html: html,\n                                    modalSizeClass: \"modal-lg\",\n                                    position: \"center top\",\n                                    buttons: '.formControls > button[type=\"submit\"], .actionButtons > button[type=\"submit\"]',\n                                });\n                                m.on(\"after-render\", function (event) {\n                                    /* Remove field errors since the user has not actually\n                                        been able to fill out the form yet\n                                    */\n                                    var $mContent = m.$modalContent;\n                                    if (initial) {\n                                        $(\".field.error\", $mContent).removeClass(\"error\");\n                                        $(\n                                            \".fieldErrorBox,.portalMessage,.alert,.invalid-feedback\",\n                                            $mContent\n                                        ).remove();\n                                        initial = false;\n                                    }\n\n                                    $('button[name*=\"cancel\"]', $mContent)\n                                        .off(\"click\")\n                                        .on(\"click\", function () {\n                                            m.hide();\n                                        });\n                                });\n                                m.on(\n                                    \"formActionSuccess\",\n                                    function (event, response, state, xhr) {\n                                        var tileUrl = xhr.getResponseHeader(\"X-Tile-Url\");\n                                        if (tileUrl) {\n                                            mosaic.layoutManager.addAppTileHTML(\n                                                tile_type,\n                                                response,\n                                                tileUrl\n                                            );\n                                            m.hide();\n                                        }\n                                    }\n                                );\n                                m.show();\n                            };\n\n                            // Auto-submit add-form when all required fields are filled\n                            if ($(\"form .required\", $value).filter(function () {\n                                var val = $(this)\n                                    .parents(\".field\")\n                                    .first()\n                                    .find(\"input, select, textarea\")\n                                    .not('[type=\"hidden\"]')\n                                    .last()\n                                    .val();\n                                return val === null || val.length === 0;\n                            }).length > 0) {\n                                openAddFormInModal(value);\n                            } else if (action_url) {\n                                $(\"form\", $value).ajaxSubmit({\n                                    type: \"POST\",\n                                    url: action_url,\n                                    data: {\n                                        \"buttons.save\": \"Save\",\n                                        \"_authenticator\": authenticator,\n                                    },\n                                    success: function (value, state, xhr) {\n                                        var tileUrl = xhr.getResponseHeader(\"X-Tile-Url\");\n                                        if (tileUrl) {\n                                            mosaic.layoutManager.addAppTileHTML(\n                                                tile_type,\n                                                value,\n                                                tileUrl\n                                            );\n                                        } else {\n                                            openAddFormInModal(value);\n                                        }\n                                    },\n                                });\n                            }\n                        },\n                    });\n                } else {\n                    // Add tile\n                    mosaic.layoutManager.addTile(tile_type, mosaic.layoutManager.getDefaultValue(tile_config));\n                }\n\n                // reset menu\n                $(source).select2(\"val\", \"none\");\n\n                // Normal exit\n                return true;\n            },\n        });\n\n        // Handle keypress event, check for shortcuts\n        $(document).on(\"keypress\", function (e) {\n            // Action name\n            var action = \"\";\n\n            // Loop through shortcuts\n            $(mosaic.actionManager.shortcuts).each(function () {\n                // Check if shortcut matched\n                if ((e.ctrlKey === this.ctrl ||\n                    (navigator.userAgent.toLowerCase().indexOf(\"macintosh\") !== -1 &&\n                        e.metaKey === this.ctrl)) &&\n                    (e.altKey === this.alt || e.altKey === undefined) &&\n                    e.shiftKey === this.shift &&\n                    e.charCode &&\n                    String.fromCharCode(e.charCode).toUpperCase().charCodeAt(0) ===\n                    this.charCode) {\n                    // Found action\n                    action = this.action;\n                }\n            });\n\n            // Check if shortcut found\n            if (action !== \"\") {\n                // Exec actions\n                mosaic.actionManager.actions[action].exec();\n\n                // Prevent other actions\n                return false;\n            }\n\n            // Normal exit\n            return true;\n        });\n    };\n\n    blurSelectedTile() {\n        var self = this;\n        this.mosaic.document.querySelectorAll(\".mosaic-selected-tile\").forEach(function(el) {\n            $(el).data(\"mosaic-tile\").blur();\n        });\n    };\n\n    mosaicExecAction() {\n        // Loop through matched elements\n        return this.each(function () {\n            // Check if actions specified\n            if ($(this).data(\"action\") !== \"\") {\n                var mgr = $.mosaic.actionManager;\n\n                // Exec actions\n                mgr.actions[$(this).data(\"action\")].exec(this);\n            }\n        });\n    };\n}\n\nexport default ActionManager;\n"],"names":["i","log","logging","ActionManager","mosaic","this","actions","shortcuts","name","options","$","exec","shortcut","ctrl","alt","shift","key","visible","tile","charCode","toUpperCase","charCodeAt","action","push","source","self","error","indexOf","charAt","slice","registerAction","arguments","length","value","getPrefixedClassName","document","toggleClass","j","group","formats","category","removeClass","parents","first","addClass","saving","blurSelectedTile","toolbar","SelectedTileChange","queue","next","layoutManager","saveLayoutToForm","trigger","setTimeout","window","open","context_url","tilecontent","text","height","children","find","html","empty","prepend","createElement","overlay","setSelectedContentLayout","hide","show","each","$mosaic_tile","data","makeMovable","$el","mosaicAddDrag","canChangeLayout","yes","hasContentLayout","confirm","selectLayout","available_layouts","saveLayout","Modal","modalSizeClass","ajaxUrl","val","execAction","select2","tile_config","tile_type","tiles","uid","mosaic_utils","tileUrl","getDefaultValue","addAppTileHTML","initial","utils","type","url","success","xhr","$value","action_url","authenticator","openAddFormInModal","attr","m","position","buttons","on","event","$mContent","$modalContent","remove","off","response","state","getResponseHeader","filter","not","last","ajaxSubmit","addTile","e","actionManager","ctrlKey","navigator","userAgent","toLowerCase","metaKey","altKey","undefined","shiftKey","String","fromCharCode","querySelectorAll","forEach","el","blur"],"sourceRoot":""}