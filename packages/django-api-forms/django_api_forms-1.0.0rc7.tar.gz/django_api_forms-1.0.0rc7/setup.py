# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['django_api_forms']

package_data = \
{'': ['*']}

install_requires = \
['Django>=2.0']

extras_require = \
{'msgpack': ['msgpack'],
 'pillow': ['Pillow>=2.1'],
 'rrule': ['python-dateutil>=2.8.2,<3.0.0']}

setup_kwargs = {
    'name': 'django-api-forms',
    'version': '1.0.0rc7',
    'description': 'Declarative Django request validation for RESTful APIs',
    'long_description': '# Django API Forms\n\n[![PyPI version](https://badge.fury.io/py/django-api-forms.svg)](https://badge.fury.io/py/django-api-forms)\n[![codecov](https://codecov.io/gh/Sibyx/django_api_forms/branch/master/graph/badge.svg)](https://codecov.io/gh/Sibyx/django_api_forms)\n\n[Django Forms](https://docs.djangoproject.com/en/4.1/topics/forms/) approach in the processing of a RESTful HTTP\nrequest payload (especially for content type like [JSON](https://www.json.org/) or [MessagePack](https://msgpack.org/))\nwithout HTML front-end.\n\n## Motivation\n\nThe main idea was to create a simple and declarative way to specify the format of expecting requests with the ability\nto validate them. Firstly, I tried to use [Django Forms](https://docs.djangoproject.com/en/4.1/topics/forms/) to\nvalidate my API requests (I use pure Django in my APIs). I have encountered a problem with nesting my requests without\na huge boilerplate. Also, the whole HTML thing was pretty useless in my RESTful APIs.\n\nI wanted to:\n\n- define my requests as object (`Form`),\n- pass the request to my defined object (`form = Form.create_from_request(request)`),\n- validate my request `form.is_valid()`,\n- extract data `form.clean_data` property.\n\nI wanted to keep:\n\n- friendly declarative Django syntax,\n([DeclarativeFieldsMetaclass](https://github.com/django/django/blob/master/django/forms/forms.py#L25) is beautiful),\n- [Validators](https://docs.djangoproject.com/en/4.1/ref/validators/),\n- [ValidationError](https://docs.djangoproject.com/en/4.1/ref/exceptions/#validationerror),\n- [Form fields](https://docs.djangoproject.com/en/4.1/ref/forms/fields/) (In the end, I had to "replace" some of them).\n\nSo I have decided to create a simple Python package to cover all my expectations.\n\n## Installation\n\n```shell script\n# Using pip\npip install django-api-forms\n\n# Using poetry\npoetry add django-api-forms\n\n# Local installation\npython -m pip install .\n```\n\nOptional:\n```shell script\n# msgpack support (for requests with Content-Type: application/x-msgpack)\npoetry add msgpack\n\n# ImageField support\npoetry add Pillow\n```\n\nInstall application in your Django project by adding `django_api_forms` to yours `INSTALLED_APPS`:\n\n```python\nINSTALLED_APPS = (\n    \'django.contrib.auth\',\n    \'django.contrib.contenttypes\',\n    \'django.contrib.sessions\',\n    \'django.contrib.messages\',\n    \'django_api_forms\'\n)\n```\n\nYou can change the default behavior of population strategies or parsers using these settings (listed with default\nvalues). Keep in mind, that dictionaries are not replaced by your settings they are merged with defaults.\n\nFor more information about the parsers and the population strategies check the documentation.\n\n```python\nDJANGO_API_FORMS_POPULATION_STRATEGIES = {\n    \'django_api_forms.fields.FormFieldList\': \'django_api_forms.population_strategies.IgnoreStrategy\',\n    \'django_api_forms.fields.FileField\': \'django_api_forms.population_strategies.IgnoreStrategy\',\n    \'django_api_forms.fields.ImageField\': \'django_api_forms.population_strategies.IgnoreStrategy\',\n    \'django_api_forms.fields.FormField\': \'django_api_forms.population_strategies.IgnoreStrategy\',\n    \'django.forms.models.ModelMultipleChoiceField\': \'django_api_forms.population_strategies.IgnoreStrategy\',\n    \'django.forms.models.ModelChoiceField\': \'django_api_forms.population_strategies.ModelChoiceFieldStrategy\'\n}\n\nDJANGO_API_FORMS_DEFAULT_POPULATION_STRATEGY = \'django_api_forms.population_strategies.BaseStrategy\'\n\nDJANGO_API_FORMS_PARSERS = {\n    \'application/json\': \'json.loads\',\n    \'application/x-msgpack\': \'msgpack.loads\'\n}\n```\n\n## Example\n\n**Simple nested JSON request**\n\n```json\n{\n  "title": "Unknown Pleasures",\n  "type": "vinyl",\n  "artist": {\n    "_name": "Joy Division",\n    "genres": [\n      "rock",\n      "punk"\n    ],\n    "members": 4\n  },\n  "year": 1979,\n  "songs": [\n    {\n      "title": "Disorder",\n      "duration": "3:29"\n    },\n    {\n      "title": "Day of the Lords",\n      "duration": "4:48",\n      "metadata": {\n        "_section": {\n          "type": "ID3v2",\n          "offset": 0,\n          "byteLength": 2048\n        },\n        "header": {\n          "majorVersion": 3,\n          "minorRevision": 0,\n          "size": 2038\n        }\n      }\n    }\n  ],\n  "metadata": {\n    "created_at": "2019-10-21T18:57:03+0100",\n    "updated_at": "2019-10-21T18:57:03+0100"\n  }\n}\n```\n\n**Django API Forms equivalent + validation**\n\n```python\nfrom enum import Enum\n\nfrom django.core.exceptions import ValidationError\nfrom django.forms import fields\n\nfrom django_api_forms import FieldList, FormField, FormFieldList, DictionaryField, EnumField, AnyField, Form\n\n\nclass AlbumType(Enum):\n    CD = \'cd\'\n    VINYL = \'vinyl\'\n\n\nclass ArtistForm(Form):\n    class Meta:\n        mapping = {\n            \'_name\': \'name\'\n        }\n\n    name = fields.CharField(required=True, max_length=100)\n    genres = FieldList(field=fields.CharField(max_length=30))\n    members = fields.IntegerField()\n\n\nclass SongForm(Form):\n    title = fields.CharField(required=True, max_length=100)\n    duration = fields.DurationField(required=False)\n    metadata = AnyField(required=False)\n\n\nclass AlbumForm(Form):\n    title = fields.CharField(max_length=100)\n    year = fields.IntegerField()\n    artist = FormField(form=ArtistForm)\n    songs = FormFieldList(form=SongForm)\n    type = EnumField(enum=AlbumType, required=True)\n    metadata = DictionaryField(value_field=fields.DateTimeField())\n\n    def clean_year(self):\n        if self.cleaned_data[\'year\'] == 1992:\n            raise ValidationError("Year 1992 is forbidden!", \'forbidden-value\')\n        return self.cleaned_data[\'year\']\n\n    def clean(self):\n        if (self.cleaned_data[\'year\'] == 1998) and (self.cleaned_data[\'artist\'][\'name\'] == "Nirvana"):\n            raise ValidationError("Sounds like a bullshit", code=\'time-traveling\')\n        if not self._request.user.is_authenticated():\n            raise ValidationError("You can use request in form validation!")\n        return self.cleaned_data\n\n\n\n"""\nDjango view example\n"""\ndef create_album(request):\n    form = AlbumForm.create_from_request(request)\n    if not form.is_valid():\n        # Process your validation error\n        print(form.errors)\n\n    # Cleaned valid payload\n    payload = form.cleaned_data\n    print(payload)\n```\n\nIf you want example with whole Django project, check out repository created by [pawl](https://github.com/pawl)\n[django_api_forms_modelchoicefield_example](https://github.com/pawl/django_api_forms_modelchoicefield_example), where\nhe uses library with\n[ModelChoiceField](https://docs.djangoproject.com/en/4.1/ref/forms/fields/#django.forms.ModelChoiceField).\n\n\n## Running Tests\n\n```shell script\n# install all dependencies\npoetry install\n\n# run code-style check\npoetry run flake8 .\n\n# run the tests\npoetry run python runtests.py\n```\n\n## Sponsorship\n\n<img height="200" src="docs/navicat.png" align="left" alt="Navicat Premium">\n\n[Navicat Premium](https://www.navicat.com/en/products/navicat-premium) is a super awesome database development tool for\ncool kids in the neighborhood that allows you to simultaneously connect to MySQL, MariaDB, MongoDB, SQL Server, Oracle,\nPostgreSQL, and SQLite databases from a single application. Compatible with cloud databases like Amazon RDS, Amazon\nAurora, Amazon Redshift, Microsoft Azure, Oracle Cloud, Google Cloud and MongoDB Atlas. You can quickly and easily\nbuild, manage and maintain your databases.\n\nEspecially, I have to recommend their database design tool. Many thanks [Navicat](https://www.navicat.com/en/) for\nsupporting Open Source projects 🌈.\n\n---\nMade with ❤️ and ☕️ by Jakub Dubec, [BACKBONE s.r.o.](https://www.backbone.sk/en/) &\n[contributors](https://github.com/Sibyx/django_api_forms/graphs/contributors).\n',
    'author': 'Jakub Dubec',
    'author_email': 'jakub.dubec@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
