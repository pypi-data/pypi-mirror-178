# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from smart_diagnostics_client.api_client import ApiClient


class FiltersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_indicator_filter(self, **kwargs):  # noqa: E501
        """Creates an indicator filter  # noqa: E501

        Required Permissions: Location User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_indicator_filter(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IndicatorFilterCreateRequest body: Indicator filter create request
        :return: IndicatorFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_indicator_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_indicator_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_indicator_filter_with_http_info(self, **kwargs):  # noqa: E501
        """Creates an indicator filter  # noqa: E501

        Required Permissions: Location User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_indicator_filter_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IndicatorFilterCreateRequest body: Indicator filter create request
        :return: IndicatorFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_indicator_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v3.0/Filters/Indicators', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndicatorFilterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_indicator_filter(self, indicator_filter_id, **kwargs):  # noqa: E501
        """Deletes an indicator filter  # noqa: E501

        Required Permissions: Location User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_indicator_filter(indicator_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str indicator_filter_id: The id of the indicator filter (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_indicator_filter_with_http_info(indicator_filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_indicator_filter_with_http_info(indicator_filter_id, **kwargs)  # noqa: E501
            return data

    def delete_indicator_filter_with_http_info(self, indicator_filter_id, **kwargs):  # noqa: E501
        """Deletes an indicator filter  # noqa: E501

        Required Permissions: Location User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_indicator_filter_with_http_info(indicator_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str indicator_filter_id: The id of the indicator filter (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['indicator_filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_indicator_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'indicator_filter_id' is set
        if ('indicator_filter_id' not in params or
                params['indicator_filter_id'] is None):
            raise ValueError("Missing the required parameter `indicator_filter_id` when calling `delete_indicator_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'indicator_filter_id' in params:
            path_params['indicatorFilterId'] = params['indicator_filter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v3.0/Filters/Indicators/{indicatorFilterId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicator_filter(self, indicator_filter_id, **kwargs):  # noqa: E501
        """Gets a single indicator filter  # noqa: E501

        Required Permissions: Location User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_filter(indicator_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str indicator_filter_id: Id of indicator filter (required)
        :return: IndicatorFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicator_filter_with_http_info(indicator_filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_indicator_filter_with_http_info(indicator_filter_id, **kwargs)  # noqa: E501
            return data

    def get_indicator_filter_with_http_info(self, indicator_filter_id, **kwargs):  # noqa: E501
        """Gets a single indicator filter  # noqa: E501

        Required Permissions: Location User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_filter_with_http_info(indicator_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str indicator_filter_id: Id of indicator filter (required)
        :return: IndicatorFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['indicator_filter_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicator_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'indicator_filter_id' is set
        if ('indicator_filter_id' not in params or
                params['indicator_filter_id'] is None):
            raise ValueError("Missing the required parameter `indicator_filter_id` when calling `get_indicator_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'indicator_filter_id' in params:
            path_params['indicatorFilterId'] = params['indicator_filter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v3.0/Filters/Indicators/{indicatorFilterId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndicatorFilterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_indicator_filters(self, **kwargs):  # noqa: E501
        """Gets many indicator filters  # noqa: E501

        Required Permissions: Location User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_filters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_global_filters_when_filtering_on_location_id: Specifies if global filters should be included even if filtering on {LocationId}
        :param str filter: Filter statements to narrow results by properties. Filterable properties:  | Field name | Type | Operators | | ---------- | ---- | --------- | | `IsGlobal` | Boolean | `eq, neq` | | `Location` | LocationChild | `isnull, isnotnull` | | `Name` | String | `eq, neq, in, like, isnull, isnotnull` | | `System` | SystemChild | `isnull, isnotnull` | | `LocationAbbreviation` | String | `eq, neq, in, like, isnull, isnotnull` | | `LocationId` | Guid | `eq, neq, in` | | `LocationName` | String | `eq, neq, in, like, isnull, isnotnull` | | `SystemId` | Guid | `eq, neq, in` | | `SystemName` | String | `eq, neq, in, like, isnull, isnotnull` |
        :param int page: Results page. 1-based (1 returns the first page, 0 is invalid).
        :param int page_limit: Number of items to return per page.
        :param str order_by: Allows sorting response items by multiple fields. Sortable properties: | Field name | Type | | ---------- | ---- | | `Name` | String | | `SortOrder` | Int32 | | `LocationName` | String | | `SystemName` | String |
        :param str name_search: Provide search terms to narrow result.  Searchable properties: `Name`.
        :return: PagedResultsModelIndicatorFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_indicator_filters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_indicator_filters_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_indicator_filters_with_http_info(self, **kwargs):  # noqa: E501
        """Gets many indicator filters  # noqa: E501

        Required Permissions: Location User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_indicator_filters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_global_filters_when_filtering_on_location_id: Specifies if global filters should be included even if filtering on {LocationId}
        :param str filter: Filter statements to narrow results by properties. Filterable properties:  | Field name | Type | Operators | | ---------- | ---- | --------- | | `IsGlobal` | Boolean | `eq, neq` | | `Location` | LocationChild | `isnull, isnotnull` | | `Name` | String | `eq, neq, in, like, isnull, isnotnull` | | `System` | SystemChild | `isnull, isnotnull` | | `LocationAbbreviation` | String | `eq, neq, in, like, isnull, isnotnull` | | `LocationId` | Guid | `eq, neq, in` | | `LocationName` | String | `eq, neq, in, like, isnull, isnotnull` | | `SystemId` | Guid | `eq, neq, in` | | `SystemName` | String | `eq, neq, in, like, isnull, isnotnull` |
        :param int page: Results page. 1-based (1 returns the first page, 0 is invalid).
        :param int page_limit: Number of items to return per page.
        :param str order_by: Allows sorting response items by multiple fields. Sortable properties: | Field name | Type | | ---------- | ---- | | `Name` | String | | `SortOrder` | Int32 | | `LocationName` | String | | `SystemName` | String |
        :param str name_search: Provide search terms to narrow result.  Searchable properties: `Name`.
        :return: PagedResultsModelIndicatorFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_global_filters_when_filtering_on_location_id', 'filter', 'page', 'page_limit', 'order_by', 'name_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_indicator_filters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_global_filters_when_filtering_on_location_id' in params:
            query_params.append(('includeGlobalFiltersWhenFilteringOnLocationId', params['include_global_filters_when_filtering_on_location_id']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('Filter', params['filter']))  # noqa: E501
        if 'page' in params:
            query_params.append(('Page', params['page']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('PageLimit', params['page_limit']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('OrderBy', params['order_by']))  # noqa: E501
        if 'name_search' in params:
            query_params.append(('NameSearch', params['name_search']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v3.0/Filters/Indicators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResultsModelIndicatorFilterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_indicator_filter(self, indicator_filter_id, **kwargs):  # noqa: E501
        """Updates an indicator filter  # noqa: E501

        Required Permissions: Location User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_indicator_filter(indicator_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str indicator_filter_id: The id of the indicator filter (required)
        :param IndicatorFilterUpdateRequest body: Indicator filter update request
        :return: IndicatorFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_indicator_filter_with_http_info(indicator_filter_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_indicator_filter_with_http_info(indicator_filter_id, **kwargs)  # noqa: E501
            return data

    def update_indicator_filter_with_http_info(self, indicator_filter_id, **kwargs):  # noqa: E501
        """Updates an indicator filter  # noqa: E501

        Required Permissions: Location User  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_indicator_filter_with_http_info(indicator_filter_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str indicator_filter_id: The id of the indicator filter (required)
        :param IndicatorFilterUpdateRequest body: Indicator filter update request
        :return: IndicatorFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['indicator_filter_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_indicator_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'indicator_filter_id' is set
        if ('indicator_filter_id' not in params or
                params['indicator_filter_id'] is None):
            raise ValueError("Missing the required parameter `indicator_filter_id` when calling `update_indicator_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'indicator_filter_id' in params:
            path_params['indicatorFilterId'] = params['indicator_filter_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v3.0/Filters/Indicators/{indicatorFilterId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IndicatorFilterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
