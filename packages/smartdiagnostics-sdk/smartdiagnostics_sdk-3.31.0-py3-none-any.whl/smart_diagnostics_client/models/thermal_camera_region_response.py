# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThermalCameraRegionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'instance': 'int',
        'x_coordinate': 'int',
        'y_coordinate': 'int',
        'width': 'int',
        'height': 'int',
        'created': 'datetime',
        'updated': 'datetime',
        'active': 'bool',
        'thermal_camera_serial_number': 'int',
        'location': 'ThermalCameraRegionLocationChild'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'instance': 'Instance',
        'x_coordinate': 'XCoordinate',
        'y_coordinate': 'YCoordinate',
        'width': 'Width',
        'height': 'Height',
        'created': 'Created',
        'updated': 'Updated',
        'active': 'Active',
        'thermal_camera_serial_number': 'ThermalCameraSerialNumber',
        'location': 'Location'
    }

    def __init__(self, id=None, name=None, instance=None, x_coordinate=None, y_coordinate=None, width=None, height=None, created=None, updated=None, active=None, thermal_camera_serial_number=None, location=None):  # noqa: E501
        """ThermalCameraRegionResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._instance = None
        self._x_coordinate = None
        self._y_coordinate = None
        self._width = None
        self._height = None
        self._created = None
        self._updated = None
        self._active = None
        self._thermal_camera_serial_number = None
        self._location = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.instance = instance
        self.x_coordinate = x_coordinate
        self.y_coordinate = y_coordinate
        self.width = width
        self.height = height
        self.created = created
        self.updated = updated
        self.active = active
        self.thermal_camera_serial_number = thermal_camera_serial_number
        self.location = location

    @property
    def id(self):
        """Gets the id of this ThermalCameraRegionResponse.  # noqa: E501

        The ID for the region  # noqa: E501

        :return: The id of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThermalCameraRegionResponse.

        The ID for the region  # noqa: E501

        :param id: The id of this ThermalCameraRegionResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ThermalCameraRegionResponse.  # noqa: E501

        The name of the region  # noqa: E501

        :return: The name of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThermalCameraRegionResponse.

        The name of the region  # noqa: E501

        :param name: The name of this ThermalCameraRegionResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def instance(self):
        """Gets the instance of this ThermalCameraRegionResponse.  # noqa: E501

        The unique set of coordinates that designates a region.  # noqa: E501

        :return: The instance of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: int
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this ThermalCameraRegionResponse.

        The unique set of coordinates that designates a region.  # noqa: E501

        :param instance: The instance of this ThermalCameraRegionResponse.  # noqa: E501
        :type: int
        """
        if instance is None:
            raise ValueError("Invalid value for `instance`, must not be `None`")  # noqa: E501

        self._instance = instance

    @property
    def x_coordinate(self):
        """Gets the x_coordinate of this ThermalCameraRegionResponse.  # noqa: E501

        The \"X\" coordinate that determines the position of the region.  In other words, where the region is located.  # noqa: E501

        :return: The x_coordinate of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: int
        """
        return self._x_coordinate

    @x_coordinate.setter
    def x_coordinate(self, x_coordinate):
        """Sets the x_coordinate of this ThermalCameraRegionResponse.

        The \"X\" coordinate that determines the position of the region.  In other words, where the region is located.  # noqa: E501

        :param x_coordinate: The x_coordinate of this ThermalCameraRegionResponse.  # noqa: E501
        :type: int
        """
        if x_coordinate is None:
            raise ValueError("Invalid value for `x_coordinate`, must not be `None`")  # noqa: E501

        self._x_coordinate = x_coordinate

    @property
    def y_coordinate(self):
        """Gets the y_coordinate of this ThermalCameraRegionResponse.  # noqa: E501

        The \"Y\" coordinate that determines the position of the region.  In other words, where the region is located.  # noqa: E501

        :return: The y_coordinate of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: int
        """
        return self._y_coordinate

    @y_coordinate.setter
    def y_coordinate(self, y_coordinate):
        """Sets the y_coordinate of this ThermalCameraRegionResponse.

        The \"Y\" coordinate that determines the position of the region.  In other words, where the region is located.  # noqa: E501

        :param y_coordinate: The y_coordinate of this ThermalCameraRegionResponse.  # noqa: E501
        :type: int
        """
        if y_coordinate is None:
            raise ValueError("Invalid value for `y_coordinate`, must not be `None`")  # noqa: E501

        self._y_coordinate = y_coordinate

    @property
    def width(self):
        """Gets the width of this ThermalCameraRegionResponse.  # noqa: E501

        The width of the region  # noqa: E501

        :return: The width of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ThermalCameraRegionResponse.

        The width of the region  # noqa: E501

        :param width: The width of this ThermalCameraRegionResponse.  # noqa: E501
        :type: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width

    @property
    def height(self):
        """Gets the height of this ThermalCameraRegionResponse.  # noqa: E501

        The height of the region  # noqa: E501

        :return: The height of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ThermalCameraRegionResponse.

        The height of the region  # noqa: E501

        :param height: The height of this ThermalCameraRegionResponse.  # noqa: E501
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def created(self):
        """Gets the created of this ThermalCameraRegionResponse.  # noqa: E501

        The Date the thermal region was originally created  # noqa: E501

        :return: The created of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ThermalCameraRegionResponse.

        The Date the thermal region was originally created  # noqa: E501

        :param created: The created of this ThermalCameraRegionResponse.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this ThermalCameraRegionResponse.  # noqa: E501

        Represents the last time the region had properties that were updated  # noqa: E501

        :return: The updated of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ThermalCameraRegionResponse.

        Represents the last time the region had properties that were updated  # noqa: E501

        :param updated: The updated of this ThermalCameraRegionResponse.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def active(self):
        """Gets the active of this ThermalCameraRegionResponse.  # noqa: E501

        Whether or not the thermal region is currently active  # noqa: E501

        :return: The active of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ThermalCameraRegionResponse.

        Whether or not the thermal region is currently active  # noqa: E501

        :param active: The active of this ThermalCameraRegionResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def thermal_camera_serial_number(self):
        """Gets the thermal_camera_serial_number of this ThermalCameraRegionResponse.  # noqa: E501

        The serial number for the Thermal Camera the region belongs to  # noqa: E501

        :return: The thermal_camera_serial_number of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: int
        """
        return self._thermal_camera_serial_number

    @thermal_camera_serial_number.setter
    def thermal_camera_serial_number(self, thermal_camera_serial_number):
        """Sets the thermal_camera_serial_number of this ThermalCameraRegionResponse.

        The serial number for the Thermal Camera the region belongs to  # noqa: E501

        :param thermal_camera_serial_number: The thermal_camera_serial_number of this ThermalCameraRegionResponse.  # noqa: E501
        :type: int
        """
        if thermal_camera_serial_number is None:
            raise ValueError("Invalid value for `thermal_camera_serial_number`, must not be `None`")  # noqa: E501

        self._thermal_camera_serial_number = thermal_camera_serial_number

    @property
    def location(self):
        """Gets the location of this ThermalCameraRegionResponse.  # noqa: E501


        :return: The location of this ThermalCameraRegionResponse.  # noqa: E501
        :rtype: ThermalCameraRegionLocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ThermalCameraRegionResponse.


        :param location: The location of this ThermalCameraRegionResponse.  # noqa: E501
        :type: ThermalCameraRegionLocationChild
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThermalCameraRegionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThermalCameraRegionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
