# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeEventResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hierarchies': 'list[list[HierarchyChild]]',
        'node': 'HardwareEventLogNodeChild',
        'id': 'int',
        'hardware_type': 'HardwareTypeCodes',
        'event_type': 'HardwareAlarmLogStateTypeCodes',
        'time_entered': 'datetime',
        'time_notified': 'datetime',
        'time_exited': 'datetime',
        'created': 'datetime'
    }

    attribute_map = {
        'hierarchies': 'Hierarchies',
        'node': 'Node',
        'id': 'Id',
        'hardware_type': 'HardwareType',
        'event_type': 'EventType',
        'time_entered': 'TimeEntered',
        'time_notified': 'TimeNotified',
        'time_exited': 'TimeExited',
        'created': 'Created'
    }

    def __init__(self, hierarchies=None, node=None, id=None, hardware_type=None, event_type=None, time_entered=None, time_notified=None, time_exited=None, created=None):  # noqa: E501
        """NodeEventResponse - a model defined in Swagger"""  # noqa: E501
        self._hierarchies = None
        self._node = None
        self._id = None
        self._hardware_type = None
        self._event_type = None
        self._time_entered = None
        self._time_notified = None
        self._time_exited = None
        self._created = None
        self.discriminator = None
        self.hierarchies = hierarchies
        self.node = node
        self.id = id
        if hardware_type is not None:
            self.hardware_type = hardware_type
        if event_type is not None:
            self.event_type = event_type
        if time_entered is not None:
            self.time_entered = time_entered
        if time_notified is not None:
            self.time_notified = time_notified
        if time_exited is not None:
            self.time_exited = time_exited
        if created is not None:
            self.created = created

    @property
    def hierarchies(self):
        """Gets the hierarchies of this NodeEventResponse.  # noqa: E501

        An ordered list of parents for each Monitoring Point assigned to the Node for this event.  # noqa: E501

        :return: The hierarchies of this NodeEventResponse.  # noqa: E501
        :rtype: list[list[HierarchyChild]]
        """
        return self._hierarchies

    @hierarchies.setter
    def hierarchies(self, hierarchies):
        """Sets the hierarchies of this NodeEventResponse.

        An ordered list of parents for each Monitoring Point assigned to the Node for this event.  # noqa: E501

        :param hierarchies: The hierarchies of this NodeEventResponse.  # noqa: E501
        :type: list[list[HierarchyChild]]
        """
        if hierarchies is None:
            raise ValueError("Invalid value for `hierarchies`, must not be `None`")  # noqa: E501

        self._hierarchies = hierarchies

    @property
    def node(self):
        """Gets the node of this NodeEventResponse.  # noqa: E501


        :return: The node of this NodeEventResponse.  # noqa: E501
        :rtype: HardwareEventLogNodeChild
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this NodeEventResponse.


        :param node: The node of this NodeEventResponse.  # noqa: E501
        :type: HardwareEventLogNodeChild
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")  # noqa: E501

        self._node = node

    @property
    def id(self):
        """Gets the id of this NodeEventResponse.  # noqa: E501

        The Id of the hardware event  # noqa: E501

        :return: The id of this NodeEventResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeEventResponse.

        The Id of the hardware event  # noqa: E501

        :param id: The id of this NodeEventResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def hardware_type(self):
        """Gets the hardware_type of this NodeEventResponse.  # noqa: E501


        :return: The hardware_type of this NodeEventResponse.  # noqa: E501
        :rtype: HardwareTypeCodes
        """
        return self._hardware_type

    @hardware_type.setter
    def hardware_type(self, hardware_type):
        """Sets the hardware_type of this NodeEventResponse.


        :param hardware_type: The hardware_type of this NodeEventResponse.  # noqa: E501
        :type: HardwareTypeCodes
        """

        self._hardware_type = hardware_type

    @property
    def event_type(self):
        """Gets the event_type of this NodeEventResponse.  # noqa: E501


        :return: The event_type of this NodeEventResponse.  # noqa: E501
        :rtype: HardwareAlarmLogStateTypeCodes
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this NodeEventResponse.


        :param event_type: The event_type of this NodeEventResponse.  # noqa: E501
        :type: HardwareAlarmLogStateTypeCodes
        """

        self._event_type = event_type

    @property
    def time_entered(self):
        """Gets the time_entered of this NodeEventResponse.  # noqa: E501

        Time hardware enter the event type  # noqa: E501

        :return: The time_entered of this NodeEventResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._time_entered

    @time_entered.setter
    def time_entered(self, time_entered):
        """Sets the time_entered of this NodeEventResponse.

        Time hardware enter the event type  # noqa: E501

        :param time_entered: The time_entered of this NodeEventResponse.  # noqa: E501
        :type: datetime
        """

        self._time_entered = time_entered

    @property
    def time_notified(self):
        """Gets the time_notified of this NodeEventResponse.  # noqa: E501

        Time notifications where sent out  # noqa: E501

        :return: The time_notified of this NodeEventResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._time_notified

    @time_notified.setter
    def time_notified(self, time_notified):
        """Sets the time_notified of this NodeEventResponse.

        Time notifications where sent out  # noqa: E501

        :param time_notified: The time_notified of this NodeEventResponse.  # noqa: E501
        :type: datetime
        """

        self._time_notified = time_notified

    @property
    def time_exited(self):
        """Gets the time_exited of this NodeEventResponse.  # noqa: E501

        The time the hardware exited the event  # noqa: E501

        :return: The time_exited of this NodeEventResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._time_exited

    @time_exited.setter
    def time_exited(self, time_exited):
        """Sets the time_exited of this NodeEventResponse.

        The time the hardware exited the event  # noqa: E501

        :param time_exited: The time_exited of this NodeEventResponse.  # noqa: E501
        :type: datetime
        """

        self._time_exited = time_exited

    @property
    def created(self):
        """Gets the created of this NodeEventResponse.  # noqa: E501

        Time the log entry was created  # noqa: E501

        :return: The created of this NodeEventResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NodeEventResponse.

        Time the log entry was created  # noqa: E501

        :param created: The created of this NodeEventResponse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeEventResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeEventResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
