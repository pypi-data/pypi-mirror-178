# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RootGroupChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'root_group_id': 'str',
        'root_group_name': 'str',
        'root_group_abbreviation': 'str',
        'root_group_type': 'GroupTypeCodes'
    }

    attribute_map = {
        'root_group_id': 'RootGroupId',
        'root_group_name': 'RootGroupName',
        'root_group_abbreviation': 'RootGroupAbbreviation',
        'root_group_type': 'RootGroupType'
    }

    def __init__(self, root_group_id=None, root_group_name=None, root_group_abbreviation=None, root_group_type=None):  # noqa: E501
        """RootGroupChild - a model defined in Swagger"""  # noqa: E501
        self._root_group_id = None
        self._root_group_name = None
        self._root_group_abbreviation = None
        self._root_group_type = None
        self.discriminator = None
        self.root_group_id = root_group_id
        self.root_group_name = root_group_name
        if root_group_abbreviation is not None:
            self.root_group_abbreviation = root_group_abbreviation
        self.root_group_type = root_group_type

    @property
    def root_group_id(self):
        """Gets the root_group_id of this RootGroupChild.  # noqa: E501


        :return: The root_group_id of this RootGroupChild.  # noqa: E501
        :rtype: str
        """
        return self._root_group_id

    @root_group_id.setter
    def root_group_id(self, root_group_id):
        """Sets the root_group_id of this RootGroupChild.


        :param root_group_id: The root_group_id of this RootGroupChild.  # noqa: E501
        :type: str
        """
        if root_group_id is None:
            raise ValueError("Invalid value for `root_group_id`, must not be `None`")  # noqa: E501

        self._root_group_id = root_group_id

    @property
    def root_group_name(self):
        """Gets the root_group_name of this RootGroupChild.  # noqa: E501


        :return: The root_group_name of this RootGroupChild.  # noqa: E501
        :rtype: str
        """
        return self._root_group_name

    @root_group_name.setter
    def root_group_name(self, root_group_name):
        """Sets the root_group_name of this RootGroupChild.


        :param root_group_name: The root_group_name of this RootGroupChild.  # noqa: E501
        :type: str
        """
        if root_group_name is None:
            raise ValueError("Invalid value for `root_group_name`, must not be `None`")  # noqa: E501

        self._root_group_name = root_group_name

    @property
    def root_group_abbreviation(self):
        """Gets the root_group_abbreviation of this RootGroupChild.  # noqa: E501


        :return: The root_group_abbreviation of this RootGroupChild.  # noqa: E501
        :rtype: str
        """
        return self._root_group_abbreviation

    @root_group_abbreviation.setter
    def root_group_abbreviation(self, root_group_abbreviation):
        """Sets the root_group_abbreviation of this RootGroupChild.


        :param root_group_abbreviation: The root_group_abbreviation of this RootGroupChild.  # noqa: E501
        :type: str
        """

        self._root_group_abbreviation = root_group_abbreviation

    @property
    def root_group_type(self):
        """Gets the root_group_type of this RootGroupChild.  # noqa: E501


        :return: The root_group_type of this RootGroupChild.  # noqa: E501
        :rtype: GroupTypeCodes
        """
        return self._root_group_type

    @root_group_type.setter
    def root_group_type(self, root_group_type):
        """Sets the root_group_type of this RootGroupChild.


        :param root_group_type: The root_group_type of this RootGroupChild.  # noqa: E501
        :type: GroupTypeCodes
        """
        if root_group_type is None:
            raise ValueError("Invalid value for `root_group_type`, must not be `None`")  # noqa: E501

        self._root_group_type = root_group_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RootGroupChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RootGroupChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
