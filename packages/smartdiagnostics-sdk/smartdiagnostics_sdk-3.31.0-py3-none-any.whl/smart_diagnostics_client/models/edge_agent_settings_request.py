# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeAgentSettingsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'log_upload_enabled': 'bool',
        'log_batch_min': 'int',
        'log_batch_min_seconds': 'int',
        'log_batch_max': 'int',
        'log_batch_max_seconds': 'int',
        'polling_interval_seconds': 'int',
        'cascade_stop': 'bool',
        'exit_code_from': 'str'
    }

    attribute_map = {
        'log_upload_enabled': 'LogUploadEnabled',
        'log_batch_min': 'LogBatchMin',
        'log_batch_min_seconds': 'LogBatchMinSeconds',
        'log_batch_max': 'LogBatchMax',
        'log_batch_max_seconds': 'LogBatchMaxSeconds',
        'polling_interval_seconds': 'PollingIntervalSeconds',
        'cascade_stop': 'CascadeStop',
        'exit_code_from': 'ExitCodeFrom'
    }

    def __init__(self, log_upload_enabled=None, log_batch_min=None, log_batch_min_seconds=None, log_batch_max=None, log_batch_max_seconds=None, polling_interval_seconds=None, cascade_stop=None, exit_code_from=None):  # noqa: E501
        """EdgeAgentSettingsRequest - a model defined in Swagger"""  # noqa: E501
        self._log_upload_enabled = None
        self._log_batch_min = None
        self._log_batch_min_seconds = None
        self._log_batch_max = None
        self._log_batch_max_seconds = None
        self._polling_interval_seconds = None
        self._cascade_stop = None
        self._exit_code_from = None
        self.discriminator = None
        if log_upload_enabled is not None:
            self.log_upload_enabled = log_upload_enabled
        if log_batch_min is not None:
            self.log_batch_min = log_batch_min
        if log_batch_min_seconds is not None:
            self.log_batch_min_seconds = log_batch_min_seconds
        if log_batch_max is not None:
            self.log_batch_max = log_batch_max
        if log_batch_max_seconds is not None:
            self.log_batch_max_seconds = log_batch_max_seconds
        if polling_interval_seconds is not None:
            self.polling_interval_seconds = polling_interval_seconds
        if cascade_stop is not None:
            self.cascade_stop = cascade_stop
        if exit_code_from is not None:
            self.exit_code_from = exit_code_from

    @property
    def log_upload_enabled(self):
        """Gets the log_upload_enabled of this EdgeAgentSettingsRequest.  # noqa: E501

        Container log upload enabled?  # noqa: E501

        :return: The log_upload_enabled of this EdgeAgentSettingsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._log_upload_enabled

    @log_upload_enabled.setter
    def log_upload_enabled(self, log_upload_enabled):
        """Sets the log_upload_enabled of this EdgeAgentSettingsRequest.

        Container log upload enabled?  # noqa: E501

        :param log_upload_enabled: The log_upload_enabled of this EdgeAgentSettingsRequest.  # noqa: E501
        :type: bool
        """

        self._log_upload_enabled = log_upload_enabled

    @property
    def log_batch_min(self):
        """Gets the log_batch_min of this EdgeAgentSettingsRequest.  # noqa: E501

        Minimum number of log items for container log batch uploads  # noqa: E501

        :return: The log_batch_min of this EdgeAgentSettingsRequest.  # noqa: E501
        :rtype: int
        """
        return self._log_batch_min

    @log_batch_min.setter
    def log_batch_min(self, log_batch_min):
        """Sets the log_batch_min of this EdgeAgentSettingsRequest.

        Minimum number of log items for container log batch uploads  # noqa: E501

        :param log_batch_min: The log_batch_min of this EdgeAgentSettingsRequest.  # noqa: E501
        :type: int
        """

        self._log_batch_min = log_batch_min

    @property
    def log_batch_min_seconds(self):
        """Gets the log_batch_min_seconds of this EdgeAgentSettingsRequest.  # noqa: E501

        Minimum seconds between container log batch uploads  # noqa: E501

        :return: The log_batch_min_seconds of this EdgeAgentSettingsRequest.  # noqa: E501
        :rtype: int
        """
        return self._log_batch_min_seconds

    @log_batch_min_seconds.setter
    def log_batch_min_seconds(self, log_batch_min_seconds):
        """Sets the log_batch_min_seconds of this EdgeAgentSettingsRequest.

        Minimum seconds between container log batch uploads  # noqa: E501

        :param log_batch_min_seconds: The log_batch_min_seconds of this EdgeAgentSettingsRequest.  # noqa: E501
        :type: int
        """

        self._log_batch_min_seconds = log_batch_min_seconds

    @property
    def log_batch_max(self):
        """Gets the log_batch_max of this EdgeAgentSettingsRequest.  # noqa: E501

        Maximum number of log items for container log batch uploads  # noqa: E501

        :return: The log_batch_max of this EdgeAgentSettingsRequest.  # noqa: E501
        :rtype: int
        """
        return self._log_batch_max

    @log_batch_max.setter
    def log_batch_max(self, log_batch_max):
        """Sets the log_batch_max of this EdgeAgentSettingsRequest.

        Maximum number of log items for container log batch uploads  # noqa: E501

        :param log_batch_max: The log_batch_max of this EdgeAgentSettingsRequest.  # noqa: E501
        :type: int
        """

        self._log_batch_max = log_batch_max

    @property
    def log_batch_max_seconds(self):
        """Gets the log_batch_max_seconds of this EdgeAgentSettingsRequest.  # noqa: E501

        Maximum seconds between container log batch uploads  # noqa: E501

        :return: The log_batch_max_seconds of this EdgeAgentSettingsRequest.  # noqa: E501
        :rtype: int
        """
        return self._log_batch_max_seconds

    @log_batch_max_seconds.setter
    def log_batch_max_seconds(self, log_batch_max_seconds):
        """Sets the log_batch_max_seconds of this EdgeAgentSettingsRequest.

        Maximum seconds between container log batch uploads  # noqa: E501

        :param log_batch_max_seconds: The log_batch_max_seconds of this EdgeAgentSettingsRequest.  # noqa: E501
        :type: int
        """

        self._log_batch_max_seconds = log_batch_max_seconds

    @property
    def polling_interval_seconds(self):
        """Gets the polling_interval_seconds of this EdgeAgentSettingsRequest.  # noqa: E501

        Polling interval second.  Period between checks for new docker compose file.  # noqa: E501

        :return: The polling_interval_seconds of this EdgeAgentSettingsRequest.  # noqa: E501
        :rtype: int
        """
        return self._polling_interval_seconds

    @polling_interval_seconds.setter
    def polling_interval_seconds(self, polling_interval_seconds):
        """Sets the polling_interval_seconds of this EdgeAgentSettingsRequest.

        Polling interval second.  Period between checks for new docker compose file.  # noqa: E501

        :param polling_interval_seconds: The polling_interval_seconds of this EdgeAgentSettingsRequest.  # noqa: E501
        :type: int
        """

        self._polling_interval_seconds = polling_interval_seconds

    @property
    def cascade_stop(self):
        """Gets the cascade_stop of this EdgeAgentSettingsRequest.  # noqa: E501

        True if should bring down the whole service if any one container stops  # noqa: E501

        :return: The cascade_stop of this EdgeAgentSettingsRequest.  # noqa: E501
        :rtype: bool
        """
        return self._cascade_stop

    @cascade_stop.setter
    def cascade_stop(self, cascade_stop):
        """Sets the cascade_stop of this EdgeAgentSettingsRequest.

        True if should bring down the whole service if any one container stops  # noqa: E501

        :param cascade_stop: The cascade_stop of this EdgeAgentSettingsRequest.  # noqa: E501
        :type: bool
        """

        self._cascade_stop = cascade_stop

    @property
    def exit_code_from(self):
        """Gets the exit_code_from of this EdgeAgentSettingsRequest.  # noqa: E501

        Should be name of container / service.  The container's exit code is used to determine the overall service's exit code  # noqa: E501

        :return: The exit_code_from of this EdgeAgentSettingsRequest.  # noqa: E501
        :rtype: str
        """
        return self._exit_code_from

    @exit_code_from.setter
    def exit_code_from(self, exit_code_from):
        """Sets the exit_code_from of this EdgeAgentSettingsRequest.

        Should be name of container / service.  The container's exit code is used to determine the overall service's exit code  # noqa: E501

        :param exit_code_from: The exit_code_from of this EdgeAgentSettingsRequest.  # noqa: E501
        :type: str
        """

        self._exit_code_from = exit_code_from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeAgentSettingsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeAgentSettingsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
