# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndicatorBaselineResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'abbreviation': 'str',
        'is_damage_accumulation_pressure': 'bool',
        'baseline': 'BaselineWithSignificantDigitsChild',
        'hierarchy': 'list[HierarchyChild]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'abbreviation': 'Abbreviation',
        'is_damage_accumulation_pressure': 'IsDamageAccumulationPressure',
        'baseline': 'Baseline',
        'hierarchy': 'Hierarchy'
    }

    def __init__(self, id=None, name=None, abbreviation=None, is_damage_accumulation_pressure=None, baseline=None, hierarchy=None):  # noqa: E501
        """IndicatorBaselineResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._abbreviation = None
        self._is_damage_accumulation_pressure = None
        self._baseline = None
        self._hierarchy = None
        self.discriminator = None
        self.id = id
        self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        self.is_damage_accumulation_pressure = is_damage_accumulation_pressure
        self.baseline = baseline
        self.hierarchy = hierarchy

    @property
    def id(self):
        """Gets the id of this IndicatorBaselineResponse.  # noqa: E501

        The Id of the indicator  # noqa: E501

        :return: The id of this IndicatorBaselineResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IndicatorBaselineResponse.

        The Id of the indicator  # noqa: E501

        :param id: The id of this IndicatorBaselineResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this IndicatorBaselineResponse.  # noqa: E501

        The name of the indicator  # noqa: E501

        :return: The name of this IndicatorBaselineResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndicatorBaselineResponse.

        The name of the indicator  # noqa: E501

        :param name: The name of this IndicatorBaselineResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this IndicatorBaselineResponse.  # noqa: E501

        The abbreviation of the indicator  # noqa: E501

        :return: The abbreviation of this IndicatorBaselineResponse.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this IndicatorBaselineResponse.

        The abbreviation of the indicator  # noqa: E501

        :param abbreviation: The abbreviation of this IndicatorBaselineResponse.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def is_damage_accumulation_pressure(self):
        """Gets the is_damage_accumulation_pressure of this IndicatorBaselineResponse.  # noqa: E501

        Determines whether or not the indicator is of type DamageAccumulationPressure  # noqa: E501

        :return: The is_damage_accumulation_pressure of this IndicatorBaselineResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_damage_accumulation_pressure

    @is_damage_accumulation_pressure.setter
    def is_damage_accumulation_pressure(self, is_damage_accumulation_pressure):
        """Sets the is_damage_accumulation_pressure of this IndicatorBaselineResponse.

        Determines whether or not the indicator is of type DamageAccumulationPressure  # noqa: E501

        :param is_damage_accumulation_pressure: The is_damage_accumulation_pressure of this IndicatorBaselineResponse.  # noqa: E501
        :type: bool
        """
        if is_damage_accumulation_pressure is None:
            raise ValueError("Invalid value for `is_damage_accumulation_pressure`, must not be `None`")  # noqa: E501

        self._is_damage_accumulation_pressure = is_damage_accumulation_pressure

    @property
    def baseline(self):
        """Gets the baseline of this IndicatorBaselineResponse.  # noqa: E501


        :return: The baseline of this IndicatorBaselineResponse.  # noqa: E501
        :rtype: BaselineWithSignificantDigitsChild
        """
        return self._baseline

    @baseline.setter
    def baseline(self, baseline):
        """Sets the baseline of this IndicatorBaselineResponse.


        :param baseline: The baseline of this IndicatorBaselineResponse.  # noqa: E501
        :type: BaselineWithSignificantDigitsChild
        """
        if baseline is None:
            raise ValueError("Invalid value for `baseline`, must not be `None`")  # noqa: E501

        self._baseline = baseline

    @property
    def hierarchy(self):
        """Gets the hierarchy of this IndicatorBaselineResponse.  # noqa: E501

        The list of the parent groups for the indicator  # noqa: E501

        :return: The hierarchy of this IndicatorBaselineResponse.  # noqa: E501
        :rtype: list[HierarchyChild]
        """
        return self._hierarchy

    @hierarchy.setter
    def hierarchy(self, hierarchy):
        """Sets the hierarchy of this IndicatorBaselineResponse.

        The list of the parent groups for the indicator  # noqa: E501

        :param hierarchy: The hierarchy of this IndicatorBaselineResponse.  # noqa: E501
        :type: list[HierarchyChild]
        """
        if hierarchy is None:
            raise ValueError("Invalid value for `hierarchy`, must not be `None`")  # noqa: E501

        self._hierarchy = hierarchy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndicatorBaselineResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndicatorBaselineResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
