# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduledReportSubscriptionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'report_type': 'ScheduledReportType',
        'interval_type': 'ScheduledReportSubscriptionIntervalType',
        'created_by': 'CreatedByUserChild',
        'location': 'LocationChild',
        'corporation': 'CorporationChild',
        'users': 'list[UserChild]'
    }

    attribute_map = {
        'id': 'Id',
        'report_type': 'ReportType',
        'interval_type': 'IntervalType',
        'created_by': 'CreatedBy',
        'location': 'Location',
        'corporation': 'Corporation',
        'users': 'Users'
    }

    def __init__(self, id=None, report_type=None, interval_type=None, created_by=None, location=None, corporation=None, users=None):  # noqa: E501
        """ScheduledReportSubscriptionResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._report_type = None
        self._interval_type = None
        self._created_by = None
        self._location = None
        self._corporation = None
        self._users = None
        self.discriminator = None
        self.id = id
        self.report_type = report_type
        self.interval_type = interval_type
        self.created_by = created_by
        self.location = location
        self.corporation = corporation
        self.users = users

    @property
    def id(self):
        """Gets the id of this ScheduledReportSubscriptionResponse.  # noqa: E501

        The Id of the scheduled subscription  # noqa: E501

        :return: The id of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduledReportSubscriptionResponse.

        The Id of the scheduled subscription  # noqa: E501

        :param id: The id of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def report_type(self):
        """Gets the report_type of this ScheduledReportSubscriptionResponse.  # noqa: E501


        :return: The report_type of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :rtype: ScheduledReportType
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ScheduledReportSubscriptionResponse.


        :param report_type: The report_type of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :type: ScheduledReportType
        """
        if report_type is None:
            raise ValueError("Invalid value for `report_type`, must not be `None`")  # noqa: E501

        self._report_type = report_type

    @property
    def interval_type(self):
        """Gets the interval_type of this ScheduledReportSubscriptionResponse.  # noqa: E501


        :return: The interval_type of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :rtype: ScheduledReportSubscriptionIntervalType
        """
        return self._interval_type

    @interval_type.setter
    def interval_type(self, interval_type):
        """Sets the interval_type of this ScheduledReportSubscriptionResponse.


        :param interval_type: The interval_type of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :type: ScheduledReportSubscriptionIntervalType
        """
        if interval_type is None:
            raise ValueError("Invalid value for `interval_type`, must not be `None`")  # noqa: E501

        self._interval_type = interval_type

    @property
    def created_by(self):
        """Gets the created_by of this ScheduledReportSubscriptionResponse.  # noqa: E501


        :return: The created_by of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :rtype: CreatedByUserChild
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ScheduledReportSubscriptionResponse.


        :param created_by: The created_by of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :type: CreatedByUserChild
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def location(self):
        """Gets the location of this ScheduledReportSubscriptionResponse.  # noqa: E501


        :return: The location of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ScheduledReportSubscriptionResponse.


        :param location: The location of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :type: LocationChild
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def corporation(self):
        """Gets the corporation of this ScheduledReportSubscriptionResponse.  # noqa: E501


        :return: The corporation of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this ScheduledReportSubscriptionResponse.


        :param corporation: The corporation of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :type: CorporationChild
        """
        if corporation is None:
            raise ValueError("Invalid value for `corporation`, must not be `None`")  # noqa: E501

        self._corporation = corporation

    @property
    def users(self):
        """Gets the users of this ScheduledReportSubscriptionResponse.  # noqa: E501

        A list of users subscribed to the report  # noqa: E501

        :return: The users of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :rtype: list[UserChild]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ScheduledReportSubscriptionResponse.

        A list of users subscribed to the report  # noqa: E501

        :param users: The users of this ScheduledReportSubscriptionResponse.  # noqa: E501
        :type: list[UserChild]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledReportSubscriptionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledReportSubscriptionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
