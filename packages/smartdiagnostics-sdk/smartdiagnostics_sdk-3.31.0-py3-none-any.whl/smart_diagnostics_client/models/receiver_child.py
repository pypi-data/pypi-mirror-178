# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReceiverChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'receiver_id': 'int',
        'receiver_serial_number': 'str',
        'receiver_name': 'str',
        'receiver_firmware_version': 'str',
        'receiver_network_id': 'str',
        'receiver_rf_channel': 'int',
        'receiver_pending_rf_channel': 'int',
        'receiver_location_type': 'ReceiverLocationTypeCodes'
    }

    attribute_map = {
        'receiver_id': 'ReceiverId',
        'receiver_serial_number': 'ReceiverSerialNumber',
        'receiver_name': 'ReceiverName',
        'receiver_firmware_version': 'ReceiverFirmwareVersion',
        'receiver_network_id': 'ReceiverNetworkId',
        'receiver_rf_channel': 'ReceiverRfChannel',
        'receiver_pending_rf_channel': 'ReceiverPendingRfChannel',
        'receiver_location_type': 'ReceiverLocationType'
    }

    def __init__(self, receiver_id=None, receiver_serial_number=None, receiver_name=None, receiver_firmware_version=None, receiver_network_id=None, receiver_rf_channel=None, receiver_pending_rf_channel=None, receiver_location_type=None):  # noqa: E501
        """ReceiverChild - a model defined in Swagger"""  # noqa: E501
        self._receiver_id = None
        self._receiver_serial_number = None
        self._receiver_name = None
        self._receiver_firmware_version = None
        self._receiver_network_id = None
        self._receiver_rf_channel = None
        self._receiver_pending_rf_channel = None
        self._receiver_location_type = None
        self.discriminator = None
        self.receiver_id = receiver_id
        self.receiver_serial_number = receiver_serial_number
        if receiver_name is not None:
            self.receiver_name = receiver_name
        if receiver_firmware_version is not None:
            self.receiver_firmware_version = receiver_firmware_version
        if receiver_network_id is not None:
            self.receiver_network_id = receiver_network_id
        if receiver_rf_channel is not None:
            self.receiver_rf_channel = receiver_rf_channel
        if receiver_pending_rf_channel is not None:
            self.receiver_pending_rf_channel = receiver_pending_rf_channel
        if receiver_location_type is not None:
            self.receiver_location_type = receiver_location_type

    @property
    def receiver_id(self):
        """Gets the receiver_id of this ReceiverChild.  # noqa: E501

        Id of the receiver  # noqa: E501

        :return: The receiver_id of this ReceiverChild.  # noqa: E501
        :rtype: int
        """
        return self._receiver_id

    @receiver_id.setter
    def receiver_id(self, receiver_id):
        """Sets the receiver_id of this ReceiverChild.

        Id of the receiver  # noqa: E501

        :param receiver_id: The receiver_id of this ReceiverChild.  # noqa: E501
        :type: int
        """
        if receiver_id is None:
            raise ValueError("Invalid value for `receiver_id`, must not be `None`")  # noqa: E501

        self._receiver_id = receiver_id

    @property
    def receiver_serial_number(self):
        """Gets the receiver_serial_number of this ReceiverChild.  # noqa: E501

        Serial number of the receiver  # noqa: E501

        :return: The receiver_serial_number of this ReceiverChild.  # noqa: E501
        :rtype: str
        """
        return self._receiver_serial_number

    @receiver_serial_number.setter
    def receiver_serial_number(self, receiver_serial_number):
        """Sets the receiver_serial_number of this ReceiverChild.

        Serial number of the receiver  # noqa: E501

        :param receiver_serial_number: The receiver_serial_number of this ReceiverChild.  # noqa: E501
        :type: str
        """
        if receiver_serial_number is None:
            raise ValueError("Invalid value for `receiver_serial_number`, must not be `None`")  # noqa: E501

        self._receiver_serial_number = receiver_serial_number

    @property
    def receiver_name(self):
        """Gets the receiver_name of this ReceiverChild.  # noqa: E501

        Name of the receiver  # noqa: E501

        :return: The receiver_name of this ReceiverChild.  # noqa: E501
        :rtype: str
        """
        return self._receiver_name

    @receiver_name.setter
    def receiver_name(self, receiver_name):
        """Sets the receiver_name of this ReceiverChild.

        Name of the receiver  # noqa: E501

        :param receiver_name: The receiver_name of this ReceiverChild.  # noqa: E501
        :type: str
        """

        self._receiver_name = receiver_name

    @property
    def receiver_firmware_version(self):
        """Gets the receiver_firmware_version of this ReceiverChild.  # noqa: E501

        Firmware version of the receiver  # noqa: E501

        :return: The receiver_firmware_version of this ReceiverChild.  # noqa: E501
        :rtype: str
        """
        return self._receiver_firmware_version

    @receiver_firmware_version.setter
    def receiver_firmware_version(self, receiver_firmware_version):
        """Sets the receiver_firmware_version of this ReceiverChild.

        Firmware version of the receiver  # noqa: E501

        :param receiver_firmware_version: The receiver_firmware_version of this ReceiverChild.  # noqa: E501
        :type: str
        """

        self._receiver_firmware_version = receiver_firmware_version

    @property
    def receiver_network_id(self):
        """Gets the receiver_network_id of this ReceiverChild.  # noqa: E501

        Receiver network id  # noqa: E501

        :return: The receiver_network_id of this ReceiverChild.  # noqa: E501
        :rtype: str
        """
        return self._receiver_network_id

    @receiver_network_id.setter
    def receiver_network_id(self, receiver_network_id):
        """Sets the receiver_network_id of this ReceiverChild.

        Receiver network id  # noqa: E501

        :param receiver_network_id: The receiver_network_id of this ReceiverChild.  # noqa: E501
        :type: str
        """

        self._receiver_network_id = receiver_network_id

    @property
    def receiver_rf_channel(self):
        """Gets the receiver_rf_channel of this ReceiverChild.  # noqa: E501

        Current RF channel  # noqa: E501

        :return: The receiver_rf_channel of this ReceiverChild.  # noqa: E501
        :rtype: int
        """
        return self._receiver_rf_channel

    @receiver_rf_channel.setter
    def receiver_rf_channel(self, receiver_rf_channel):
        """Sets the receiver_rf_channel of this ReceiverChild.

        Current RF channel  # noqa: E501

        :param receiver_rf_channel: The receiver_rf_channel of this ReceiverChild.  # noqa: E501
        :type: int
        """

        self._receiver_rf_channel = receiver_rf_channel

    @property
    def receiver_pending_rf_channel(self):
        """Gets the receiver_pending_rf_channel of this ReceiverChild.  # noqa: E501

        Pending RF channel  # noqa: E501

        :return: The receiver_pending_rf_channel of this ReceiverChild.  # noqa: E501
        :rtype: int
        """
        return self._receiver_pending_rf_channel

    @receiver_pending_rf_channel.setter
    def receiver_pending_rf_channel(self, receiver_pending_rf_channel):
        """Sets the receiver_pending_rf_channel of this ReceiverChild.

        Pending RF channel  # noqa: E501

        :param receiver_pending_rf_channel: The receiver_pending_rf_channel of this ReceiverChild.  # noqa: E501
        :type: int
        """

        self._receiver_pending_rf_channel = receiver_pending_rf_channel

    @property
    def receiver_location_type(self):
        """Gets the receiver_location_type of this ReceiverChild.  # noqa: E501


        :return: The receiver_location_type of this ReceiverChild.  # noqa: E501
        :rtype: ReceiverLocationTypeCodes
        """
        return self._receiver_location_type

    @receiver_location_type.setter
    def receiver_location_type(self, receiver_location_type):
        """Sets the receiver_location_type of this ReceiverChild.


        :param receiver_location_type: The receiver_location_type of this ReceiverChild.  # noqa: E501
        :type: ReceiverLocationTypeCodes
        """

        self._receiver_location_type = receiver_location_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceiverChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceiverChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
