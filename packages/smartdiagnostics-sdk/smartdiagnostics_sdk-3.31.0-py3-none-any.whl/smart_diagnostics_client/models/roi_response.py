# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoiResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'savings': 'float',
        'roi_percentage': 'float',
        'roi_ratio': 'float'
    }

    attribute_map = {
        'savings': 'Savings',
        'roi_percentage': 'RoiPercentage',
        'roi_ratio': 'RoiRatio'
    }

    def __init__(self, savings=None, roi_percentage=None, roi_ratio=None):  # noqa: E501
        """RoiResponse - a model defined in Swagger"""  # noqa: E501
        self._savings = None
        self._roi_percentage = None
        self._roi_ratio = None
        self.discriminator = None
        self.savings = savings
        self.roi_percentage = roi_percentage
        self.roi_ratio = roi_ratio

    @property
    def savings(self):
        """Gets the savings of this RoiResponse.  # noqa: E501


        :return: The savings of this RoiResponse.  # noqa: E501
        :rtype: float
        """
        return self._savings

    @savings.setter
    def savings(self, savings):
        """Sets the savings of this RoiResponse.


        :param savings: The savings of this RoiResponse.  # noqa: E501
        :type: float
        """
        if savings is None:
            raise ValueError("Invalid value for `savings`, must not be `None`")  # noqa: E501

        self._savings = savings

    @property
    def roi_percentage(self):
        """Gets the roi_percentage of this RoiResponse.  # noqa: E501


        :return: The roi_percentage of this RoiResponse.  # noqa: E501
        :rtype: float
        """
        return self._roi_percentage

    @roi_percentage.setter
    def roi_percentage(self, roi_percentage):
        """Sets the roi_percentage of this RoiResponse.


        :param roi_percentage: The roi_percentage of this RoiResponse.  # noqa: E501
        :type: float
        """
        if roi_percentage is None:
            raise ValueError("Invalid value for `roi_percentage`, must not be `None`")  # noqa: E501

        self._roi_percentage = roi_percentage

    @property
    def roi_ratio(self):
        """Gets the roi_ratio of this RoiResponse.  # noqa: E501


        :return: The roi_ratio of this RoiResponse.  # noqa: E501
        :rtype: float
        """
        return self._roi_ratio

    @roi_ratio.setter
    def roi_ratio(self, roi_ratio):
        """Sets the roi_ratio of this RoiResponse.


        :param roi_ratio: The roi_ratio of this RoiResponse.  # noqa: E501
        :type: float
        """
        if roi_ratio is None:
            raise ValueError("Invalid value for `roi_ratio`, must not be `None`")  # noqa: E501

        self._roi_ratio = roi_ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoiResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoiResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
