# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SensorRoleResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'sensor_role_type_code': 'SensorRoleTypeCodes',
        'custom_role_type': 'str',
        'node': 'NodeChild'
    }

    attribute_map = {
        'id': 'Id',
        'sensor_role_type_code': 'SensorRoleTypeCode',
        'custom_role_type': 'CustomRoleType',
        'node': 'Node'
    }

    def __init__(self, id=None, sensor_role_type_code=None, custom_role_type=None, node=None):  # noqa: E501
        """SensorRoleResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sensor_role_type_code = None
        self._custom_role_type = None
        self._node = None
        self.discriminator = None
        self.id = id
        self.sensor_role_type_code = sensor_role_type_code
        if custom_role_type is not None:
            self.custom_role_type = custom_role_type
        self.node = node

    @property
    def id(self):
        """Gets the id of this SensorRoleResponse.  # noqa: E501

        The id of the sensor  # noqa: E501

        :return: The id of this SensorRoleResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SensorRoleResponse.

        The id of the sensor  # noqa: E501

        :param id: The id of this SensorRoleResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sensor_role_type_code(self):
        """Gets the sensor_role_type_code of this SensorRoleResponse.  # noqa: E501


        :return: The sensor_role_type_code of this SensorRoleResponse.  # noqa: E501
        :rtype: SensorRoleTypeCodes
        """
        return self._sensor_role_type_code

    @sensor_role_type_code.setter
    def sensor_role_type_code(self, sensor_role_type_code):
        """Sets the sensor_role_type_code of this SensorRoleResponse.


        :param sensor_role_type_code: The sensor_role_type_code of this SensorRoleResponse.  # noqa: E501
        :type: SensorRoleTypeCodes
        """
        if sensor_role_type_code is None:
            raise ValueError("Invalid value for `sensor_role_type_code`, must not be `None`")  # noqa: E501

        self._sensor_role_type_code = sensor_role_type_code

    @property
    def custom_role_type(self):
        """Gets the custom_role_type of this SensorRoleResponse.  # noqa: E501

        For indicators with MeasureOf == Custom, the virtual \"sensor\" they read data from  # noqa: E501

        :return: The custom_role_type of this SensorRoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._custom_role_type

    @custom_role_type.setter
    def custom_role_type(self, custom_role_type):
        """Sets the custom_role_type of this SensorRoleResponse.

        For indicators with MeasureOf == Custom, the virtual \"sensor\" they read data from  # noqa: E501

        :param custom_role_type: The custom_role_type of this SensorRoleResponse.  # noqa: E501
        :type: str
        """

        self._custom_role_type = custom_role_type

    @property
    def node(self):
        """Gets the node of this SensorRoleResponse.  # noqa: E501


        :return: The node of this SensorRoleResponse.  # noqa: E501
        :rtype: NodeChild
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this SensorRoleResponse.


        :param node: The node of this SensorRoleResponse.  # noqa: E501
        :type: NodeChild
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")  # noqa: E501

        self._node = node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SensorRoleResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensorRoleResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
