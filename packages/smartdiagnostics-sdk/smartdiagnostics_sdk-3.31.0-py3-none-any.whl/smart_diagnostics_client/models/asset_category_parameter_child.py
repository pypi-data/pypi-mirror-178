# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetCategoryParameterChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'valid_values': 'list[str]',
        'code': 'str',
        'name': 'str',
        'category_parameter_type': 'AssetCategoryParameterType',
        'min_value': 'float',
        'min_value_inclusive': 'bool',
        'max_value': 'float',
        'max_value_inclusive': 'bool',
        'default_value': 'str'
    }

    attribute_map = {
        'valid_values': 'ValidValues',
        'code': 'Code',
        'name': 'Name',
        'category_parameter_type': 'CategoryParameterType',
        'min_value': 'MinValue',
        'min_value_inclusive': 'MinValueInclusive',
        'max_value': 'MaxValue',
        'max_value_inclusive': 'MaxValueInclusive',
        'default_value': 'DefaultValue'
    }

    def __init__(self, valid_values=None, code=None, name=None, category_parameter_type=None, min_value=None, min_value_inclusive=None, max_value=None, max_value_inclusive=None, default_value=None):  # noqa: E501
        """AssetCategoryParameterChild - a model defined in Swagger"""  # noqa: E501
        self._valid_values = None
        self._code = None
        self._name = None
        self._category_parameter_type = None
        self._min_value = None
        self._min_value_inclusive = None
        self._max_value = None
        self._max_value_inclusive = None
        self._default_value = None
        self.discriminator = None
        if valid_values is not None:
            self.valid_values = valid_values
        self.code = code
        self.name = name
        self.category_parameter_type = category_parameter_type
        if min_value is not None:
            self.min_value = min_value
        if min_value_inclusive is not None:
            self.min_value_inclusive = min_value_inclusive
        if max_value is not None:
            self.max_value = max_value
        if max_value_inclusive is not None:
            self.max_value_inclusive = max_value_inclusive
        if default_value is not None:
            self.default_value = default_value

    @property
    def valid_values(self):
        """Gets the valid_values of this AssetCategoryParameterChild.  # noqa: E501


        :return: The valid_values of this AssetCategoryParameterChild.  # noqa: E501
        :rtype: list[str]
        """
        return self._valid_values

    @valid_values.setter
    def valid_values(self, valid_values):
        """Sets the valid_values of this AssetCategoryParameterChild.


        :param valid_values: The valid_values of this AssetCategoryParameterChild.  # noqa: E501
        :type: list[str]
        """

        self._valid_values = valid_values

    @property
    def code(self):
        """Gets the code of this AssetCategoryParameterChild.  # noqa: E501


        :return: The code of this AssetCategoryParameterChild.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AssetCategoryParameterChild.


        :param code: The code of this AssetCategoryParameterChild.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def name(self):
        """Gets the name of this AssetCategoryParameterChild.  # noqa: E501


        :return: The name of this AssetCategoryParameterChild.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetCategoryParameterChild.


        :param name: The name of this AssetCategoryParameterChild.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def category_parameter_type(self):
        """Gets the category_parameter_type of this AssetCategoryParameterChild.  # noqa: E501


        :return: The category_parameter_type of this AssetCategoryParameterChild.  # noqa: E501
        :rtype: AssetCategoryParameterType
        """
        return self._category_parameter_type

    @category_parameter_type.setter
    def category_parameter_type(self, category_parameter_type):
        """Sets the category_parameter_type of this AssetCategoryParameterChild.


        :param category_parameter_type: The category_parameter_type of this AssetCategoryParameterChild.  # noqa: E501
        :type: AssetCategoryParameterType
        """
        if category_parameter_type is None:
            raise ValueError("Invalid value for `category_parameter_type`, must not be `None`")  # noqa: E501

        self._category_parameter_type = category_parameter_type

    @property
    def min_value(self):
        """Gets the min_value of this AssetCategoryParameterChild.  # noqa: E501


        :return: The min_value of this AssetCategoryParameterChild.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this AssetCategoryParameterChild.


        :param min_value: The min_value of this AssetCategoryParameterChild.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def min_value_inclusive(self):
        """Gets the min_value_inclusive of this AssetCategoryParameterChild.  # noqa: E501


        :return: The min_value_inclusive of this AssetCategoryParameterChild.  # noqa: E501
        :rtype: bool
        """
        return self._min_value_inclusive

    @min_value_inclusive.setter
    def min_value_inclusive(self, min_value_inclusive):
        """Sets the min_value_inclusive of this AssetCategoryParameterChild.


        :param min_value_inclusive: The min_value_inclusive of this AssetCategoryParameterChild.  # noqa: E501
        :type: bool
        """

        self._min_value_inclusive = min_value_inclusive

    @property
    def max_value(self):
        """Gets the max_value of this AssetCategoryParameterChild.  # noqa: E501


        :return: The max_value of this AssetCategoryParameterChild.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this AssetCategoryParameterChild.


        :param max_value: The max_value of this AssetCategoryParameterChild.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def max_value_inclusive(self):
        """Gets the max_value_inclusive of this AssetCategoryParameterChild.  # noqa: E501


        :return: The max_value_inclusive of this AssetCategoryParameterChild.  # noqa: E501
        :rtype: bool
        """
        return self._max_value_inclusive

    @max_value_inclusive.setter
    def max_value_inclusive(self, max_value_inclusive):
        """Sets the max_value_inclusive of this AssetCategoryParameterChild.


        :param max_value_inclusive: The max_value_inclusive of this AssetCategoryParameterChild.  # noqa: E501
        :type: bool
        """

        self._max_value_inclusive = max_value_inclusive

    @property
    def default_value(self):
        """Gets the default_value of this AssetCategoryParameterChild.  # noqa: E501


        :return: The default_value of this AssetCategoryParameterChild.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this AssetCategoryParameterChild.


        :param default_value: The default_value of this AssetCategoryParameterChild.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetCategoryParameterChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetCategoryParameterChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
