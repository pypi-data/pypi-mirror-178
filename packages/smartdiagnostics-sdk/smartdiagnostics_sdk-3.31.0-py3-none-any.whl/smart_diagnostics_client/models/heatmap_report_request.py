# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HeatmapReportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregate_level': 'HeatmapAggregateLevel',
        'hours_per_bin': 'int',
        'filter_id': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'file_name': 'str'
    }

    attribute_map = {
        'aggregate_level': 'AggregateLevel',
        'hours_per_bin': 'HoursPerBin',
        'filter_id': 'FilterId',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'file_name': 'FileName'
    }

    def __init__(self, aggregate_level=None, hours_per_bin=None, filter_id=None, start_date=None, end_date=None, file_name=None):  # noqa: E501
        """HeatmapReportRequest - a model defined in Swagger"""  # noqa: E501
        self._aggregate_level = None
        self._hours_per_bin = None
        self._filter_id = None
        self._start_date = None
        self._end_date = None
        self._file_name = None
        self.discriminator = None
        self.aggregate_level = aggregate_level
        self.hours_per_bin = hours_per_bin
        if filter_id is not None:
            self.filter_id = filter_id
        self.start_date = start_date
        self.end_date = end_date
        self.file_name = file_name

    @property
    def aggregate_level(self):
        """Gets the aggregate_level of this HeatmapReportRequest.  # noqa: E501


        :return: The aggregate_level of this HeatmapReportRequest.  # noqa: E501
        :rtype: HeatmapAggregateLevel
        """
        return self._aggregate_level

    @aggregate_level.setter
    def aggregate_level(self, aggregate_level):
        """Sets the aggregate_level of this HeatmapReportRequest.


        :param aggregate_level: The aggregate_level of this HeatmapReportRequest.  # noqa: E501
        :type: HeatmapAggregateLevel
        """
        if aggregate_level is None:
            raise ValueError("Invalid value for `aggregate_level`, must not be `None`")  # noqa: E501

        self._aggregate_level = aggregate_level

    @property
    def hours_per_bin(self):
        """Gets the hours_per_bin of this HeatmapReportRequest.  # noqa: E501

        The size (in hours) to use to split the given time range into parts  # noqa: E501

        :return: The hours_per_bin of this HeatmapReportRequest.  # noqa: E501
        :rtype: int
        """
        return self._hours_per_bin

    @hours_per_bin.setter
    def hours_per_bin(self, hours_per_bin):
        """Sets the hours_per_bin of this HeatmapReportRequest.

        The size (in hours) to use to split the given time range into parts  # noqa: E501

        :param hours_per_bin: The hours_per_bin of this HeatmapReportRequest.  # noqa: E501
        :type: int
        """
        if hours_per_bin is None:
            raise ValueError("Invalid value for `hours_per_bin`, must not be `None`")  # noqa: E501

        self._hours_per_bin = hours_per_bin

    @property
    def filter_id(self):
        """Gets the filter_id of this HeatmapReportRequest.  # noqa: E501

        The filter to use. Optional  # noqa: E501

        :return: The filter_id of this HeatmapReportRequest.  # noqa: E501
        :rtype: str
        """
        return self._filter_id

    @filter_id.setter
    def filter_id(self, filter_id):
        """Sets the filter_id of this HeatmapReportRequest.

        The filter to use. Optional  # noqa: E501

        :param filter_id: The filter_id of this HeatmapReportRequest.  # noqa: E501
        :type: str
        """

        self._filter_id = filter_id

    @property
    def start_date(self):
        """Gets the start_date of this HeatmapReportRequest.  # noqa: E501

        The start date of the time range to get the report for. Nullable so Required can catch nulls, will not  be null later.  # noqa: E501

        :return: The start_date of this HeatmapReportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this HeatmapReportRequest.

        The start date of the time range to get the report for. Nullable so Required can catch nulls, will not  be null later.  # noqa: E501

        :param start_date: The start_date of this HeatmapReportRequest.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this HeatmapReportRequest.  # noqa: E501

        The end date of the time range to get the values for. Nullable so Required can catch nulls, will not  be null later.  # noqa: E501

        :return: The end_date of this HeatmapReportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this HeatmapReportRequest.

        The end date of the time range to get the values for. Nullable so Required can catch nulls, will not  be null later.  # noqa: E501

        :param end_date: The end_date of this HeatmapReportRequest.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def file_name(self):
        """Gets the file_name of this HeatmapReportRequest.  # noqa: E501

        The filename to use for the report  # noqa: E501

        :return: The file_name of this HeatmapReportRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this HeatmapReportRequest.

        The filename to use for the report  # noqa: E501

        :param file_name: The file_name of this HeatmapReportRequest.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HeatmapReportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HeatmapReportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
