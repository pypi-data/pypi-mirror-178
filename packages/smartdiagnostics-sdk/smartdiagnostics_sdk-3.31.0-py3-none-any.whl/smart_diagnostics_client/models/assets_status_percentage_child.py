# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetsStatusPercentageChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'normal': 'int',
        'warning': 'int',
        'alarm': 'int'
    }

    attribute_map = {
        'normal': 'Normal',
        'warning': 'Warning',
        'alarm': 'Alarm'
    }

    def __init__(self, normal=None, warning=None, alarm=None):  # noqa: E501
        """AssetsStatusPercentageChild - a model defined in Swagger"""  # noqa: E501
        self._normal = None
        self._warning = None
        self._alarm = None
        self.discriminator = None
        self.normal = normal
        self.warning = warning
        self.alarm = alarm

    @property
    def normal(self):
        """Gets the normal of this AssetsStatusPercentageChild.  # noqa: E501


        :return: The normal of this AssetsStatusPercentageChild.  # noqa: E501
        :rtype: int
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this AssetsStatusPercentageChild.


        :param normal: The normal of this AssetsStatusPercentageChild.  # noqa: E501
        :type: int
        """
        if normal is None:
            raise ValueError("Invalid value for `normal`, must not be `None`")  # noqa: E501

        self._normal = normal

    @property
    def warning(self):
        """Gets the warning of this AssetsStatusPercentageChild.  # noqa: E501


        :return: The warning of this AssetsStatusPercentageChild.  # noqa: E501
        :rtype: int
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this AssetsStatusPercentageChild.


        :param warning: The warning of this AssetsStatusPercentageChild.  # noqa: E501
        :type: int
        """
        if warning is None:
            raise ValueError("Invalid value for `warning`, must not be `None`")  # noqa: E501

        self._warning = warning

    @property
    def alarm(self):
        """Gets the alarm of this AssetsStatusPercentageChild.  # noqa: E501


        :return: The alarm of this AssetsStatusPercentageChild.  # noqa: E501
        :rtype: int
        """
        return self._alarm

    @alarm.setter
    def alarm(self, alarm):
        """Sets the alarm of this AssetsStatusPercentageChild.


        :param alarm: The alarm of this AssetsStatusPercentageChild.  # noqa: E501
        :type: int
        """
        if alarm is None:
            raise ValueError("Invalid value for `alarm`, must not be `None`")  # noqa: E501

        self._alarm = alarm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetsStatusPercentageChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetsStatusPercentageChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
