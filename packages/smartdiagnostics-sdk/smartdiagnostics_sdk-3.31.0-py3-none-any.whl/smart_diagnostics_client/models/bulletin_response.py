# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulletinResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'start': 'datetime',
        'end': 'datetime',
        'article_url': 'str',
        'image_file_name': 'str',
        'thumbnail_file_name': 'str',
        'is_draft': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'title': 'Title',
        'description': 'Description',
        'start': 'Start',
        'end': 'End',
        'article_url': 'ArticleUrl',
        'image_file_name': 'ImageFileName',
        'thumbnail_file_name': 'ThumbnailFileName',
        'is_draft': 'IsDraft'
    }

    def __init__(self, id=None, title=None, description=None, start=None, end=None, article_url=None, image_file_name=None, thumbnail_file_name=None, is_draft=None):  # noqa: E501
        """BulletinResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._description = None
        self._start = None
        self._end = None
        self._article_url = None
        self._image_file_name = None
        self._thumbnail_file_name = None
        self._is_draft = None
        self.discriminator = None
        self.id = id
        self.title = title
        if description is not None:
            self.description = description
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if article_url is not None:
            self.article_url = article_url
        self.image_file_name = image_file_name
        self.thumbnail_file_name = thumbnail_file_name
        self.is_draft = is_draft

    @property
    def id(self):
        """Gets the id of this BulletinResponse.  # noqa: E501

        Id of the bulletin  # noqa: E501

        :return: The id of this BulletinResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BulletinResponse.

        Id of the bulletin  # noqa: E501

        :param id: The id of this BulletinResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this BulletinResponse.  # noqa: E501

        The title of the bulletin  # noqa: E501

        :return: The title of this BulletinResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BulletinResponse.

        The title of the bulletin  # noqa: E501

        :param title: The title of this BulletinResponse.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this BulletinResponse.  # noqa: E501

        Bulletin description  # noqa: E501

        :return: The description of this BulletinResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BulletinResponse.

        Bulletin description  # noqa: E501

        :param description: The description of this BulletinResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start(self):
        """Gets the start of this BulletinResponse.  # noqa: E501

        The date/time when the bulletin is to become active  # noqa: E501

        :return: The start of this BulletinResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this BulletinResponse.

        The date/time when the bulletin is to become active  # noqa: E501

        :param start: The start of this BulletinResponse.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this BulletinResponse.  # noqa: E501

        The date/time when the bulletin is to become inactive  # noqa: E501

        :return: The end of this BulletinResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this BulletinResponse.

        The date/time when the bulletin is to become inactive  # noqa: E501

        :param end: The end of this BulletinResponse.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def article_url(self):
        """Gets the article_url of this BulletinResponse.  # noqa: E501

        Link to article associated with bulletin  # noqa: E501

        :return: The article_url of this BulletinResponse.  # noqa: E501
        :rtype: str
        """
        return self._article_url

    @article_url.setter
    def article_url(self, article_url):
        """Sets the article_url of this BulletinResponse.

        Link to article associated with bulletin  # noqa: E501

        :param article_url: The article_url of this BulletinResponse.  # noqa: E501
        :type: str
        """

        self._article_url = article_url

    @property
    def image_file_name(self):
        """Gets the image_file_name of this BulletinResponse.  # noqa: E501

        File name of the bulletin's image  # noqa: E501

        :return: The image_file_name of this BulletinResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_file_name

    @image_file_name.setter
    def image_file_name(self, image_file_name):
        """Sets the image_file_name of this BulletinResponse.

        File name of the bulletin's image  # noqa: E501

        :param image_file_name: The image_file_name of this BulletinResponse.  # noqa: E501
        :type: str
        """
        if image_file_name is None:
            raise ValueError("Invalid value for `image_file_name`, must not be `None`")  # noqa: E501

        self._image_file_name = image_file_name

    @property
    def thumbnail_file_name(self):
        """Gets the thumbnail_file_name of this BulletinResponse.  # noqa: E501

        File name of the thumbnail of the bulletin's image  # noqa: E501

        :return: The thumbnail_file_name of this BulletinResponse.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_file_name

    @thumbnail_file_name.setter
    def thumbnail_file_name(self, thumbnail_file_name):
        """Sets the thumbnail_file_name of this BulletinResponse.

        File name of the thumbnail of the bulletin's image  # noqa: E501

        :param thumbnail_file_name: The thumbnail_file_name of this BulletinResponse.  # noqa: E501
        :type: str
        """
        if thumbnail_file_name is None:
            raise ValueError("Invalid value for `thumbnail_file_name`, must not be `None`")  # noqa: E501

        self._thumbnail_file_name = thumbnail_file_name

    @property
    def is_draft(self):
        """Gets the is_draft of this BulletinResponse.  # noqa: E501

        If the bulletin is in 'draft mode.' A draft bulletin is not  considered active, even if the current time  falls between Prometheus.Core.Dto.Billboards.BulletinResponse.Start and Prometheus.Core.Dto.Billboards.BulletinResponse.End  # noqa: E501

        :return: The is_draft of this BulletinResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this BulletinResponse.

        If the bulletin is in 'draft mode.' A draft bulletin is not  considered active, even if the current time  falls between Prometheus.Core.Dto.Billboards.BulletinResponse.Start and Prometheus.Core.Dto.Billboards.BulletinResponse.End  # noqa: E501

        :param is_draft: The is_draft of this BulletinResponse.  # noqa: E501
        :type: bool
        """
        if is_draft is None:
            raise ValueError("Invalid value for `is_draft`, must not be `None`")  # noqa: E501

        self._is_draft = is_draft

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulletinResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulletinResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
