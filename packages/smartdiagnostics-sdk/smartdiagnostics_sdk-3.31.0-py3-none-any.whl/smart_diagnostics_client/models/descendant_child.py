# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DescendantChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'child_id': 'str',
        'child_name': 'str',
        'child_abbreviation': 'str',
        'child_type': 'GroupTypeCodes',
        'child_sort_order': 'int',
        'child_has_children': 'bool',
        'child_alarm_severity_level': 'int',
        'child_is_paused': 'bool',
        'child_is_snoozed': 'bool'
    }

    attribute_map = {
        'child_id': 'ChildId',
        'child_name': 'ChildName',
        'child_abbreviation': 'ChildAbbreviation',
        'child_type': 'ChildType',
        'child_sort_order': 'ChildSortOrder',
        'child_has_children': 'ChildHasChildren',
        'child_alarm_severity_level': 'ChildAlarmSeverityLevel',
        'child_is_paused': 'ChildIsPaused',
        'child_is_snoozed': 'ChildIsSnoozed'
    }

    def __init__(self, child_id=None, child_name=None, child_abbreviation=None, child_type=None, child_sort_order=None, child_has_children=None, child_alarm_severity_level=None, child_is_paused=None, child_is_snoozed=None):  # noqa: E501
        """DescendantChild - a model defined in Swagger"""  # noqa: E501
        self._child_id = None
        self._child_name = None
        self._child_abbreviation = None
        self._child_type = None
        self._child_sort_order = None
        self._child_has_children = None
        self._child_alarm_severity_level = None
        self._child_is_paused = None
        self._child_is_snoozed = None
        self.discriminator = None
        self.child_id = child_id
        self.child_name = child_name
        if child_abbreviation is not None:
            self.child_abbreviation = child_abbreviation
        self.child_type = child_type
        self.child_sort_order = child_sort_order
        self.child_has_children = child_has_children
        if child_alarm_severity_level is not None:
            self.child_alarm_severity_level = child_alarm_severity_level
        self.child_is_paused = child_is_paused
        self.child_is_snoozed = child_is_snoozed

    @property
    def child_id(self):
        """Gets the child_id of this DescendantChild.  # noqa: E501


        :return: The child_id of this DescendantChild.  # noqa: E501
        :rtype: str
        """
        return self._child_id

    @child_id.setter
    def child_id(self, child_id):
        """Sets the child_id of this DescendantChild.


        :param child_id: The child_id of this DescendantChild.  # noqa: E501
        :type: str
        """
        if child_id is None:
            raise ValueError("Invalid value for `child_id`, must not be `None`")  # noqa: E501

        self._child_id = child_id

    @property
    def child_name(self):
        """Gets the child_name of this DescendantChild.  # noqa: E501


        :return: The child_name of this DescendantChild.  # noqa: E501
        :rtype: str
        """
        return self._child_name

    @child_name.setter
    def child_name(self, child_name):
        """Sets the child_name of this DescendantChild.


        :param child_name: The child_name of this DescendantChild.  # noqa: E501
        :type: str
        """
        if child_name is None:
            raise ValueError("Invalid value for `child_name`, must not be `None`")  # noqa: E501

        self._child_name = child_name

    @property
    def child_abbreviation(self):
        """Gets the child_abbreviation of this DescendantChild.  # noqa: E501


        :return: The child_abbreviation of this DescendantChild.  # noqa: E501
        :rtype: str
        """
        return self._child_abbreviation

    @child_abbreviation.setter
    def child_abbreviation(self, child_abbreviation):
        """Sets the child_abbreviation of this DescendantChild.


        :param child_abbreviation: The child_abbreviation of this DescendantChild.  # noqa: E501
        :type: str
        """

        self._child_abbreviation = child_abbreviation

    @property
    def child_type(self):
        """Gets the child_type of this DescendantChild.  # noqa: E501


        :return: The child_type of this DescendantChild.  # noqa: E501
        :rtype: GroupTypeCodes
        """
        return self._child_type

    @child_type.setter
    def child_type(self, child_type):
        """Sets the child_type of this DescendantChild.


        :param child_type: The child_type of this DescendantChild.  # noqa: E501
        :type: GroupTypeCodes
        """
        if child_type is None:
            raise ValueError("Invalid value for `child_type`, must not be `None`")  # noqa: E501

        self._child_type = child_type

    @property
    def child_sort_order(self):
        """Gets the child_sort_order of this DescendantChild.  # noqa: E501


        :return: The child_sort_order of this DescendantChild.  # noqa: E501
        :rtype: int
        """
        return self._child_sort_order

    @child_sort_order.setter
    def child_sort_order(self, child_sort_order):
        """Sets the child_sort_order of this DescendantChild.


        :param child_sort_order: The child_sort_order of this DescendantChild.  # noqa: E501
        :type: int
        """
        if child_sort_order is None:
            raise ValueError("Invalid value for `child_sort_order`, must not be `None`")  # noqa: E501

        self._child_sort_order = child_sort_order

    @property
    def child_has_children(self):
        """Gets the child_has_children of this DescendantChild.  # noqa: E501


        :return: The child_has_children of this DescendantChild.  # noqa: E501
        :rtype: bool
        """
        return self._child_has_children

    @child_has_children.setter
    def child_has_children(self, child_has_children):
        """Sets the child_has_children of this DescendantChild.


        :param child_has_children: The child_has_children of this DescendantChild.  # noqa: E501
        :type: bool
        """
        if child_has_children is None:
            raise ValueError("Invalid value for `child_has_children`, must not be `None`")  # noqa: E501

        self._child_has_children = child_has_children

    @property
    def child_alarm_severity_level(self):
        """Gets the child_alarm_severity_level of this DescendantChild.  # noqa: E501


        :return: The child_alarm_severity_level of this DescendantChild.  # noqa: E501
        :rtype: int
        """
        return self._child_alarm_severity_level

    @child_alarm_severity_level.setter
    def child_alarm_severity_level(self, child_alarm_severity_level):
        """Sets the child_alarm_severity_level of this DescendantChild.


        :param child_alarm_severity_level: The child_alarm_severity_level of this DescendantChild.  # noqa: E501
        :type: int
        """

        self._child_alarm_severity_level = child_alarm_severity_level

    @property
    def child_is_paused(self):
        """Gets the child_is_paused of this DescendantChild.  # noqa: E501


        :return: The child_is_paused of this DescendantChild.  # noqa: E501
        :rtype: bool
        """
        return self._child_is_paused

    @child_is_paused.setter
    def child_is_paused(self, child_is_paused):
        """Sets the child_is_paused of this DescendantChild.


        :param child_is_paused: The child_is_paused of this DescendantChild.  # noqa: E501
        :type: bool
        """
        if child_is_paused is None:
            raise ValueError("Invalid value for `child_is_paused`, must not be `None`")  # noqa: E501

        self._child_is_paused = child_is_paused

    @property
    def child_is_snoozed(self):
        """Gets the child_is_snoozed of this DescendantChild.  # noqa: E501


        :return: The child_is_snoozed of this DescendantChild.  # noqa: E501
        :rtype: bool
        """
        return self._child_is_snoozed

    @child_is_snoozed.setter
    def child_is_snoozed(self, child_is_snoozed):
        """Sets the child_is_snoozed of this DescendantChild.


        :param child_is_snoozed: The child_is_snoozed of this DescendantChild.  # noqa: E501
        :type: bool
        """
        if child_is_snoozed is None:
            raise ValueError("Invalid value for `child_is_snoozed`, must not be `None`")  # noqa: E501

        self._child_is_snoozed = child_is_snoozed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescendantChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescendantChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
