# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeSettingOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'update_interval': 'NodeSettingValues',
        'sampling_frequency': 'NodeSettingValues',
        'operating_mode_pressure': 'NodeSettingValues',
        'operating_mode_vibration': 'NodeSettingValues',
        'number_of_samples': 'NodeSettingValues',
        'compression_type': 'NodeSettingValues'
    }

    attribute_map = {
        'update_interval': 'UpdateInterval',
        'sampling_frequency': 'SamplingFrequency',
        'operating_mode_pressure': 'OperatingModePressure',
        'operating_mode_vibration': 'OperatingModeVibration',
        'number_of_samples': 'NumberOfSamples',
        'compression_type': 'CompressionType'
    }

    def __init__(self, update_interval=None, sampling_frequency=None, operating_mode_pressure=None, operating_mode_vibration=None, number_of_samples=None, compression_type=None):  # noqa: E501
        """NodeSettingOverview - a model defined in Swagger"""  # noqa: E501
        self._update_interval = None
        self._sampling_frequency = None
        self._operating_mode_pressure = None
        self._operating_mode_vibration = None
        self._number_of_samples = None
        self._compression_type = None
        self.discriminator = None
        if update_interval is not None:
            self.update_interval = update_interval
        if sampling_frequency is not None:
            self.sampling_frequency = sampling_frequency
        if operating_mode_pressure is not None:
            self.operating_mode_pressure = operating_mode_pressure
        if operating_mode_vibration is not None:
            self.operating_mode_vibration = operating_mode_vibration
        if number_of_samples is not None:
            self.number_of_samples = number_of_samples
        if compression_type is not None:
            self.compression_type = compression_type

    @property
    def update_interval(self):
        """Gets the update_interval of this NodeSettingOverview.  # noqa: E501


        :return: The update_interval of this NodeSettingOverview.  # noqa: E501
        :rtype: NodeSettingValues
        """
        return self._update_interval

    @update_interval.setter
    def update_interval(self, update_interval):
        """Sets the update_interval of this NodeSettingOverview.


        :param update_interval: The update_interval of this NodeSettingOverview.  # noqa: E501
        :type: NodeSettingValues
        """

        self._update_interval = update_interval

    @property
    def sampling_frequency(self):
        """Gets the sampling_frequency of this NodeSettingOverview.  # noqa: E501


        :return: The sampling_frequency of this NodeSettingOverview.  # noqa: E501
        :rtype: NodeSettingValues
        """
        return self._sampling_frequency

    @sampling_frequency.setter
    def sampling_frequency(self, sampling_frequency):
        """Sets the sampling_frequency of this NodeSettingOverview.


        :param sampling_frequency: The sampling_frequency of this NodeSettingOverview.  # noqa: E501
        :type: NodeSettingValues
        """

        self._sampling_frequency = sampling_frequency

    @property
    def operating_mode_pressure(self):
        """Gets the operating_mode_pressure of this NodeSettingOverview.  # noqa: E501


        :return: The operating_mode_pressure of this NodeSettingOverview.  # noqa: E501
        :rtype: NodeSettingValues
        """
        return self._operating_mode_pressure

    @operating_mode_pressure.setter
    def operating_mode_pressure(self, operating_mode_pressure):
        """Sets the operating_mode_pressure of this NodeSettingOverview.


        :param operating_mode_pressure: The operating_mode_pressure of this NodeSettingOverview.  # noqa: E501
        :type: NodeSettingValues
        """

        self._operating_mode_pressure = operating_mode_pressure

    @property
    def operating_mode_vibration(self):
        """Gets the operating_mode_vibration of this NodeSettingOverview.  # noqa: E501


        :return: The operating_mode_vibration of this NodeSettingOverview.  # noqa: E501
        :rtype: NodeSettingValues
        """
        return self._operating_mode_vibration

    @operating_mode_vibration.setter
    def operating_mode_vibration(self, operating_mode_vibration):
        """Sets the operating_mode_vibration of this NodeSettingOverview.


        :param operating_mode_vibration: The operating_mode_vibration of this NodeSettingOverview.  # noqa: E501
        :type: NodeSettingValues
        """

        self._operating_mode_vibration = operating_mode_vibration

    @property
    def number_of_samples(self):
        """Gets the number_of_samples of this NodeSettingOverview.  # noqa: E501


        :return: The number_of_samples of this NodeSettingOverview.  # noqa: E501
        :rtype: NodeSettingValues
        """
        return self._number_of_samples

    @number_of_samples.setter
    def number_of_samples(self, number_of_samples):
        """Sets the number_of_samples of this NodeSettingOverview.


        :param number_of_samples: The number_of_samples of this NodeSettingOverview.  # noqa: E501
        :type: NodeSettingValues
        """

        self._number_of_samples = number_of_samples

    @property
    def compression_type(self):
        """Gets the compression_type of this NodeSettingOverview.  # noqa: E501


        :return: The compression_type of this NodeSettingOverview.  # noqa: E501
        :rtype: NodeSettingValues
        """
        return self._compression_type

    @compression_type.setter
    def compression_type(self, compression_type):
        """Sets the compression_type of this NodeSettingOverview.


        :param compression_type: The compression_type of this NodeSettingOverview.  # noqa: E501
        :type: NodeSettingValues
        """

        self._compression_type = compression_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeSettingOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeSettingOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
