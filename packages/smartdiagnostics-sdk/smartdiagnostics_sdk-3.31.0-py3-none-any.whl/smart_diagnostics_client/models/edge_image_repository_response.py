# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeImageRepositoryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'repository': 'str',
        'tags': 'list[EdgeImageTagChild]',
        'latest_tag': 'EdgeImageTagChild',
        'owner': 'EdgeImageRepositoryOwnerChild',
        'created': 'datetime',
        'updated': 'datetime',
        'note': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'repository': 'Repository',
        'tags': 'Tags',
        'latest_tag': 'LatestTag',
        'owner': 'Owner',
        'created': 'Created',
        'updated': 'Updated',
        'note': 'Note'
    }

    def __init__(self, id=None, name=None, repository=None, tags=None, latest_tag=None, owner=None, created=None, updated=None, note=None):  # noqa: E501
        """EdgeImageRepositoryResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._repository = None
        self._tags = None
        self._latest_tag = None
        self._owner = None
        self._created = None
        self._updated = None
        self._note = None
        self.discriminator = None
        self.id = id
        if name is not None:
            self.name = name
        self.repository = repository
        if tags is not None:
            self.tags = tags
        if latest_tag is not None:
            self.latest_tag = latest_tag
        self.owner = owner
        self.created = created
        self.updated = updated
        if note is not None:
            self.note = note

    @property
    def id(self):
        """Gets the id of this EdgeImageRepositoryResponse.  # noqa: E501

        The id of the image repository record  # noqa: E501

        :return: The id of this EdgeImageRepositoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgeImageRepositoryResponse.

        The id of the image repository record  # noqa: E501

        :param id: The id of this EdgeImageRepositoryResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this EdgeImageRepositoryResponse.  # noqa: E501

        The name of the repository.  Friendly name.  # noqa: E501

        :return: The name of this EdgeImageRepositoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EdgeImageRepositoryResponse.

        The name of the repository.  Friendly name.  # noqa: E501

        :param name: The name of this EdgeImageRepositoryResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repository(self):
        """Gets the repository of this EdgeImageRepositoryResponse.  # noqa: E501

        Repository. Full name including owner id prefix.  # noqa: E501

        :return: The repository of this EdgeImageRepositoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this EdgeImageRepositoryResponse.

        Repository. Full name including owner id prefix.  # noqa: E501

        :param repository: The repository of this EdgeImageRepositoryResponse.  # noqa: E501
        :type: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")  # noqa: E501

        self._repository = repository

    @property
    def tags(self):
        """Gets the tags of this EdgeImageRepositoryResponse.  # noqa: E501

        Image tag list  # noqa: E501

        :return: The tags of this EdgeImageRepositoryResponse.  # noqa: E501
        :rtype: list[EdgeImageTagChild]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EdgeImageRepositoryResponse.

        Image tag list  # noqa: E501

        :param tags: The tags of this EdgeImageRepositoryResponse.  # noqa: E501
        :type: list[EdgeImageTagChild]
        """

        self._tags = tags

    @property
    def latest_tag(self):
        """Gets the latest_tag of this EdgeImageRepositoryResponse.  # noqa: E501


        :return: The latest_tag of this EdgeImageRepositoryResponse.  # noqa: E501
        :rtype: EdgeImageTagChild
        """
        return self._latest_tag

    @latest_tag.setter
    def latest_tag(self, latest_tag):
        """Sets the latest_tag of this EdgeImageRepositoryResponse.


        :param latest_tag: The latest_tag of this EdgeImageRepositoryResponse.  # noqa: E501
        :type: EdgeImageTagChild
        """

        self._latest_tag = latest_tag

    @property
    def owner(self):
        """Gets the owner of this EdgeImageRepositoryResponse.  # noqa: E501


        :return: The owner of this EdgeImageRepositoryResponse.  # noqa: E501
        :rtype: EdgeImageRepositoryOwnerChild
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this EdgeImageRepositoryResponse.


        :param owner: The owner of this EdgeImageRepositoryResponse.  # noqa: E501
        :type: EdgeImageRepositoryOwnerChild
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def created(self):
        """Gets the created of this EdgeImageRepositoryResponse.  # noqa: E501

        The date time the image was initially pushed / created  # noqa: E501

        :return: The created of this EdgeImageRepositoryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EdgeImageRepositoryResponse.

        The date time the image was initially pushed / created  # noqa: E501

        :param created: The created of this EdgeImageRepositoryResponse.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this EdgeImageRepositoryResponse.  # noqa: E501

        The date time the image was last updated.  (note, pushed, etc)  # noqa: E501

        :return: The updated of this EdgeImageRepositoryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this EdgeImageRepositoryResponse.

        The date time the image was last updated.  (note, pushed, etc)  # noqa: E501

        :param updated: The updated of this EdgeImageRepositoryResponse.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def note(self):
        """Gets the note of this EdgeImageRepositoryResponse.  # noqa: E501

        Note for image repository.  # noqa: E501

        :return: The note of this EdgeImageRepositoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EdgeImageRepositoryResponse.

        Note for image repository.  # noqa: E501

        :param note: The note of this EdgeImageRepositoryResponse.  # noqa: E501
        :type: str
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeImageRepositoryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeImageRepositoryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
