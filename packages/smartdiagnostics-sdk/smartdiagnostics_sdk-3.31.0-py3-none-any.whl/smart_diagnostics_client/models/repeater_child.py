# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepeaterChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repeater_id': 'int',
        'repeater_serial_number': 'str',
        'repeater_name': 'str',
        'repeater_online_node_count': 'int'
    }

    attribute_map = {
        'repeater_id': 'RepeaterId',
        'repeater_serial_number': 'RepeaterSerialNumber',
        'repeater_name': 'RepeaterName',
        'repeater_online_node_count': 'RepeaterOnlineNodeCount'
    }

    def __init__(self, repeater_id=None, repeater_serial_number=None, repeater_name=None, repeater_online_node_count=None):  # noqa: E501
        """RepeaterChild - a model defined in Swagger"""  # noqa: E501
        self._repeater_id = None
        self._repeater_serial_number = None
        self._repeater_name = None
        self._repeater_online_node_count = None
        self.discriminator = None
        self.repeater_id = repeater_id
        self.repeater_serial_number = repeater_serial_number
        if repeater_name is not None:
            self.repeater_name = repeater_name
        self.repeater_online_node_count = repeater_online_node_count

    @property
    def repeater_id(self):
        """Gets the repeater_id of this RepeaterChild.  # noqa: E501


        :return: The repeater_id of this RepeaterChild.  # noqa: E501
        :rtype: int
        """
        return self._repeater_id

    @repeater_id.setter
    def repeater_id(self, repeater_id):
        """Sets the repeater_id of this RepeaterChild.


        :param repeater_id: The repeater_id of this RepeaterChild.  # noqa: E501
        :type: int
        """
        if repeater_id is None:
            raise ValueError("Invalid value for `repeater_id`, must not be `None`")  # noqa: E501

        self._repeater_id = repeater_id

    @property
    def repeater_serial_number(self):
        """Gets the repeater_serial_number of this RepeaterChild.  # noqa: E501


        :return: The repeater_serial_number of this RepeaterChild.  # noqa: E501
        :rtype: str
        """
        return self._repeater_serial_number

    @repeater_serial_number.setter
    def repeater_serial_number(self, repeater_serial_number):
        """Sets the repeater_serial_number of this RepeaterChild.


        :param repeater_serial_number: The repeater_serial_number of this RepeaterChild.  # noqa: E501
        :type: str
        """
        if repeater_serial_number is None:
            raise ValueError("Invalid value for `repeater_serial_number`, must not be `None`")  # noqa: E501

        self._repeater_serial_number = repeater_serial_number

    @property
    def repeater_name(self):
        """Gets the repeater_name of this RepeaterChild.  # noqa: E501


        :return: The repeater_name of this RepeaterChild.  # noqa: E501
        :rtype: str
        """
        return self._repeater_name

    @repeater_name.setter
    def repeater_name(self, repeater_name):
        """Sets the repeater_name of this RepeaterChild.


        :param repeater_name: The repeater_name of this RepeaterChild.  # noqa: E501
        :type: str
        """

        self._repeater_name = repeater_name

    @property
    def repeater_online_node_count(self):
        """Gets the repeater_online_node_count of this RepeaterChild.  # noqa: E501


        :return: The repeater_online_node_count of this RepeaterChild.  # noqa: E501
        :rtype: int
        """
        return self._repeater_online_node_count

    @repeater_online_node_count.setter
    def repeater_online_node_count(self, repeater_online_node_count):
        """Sets the repeater_online_node_count of this RepeaterChild.


        :param repeater_online_node_count: The repeater_online_node_count of this RepeaterChild.  # noqa: E501
        :type: int
        """
        if repeater_online_node_count is None:
            raise ValueError("Invalid value for `repeater_online_node_count`, must not be `None`")  # noqa: E501

        self._repeater_online_node_count = repeater_online_node_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepeaterChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepeaterChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
