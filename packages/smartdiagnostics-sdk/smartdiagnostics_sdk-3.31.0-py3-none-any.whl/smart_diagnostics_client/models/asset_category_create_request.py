# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetCategoryCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_type_id': 'int',
        'parent_category_id': 'int',
        'short_name': 'str'
    }

    attribute_map = {
        'asset_type_id': 'AssetTypeId',
        'parent_category_id': 'ParentCategoryId',
        'short_name': 'ShortName'
    }

    def __init__(self, asset_type_id=None, parent_category_id=None, short_name=None):  # noqa: E501
        """AssetCategoryCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._asset_type_id = None
        self._parent_category_id = None
        self._short_name = None
        self.discriminator = None
        self.asset_type_id = asset_type_id
        if parent_category_id is not None:
            self.parent_category_id = parent_category_id
        self.short_name = short_name

    @property
    def asset_type_id(self):
        """Gets the asset_type_id of this AssetCategoryCreateRequest.  # noqa: E501

        The Asset Type connected to the category  # noqa: E501

        :return: The asset_type_id of this AssetCategoryCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._asset_type_id

    @asset_type_id.setter
    def asset_type_id(self, asset_type_id):
        """Sets the asset_type_id of this AssetCategoryCreateRequest.

        The Asset Type connected to the category  # noqa: E501

        :param asset_type_id: The asset_type_id of this AssetCategoryCreateRequest.  # noqa: E501
        :type: int
        """
        if asset_type_id is None:
            raise ValueError("Invalid value for `asset_type_id`, must not be `None`")  # noqa: E501

        self._asset_type_id = asset_type_id

    @property
    def parent_category_id(self):
        """Gets the parent_category_id of this AssetCategoryCreateRequest.  # noqa: E501

        An optional parent category  # noqa: E501

        :return: The parent_category_id of this AssetCategoryCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._parent_category_id

    @parent_category_id.setter
    def parent_category_id(self, parent_category_id):
        """Sets the parent_category_id of this AssetCategoryCreateRequest.

        An optional parent category  # noqa: E501

        :param parent_category_id: The parent_category_id of this AssetCategoryCreateRequest.  # noqa: E501
        :type: int
        """

        self._parent_category_id = parent_category_id

    @property
    def short_name(self):
        """Gets the short_name of this AssetCategoryCreateRequest.  # noqa: E501

        The short name of the category.   The full name is generated automatically   when a parent category is supplied.  # noqa: E501

        :return: The short_name of this AssetCategoryCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this AssetCategoryCreateRequest.

        The short name of the category.   The full name is generated automatically   when a parent category is supplied.  # noqa: E501

        :param short_name: The short_name of this AssetCategoryCreateRequest.  # noqa: E501
        :type: str
        """
        if short_name is None:
            raise ValueError("Invalid value for `short_name`, must not be `None`")  # noqa: E501

        self._short_name = short_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetCategoryCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetCategoryCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
