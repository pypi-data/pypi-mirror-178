# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndicatorFilterResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'is_global': 'bool',
        'indicator_types': 'list[MetricTypeCodes]',
        'sort_order': 'int',
        'tags': 'list[TagChild]',
        'location': 'LocationChild',
        'system': 'SystemChild'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'is_global': 'IsGlobal',
        'indicator_types': 'IndicatorTypes',
        'sort_order': 'SortOrder',
        'tags': 'Tags',
        'location': 'Location',
        'system': 'System'
    }

    def __init__(self, id=None, name=None, is_global=None, indicator_types=None, sort_order=None, tags=None, location=None, system=None):  # noqa: E501
        """IndicatorFilterResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._is_global = None
        self._indicator_types = None
        self._sort_order = None
        self._tags = None
        self._location = None
        self._system = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.is_global = is_global
        self.indicator_types = indicator_types
        self.sort_order = sort_order
        self.tags = tags
        if location is not None:
            self.location = location
        if system is not None:
            self.system = system

    @property
    def id(self):
        """Gets the id of this IndicatorFilterResponse.  # noqa: E501


        :return: The id of this IndicatorFilterResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IndicatorFilterResponse.


        :param id: The id of this IndicatorFilterResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this IndicatorFilterResponse.  # noqa: E501


        :return: The name of this IndicatorFilterResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndicatorFilterResponse.


        :param name: The name of this IndicatorFilterResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_global(self):
        """Gets the is_global of this IndicatorFilterResponse.  # noqa: E501


        :return: The is_global of this IndicatorFilterResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_global

    @is_global.setter
    def is_global(self, is_global):
        """Sets the is_global of this IndicatorFilterResponse.


        :param is_global: The is_global of this IndicatorFilterResponse.  # noqa: E501
        :type: bool
        """
        if is_global is None:
            raise ValueError("Invalid value for `is_global`, must not be `None`")  # noqa: E501

        self._is_global = is_global

    @property
    def indicator_types(self):
        """Gets the indicator_types of this IndicatorFilterResponse.  # noqa: E501


        :return: The indicator_types of this IndicatorFilterResponse.  # noqa: E501
        :rtype: list[MetricTypeCodes]
        """
        return self._indicator_types

    @indicator_types.setter
    def indicator_types(self, indicator_types):
        """Sets the indicator_types of this IndicatorFilterResponse.


        :param indicator_types: The indicator_types of this IndicatorFilterResponse.  # noqa: E501
        :type: list[MetricTypeCodes]
        """
        if indicator_types is None:
            raise ValueError("Invalid value for `indicator_types`, must not be `None`")  # noqa: E501

        self._indicator_types = indicator_types

    @property
    def sort_order(self):
        """Gets the sort_order of this IndicatorFilterResponse.  # noqa: E501


        :return: The sort_order of this IndicatorFilterResponse.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this IndicatorFilterResponse.


        :param sort_order: The sort_order of this IndicatorFilterResponse.  # noqa: E501
        :type: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")  # noqa: E501

        self._sort_order = sort_order

    @property
    def tags(self):
        """Gets the tags of this IndicatorFilterResponse.  # noqa: E501


        :return: The tags of this IndicatorFilterResponse.  # noqa: E501
        :rtype: list[TagChild]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IndicatorFilterResponse.


        :param tags: The tags of this IndicatorFilterResponse.  # noqa: E501
        :type: list[TagChild]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def location(self):
        """Gets the location of this IndicatorFilterResponse.  # noqa: E501


        :return: The location of this IndicatorFilterResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this IndicatorFilterResponse.


        :param location: The location of this IndicatorFilterResponse.  # noqa: E501
        :type: LocationChild
        """

        self._location = location

    @property
    def system(self):
        """Gets the system of this IndicatorFilterResponse.  # noqa: E501


        :return: The system of this IndicatorFilterResponse.  # noqa: E501
        :rtype: SystemChild
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this IndicatorFilterResponse.


        :param system: The system of this IndicatorFilterResponse.  # noqa: E501
        :type: SystemChild
        """

        self._system = system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndicatorFilterResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndicatorFilterResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
