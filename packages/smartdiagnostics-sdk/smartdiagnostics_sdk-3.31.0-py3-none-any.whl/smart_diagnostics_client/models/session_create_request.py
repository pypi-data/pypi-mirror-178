# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SessionCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_id': 'str',
        'custom_filter_ids': 'list[str]',
        'indicator_types': 'list[MetricTypeCodes]',
        'measure_ofs': 'list[SensorRoleTypeCodes]',
        'group_ids': 'list[str]',
        'selected_indicator_ids': 'list[str]',
        'selected_point': 'SessionSelectedPointChild',
        'time_range': 'SessionTimeRangeChild',
        'is_custom_filter_type': 'bool'
    }

    attribute_map = {
        'system_id': 'SystemId',
        'custom_filter_ids': 'CustomFilterIds',
        'indicator_types': 'IndicatorTypes',
        'measure_ofs': 'MeasureOfs',
        'group_ids': 'GroupIds',
        'selected_indicator_ids': 'SelectedIndicatorIds',
        'selected_point': 'SelectedPoint',
        'time_range': 'TimeRange',
        'is_custom_filter_type': 'IsCustomFilterType'
    }

    def __init__(self, system_id=None, custom_filter_ids=None, indicator_types=None, measure_ofs=None, group_ids=None, selected_indicator_ids=None, selected_point=None, time_range=None, is_custom_filter_type=None):  # noqa: E501
        """SessionCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._system_id = None
        self._custom_filter_ids = None
        self._indicator_types = None
        self._measure_ofs = None
        self._group_ids = None
        self._selected_indicator_ids = None
        self._selected_point = None
        self._time_range = None
        self._is_custom_filter_type = None
        self.discriminator = None
        self.system_id = system_id
        if custom_filter_ids is not None:
            self.custom_filter_ids = custom_filter_ids
        if indicator_types is not None:
            self.indicator_types = indicator_types
        if measure_ofs is not None:
            self.measure_ofs = measure_ofs
        if group_ids is not None:
            self.group_ids = group_ids
        if selected_indicator_ids is not None:
            self.selected_indicator_ids = selected_indicator_ids
        if selected_point is not None:
            self.selected_point = selected_point
        if time_range is not None:
            self.time_range = time_range
        if is_custom_filter_type is not None:
            self.is_custom_filter_type = is_custom_filter_type

    @property
    def system_id(self):
        """Gets the system_id of this SessionCreateRequest.  # noqa: E501


        :return: The system_id of this SessionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this SessionCreateRequest.


        :param system_id: The system_id of this SessionCreateRequest.  # noqa: E501
        :type: str
        """
        if system_id is None:
            raise ValueError("Invalid value for `system_id`, must not be `None`")  # noqa: E501

        self._system_id = system_id

    @property
    def custom_filter_ids(self):
        """Gets the custom_filter_ids of this SessionCreateRequest.  # noqa: E501


        :return: The custom_filter_ids of this SessionCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_filter_ids

    @custom_filter_ids.setter
    def custom_filter_ids(self, custom_filter_ids):
        """Sets the custom_filter_ids of this SessionCreateRequest.


        :param custom_filter_ids: The custom_filter_ids of this SessionCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._custom_filter_ids = custom_filter_ids

    @property
    def indicator_types(self):
        """Gets the indicator_types of this SessionCreateRequest.  # noqa: E501


        :return: The indicator_types of this SessionCreateRequest.  # noqa: E501
        :rtype: list[MetricTypeCodes]
        """
        return self._indicator_types

    @indicator_types.setter
    def indicator_types(self, indicator_types):
        """Sets the indicator_types of this SessionCreateRequest.


        :param indicator_types: The indicator_types of this SessionCreateRequest.  # noqa: E501
        :type: list[MetricTypeCodes]
        """

        self._indicator_types = indicator_types

    @property
    def measure_ofs(self):
        """Gets the measure_ofs of this SessionCreateRequest.  # noqa: E501


        :return: The measure_ofs of this SessionCreateRequest.  # noqa: E501
        :rtype: list[SensorRoleTypeCodes]
        """
        return self._measure_ofs

    @measure_ofs.setter
    def measure_ofs(self, measure_ofs):
        """Sets the measure_ofs of this SessionCreateRequest.


        :param measure_ofs: The measure_ofs of this SessionCreateRequest.  # noqa: E501
        :type: list[SensorRoleTypeCodes]
        """

        self._measure_ofs = measure_ofs

    @property
    def group_ids(self):
        """Gets the group_ids of this SessionCreateRequest.  # noqa: E501


        :return: The group_ids of this SessionCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this SessionCreateRequest.


        :param group_ids: The group_ids of this SessionCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def selected_indicator_ids(self):
        """Gets the selected_indicator_ids of this SessionCreateRequest.  # noqa: E501


        :return: The selected_indicator_ids of this SessionCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_indicator_ids

    @selected_indicator_ids.setter
    def selected_indicator_ids(self, selected_indicator_ids):
        """Sets the selected_indicator_ids of this SessionCreateRequest.


        :param selected_indicator_ids: The selected_indicator_ids of this SessionCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._selected_indicator_ids = selected_indicator_ids

    @property
    def selected_point(self):
        """Gets the selected_point of this SessionCreateRequest.  # noqa: E501


        :return: The selected_point of this SessionCreateRequest.  # noqa: E501
        :rtype: SessionSelectedPointChild
        """
        return self._selected_point

    @selected_point.setter
    def selected_point(self, selected_point):
        """Sets the selected_point of this SessionCreateRequest.


        :param selected_point: The selected_point of this SessionCreateRequest.  # noqa: E501
        :type: SessionSelectedPointChild
        """

        self._selected_point = selected_point

    @property
    def time_range(self):
        """Gets the time_range of this SessionCreateRequest.  # noqa: E501


        :return: The time_range of this SessionCreateRequest.  # noqa: E501
        :rtype: SessionTimeRangeChild
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this SessionCreateRequest.


        :param time_range: The time_range of this SessionCreateRequest.  # noqa: E501
        :type: SessionTimeRangeChild
        """

        self._time_range = time_range

    @property
    def is_custom_filter_type(self):
        """Gets the is_custom_filter_type of this SessionCreateRequest.  # noqa: E501


        :return: The is_custom_filter_type of this SessionCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_custom_filter_type

    @is_custom_filter_type.setter
    def is_custom_filter_type(self, is_custom_filter_type):
        """Sets the is_custom_filter_type of this SessionCreateRequest.


        :param is_custom_filter_type: The is_custom_filter_type of this SessionCreateRequest.  # noqa: E501
        :type: bool
        """

        self._is_custom_filter_type = is_custom_filter_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
