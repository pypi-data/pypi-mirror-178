# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DefinitionRevisionChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'revision': 'int',
        'note': 'str',
        'active': 'bool',
        'created': 'EdgeCreationChild',
        'updated': 'EdgeUpdateChild',
        'services': 'list[EdgeDefinitionServiceChild]'
    }

    attribute_map = {
        'id': 'Id',
        'revision': 'Revision',
        'note': 'Note',
        'active': 'Active',
        'created': 'Created',
        'updated': 'Updated',
        'services': 'Services'
    }

    def __init__(self, id=None, revision=None, note=None, active=None, created=None, updated=None, services=None):  # noqa: E501
        """DefinitionRevisionChild - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._revision = None
        self._note = None
        self._active = None
        self._created = None
        self._updated = None
        self._services = None
        self.discriminator = None
        self.id = id
        self.revision = revision
        if note is not None:
            self.note = note
        self.active = active
        self.created = created
        if updated is not None:
            self.updated = updated
        self.services = services

    @property
    def id(self):
        """Gets the id of this DefinitionRevisionChild.  # noqa: E501

        The id of the revision  # noqa: E501

        :return: The id of this DefinitionRevisionChild.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DefinitionRevisionChild.

        The id of the revision  # noqa: E501

        :param id: The id of this DefinitionRevisionChild.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def revision(self):
        """Gets the revision of this DefinitionRevisionChild.  # noqa: E501

        Revision number  # noqa: E501

        :return: The revision of this DefinitionRevisionChild.  # noqa: E501
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this DefinitionRevisionChild.

        Revision number  # noqa: E501

        :param revision: The revision of this DefinitionRevisionChild.  # noqa: E501
        :type: int
        """
        if revision is None:
            raise ValueError("Invalid value for `revision`, must not be `None`")  # noqa: E501

        self._revision = revision

    @property
    def note(self):
        """Gets the note of this DefinitionRevisionChild.  # noqa: E501

        A note describing the revision  # noqa: E501

        :return: The note of this DefinitionRevisionChild.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this DefinitionRevisionChild.

        A note describing the revision  # noqa: E501

        :param note: The note of this DefinitionRevisionChild.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def active(self):
        """Gets the active of this DefinitionRevisionChild.  # noqa: E501

        Whether or not the revision is enabled  # noqa: E501

        :return: The active of this DefinitionRevisionChild.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this DefinitionRevisionChild.

        Whether or not the revision is enabled  # noqa: E501

        :param active: The active of this DefinitionRevisionChild.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def created(self):
        """Gets the created of this DefinitionRevisionChild.  # noqa: E501


        :return: The created of this DefinitionRevisionChild.  # noqa: E501
        :rtype: EdgeCreationChild
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DefinitionRevisionChild.


        :param created: The created of this DefinitionRevisionChild.  # noqa: E501
        :type: EdgeCreationChild
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this DefinitionRevisionChild.  # noqa: E501


        :return: The updated of this DefinitionRevisionChild.  # noqa: E501
        :rtype: EdgeUpdateChild
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DefinitionRevisionChild.


        :param updated: The updated of this DefinitionRevisionChild.  # noqa: E501
        :type: EdgeUpdateChild
        """

        self._updated = updated

    @property
    def services(self):
        """Gets the services of this DefinitionRevisionChild.  # noqa: E501

        A list of services to configure a base station  # noqa: E501

        :return: The services of this DefinitionRevisionChild.  # noqa: E501
        :rtype: list[EdgeDefinitionServiceChild]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this DefinitionRevisionChild.

        A list of services to configure a base station  # noqa: E501

        :param services: The services of this DefinitionRevisionChild.  # noqa: E501
        :type: list[EdgeDefinitionServiceChild]
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")  # noqa: E501

        self._services = services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DefinitionRevisionChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefinitionRevisionChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
