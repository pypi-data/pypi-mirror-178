# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TreeItemAvailableAssetClassResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tree_item': 'TreeItemChild',
        'asset_class_code': 'str',
        'asset_type': 'AssetTypeChild',
        'asset_category': 'AssetCategoryChild',
        'asset_size': 'AssetSizeChild'
    }

    attribute_map = {
        'tree_item': 'TreeItem',
        'asset_class_code': 'AssetClassCode',
        'asset_type': 'AssetType',
        'asset_category': 'AssetCategory',
        'asset_size': 'AssetSize'
    }

    def __init__(self, tree_item=None, asset_class_code=None, asset_type=None, asset_category=None, asset_size=None):  # noqa: E501
        """TreeItemAvailableAssetClassResponse - a model defined in Swagger"""  # noqa: E501
        self._tree_item = None
        self._asset_class_code = None
        self._asset_type = None
        self._asset_category = None
        self._asset_size = None
        self.discriminator = None
        self.tree_item = tree_item
        if asset_class_code is not None:
            self.asset_class_code = asset_class_code
        if asset_type is not None:
            self.asset_type = asset_type
        if asset_category is not None:
            self.asset_category = asset_category
        if asset_size is not None:
            self.asset_size = asset_size

    @property
    def tree_item(self):
        """Gets the tree_item of this TreeItemAvailableAssetClassResponse.  # noqa: E501


        :return: The tree_item of this TreeItemAvailableAssetClassResponse.  # noqa: E501
        :rtype: TreeItemChild
        """
        return self._tree_item

    @tree_item.setter
    def tree_item(self, tree_item):
        """Sets the tree_item of this TreeItemAvailableAssetClassResponse.


        :param tree_item: The tree_item of this TreeItemAvailableAssetClassResponse.  # noqa: E501
        :type: TreeItemChild
        """
        if tree_item is None:
            raise ValueError("Invalid value for `tree_item`, must not be `None`")  # noqa: E501

        self._tree_item = tree_item

    @property
    def asset_class_code(self):
        """Gets the asset_class_code of this TreeItemAvailableAssetClassResponse.  # noqa: E501


        :return: The asset_class_code of this TreeItemAvailableAssetClassResponse.  # noqa: E501
        :rtype: str
        """
        return self._asset_class_code

    @asset_class_code.setter
    def asset_class_code(self, asset_class_code):
        """Sets the asset_class_code of this TreeItemAvailableAssetClassResponse.


        :param asset_class_code: The asset_class_code of this TreeItemAvailableAssetClassResponse.  # noqa: E501
        :type: str
        """

        self._asset_class_code = asset_class_code

    @property
    def asset_type(self):
        """Gets the asset_type of this TreeItemAvailableAssetClassResponse.  # noqa: E501


        :return: The asset_type of this TreeItemAvailableAssetClassResponse.  # noqa: E501
        :rtype: AssetTypeChild
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this TreeItemAvailableAssetClassResponse.


        :param asset_type: The asset_type of this TreeItemAvailableAssetClassResponse.  # noqa: E501
        :type: AssetTypeChild
        """

        self._asset_type = asset_type

    @property
    def asset_category(self):
        """Gets the asset_category of this TreeItemAvailableAssetClassResponse.  # noqa: E501


        :return: The asset_category of this TreeItemAvailableAssetClassResponse.  # noqa: E501
        :rtype: AssetCategoryChild
        """
        return self._asset_category

    @asset_category.setter
    def asset_category(self, asset_category):
        """Sets the asset_category of this TreeItemAvailableAssetClassResponse.


        :param asset_category: The asset_category of this TreeItemAvailableAssetClassResponse.  # noqa: E501
        :type: AssetCategoryChild
        """

        self._asset_category = asset_category

    @property
    def asset_size(self):
        """Gets the asset_size of this TreeItemAvailableAssetClassResponse.  # noqa: E501


        :return: The asset_size of this TreeItemAvailableAssetClassResponse.  # noqa: E501
        :rtype: AssetSizeChild
        """
        return self._asset_size

    @asset_size.setter
    def asset_size(self, asset_size):
        """Sets the asset_size of this TreeItemAvailableAssetClassResponse.


        :param asset_size: The asset_size of this TreeItemAvailableAssetClassResponse.  # noqa: E501
        :type: AssetSizeChild
        """

        self._asset_size = asset_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TreeItemAvailableAssetClassResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TreeItemAvailableAssetClassResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
