# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MonitoringPointNodeChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_id': 'int',
        'node_serial_number': 'str',
        'node_nickname': 'str',
        'node_type_code': 'NodeTypeCodes'
    }

    attribute_map = {
        'node_id': 'NodeId',
        'node_serial_number': 'NodeSerialNumber',
        'node_nickname': 'NodeNickname',
        'node_type_code': 'NodeTypeCode'
    }

    def __init__(self, node_id=None, node_serial_number=None, node_nickname=None, node_type_code=None):  # noqa: E501
        """MonitoringPointNodeChild - a model defined in Swagger"""  # noqa: E501
        self._node_id = None
        self._node_serial_number = None
        self._node_nickname = None
        self._node_type_code = None
        self.discriminator = None
        self.node_id = node_id
        self.node_serial_number = node_serial_number
        if node_nickname is not None:
            self.node_nickname = node_nickname
        if node_type_code is not None:
            self.node_type_code = node_type_code

    @property
    def node_id(self):
        """Gets the node_id of this MonitoringPointNodeChild.  # noqa: E501


        :return: The node_id of this MonitoringPointNodeChild.  # noqa: E501
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this MonitoringPointNodeChild.


        :param node_id: The node_id of this MonitoringPointNodeChild.  # noqa: E501
        :type: int
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def node_serial_number(self):
        """Gets the node_serial_number of this MonitoringPointNodeChild.  # noqa: E501


        :return: The node_serial_number of this MonitoringPointNodeChild.  # noqa: E501
        :rtype: str
        """
        return self._node_serial_number

    @node_serial_number.setter
    def node_serial_number(self, node_serial_number):
        """Sets the node_serial_number of this MonitoringPointNodeChild.


        :param node_serial_number: The node_serial_number of this MonitoringPointNodeChild.  # noqa: E501
        :type: str
        """
        if node_serial_number is None:
            raise ValueError("Invalid value for `node_serial_number`, must not be `None`")  # noqa: E501

        self._node_serial_number = node_serial_number

    @property
    def node_nickname(self):
        """Gets the node_nickname of this MonitoringPointNodeChild.  # noqa: E501


        :return: The node_nickname of this MonitoringPointNodeChild.  # noqa: E501
        :rtype: str
        """
        return self._node_nickname

    @node_nickname.setter
    def node_nickname(self, node_nickname):
        """Sets the node_nickname of this MonitoringPointNodeChild.


        :param node_nickname: The node_nickname of this MonitoringPointNodeChild.  # noqa: E501
        :type: str
        """

        self._node_nickname = node_nickname

    @property
    def node_type_code(self):
        """Gets the node_type_code of this MonitoringPointNodeChild.  # noqa: E501


        :return: The node_type_code of this MonitoringPointNodeChild.  # noqa: E501
        :rtype: NodeTypeCodes
        """
        return self._node_type_code

    @node_type_code.setter
    def node_type_code(self, node_type_code):
        """Sets the node_type_code of this MonitoringPointNodeChild.


        :param node_type_code: The node_type_code of this MonitoringPointNodeChild.  # noqa: E501
        :type: NodeTypeCodes
        """

        self._node_type_code = node_type_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitoringPointNodeChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitoringPointNodeChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
