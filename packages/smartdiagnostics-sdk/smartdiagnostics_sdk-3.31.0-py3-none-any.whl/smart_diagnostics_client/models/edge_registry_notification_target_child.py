# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeRegistryNotificationTargetChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'media_type': 'str',
        'size': 'int',
        'digest': 'str',
        'length': 'int',
        'repository': 'str',
        'url': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'media_type': 'MediaType',
        'size': 'Size',
        'digest': 'Digest',
        'length': 'Length',
        'repository': 'Repository',
        'url': 'Url',
        'tag': 'Tag'
    }

    def __init__(self, media_type=None, size=None, digest=None, length=None, repository=None, url=None, tag=None):  # noqa: E501
        """EdgeRegistryNotificationTargetChild - a model defined in Swagger"""  # noqa: E501
        self._media_type = None
        self._size = None
        self._digest = None
        self._length = None
        self._repository = None
        self._url = None
        self._tag = None
        self.discriminator = None
        if media_type is not None:
            self.media_type = media_type
        if size is not None:
            self.size = size
        if digest is not None:
            self.digest = digest
        if length is not None:
            self.length = length
        if repository is not None:
            self.repository = repository
        if url is not None:
            self.url = url
        if tag is not None:
            self.tag = tag

    @property
    def media_type(self):
        """Gets the media_type of this EdgeRegistryNotificationTargetChild.  # noqa: E501

        Describes the type of the content  # noqa: E501

        :return: The media_type of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this EdgeRegistryNotificationTargetChild.

        Describes the type of the content  # noqa: E501

        :param media_type: The media_type of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def size(self):
        """Gets the size of this EdgeRegistryNotificationTargetChild.  # noqa: E501

        Size in bytes of content  # noqa: E501

        :return: The size of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this EdgeRegistryNotificationTargetChild.

        Size in bytes of content  # noqa: E501

        :param size: The size of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def digest(self):
        """Gets the digest of this EdgeRegistryNotificationTargetChild.  # noqa: E501

        Digest uniquely identifies the content. A byte stream can be verified against this digest  # noqa: E501

        :return: The digest of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this EdgeRegistryNotificationTargetChild.

        Digest uniquely identifies the content. A byte stream can be verified against this digest  # noqa: E501

        :param digest: The digest of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :type: str
        """

        self._digest = digest

    @property
    def length(self):
        """Gets the length of this EdgeRegistryNotificationTargetChild.  # noqa: E501

        Length in bytes of content. Same as Size field  # noqa: E501

        :return: The length of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this EdgeRegistryNotificationTargetChild.

        Length in bytes of content. Same as Size field  # noqa: E501

        :param length: The length of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def repository(self):
        """Gets the repository of this EdgeRegistryNotificationTargetChild.  # noqa: E501

        Identifies the repository.  Max length is 255. Docker restriction.  # noqa: E501

        :return: The repository of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this EdgeRegistryNotificationTargetChild.

        Identifies the repository.  Max length is 255. Docker restriction.  # noqa: E501

        :param repository: The repository of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def url(self):
        """Gets the url of this EdgeRegistryNotificationTargetChild.  # noqa: E501

        URL provides a direct link to the content  # noqa: E501

        :return: The url of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EdgeRegistryNotificationTargetChild.

        URL provides a direct link to the content  # noqa: E501

        :param url: The url of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def tag(self):
        """Gets the tag of this EdgeRegistryNotificationTargetChild.  # noqa: E501

        Image Tag.  Max length is 128. Docker restriction.  # noqa: E501

        :return: The tag of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this EdgeRegistryNotificationTargetChild.

        Image Tag.  Max length is 128. Docker restriction.  # noqa: E501

        :param tag: The tag of this EdgeRegistryNotificationTargetChild.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeRegistryNotificationTargetChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeRegistryNotificationTargetChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
