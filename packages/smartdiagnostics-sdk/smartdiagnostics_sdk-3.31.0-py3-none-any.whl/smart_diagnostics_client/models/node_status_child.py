# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeStatusChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outstanding': 'int',
        'deployed': 'int',
        'lock_out_tag_out': 'int',
        'spare_devices': 'int',
        'special_access_required': 'int'
    }

    attribute_map = {
        'outstanding': 'Outstanding',
        'deployed': 'Deployed',
        'lock_out_tag_out': 'LockOutTagOut',
        'spare_devices': 'SpareDevices',
        'special_access_required': 'SpecialAccessRequired'
    }

    def __init__(self, outstanding=None, deployed=None, lock_out_tag_out=None, spare_devices=None, special_access_required=None):  # noqa: E501
        """NodeStatusChild - a model defined in Swagger"""  # noqa: E501
        self._outstanding = None
        self._deployed = None
        self._lock_out_tag_out = None
        self._spare_devices = None
        self._special_access_required = None
        self.discriminator = None
        self.outstanding = outstanding
        self.deployed = deployed
        self.lock_out_tag_out = lock_out_tag_out
        self.spare_devices = spare_devices
        self.special_access_required = special_access_required

    @property
    def outstanding(self):
        """Gets the outstanding of this NodeStatusChild.  # noqa: E501


        :return: The outstanding of this NodeStatusChild.  # noqa: E501
        :rtype: int
        """
        return self._outstanding

    @outstanding.setter
    def outstanding(self, outstanding):
        """Sets the outstanding of this NodeStatusChild.


        :param outstanding: The outstanding of this NodeStatusChild.  # noqa: E501
        :type: int
        """
        if outstanding is None:
            raise ValueError("Invalid value for `outstanding`, must not be `None`")  # noqa: E501

        self._outstanding = outstanding

    @property
    def deployed(self):
        """Gets the deployed of this NodeStatusChild.  # noqa: E501


        :return: The deployed of this NodeStatusChild.  # noqa: E501
        :rtype: int
        """
        return self._deployed

    @deployed.setter
    def deployed(self, deployed):
        """Sets the deployed of this NodeStatusChild.


        :param deployed: The deployed of this NodeStatusChild.  # noqa: E501
        :type: int
        """
        if deployed is None:
            raise ValueError("Invalid value for `deployed`, must not be `None`")  # noqa: E501

        self._deployed = deployed

    @property
    def lock_out_tag_out(self):
        """Gets the lock_out_tag_out of this NodeStatusChild.  # noqa: E501


        :return: The lock_out_tag_out of this NodeStatusChild.  # noqa: E501
        :rtype: int
        """
        return self._lock_out_tag_out

    @lock_out_tag_out.setter
    def lock_out_tag_out(self, lock_out_tag_out):
        """Sets the lock_out_tag_out of this NodeStatusChild.


        :param lock_out_tag_out: The lock_out_tag_out of this NodeStatusChild.  # noqa: E501
        :type: int
        """
        if lock_out_tag_out is None:
            raise ValueError("Invalid value for `lock_out_tag_out`, must not be `None`")  # noqa: E501

        self._lock_out_tag_out = lock_out_tag_out

    @property
    def spare_devices(self):
        """Gets the spare_devices of this NodeStatusChild.  # noqa: E501


        :return: The spare_devices of this NodeStatusChild.  # noqa: E501
        :rtype: int
        """
        return self._spare_devices

    @spare_devices.setter
    def spare_devices(self, spare_devices):
        """Sets the spare_devices of this NodeStatusChild.


        :param spare_devices: The spare_devices of this NodeStatusChild.  # noqa: E501
        :type: int
        """
        if spare_devices is None:
            raise ValueError("Invalid value for `spare_devices`, must not be `None`")  # noqa: E501

        self._spare_devices = spare_devices

    @property
    def special_access_required(self):
        """Gets the special_access_required of this NodeStatusChild.  # noqa: E501


        :return: The special_access_required of this NodeStatusChild.  # noqa: E501
        :rtype: int
        """
        return self._special_access_required

    @special_access_required.setter
    def special_access_required(self, special_access_required):
        """Sets the special_access_required of this NodeStatusChild.


        :param special_access_required: The special_access_required of this NodeStatusChild.  # noqa: E501
        :type: int
        """
        if special_access_required is None:
            raise ValueError("Invalid value for `special_access_required`, must not be `None`")  # noqa: E501

        self._special_access_required = special_access_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeStatusChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeStatusChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
