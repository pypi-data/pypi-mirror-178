# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThermalCameraResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'serial_number': 'int',
        'created': 'datetime',
        'updated': 'datetime',
        'active': 'bool',
        'location': 'LocationChild',
        'settings': 'ThermalCameraSettingsChild'
    }

    attribute_map = {
        'serial_number': 'SerialNumber',
        'created': 'Created',
        'updated': 'Updated',
        'active': 'Active',
        'location': 'Location',
        'settings': 'Settings'
    }

    def __init__(self, serial_number=None, created=None, updated=None, active=None, location=None, settings=None):  # noqa: E501
        """ThermalCameraResponse - a model defined in Swagger"""  # noqa: E501
        self._serial_number = None
        self._created = None
        self._updated = None
        self._active = None
        self._location = None
        self._settings = None
        self.discriminator = None
        self.serial_number = serial_number
        self.created = created
        self.updated = updated
        self.active = active
        self.location = location
        self.settings = settings

    @property
    def serial_number(self):
        """Gets the serial_number of this ThermalCameraResponse.  # noqa: E501


        :return: The serial_number of this ThermalCameraResponse.  # noqa: E501
        :rtype: int
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ThermalCameraResponse.


        :param serial_number: The serial_number of this ThermalCameraResponse.  # noqa: E501
        :type: int
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def created(self):
        """Gets the created of this ThermalCameraResponse.  # noqa: E501


        :return: The created of this ThermalCameraResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ThermalCameraResponse.


        :param created: The created of this ThermalCameraResponse.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this ThermalCameraResponse.  # noqa: E501


        :return: The updated of this ThermalCameraResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ThermalCameraResponse.


        :param updated: The updated of this ThermalCameraResponse.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def active(self):
        """Gets the active of this ThermalCameraResponse.  # noqa: E501


        :return: The active of this ThermalCameraResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ThermalCameraResponse.


        :param active: The active of this ThermalCameraResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def location(self):
        """Gets the location of this ThermalCameraResponse.  # noqa: E501


        :return: The location of this ThermalCameraResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ThermalCameraResponse.


        :param location: The location of this ThermalCameraResponse.  # noqa: E501
        :type: LocationChild
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def settings(self):
        """Gets the settings of this ThermalCameraResponse.  # noqa: E501


        :return: The settings of this ThermalCameraResponse.  # noqa: E501
        :rtype: ThermalCameraSettingsChild
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ThermalCameraResponse.


        :param settings: The settings of this ThermalCameraResponse.  # noqa: E501
        :type: ThermalCameraSettingsChild
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThermalCameraResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThermalCameraResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
