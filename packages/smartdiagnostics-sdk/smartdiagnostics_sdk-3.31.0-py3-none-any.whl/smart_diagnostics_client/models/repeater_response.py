# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepeaterResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'serial_number': 'str',
        'radio_mac_address': 'str',
        'last_status_update': 'datetime',
        'active': 'bool',
        'software_version': 'str',
        'online_node_count': 'int',
        'location': 'LocationChild',
        'corporation': 'CorporationChild',
        'base_station': 'BaseStationChild',
        'is_online': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'serial_number': 'SerialNumber',
        'radio_mac_address': 'RadioMacAddress',
        'last_status_update': 'LastStatusUpdate',
        'active': 'Active',
        'software_version': 'SoftwareVersion',
        'online_node_count': 'OnlineNodeCount',
        'location': 'Location',
        'corporation': 'Corporation',
        'base_station': 'BaseStation',
        'is_online': 'IsOnline'
    }

    def __init__(self, id=None, name=None, serial_number=None, radio_mac_address=None, last_status_update=None, active=None, software_version=None, online_node_count=None, location=None, corporation=None, base_station=None, is_online=None):  # noqa: E501
        """RepeaterResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._serial_number = None
        self._radio_mac_address = None
        self._last_status_update = None
        self._active = None
        self._software_version = None
        self._online_node_count = None
        self._location = None
        self._corporation = None
        self._base_station = None
        self._is_online = None
        self.discriminator = None
        self.id = id
        if name is not None:
            self.name = name
        self.serial_number = serial_number
        if radio_mac_address is not None:
            self.radio_mac_address = radio_mac_address
        if last_status_update is not None:
            self.last_status_update = last_status_update
        self.active = active
        if software_version is not None:
            self.software_version = software_version
        self.online_node_count = online_node_count
        if location is not None:
            self.location = location
        if corporation is not None:
            self.corporation = corporation
        if base_station is not None:
            self.base_station = base_station
        if is_online is not None:
            self.is_online = is_online

    @property
    def id(self):
        """Gets the id of this RepeaterResponse.  # noqa: E501


        :return: The id of this RepeaterResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepeaterResponse.


        :param id: The id of this RepeaterResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this RepeaterResponse.  # noqa: E501


        :return: The name of this RepeaterResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepeaterResponse.


        :param name: The name of this RepeaterResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def serial_number(self):
        """Gets the serial_number of this RepeaterResponse.  # noqa: E501


        :return: The serial_number of this RepeaterResponse.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this RepeaterResponse.


        :param serial_number: The serial_number of this RepeaterResponse.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def radio_mac_address(self):
        """Gets the radio_mac_address of this RepeaterResponse.  # noqa: E501


        :return: The radio_mac_address of this RepeaterResponse.  # noqa: E501
        :rtype: str
        """
        return self._radio_mac_address

    @radio_mac_address.setter
    def radio_mac_address(self, radio_mac_address):
        """Sets the radio_mac_address of this RepeaterResponse.


        :param radio_mac_address: The radio_mac_address of this RepeaterResponse.  # noqa: E501
        :type: str
        """

        self._radio_mac_address = radio_mac_address

    @property
    def last_status_update(self):
        """Gets the last_status_update of this RepeaterResponse.  # noqa: E501


        :return: The last_status_update of this RepeaterResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_status_update

    @last_status_update.setter
    def last_status_update(self, last_status_update):
        """Sets the last_status_update of this RepeaterResponse.


        :param last_status_update: The last_status_update of this RepeaterResponse.  # noqa: E501
        :type: datetime
        """

        self._last_status_update = last_status_update

    @property
    def active(self):
        """Gets the active of this RepeaterResponse.  # noqa: E501


        :return: The active of this RepeaterResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this RepeaterResponse.


        :param active: The active of this RepeaterResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def software_version(self):
        """Gets the software_version of this RepeaterResponse.  # noqa: E501


        :return: The software_version of this RepeaterResponse.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this RepeaterResponse.


        :param software_version: The software_version of this RepeaterResponse.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def online_node_count(self):
        """Gets the online_node_count of this RepeaterResponse.  # noqa: E501


        :return: The online_node_count of this RepeaterResponse.  # noqa: E501
        :rtype: int
        """
        return self._online_node_count

    @online_node_count.setter
    def online_node_count(self, online_node_count):
        """Sets the online_node_count of this RepeaterResponse.


        :param online_node_count: The online_node_count of this RepeaterResponse.  # noqa: E501
        :type: int
        """
        if online_node_count is None:
            raise ValueError("Invalid value for `online_node_count`, must not be `None`")  # noqa: E501

        self._online_node_count = online_node_count

    @property
    def location(self):
        """Gets the location of this RepeaterResponse.  # noqa: E501


        :return: The location of this RepeaterResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this RepeaterResponse.


        :param location: The location of this RepeaterResponse.  # noqa: E501
        :type: LocationChild
        """

        self._location = location

    @property
    def corporation(self):
        """Gets the corporation of this RepeaterResponse.  # noqa: E501


        :return: The corporation of this RepeaterResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this RepeaterResponse.


        :param corporation: The corporation of this RepeaterResponse.  # noqa: E501
        :type: CorporationChild
        """

        self._corporation = corporation

    @property
    def base_station(self):
        """Gets the base_station of this RepeaterResponse.  # noqa: E501


        :return: The base_station of this RepeaterResponse.  # noqa: E501
        :rtype: BaseStationChild
        """
        return self._base_station

    @base_station.setter
    def base_station(self, base_station):
        """Sets the base_station of this RepeaterResponse.


        :param base_station: The base_station of this RepeaterResponse.  # noqa: E501
        :type: BaseStationChild
        """

        self._base_station = base_station

    @property
    def is_online(self):
        """Gets the is_online of this RepeaterResponse.  # noqa: E501


        :return: The is_online of this RepeaterResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this RepeaterResponse.


        :param is_online: The is_online of this RepeaterResponse.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepeaterResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepeaterResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
