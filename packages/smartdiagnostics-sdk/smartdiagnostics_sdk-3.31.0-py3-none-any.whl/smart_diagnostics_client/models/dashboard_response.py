# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DashboardResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'is_sentry_managed': 'bool',
        'is_visible_to_customers': 'bool',
        'created': 'datetime',
        'updated': 'datetime',
        'created_by': 'UserChild',
        'updated_by': 'UserChild',
        'dashboard_type': 'DashboardTypeChild',
        'corporation': 'PrimaryCorporationChild',
        'location': 'LocationChild',
        'dashboard_widgets': 'list[DashboardWidgetChild]',
        'power_bi_report': 'PowerBiReportChild'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'is_sentry_managed': 'IsSentryManaged',
        'is_visible_to_customers': 'IsVisibleToCustomers',
        'created': 'Created',
        'updated': 'Updated',
        'created_by': 'CreatedBy',
        'updated_by': 'UpdatedBy',
        'dashboard_type': 'DashboardType',
        'corporation': 'Corporation',
        'location': 'Location',
        'dashboard_widgets': 'DashboardWidgets',
        'power_bi_report': 'PowerBiReport'
    }

    def __init__(self, id=None, name=None, description=None, is_sentry_managed=None, is_visible_to_customers=None, created=None, updated=None, created_by=None, updated_by=None, dashboard_type=None, corporation=None, location=None, dashboard_widgets=None, power_bi_report=None):  # noqa: E501
        """DashboardResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._is_sentry_managed = None
        self._is_visible_to_customers = None
        self._created = None
        self._updated = None
        self._created_by = None
        self._updated_by = None
        self._dashboard_type = None
        self._corporation = None
        self._location = None
        self._dashboard_widgets = None
        self._power_bi_report = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.is_sentry_managed = is_sentry_managed
        self.is_visible_to_customers = is_visible_to_customers
        self.created = created
        self.updated = updated
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by
        self.dashboard_type = dashboard_type
        if corporation is not None:
            self.corporation = corporation
        if location is not None:
            self.location = location
        self.dashboard_widgets = dashboard_widgets
        if power_bi_report is not None:
            self.power_bi_report = power_bi_report

    @property
    def id(self):
        """Gets the id of this DashboardResponse.  # noqa: E501


        :return: The id of this DashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardResponse.


        :param id: The id of this DashboardResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DashboardResponse.  # noqa: E501


        :return: The name of this DashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DashboardResponse.


        :param name: The name of this DashboardResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this DashboardResponse.  # noqa: E501


        :return: The description of this DashboardResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DashboardResponse.


        :param description: The description of this DashboardResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_sentry_managed(self):
        """Gets the is_sentry_managed of this DashboardResponse.  # noqa: E501


        :return: The is_sentry_managed of this DashboardResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_sentry_managed

    @is_sentry_managed.setter
    def is_sentry_managed(self, is_sentry_managed):
        """Sets the is_sentry_managed of this DashboardResponse.


        :param is_sentry_managed: The is_sentry_managed of this DashboardResponse.  # noqa: E501
        :type: bool
        """
        if is_sentry_managed is None:
            raise ValueError("Invalid value for `is_sentry_managed`, must not be `None`")  # noqa: E501

        self._is_sentry_managed = is_sentry_managed

    @property
    def is_visible_to_customers(self):
        """Gets the is_visible_to_customers of this DashboardResponse.  # noqa: E501


        :return: The is_visible_to_customers of this DashboardResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible_to_customers

    @is_visible_to_customers.setter
    def is_visible_to_customers(self, is_visible_to_customers):
        """Sets the is_visible_to_customers of this DashboardResponse.


        :param is_visible_to_customers: The is_visible_to_customers of this DashboardResponse.  # noqa: E501
        :type: bool
        """
        if is_visible_to_customers is None:
            raise ValueError("Invalid value for `is_visible_to_customers`, must not be `None`")  # noqa: E501

        self._is_visible_to_customers = is_visible_to_customers

    @property
    def created(self):
        """Gets the created of this DashboardResponse.  # noqa: E501


        :return: The created of this DashboardResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DashboardResponse.


        :param created: The created of this DashboardResponse.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this DashboardResponse.  # noqa: E501


        :return: The updated of this DashboardResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DashboardResponse.


        :param updated: The updated of this DashboardResponse.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def created_by(self):
        """Gets the created_by of this DashboardResponse.  # noqa: E501


        :return: The created_by of this DashboardResponse.  # noqa: E501
        :rtype: UserChild
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DashboardResponse.


        :param created_by: The created_by of this DashboardResponse.  # noqa: E501
        :type: UserChild
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this DashboardResponse.  # noqa: E501


        :return: The updated_by of this DashboardResponse.  # noqa: E501
        :rtype: UserChild
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this DashboardResponse.


        :param updated_by: The updated_by of this DashboardResponse.  # noqa: E501
        :type: UserChild
        """

        self._updated_by = updated_by

    @property
    def dashboard_type(self):
        """Gets the dashboard_type of this DashboardResponse.  # noqa: E501


        :return: The dashboard_type of this DashboardResponse.  # noqa: E501
        :rtype: DashboardTypeChild
        """
        return self._dashboard_type

    @dashboard_type.setter
    def dashboard_type(self, dashboard_type):
        """Sets the dashboard_type of this DashboardResponse.


        :param dashboard_type: The dashboard_type of this DashboardResponse.  # noqa: E501
        :type: DashboardTypeChild
        """
        if dashboard_type is None:
            raise ValueError("Invalid value for `dashboard_type`, must not be `None`")  # noqa: E501

        self._dashboard_type = dashboard_type

    @property
    def corporation(self):
        """Gets the corporation of this DashboardResponse.  # noqa: E501


        :return: The corporation of this DashboardResponse.  # noqa: E501
        :rtype: PrimaryCorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this DashboardResponse.


        :param corporation: The corporation of this DashboardResponse.  # noqa: E501
        :type: PrimaryCorporationChild
        """

        self._corporation = corporation

    @property
    def location(self):
        """Gets the location of this DashboardResponse.  # noqa: E501


        :return: The location of this DashboardResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DashboardResponse.


        :param location: The location of this DashboardResponse.  # noqa: E501
        :type: LocationChild
        """

        self._location = location

    @property
    def dashboard_widgets(self):
        """Gets the dashboard_widgets of this DashboardResponse.  # noqa: E501


        :return: The dashboard_widgets of this DashboardResponse.  # noqa: E501
        :rtype: list[DashboardWidgetChild]
        """
        return self._dashboard_widgets

    @dashboard_widgets.setter
    def dashboard_widgets(self, dashboard_widgets):
        """Sets the dashboard_widgets of this DashboardResponse.


        :param dashboard_widgets: The dashboard_widgets of this DashboardResponse.  # noqa: E501
        :type: list[DashboardWidgetChild]
        """
        if dashboard_widgets is None:
            raise ValueError("Invalid value for `dashboard_widgets`, must not be `None`")  # noqa: E501

        self._dashboard_widgets = dashboard_widgets

    @property
    def power_bi_report(self):
        """Gets the power_bi_report of this DashboardResponse.  # noqa: E501


        :return: The power_bi_report of this DashboardResponse.  # noqa: E501
        :rtype: PowerBiReportChild
        """
        return self._power_bi_report

    @power_bi_report.setter
    def power_bi_report(self, power_bi_report):
        """Sets the power_bi_report of this DashboardResponse.


        :param power_bi_report: The power_bi_report of this DashboardResponse.  # noqa: E501
        :type: PowerBiReportChild
        """

        self._power_bi_report = power_bi_report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
