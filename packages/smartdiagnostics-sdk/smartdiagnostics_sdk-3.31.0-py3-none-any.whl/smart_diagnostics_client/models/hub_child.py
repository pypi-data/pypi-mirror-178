# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HubChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hub_serial_number': 'str',
        'hub_name': 'str',
        'hub_port_number': 'int',
        'hub_id': 'int'
    }

    attribute_map = {
        'hub_serial_number': 'HubSerialNumber',
        'hub_name': 'HubName',
        'hub_port_number': 'HubPortNumber',
        'hub_id': 'HubId'
    }

    def __init__(self, hub_serial_number=None, hub_name=None, hub_port_number=None, hub_id=None):  # noqa: E501
        """HubChild - a model defined in Swagger"""  # noqa: E501
        self._hub_serial_number = None
        self._hub_name = None
        self._hub_port_number = None
        self._hub_id = None
        self.discriminator = None
        self.hub_serial_number = hub_serial_number
        if hub_name is not None:
            self.hub_name = hub_name
        self.hub_port_number = hub_port_number
        self.hub_id = hub_id

    @property
    def hub_serial_number(self):
        """Gets the hub_serial_number of this HubChild.  # noqa: E501


        :return: The hub_serial_number of this HubChild.  # noqa: E501
        :rtype: str
        """
        return self._hub_serial_number

    @hub_serial_number.setter
    def hub_serial_number(self, hub_serial_number):
        """Sets the hub_serial_number of this HubChild.


        :param hub_serial_number: The hub_serial_number of this HubChild.  # noqa: E501
        :type: str
        """
        if hub_serial_number is None:
            raise ValueError("Invalid value for `hub_serial_number`, must not be `None`")  # noqa: E501

        self._hub_serial_number = hub_serial_number

    @property
    def hub_name(self):
        """Gets the hub_name of this HubChild.  # noqa: E501


        :return: The hub_name of this HubChild.  # noqa: E501
        :rtype: str
        """
        return self._hub_name

    @hub_name.setter
    def hub_name(self, hub_name):
        """Sets the hub_name of this HubChild.


        :param hub_name: The hub_name of this HubChild.  # noqa: E501
        :type: str
        """

        self._hub_name = hub_name

    @property
    def hub_port_number(self):
        """Gets the hub_port_number of this HubChild.  # noqa: E501


        :return: The hub_port_number of this HubChild.  # noqa: E501
        :rtype: int
        """
        return self._hub_port_number

    @hub_port_number.setter
    def hub_port_number(self, hub_port_number):
        """Sets the hub_port_number of this HubChild.


        :param hub_port_number: The hub_port_number of this HubChild.  # noqa: E501
        :type: int
        """
        if hub_port_number is None:
            raise ValueError("Invalid value for `hub_port_number`, must not be `None`")  # noqa: E501

        self._hub_port_number = hub_port_number

    @property
    def hub_id(self):
        """Gets the hub_id of this HubChild.  # noqa: E501


        :return: The hub_id of this HubChild.  # noqa: E501
        :rtype: int
        """
        return self._hub_id

    @hub_id.setter
    def hub_id(self, hub_id):
        """Sets the hub_id of this HubChild.


        :param hub_id: The hub_id of this HubChild.  # noqa: E501
        :type: int
        """
        if hub_id is None:
            raise ValueError("Invalid value for `hub_id`, must not be `None`")  # noqa: E501

        self._hub_id = hub_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HubChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HubChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
