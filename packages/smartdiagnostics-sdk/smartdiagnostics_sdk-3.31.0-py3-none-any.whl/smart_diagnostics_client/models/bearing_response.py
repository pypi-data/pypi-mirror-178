# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BearingResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'manufacturer': 'str',
        'roller_count': 'int',
        'ftf': 'float',
        'bsf': 'float',
        'bpfo': 'float',
        'bpfi': 'float'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'manufacturer': 'Manufacturer',
        'roller_count': 'RollerCount',
        'ftf': 'Ftf',
        'bsf': 'Bsf',
        'bpfo': 'Bpfo',
        'bpfi': 'Bpfi'
    }

    def __init__(self, id=None, name=None, manufacturer=None, roller_count=None, ftf=None, bsf=None, bpfo=None, bpfi=None):  # noqa: E501
        """BearingResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._manufacturer = None
        self._roller_count = None
        self._ftf = None
        self._bsf = None
        self._bpfo = None
        self._bpfi = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.manufacturer = manufacturer
        self.roller_count = roller_count
        self.ftf = ftf
        if bsf is not None:
            self.bsf = bsf
        self.bpfo = bpfo
        self.bpfi = bpfi

    @property
    def id(self):
        """Gets the id of this BearingResponse.  # noqa: E501


        :return: The id of this BearingResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BearingResponse.


        :param id: The id of this BearingResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this BearingResponse.  # noqa: E501


        :return: The name of this BearingResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BearingResponse.


        :param name: The name of this BearingResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this BearingResponse.  # noqa: E501


        :return: The manufacturer of this BearingResponse.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this BearingResponse.


        :param manufacturer: The manufacturer of this BearingResponse.  # noqa: E501
        :type: str
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")  # noqa: E501

        self._manufacturer = manufacturer

    @property
    def roller_count(self):
        """Gets the roller_count of this BearingResponse.  # noqa: E501


        :return: The roller_count of this BearingResponse.  # noqa: E501
        :rtype: int
        """
        return self._roller_count

    @roller_count.setter
    def roller_count(self, roller_count):
        """Sets the roller_count of this BearingResponse.


        :param roller_count: The roller_count of this BearingResponse.  # noqa: E501
        :type: int
        """
        if roller_count is None:
            raise ValueError("Invalid value for `roller_count`, must not be `None`")  # noqa: E501

        self._roller_count = roller_count

    @property
    def ftf(self):
        """Gets the ftf of this BearingResponse.  # noqa: E501


        :return: The ftf of this BearingResponse.  # noqa: E501
        :rtype: float
        """
        return self._ftf

    @ftf.setter
    def ftf(self, ftf):
        """Sets the ftf of this BearingResponse.


        :param ftf: The ftf of this BearingResponse.  # noqa: E501
        :type: float
        """
        if ftf is None:
            raise ValueError("Invalid value for `ftf`, must not be `None`")  # noqa: E501

        self._ftf = ftf

    @property
    def bsf(self):
        """Gets the bsf of this BearingResponse.  # noqa: E501


        :return: The bsf of this BearingResponse.  # noqa: E501
        :rtype: float
        """
        return self._bsf

    @bsf.setter
    def bsf(self, bsf):
        """Sets the bsf of this BearingResponse.


        :param bsf: The bsf of this BearingResponse.  # noqa: E501
        :type: float
        """

        self._bsf = bsf

    @property
    def bpfo(self):
        """Gets the bpfo of this BearingResponse.  # noqa: E501


        :return: The bpfo of this BearingResponse.  # noqa: E501
        :rtype: float
        """
        return self._bpfo

    @bpfo.setter
    def bpfo(self, bpfo):
        """Sets the bpfo of this BearingResponse.


        :param bpfo: The bpfo of this BearingResponse.  # noqa: E501
        :type: float
        """
        if bpfo is None:
            raise ValueError("Invalid value for `bpfo`, must not be `None`")  # noqa: E501

        self._bpfo = bpfo

    @property
    def bpfi(self):
        """Gets the bpfi of this BearingResponse.  # noqa: E501


        :return: The bpfi of this BearingResponse.  # noqa: E501
        :rtype: float
        """
        return self._bpfi

    @bpfi.setter
    def bpfi(self, bpfi):
        """Sets the bpfi of this BearingResponse.


        :param bpfi: The bpfi of this BearingResponse.  # noqa: E501
        :type: float
        """
        if bpfi is None:
            raise ValueError("Invalid value for `bpfi`, must not be `None`")  # noqa: E501

        self._bpfi = bpfi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BearingResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BearingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
