# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThermalCameraCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'serial_number': 'int',
        'location_id': 'str',
        'settings': 'ThermalCameraSettingsCreateRequest'
    }

    attribute_map = {
        'serial_number': 'SerialNumber',
        'location_id': 'LocationId',
        'settings': 'Settings'
    }

    def __init__(self, serial_number=None, location_id=None, settings=None):  # noqa: E501
        """ThermalCameraCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._serial_number = None
        self._location_id = None
        self._settings = None
        self.discriminator = None
        self.serial_number = serial_number
        self.location_id = location_id
        self.settings = settings

    @property
    def serial_number(self):
        """Gets the serial_number of this ThermalCameraCreateRequest.  # noqa: E501

        Unique serial number of the camera.  # noqa: E501

        :return: The serial_number of this ThermalCameraCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ThermalCameraCreateRequest.

        Unique serial number of the camera.  # noqa: E501

        :param serial_number: The serial_number of this ThermalCameraCreateRequest.  # noqa: E501
        :type: int
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def location_id(self):
        """Gets the location_id of this ThermalCameraCreateRequest.  # noqa: E501

        The Location/Account ID  # noqa: E501

        :return: The location_id of this ThermalCameraCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ThermalCameraCreateRequest.

        The Location/Account ID  # noqa: E501

        :param location_id: The location_id of this ThermalCameraCreateRequest.  # noqa: E501
        :type: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def settings(self):
        """Gets the settings of this ThermalCameraCreateRequest.  # noqa: E501


        :return: The settings of this ThermalCameraCreateRequest.  # noqa: E501
        :rtype: ThermalCameraSettingsCreateRequest
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this ThermalCameraCreateRequest.


        :param settings: The settings of this ThermalCameraCreateRequest.  # noqa: E501
        :type: ThermalCameraSettingsCreateRequest
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThermalCameraCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThermalCameraCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
