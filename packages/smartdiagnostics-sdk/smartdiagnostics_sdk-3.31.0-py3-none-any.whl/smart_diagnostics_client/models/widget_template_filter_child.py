# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WidgetTemplateFilterChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter_data_field_code': 'str',
        'filter_data_field_name': 'str',
        'filter_operator': 'str',
        'filter_value': 'str'
    }

    attribute_map = {
        'filter_data_field_code': 'FilterDataFieldCode',
        'filter_data_field_name': 'FilterDataFieldName',
        'filter_operator': 'FilterOperator',
        'filter_value': 'FilterValue'
    }

    def __init__(self, filter_data_field_code=None, filter_data_field_name=None, filter_operator=None, filter_value=None):  # noqa: E501
        """WidgetTemplateFilterChild - a model defined in Swagger"""  # noqa: E501
        self._filter_data_field_code = None
        self._filter_data_field_name = None
        self._filter_operator = None
        self._filter_value = None
        self.discriminator = None
        self.filter_data_field_code = filter_data_field_code
        self.filter_data_field_name = filter_data_field_name
        self.filter_operator = filter_operator
        self.filter_value = filter_value

    @property
    def filter_data_field_code(self):
        """Gets the filter_data_field_code of this WidgetTemplateFilterChild.  # noqa: E501


        :return: The filter_data_field_code of this WidgetTemplateFilterChild.  # noqa: E501
        :rtype: str
        """
        return self._filter_data_field_code

    @filter_data_field_code.setter
    def filter_data_field_code(self, filter_data_field_code):
        """Sets the filter_data_field_code of this WidgetTemplateFilterChild.


        :param filter_data_field_code: The filter_data_field_code of this WidgetTemplateFilterChild.  # noqa: E501
        :type: str
        """
        if filter_data_field_code is None:
            raise ValueError("Invalid value for `filter_data_field_code`, must not be `None`")  # noqa: E501

        self._filter_data_field_code = filter_data_field_code

    @property
    def filter_data_field_name(self):
        """Gets the filter_data_field_name of this WidgetTemplateFilterChild.  # noqa: E501


        :return: The filter_data_field_name of this WidgetTemplateFilterChild.  # noqa: E501
        :rtype: str
        """
        return self._filter_data_field_name

    @filter_data_field_name.setter
    def filter_data_field_name(self, filter_data_field_name):
        """Sets the filter_data_field_name of this WidgetTemplateFilterChild.


        :param filter_data_field_name: The filter_data_field_name of this WidgetTemplateFilterChild.  # noqa: E501
        :type: str
        """
        if filter_data_field_name is None:
            raise ValueError("Invalid value for `filter_data_field_name`, must not be `None`")  # noqa: E501

        self._filter_data_field_name = filter_data_field_name

    @property
    def filter_operator(self):
        """Gets the filter_operator of this WidgetTemplateFilterChild.  # noqa: E501


        :return: The filter_operator of this WidgetTemplateFilterChild.  # noqa: E501
        :rtype: str
        """
        return self._filter_operator

    @filter_operator.setter
    def filter_operator(self, filter_operator):
        """Sets the filter_operator of this WidgetTemplateFilterChild.


        :param filter_operator: The filter_operator of this WidgetTemplateFilterChild.  # noqa: E501
        :type: str
        """
        if filter_operator is None:
            raise ValueError("Invalid value for `filter_operator`, must not be `None`")  # noqa: E501

        self._filter_operator = filter_operator

    @property
    def filter_value(self):
        """Gets the filter_value of this WidgetTemplateFilterChild.  # noqa: E501


        :return: The filter_value of this WidgetTemplateFilterChild.  # noqa: E501
        :rtype: str
        """
        return self._filter_value

    @filter_value.setter
    def filter_value(self, filter_value):
        """Sets the filter_value of this WidgetTemplateFilterChild.


        :param filter_value: The filter_value of this WidgetTemplateFilterChild.  # noqa: E501
        :type: str
        """
        if filter_value is None:
            raise ValueError("Invalid value for `filter_value`, must not be `None`")  # noqa: E501

        self._filter_value = filter_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WidgetTemplateFilterChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WidgetTemplateFilterChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
