# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'abbreviation': 'str',
        'active': 'bool',
        'created': 'datetime',
        'api_key': 'str',
        'site_ids': 'list[str]',
        'settings': 'LocationSettingsChild',
        'location_permissions': 'LocationPermissionsResponse',
        'corporation': 'PrimaryCorporationChild',
        'systems': 'list[SystemChild]',
        'net_suite_id': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'abbreviation': 'Abbreviation',
        'active': 'Active',
        'created': 'Created',
        'api_key': 'ApiKey',
        'site_ids': 'SiteIds',
        'settings': 'Settings',
        'location_permissions': 'LocationPermissions',
        'corporation': 'Corporation',
        'systems': 'Systems',
        'net_suite_id': 'NetSuiteId'
    }

    def __init__(self, id=None, name=None, abbreviation=None, active=None, created=None, api_key=None, site_ids=None, settings=None, location_permissions=None, corporation=None, systems=None, net_suite_id=None):  # noqa: E501
        """LocationResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._abbreviation = None
        self._active = None
        self._created = None
        self._api_key = None
        self._site_ids = None
        self._settings = None
        self._location_permissions = None
        self._corporation = None
        self._systems = None
        self._net_suite_id = None
        self.discriminator = None
        self.id = id
        self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        self.active = active
        self.created = created
        if api_key is not None:
            self.api_key = api_key
        self.site_ids = site_ids
        self.settings = settings
        self.location_permissions = location_permissions
        self.corporation = corporation
        self.systems = systems
        if net_suite_id is not None:
            self.net_suite_id = net_suite_id

    @property
    def id(self):
        """Gets the id of this LocationResponse.  # noqa: E501

        Id of the location  # noqa: E501

        :return: The id of this LocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LocationResponse.

        Id of the location  # noqa: E501

        :param id: The id of this LocationResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this LocationResponse.  # noqa: E501

        Location's name  # noqa: E501

        :return: The name of this LocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationResponse.

        Location's name  # noqa: E501

        :param name: The name of this LocationResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this LocationResponse.  # noqa: E501

        Location's abbreviation  # noqa: E501

        :return: The abbreviation of this LocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this LocationResponse.

        Location's abbreviation  # noqa: E501

        :param abbreviation: The abbreviation of this LocationResponse.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def active(self):
        """Gets the active of this LocationResponse.  # noqa: E501

        If the location is active  # noqa: E501

        :return: The active of this LocationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this LocationResponse.

        If the location is active  # noqa: E501

        :param active: The active of this LocationResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def created(self):
        """Gets the created of this LocationResponse.  # noqa: E501

        When the location was created  # noqa: E501

        :return: The created of this LocationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this LocationResponse.

        When the location was created  # noqa: E501

        :param created: The created of this LocationResponse.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def api_key(self):
        """Gets the api_key of this LocationResponse.  # noqa: E501

        The location's API key  # noqa: E501

        :return: The api_key of this LocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this LocationResponse.

        The location's API key  # noqa: E501

        :param api_key: The api_key of this LocationResponse.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def site_ids(self):
        """Gets the site_ids of this LocationResponse.  # noqa: E501

        The location's siteIds  # noqa: E501

        :return: The site_ids of this LocationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._site_ids

    @site_ids.setter
    def site_ids(self, site_ids):
        """Sets the site_ids of this LocationResponse.

        The location's siteIds  # noqa: E501

        :param site_ids: The site_ids of this LocationResponse.  # noqa: E501
        :type: list[str]
        """
        if site_ids is None:
            raise ValueError("Invalid value for `site_ids`, must not be `None`")  # noqa: E501

        self._site_ids = site_ids

    @property
    def settings(self):
        """Gets the settings of this LocationResponse.  # noqa: E501


        :return: The settings of this LocationResponse.  # noqa: E501
        :rtype: LocationSettingsChild
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this LocationResponse.


        :param settings: The settings of this LocationResponse.  # noqa: E501
        :type: LocationSettingsChild
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings

    @property
    def location_permissions(self):
        """Gets the location_permissions of this LocationResponse.  # noqa: E501


        :return: The location_permissions of this LocationResponse.  # noqa: E501
        :rtype: LocationPermissionsResponse
        """
        return self._location_permissions

    @location_permissions.setter
    def location_permissions(self, location_permissions):
        """Sets the location_permissions of this LocationResponse.


        :param location_permissions: The location_permissions of this LocationResponse.  # noqa: E501
        :type: LocationPermissionsResponse
        """
        if location_permissions is None:
            raise ValueError("Invalid value for `location_permissions`, must not be `None`")  # noqa: E501

        self._location_permissions = location_permissions

    @property
    def corporation(self):
        """Gets the corporation of this LocationResponse.  # noqa: E501


        :return: The corporation of this LocationResponse.  # noqa: E501
        :rtype: PrimaryCorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this LocationResponse.


        :param corporation: The corporation of this LocationResponse.  # noqa: E501
        :type: PrimaryCorporationChild
        """
        if corporation is None:
            raise ValueError("Invalid value for `corporation`, must not be `None`")  # noqa: E501

        self._corporation = corporation

    @property
    def systems(self):
        """Gets the systems of this LocationResponse.  # noqa: E501

        The systems in the location  # noqa: E501

        :return: The systems of this LocationResponse.  # noqa: E501
        :rtype: list[SystemChild]
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """Sets the systems of this LocationResponse.

        The systems in the location  # noqa: E501

        :param systems: The systems of this LocationResponse.  # noqa: E501
        :type: list[SystemChild]
        """
        if systems is None:
            raise ValueError("Invalid value for `systems`, must not be `None`")  # noqa: E501

        self._systems = systems

    @property
    def net_suite_id(self):
        """Gets the net_suite_id of this LocationResponse.  # noqa: E501


        :return: The net_suite_id of this LocationResponse.  # noqa: E501
        :rtype: str
        """
        return self._net_suite_id

    @net_suite_id.setter
    def net_suite_id(self, net_suite_id):
        """Sets the net_suite_id of this LocationResponse.


        :param net_suite_id: The net_suite_id of this LocationResponse.  # noqa: E501
        :type: str
        """

        self._net_suite_id = net_suite_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
