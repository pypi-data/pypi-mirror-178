# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LayoutChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layout_row': 'int',
        'layout_column': 'int',
        'layout_height': 'int',
        'layout_width': 'int'
    }

    attribute_map = {
        'layout_row': 'LayoutRow',
        'layout_column': 'LayoutColumn',
        'layout_height': 'LayoutHeight',
        'layout_width': 'LayoutWidth'
    }

    def __init__(self, layout_row=None, layout_column=None, layout_height=None, layout_width=None):  # noqa: E501
        """LayoutChild - a model defined in Swagger"""  # noqa: E501
        self._layout_row = None
        self._layout_column = None
        self._layout_height = None
        self._layout_width = None
        self.discriminator = None
        self.layout_row = layout_row
        self.layout_column = layout_column
        self.layout_height = layout_height
        self.layout_width = layout_width

    @property
    def layout_row(self):
        """Gets the layout_row of this LayoutChild.  # noqa: E501


        :return: The layout_row of this LayoutChild.  # noqa: E501
        :rtype: int
        """
        return self._layout_row

    @layout_row.setter
    def layout_row(self, layout_row):
        """Sets the layout_row of this LayoutChild.


        :param layout_row: The layout_row of this LayoutChild.  # noqa: E501
        :type: int
        """
        if layout_row is None:
            raise ValueError("Invalid value for `layout_row`, must not be `None`")  # noqa: E501

        self._layout_row = layout_row

    @property
    def layout_column(self):
        """Gets the layout_column of this LayoutChild.  # noqa: E501


        :return: The layout_column of this LayoutChild.  # noqa: E501
        :rtype: int
        """
        return self._layout_column

    @layout_column.setter
    def layout_column(self, layout_column):
        """Sets the layout_column of this LayoutChild.


        :param layout_column: The layout_column of this LayoutChild.  # noqa: E501
        :type: int
        """
        if layout_column is None:
            raise ValueError("Invalid value for `layout_column`, must not be `None`")  # noqa: E501

        self._layout_column = layout_column

    @property
    def layout_height(self):
        """Gets the layout_height of this LayoutChild.  # noqa: E501


        :return: The layout_height of this LayoutChild.  # noqa: E501
        :rtype: int
        """
        return self._layout_height

    @layout_height.setter
    def layout_height(self, layout_height):
        """Sets the layout_height of this LayoutChild.


        :param layout_height: The layout_height of this LayoutChild.  # noqa: E501
        :type: int
        """
        if layout_height is None:
            raise ValueError("Invalid value for `layout_height`, must not be `None`")  # noqa: E501

        self._layout_height = layout_height

    @property
    def layout_width(self):
        """Gets the layout_width of this LayoutChild.  # noqa: E501


        :return: The layout_width of this LayoutChild.  # noqa: E501
        :rtype: int
        """
        return self._layout_width

    @layout_width.setter
    def layout_width(self, layout_width):
        """Sets the layout_width of this LayoutChild.


        :param layout_width: The layout_width of this LayoutChild.  # noqa: E501
        :type: int
        """
        if layout_width is None:
            raise ValueError("Invalid value for `layout_width`, must not be `None`")  # noqa: E501

        self._layout_width = layout_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LayoutChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LayoutChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
