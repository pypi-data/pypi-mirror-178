# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetRunningSpeedChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'running_speed_min': 'float',
        'running_speed_max': 'float',
        'running_speed_type': 'AssetRunningSpeedType',
        'running_speed_unit': 'str',
        'running_speed_reference_monitoring_point_id': 'str',
        'running_speed_sensor_role_type': 'SensorRoleTypeCodes',
        'running_speed_harmonic': 'float'
    }

    attribute_map = {
        'running_speed_min': 'RunningSpeedMin',
        'running_speed_max': 'RunningSpeedMax',
        'running_speed_type': 'RunningSpeedType',
        'running_speed_unit': 'RunningSpeedUnit',
        'running_speed_reference_monitoring_point_id': 'RunningSpeedReferenceMonitoringPointId',
        'running_speed_sensor_role_type': 'RunningSpeedSensorRoleType',
        'running_speed_harmonic': 'RunningSpeedHarmonic'
    }

    def __init__(self, running_speed_min=None, running_speed_max=None, running_speed_type=None, running_speed_unit=None, running_speed_reference_monitoring_point_id=None, running_speed_sensor_role_type=None, running_speed_harmonic=None):  # noqa: E501
        """AssetRunningSpeedChild - a model defined in Swagger"""  # noqa: E501
        self._running_speed_min = None
        self._running_speed_max = None
        self._running_speed_type = None
        self._running_speed_unit = None
        self._running_speed_reference_monitoring_point_id = None
        self._running_speed_sensor_role_type = None
        self._running_speed_harmonic = None
        self.discriminator = None
        if running_speed_min is not None:
            self.running_speed_min = running_speed_min
        if running_speed_max is not None:
            self.running_speed_max = running_speed_max
        self.running_speed_type = running_speed_type
        if running_speed_unit is not None:
            self.running_speed_unit = running_speed_unit
        if running_speed_reference_monitoring_point_id is not None:
            self.running_speed_reference_monitoring_point_id = running_speed_reference_monitoring_point_id
        if running_speed_sensor_role_type is not None:
            self.running_speed_sensor_role_type = running_speed_sensor_role_type
        if running_speed_harmonic is not None:
            self.running_speed_harmonic = running_speed_harmonic

    @property
    def running_speed_min(self):
        """Gets the running_speed_min of this AssetRunningSpeedChild.  # noqa: E501

        The minimum running speed in Hz  # noqa: E501

        :return: The running_speed_min of this AssetRunningSpeedChild.  # noqa: E501
        :rtype: float
        """
        return self._running_speed_min

    @running_speed_min.setter
    def running_speed_min(self, running_speed_min):
        """Sets the running_speed_min of this AssetRunningSpeedChild.

        The minimum running speed in Hz  # noqa: E501

        :param running_speed_min: The running_speed_min of this AssetRunningSpeedChild.  # noqa: E501
        :type: float
        """

        self._running_speed_min = running_speed_min

    @property
    def running_speed_max(self):
        """Gets the running_speed_max of this AssetRunningSpeedChild.  # noqa: E501

        The maximum running speed in Hz  # noqa: E501

        :return: The running_speed_max of this AssetRunningSpeedChild.  # noqa: E501
        :rtype: float
        """
        return self._running_speed_max

    @running_speed_max.setter
    def running_speed_max(self, running_speed_max):
        """Sets the running_speed_max of this AssetRunningSpeedChild.

        The maximum running speed in Hz  # noqa: E501

        :param running_speed_max: The running_speed_max of this AssetRunningSpeedChild.  # noqa: E501
        :type: float
        """

        self._running_speed_max = running_speed_max

    @property
    def running_speed_type(self):
        """Gets the running_speed_type of this AssetRunningSpeedChild.  # noqa: E501


        :return: The running_speed_type of this AssetRunningSpeedChild.  # noqa: E501
        :rtype: AssetRunningSpeedType
        """
        return self._running_speed_type

    @running_speed_type.setter
    def running_speed_type(self, running_speed_type):
        """Sets the running_speed_type of this AssetRunningSpeedChild.


        :param running_speed_type: The running_speed_type of this AssetRunningSpeedChild.  # noqa: E501
        :type: AssetRunningSpeedType
        """
        if running_speed_type is None:
            raise ValueError("Invalid value for `running_speed_type`, must not be `None`")  # noqa: E501

        self._running_speed_type = running_speed_type

    @property
    def running_speed_unit(self):
        """Gets the running_speed_unit of this AssetRunningSpeedChild.  # noqa: E501

        The running speed unit: \"CyclesperMin\" | \"Hertz\"  # noqa: E501

        :return: The running_speed_unit of this AssetRunningSpeedChild.  # noqa: E501
        :rtype: str
        """
        return self._running_speed_unit

    @running_speed_unit.setter
    def running_speed_unit(self, running_speed_unit):
        """Sets the running_speed_unit of this AssetRunningSpeedChild.

        The running speed unit: \"CyclesperMin\" | \"Hertz\"  # noqa: E501

        :param running_speed_unit: The running_speed_unit of this AssetRunningSpeedChild.  # noqa: E501
        :type: str
        """

        self._running_speed_unit = running_speed_unit

    @property
    def running_speed_reference_monitoring_point_id(self):
        """Gets the running_speed_reference_monitoring_point_id of this AssetRunningSpeedChild.  # noqa: E501

        The id of the reference monitoring point  # noqa: E501

        :return: The running_speed_reference_monitoring_point_id of this AssetRunningSpeedChild.  # noqa: E501
        :rtype: str
        """
        return self._running_speed_reference_monitoring_point_id

    @running_speed_reference_monitoring_point_id.setter
    def running_speed_reference_monitoring_point_id(self, running_speed_reference_monitoring_point_id):
        """Sets the running_speed_reference_monitoring_point_id of this AssetRunningSpeedChild.

        The id of the reference monitoring point  # noqa: E501

        :param running_speed_reference_monitoring_point_id: The running_speed_reference_monitoring_point_id of this AssetRunningSpeedChild.  # noqa: E501
        :type: str
        """

        self._running_speed_reference_monitoring_point_id = running_speed_reference_monitoring_point_id

    @property
    def running_speed_sensor_role_type(self):
        """Gets the running_speed_sensor_role_type of this AssetRunningSpeedChild.  # noqa: E501


        :return: The running_speed_sensor_role_type of this AssetRunningSpeedChild.  # noqa: E501
        :rtype: SensorRoleTypeCodes
        """
        return self._running_speed_sensor_role_type

    @running_speed_sensor_role_type.setter
    def running_speed_sensor_role_type(self, running_speed_sensor_role_type):
        """Sets the running_speed_sensor_role_type of this AssetRunningSpeedChild.


        :param running_speed_sensor_role_type: The running_speed_sensor_role_type of this AssetRunningSpeedChild.  # noqa: E501
        :type: SensorRoleTypeCodes
        """

        self._running_speed_sensor_role_type = running_speed_sensor_role_type

    @property
    def running_speed_harmonic(self):
        """Gets the running_speed_harmonic of this AssetRunningSpeedChild.  # noqa: E501

        The harmonic value in hz  # noqa: E501

        :return: The running_speed_harmonic of this AssetRunningSpeedChild.  # noqa: E501
        :rtype: float
        """
        return self._running_speed_harmonic

    @running_speed_harmonic.setter
    def running_speed_harmonic(self, running_speed_harmonic):
        """Sets the running_speed_harmonic of this AssetRunningSpeedChild.

        The harmonic value in hz  # noqa: E501

        :param running_speed_harmonic: The running_speed_harmonic of this AssetRunningSpeedChild.  # noqa: E501
        :type: float
        """

        self._running_speed_harmonic = running_speed_harmonic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetRunningSpeedChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetRunningSpeedChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
