# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityEventHierarchyGroupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'indicator_ids': 'list[str]',
        'group_ids': 'list[str]',
        'category_ids': 'list[int]',
        'category_flags': 'list[ActivityEventCategoryFlag]',
        'activity_line_enabled': 'bool',
        'location_id': 'str'
    }

    attribute_map = {
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'indicator_ids': 'IndicatorIds',
        'group_ids': 'GroupIds',
        'category_ids': 'CategoryIds',
        'category_flags': 'CategoryFlags',
        'activity_line_enabled': 'ActivityLineEnabled',
        'location_id': 'LocationId'
    }

    def __init__(self, start_date_time=None, end_date_time=None, indicator_ids=None, group_ids=None, category_ids=None, category_flags=None, activity_line_enabled=None, location_id=None):  # noqa: E501
        """ActivityEventHierarchyGroupRequest - a model defined in Swagger"""  # noqa: E501
        self._start_date_time = None
        self._end_date_time = None
        self._indicator_ids = None
        self._group_ids = None
        self._category_ids = None
        self._category_flags = None
        self._activity_line_enabled = None
        self._location_id = None
        self.discriminator = None
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        if indicator_ids is not None:
            self.indicator_ids = indicator_ids
        if group_ids is not None:
            self.group_ids = group_ids
        if category_ids is not None:
            self.category_ids = category_ids
        if category_flags is not None:
            self.category_flags = category_flags
        if activity_line_enabled is not None:
            self.activity_line_enabled = activity_line_enabled
        if location_id is not None:
            self.location_id = location_id

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ActivityEventHierarchyGroupRequest.  # noqa: E501


        :return: The start_date_time of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ActivityEventHierarchyGroupRequest.


        :param start_date_time: The start_date_time of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :type: datetime
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")  # noqa: E501

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ActivityEventHierarchyGroupRequest.  # noqa: E501


        :return: The end_date_time of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ActivityEventHierarchyGroupRequest.


        :param end_date_time: The end_date_time of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :type: datetime
        """
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")  # noqa: E501

        self._end_date_time = end_date_time

    @property
    def indicator_ids(self):
        """Gets the indicator_ids of this ActivityEventHierarchyGroupRequest.  # noqa: E501


        :return: The indicator_ids of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._indicator_ids

    @indicator_ids.setter
    def indicator_ids(self, indicator_ids):
        """Sets the indicator_ids of this ActivityEventHierarchyGroupRequest.


        :param indicator_ids: The indicator_ids of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :type: list[str]
        """

        self._indicator_ids = indicator_ids

    @property
    def group_ids(self):
        """Gets the group_ids of this ActivityEventHierarchyGroupRequest.  # noqa: E501


        :return: The group_ids of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this ActivityEventHierarchyGroupRequest.


        :param group_ids: The group_ids of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def category_ids(self):
        """Gets the category_ids of this ActivityEventHierarchyGroupRequest.  # noqa: E501


        :return: The category_ids of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this ActivityEventHierarchyGroupRequest.


        :param category_ids: The category_ids of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :type: list[int]
        """

        self._category_ids = category_ids

    @property
    def category_flags(self):
        """Gets the category_flags of this ActivityEventHierarchyGroupRequest.  # noqa: E501


        :return: The category_flags of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :rtype: list[ActivityEventCategoryFlag]
        """
        return self._category_flags

    @category_flags.setter
    def category_flags(self, category_flags):
        """Sets the category_flags of this ActivityEventHierarchyGroupRequest.


        :param category_flags: The category_flags of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :type: list[ActivityEventCategoryFlag]
        """

        self._category_flags = category_flags

    @property
    def activity_line_enabled(self):
        """Gets the activity_line_enabled of this ActivityEventHierarchyGroupRequest.  # noqa: E501


        :return: The activity_line_enabled of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :rtype: bool
        """
        return self._activity_line_enabled

    @activity_line_enabled.setter
    def activity_line_enabled(self, activity_line_enabled):
        """Sets the activity_line_enabled of this ActivityEventHierarchyGroupRequest.


        :param activity_line_enabled: The activity_line_enabled of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :type: bool
        """

        self._activity_line_enabled = activity_line_enabled

    @property
    def location_id(self):
        """Gets the location_id of this ActivityEventHierarchyGroupRequest.  # noqa: E501


        :return: The location_id of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ActivityEventHierarchyGroupRequest.


        :param location_id: The location_id of this ActivityEventHierarchyGroupRequest.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityEventHierarchyGroupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityEventHierarchyGroupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
