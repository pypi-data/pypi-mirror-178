# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelAssignmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'model': 'ModelAssignmentModelChild',
        'assigned_group_ids': 'list[str]',
        'properties': 'list[PropertyChild]',
        'indicators': 'list[ModelAssignmentIndicatorChild]',
        'created_date': 'datetime',
        'created_by': 'UserChild',
        'root_group': 'RootGroupChild',
        'analytics_group': 'GroupChild',
        'analytics_group_hierarchy': 'list[HierarchyChild]',
        'location': 'LocationChild',
        'corporation': 'CorporationChild'
    }

    attribute_map = {
        'id': 'Id',
        'model': 'Model',
        'assigned_group_ids': 'AssignedGroupIds',
        'properties': 'Properties',
        'indicators': 'Indicators',
        'created_date': 'CreatedDate',
        'created_by': 'CreatedBy',
        'root_group': 'RootGroup',
        'analytics_group': 'AnalyticsGroup',
        'analytics_group_hierarchy': 'AnalyticsGroupHierarchy',
        'location': 'Location',
        'corporation': 'Corporation'
    }

    def __init__(self, id=None, model=None, assigned_group_ids=None, properties=None, indicators=None, created_date=None, created_by=None, root_group=None, analytics_group=None, analytics_group_hierarchy=None, location=None, corporation=None):  # noqa: E501
        """ModelAssignmentResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._model = None
        self._assigned_group_ids = None
        self._properties = None
        self._indicators = None
        self._created_date = None
        self._created_by = None
        self._root_group = None
        self._analytics_group = None
        self._analytics_group_hierarchy = None
        self._location = None
        self._corporation = None
        self.discriminator = None
        self.id = id
        self.model = model
        self.assigned_group_ids = assigned_group_ids
        self.properties = properties
        self.indicators = indicators
        self.created_date = created_date
        self.created_by = created_by
        self.root_group = root_group
        self.analytics_group = analytics_group
        self.analytics_group_hierarchy = analytics_group_hierarchy
        self.location = location
        self.corporation = corporation

    @property
    def id(self):
        """Gets the id of this ModelAssignmentResponse.  # noqa: E501

        Id of the assignment  # noqa: E501

        :return: The id of this ModelAssignmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelAssignmentResponse.

        Id of the assignment  # noqa: E501

        :param id: The id of this ModelAssignmentResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def model(self):
        """Gets the model of this ModelAssignmentResponse.  # noqa: E501


        :return: The model of this ModelAssignmentResponse.  # noqa: E501
        :rtype: ModelAssignmentModelChild
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ModelAssignmentResponse.


        :param model: The model of this ModelAssignmentResponse.  # noqa: E501
        :type: ModelAssignmentModelChild
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def assigned_group_ids(self):
        """Gets the assigned_group_ids of this ModelAssignmentResponse.  # noqa: E501

        List of group ids that provide data to the model assignment  # noqa: E501

        :return: The assigned_group_ids of this ModelAssignmentResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_group_ids

    @assigned_group_ids.setter
    def assigned_group_ids(self, assigned_group_ids):
        """Sets the assigned_group_ids of this ModelAssignmentResponse.

        List of group ids that provide data to the model assignment  # noqa: E501

        :param assigned_group_ids: The assigned_group_ids of this ModelAssignmentResponse.  # noqa: E501
        :type: list[str]
        """
        if assigned_group_ids is None:
            raise ValueError("Invalid value for `assigned_group_ids`, must not be `None`")  # noqa: E501

        self._assigned_group_ids = assigned_group_ids

    @property
    def properties(self):
        """Gets the properties of this ModelAssignmentResponse.  # noqa: E501

        List of properties for the model assignment  # noqa: E501

        :return: The properties of this ModelAssignmentResponse.  # noqa: E501
        :rtype: list[PropertyChild]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ModelAssignmentResponse.

        List of properties for the model assignment  # noqa: E501

        :param properties: The properties of this ModelAssignmentResponse.  # noqa: E501
        :type: list[PropertyChild]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def indicators(self):
        """Gets the indicators of this ModelAssignmentResponse.  # noqa: E501

        List of indicators on the assignment  # noqa: E501

        :return: The indicators of this ModelAssignmentResponse.  # noqa: E501
        :rtype: list[ModelAssignmentIndicatorChild]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """Sets the indicators of this ModelAssignmentResponse.

        List of indicators on the assignment  # noqa: E501

        :param indicators: The indicators of this ModelAssignmentResponse.  # noqa: E501
        :type: list[ModelAssignmentIndicatorChild]
        """
        if indicators is None:
            raise ValueError("Invalid value for `indicators`, must not be `None`")  # noqa: E501

        self._indicators = indicators

    @property
    def created_date(self):
        """Gets the created_date of this ModelAssignmentResponse.  # noqa: E501

        Date model assignment was created  # noqa: E501

        :return: The created_date of this ModelAssignmentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ModelAssignmentResponse.

        Date model assignment was created  # noqa: E501

        :param created_date: The created_date of this ModelAssignmentResponse.  # noqa: E501
        :type: datetime
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def created_by(self):
        """Gets the created_by of this ModelAssignmentResponse.  # noqa: E501


        :return: The created_by of this ModelAssignmentResponse.  # noqa: E501
        :rtype: UserChild
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ModelAssignmentResponse.


        :param created_by: The created_by of this ModelAssignmentResponse.  # noqa: E501
        :type: UserChild
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def root_group(self):
        """Gets the root_group of this ModelAssignmentResponse.  # noqa: E501


        :return: The root_group of this ModelAssignmentResponse.  # noqa: E501
        :rtype: RootGroupChild
        """
        return self._root_group

    @root_group.setter
    def root_group(self, root_group):
        """Sets the root_group of this ModelAssignmentResponse.


        :param root_group: The root_group of this ModelAssignmentResponse.  # noqa: E501
        :type: RootGroupChild
        """
        if root_group is None:
            raise ValueError("Invalid value for `root_group`, must not be `None`")  # noqa: E501

        self._root_group = root_group

    @property
    def analytics_group(self):
        """Gets the analytics_group of this ModelAssignmentResponse.  # noqa: E501


        :return: The analytics_group of this ModelAssignmentResponse.  # noqa: E501
        :rtype: GroupChild
        """
        return self._analytics_group

    @analytics_group.setter
    def analytics_group(self, analytics_group):
        """Sets the analytics_group of this ModelAssignmentResponse.


        :param analytics_group: The analytics_group of this ModelAssignmentResponse.  # noqa: E501
        :type: GroupChild
        """
        if analytics_group is None:
            raise ValueError("Invalid value for `analytics_group`, must not be `None`")  # noqa: E501

        self._analytics_group = analytics_group

    @property
    def analytics_group_hierarchy(self):
        """Gets the analytics_group_hierarchy of this ModelAssignmentResponse.  # noqa: E501

        The hierarchy of AnalyticsGroup  # noqa: E501

        :return: The analytics_group_hierarchy of this ModelAssignmentResponse.  # noqa: E501
        :rtype: list[HierarchyChild]
        """
        return self._analytics_group_hierarchy

    @analytics_group_hierarchy.setter
    def analytics_group_hierarchy(self, analytics_group_hierarchy):
        """Sets the analytics_group_hierarchy of this ModelAssignmentResponse.

        The hierarchy of AnalyticsGroup  # noqa: E501

        :param analytics_group_hierarchy: The analytics_group_hierarchy of this ModelAssignmentResponse.  # noqa: E501
        :type: list[HierarchyChild]
        """
        if analytics_group_hierarchy is None:
            raise ValueError("Invalid value for `analytics_group_hierarchy`, must not be `None`")  # noqa: E501

        self._analytics_group_hierarchy = analytics_group_hierarchy

    @property
    def location(self):
        """Gets the location of this ModelAssignmentResponse.  # noqa: E501


        :return: The location of this ModelAssignmentResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ModelAssignmentResponse.


        :param location: The location of this ModelAssignmentResponse.  # noqa: E501
        :type: LocationChild
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def corporation(self):
        """Gets the corporation of this ModelAssignmentResponse.  # noqa: E501


        :return: The corporation of this ModelAssignmentResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this ModelAssignmentResponse.


        :param corporation: The corporation of this ModelAssignmentResponse.  # noqa: E501
        :type: CorporationChild
        """
        if corporation is None:
            raise ValueError("Invalid value for `corporation`, must not be `None`")  # noqa: E501

        self._corporation = corporation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelAssignmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelAssignmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
