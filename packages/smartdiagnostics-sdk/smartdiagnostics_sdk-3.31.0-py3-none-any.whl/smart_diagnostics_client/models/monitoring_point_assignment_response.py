# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MonitoringPointAssignmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'is_paused': 'bool',
        'monitoring_point': 'MonitoringPointChild',
        'node': 'MonitoringPointNodeChild',
        'corporation': 'CorporationChild',
        'location': 'LocationChild'
    }

    attribute_map = {
        'id': 'Id',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'is_paused': 'IsPaused',
        'monitoring_point': 'MonitoringPoint',
        'node': 'Node',
        'corporation': 'Corporation',
        'location': 'Location'
    }

    def __init__(self, id=None, start_date=None, end_date=None, is_paused=None, monitoring_point=None, node=None, corporation=None, location=None):  # noqa: E501
        """MonitoringPointAssignmentResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._start_date = None
        self._end_date = None
        self._is_paused = None
        self._monitoring_point = None
        self._node = None
        self._corporation = None
        self._location = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        self.is_paused = is_paused
        self.monitoring_point = monitoring_point
        self.node = node
        self.corporation = corporation
        self.location = location

    @property
    def id(self):
        """Gets the id of this MonitoringPointAssignmentResponse.  # noqa: E501

        The Id of the assignment  # noqa: E501

        :return: The id of this MonitoringPointAssignmentResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MonitoringPointAssignmentResponse.

        The Id of the assignment  # noqa: E501

        :param id: The id of this MonitoringPointAssignmentResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def start_date(self):
        """Gets the start_date of this MonitoringPointAssignmentResponse.  # noqa: E501

        The start date of the assignment  # noqa: E501

        :return: The start_date of this MonitoringPointAssignmentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this MonitoringPointAssignmentResponse.

        The start date of the assignment  # noqa: E501

        :param start_date: The start_date of this MonitoringPointAssignmentResponse.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this MonitoringPointAssignmentResponse.  # noqa: E501

        The end date of the assignment. If the date is null, the assignment is current.  # noqa: E501

        :return: The end_date of this MonitoringPointAssignmentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this MonitoringPointAssignmentResponse.

        The end date of the assignment. If the date is null, the assignment is current.  # noqa: E501

        :param end_date: The end_date of this MonitoringPointAssignmentResponse.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def is_paused(self):
        """Gets the is_paused of this MonitoringPointAssignmentResponse.  # noqa: E501

        Is the monitoring point paused  # noqa: E501

        :return: The is_paused of this MonitoringPointAssignmentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this MonitoringPointAssignmentResponse.

        Is the monitoring point paused  # noqa: E501

        :param is_paused: The is_paused of this MonitoringPointAssignmentResponse.  # noqa: E501
        :type: bool
        """
        if is_paused is None:
            raise ValueError("Invalid value for `is_paused`, must not be `None`")  # noqa: E501

        self._is_paused = is_paused

    @property
    def monitoring_point(self):
        """Gets the monitoring_point of this MonitoringPointAssignmentResponse.  # noqa: E501


        :return: The monitoring_point of this MonitoringPointAssignmentResponse.  # noqa: E501
        :rtype: MonitoringPointChild
        """
        return self._monitoring_point

    @monitoring_point.setter
    def monitoring_point(self, monitoring_point):
        """Sets the monitoring_point of this MonitoringPointAssignmentResponse.


        :param monitoring_point: The monitoring_point of this MonitoringPointAssignmentResponse.  # noqa: E501
        :type: MonitoringPointChild
        """
        if monitoring_point is None:
            raise ValueError("Invalid value for `monitoring_point`, must not be `None`")  # noqa: E501

        self._monitoring_point = monitoring_point

    @property
    def node(self):
        """Gets the node of this MonitoringPointAssignmentResponse.  # noqa: E501


        :return: The node of this MonitoringPointAssignmentResponse.  # noqa: E501
        :rtype: MonitoringPointNodeChild
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this MonitoringPointAssignmentResponse.


        :param node: The node of this MonitoringPointAssignmentResponse.  # noqa: E501
        :type: MonitoringPointNodeChild
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")  # noqa: E501

        self._node = node

    @property
    def corporation(self):
        """Gets the corporation of this MonitoringPointAssignmentResponse.  # noqa: E501


        :return: The corporation of this MonitoringPointAssignmentResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this MonitoringPointAssignmentResponse.


        :param corporation: The corporation of this MonitoringPointAssignmentResponse.  # noqa: E501
        :type: CorporationChild
        """
        if corporation is None:
            raise ValueError("Invalid value for `corporation`, must not be `None`")  # noqa: E501

        self._corporation = corporation

    @property
    def location(self):
        """Gets the location of this MonitoringPointAssignmentResponse.  # noqa: E501


        :return: The location of this MonitoringPointAssignmentResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MonitoringPointAssignmentResponse.


        :param location: The location of this MonitoringPointAssignmentResponse.  # noqa: E501
        :type: LocationChild
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitoringPointAssignmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitoringPointAssignmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
