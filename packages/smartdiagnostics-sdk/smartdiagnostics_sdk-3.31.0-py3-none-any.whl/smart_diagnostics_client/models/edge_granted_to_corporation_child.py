# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeGrantedToCorporationChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currently_in_use': 'bool',
        'corporation_id': 'str',
        'corporation_name': 'str',
        'corporation_abbreviation': 'str'
    }

    attribute_map = {
        'currently_in_use': 'CurrentlyInUse',
        'corporation_id': 'CorporationId',
        'corporation_name': 'CorporationName',
        'corporation_abbreviation': 'CorporationAbbreviation'
    }

    def __init__(self, currently_in_use=None, corporation_id=None, corporation_name=None, corporation_abbreviation=None):  # noqa: E501
        """EdgeGrantedToCorporationChild - a model defined in Swagger"""  # noqa: E501
        self._currently_in_use = None
        self._corporation_id = None
        self._corporation_name = None
        self._corporation_abbreviation = None
        self.discriminator = None
        if currently_in_use is not None:
            self.currently_in_use = currently_in_use
        self.corporation_id = corporation_id
        self.corporation_name = corporation_name
        if corporation_abbreviation is not None:
            self.corporation_abbreviation = corporation_abbreviation

    @property
    def currently_in_use(self):
        """Gets the currently_in_use of this EdgeGrantedToCorporationChild.  # noqa: E501

        Whether or not a corporation is currently using   an edge compute resource (definition/assignment)  # noqa: E501

        :return: The currently_in_use of this EdgeGrantedToCorporationChild.  # noqa: E501
        :rtype: bool
        """
        return self._currently_in_use

    @currently_in_use.setter
    def currently_in_use(self, currently_in_use):
        """Sets the currently_in_use of this EdgeGrantedToCorporationChild.

        Whether or not a corporation is currently using   an edge compute resource (definition/assignment)  # noqa: E501

        :param currently_in_use: The currently_in_use of this EdgeGrantedToCorporationChild.  # noqa: E501
        :type: bool
        """

        self._currently_in_use = currently_in_use

    @property
    def corporation_id(self):
        """Gets the corporation_id of this EdgeGrantedToCorporationChild.  # noqa: E501

        The Id of the corporation  # noqa: E501

        :return: The corporation_id of this EdgeGrantedToCorporationChild.  # noqa: E501
        :rtype: str
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """Sets the corporation_id of this EdgeGrantedToCorporationChild.

        The Id of the corporation  # noqa: E501

        :param corporation_id: The corporation_id of this EdgeGrantedToCorporationChild.  # noqa: E501
        :type: str
        """
        if corporation_id is None:
            raise ValueError("Invalid value for `corporation_id`, must not be `None`")  # noqa: E501

        self._corporation_id = corporation_id

    @property
    def corporation_name(self):
        """Gets the corporation_name of this EdgeGrantedToCorporationChild.  # noqa: E501

        The name of the corporation  # noqa: E501

        :return: The corporation_name of this EdgeGrantedToCorporationChild.  # noqa: E501
        :rtype: str
        """
        return self._corporation_name

    @corporation_name.setter
    def corporation_name(self, corporation_name):
        """Sets the corporation_name of this EdgeGrantedToCorporationChild.

        The name of the corporation  # noqa: E501

        :param corporation_name: The corporation_name of this EdgeGrantedToCorporationChild.  # noqa: E501
        :type: str
        """
        if corporation_name is None:
            raise ValueError("Invalid value for `corporation_name`, must not be `None`")  # noqa: E501

        self._corporation_name = corporation_name

    @property
    def corporation_abbreviation(self):
        """Gets the corporation_abbreviation of this EdgeGrantedToCorporationChild.  # noqa: E501

        The abbreviation of the corporation  # noqa: E501

        :return: The corporation_abbreviation of this EdgeGrantedToCorporationChild.  # noqa: E501
        :rtype: str
        """
        return self._corporation_abbreviation

    @corporation_abbreviation.setter
    def corporation_abbreviation(self, corporation_abbreviation):
        """Sets the corporation_abbreviation of this EdgeGrantedToCorporationChild.

        The abbreviation of the corporation  # noqa: E501

        :param corporation_abbreviation: The corporation_abbreviation of this EdgeGrantedToCorporationChild.  # noqa: E501
        :type: str
        """

        self._corporation_abbreviation = corporation_abbreviation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeGrantedToCorporationChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeGrantedToCorporationChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
