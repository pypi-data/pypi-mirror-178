# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseStationChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_station_id': 'int',
        'base_station_name': 'str',
        'base_station_serial_number': 'str'
    }

    attribute_map = {
        'base_station_id': 'BaseStationId',
        'base_station_name': 'BaseStationName',
        'base_station_serial_number': 'BaseStationSerialNumber'
    }

    def __init__(self, base_station_id=None, base_station_name=None, base_station_serial_number=None):  # noqa: E501
        """BaseStationChild - a model defined in Swagger"""  # noqa: E501
        self._base_station_id = None
        self._base_station_name = None
        self._base_station_serial_number = None
        self.discriminator = None
        self.base_station_id = base_station_id
        if base_station_name is not None:
            self.base_station_name = base_station_name
        self.base_station_serial_number = base_station_serial_number

    @property
    def base_station_id(self):
        """Gets the base_station_id of this BaseStationChild.  # noqa: E501


        :return: The base_station_id of this BaseStationChild.  # noqa: E501
        :rtype: int
        """
        return self._base_station_id

    @base_station_id.setter
    def base_station_id(self, base_station_id):
        """Sets the base_station_id of this BaseStationChild.


        :param base_station_id: The base_station_id of this BaseStationChild.  # noqa: E501
        :type: int
        """
        if base_station_id is None:
            raise ValueError("Invalid value for `base_station_id`, must not be `None`")  # noqa: E501

        self._base_station_id = base_station_id

    @property
    def base_station_name(self):
        """Gets the base_station_name of this BaseStationChild.  # noqa: E501


        :return: The base_station_name of this BaseStationChild.  # noqa: E501
        :rtype: str
        """
        return self._base_station_name

    @base_station_name.setter
    def base_station_name(self, base_station_name):
        """Sets the base_station_name of this BaseStationChild.


        :param base_station_name: The base_station_name of this BaseStationChild.  # noqa: E501
        :type: str
        """

        self._base_station_name = base_station_name

    @property
    def base_station_serial_number(self):
        """Gets the base_station_serial_number of this BaseStationChild.  # noqa: E501


        :return: The base_station_serial_number of this BaseStationChild.  # noqa: E501
        :rtype: str
        """
        return self._base_station_serial_number

    @base_station_serial_number.setter
    def base_station_serial_number(self, base_station_serial_number):
        """Sets the base_station_serial_number of this BaseStationChild.


        :param base_station_serial_number: The base_station_serial_number of this BaseStationChild.  # noqa: E501
        :type: str
        """
        if base_station_serial_number is None:
            raise ValueError("Invalid value for `base_station_serial_number`, must not be `None`")  # noqa: E501

        self._base_station_serial_number = base_station_serial_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseStationChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseStationChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
