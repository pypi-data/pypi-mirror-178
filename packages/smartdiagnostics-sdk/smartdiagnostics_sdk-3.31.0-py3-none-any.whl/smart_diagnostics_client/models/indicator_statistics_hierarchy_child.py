# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndicatorStatisticsHierarchyChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hierarchy_id': 'str',
        'hierarchy_name': 'str',
        'hierarchy_abbreviation': 'str',
        'hierarchy_type': 'str'
    }

    attribute_map = {
        'hierarchy_id': 'HierarchyId',
        'hierarchy_name': 'HierarchyName',
        'hierarchy_abbreviation': 'HierarchyAbbreviation',
        'hierarchy_type': 'HierarchyType'
    }

    def __init__(self, hierarchy_id=None, hierarchy_name=None, hierarchy_abbreviation=None, hierarchy_type=None):  # noqa: E501
        """IndicatorStatisticsHierarchyChild - a model defined in Swagger"""  # noqa: E501
        self._hierarchy_id = None
        self._hierarchy_name = None
        self._hierarchy_abbreviation = None
        self._hierarchy_type = None
        self.discriminator = None
        self.hierarchy_id = hierarchy_id
        self.hierarchy_name = hierarchy_name
        if hierarchy_abbreviation is not None:
            self.hierarchy_abbreviation = hierarchy_abbreviation
        self.hierarchy_type = hierarchy_type

    @property
    def hierarchy_id(self):
        """Gets the hierarchy_id of this IndicatorStatisticsHierarchyChild.  # noqa: E501


        :return: The hierarchy_id of this IndicatorStatisticsHierarchyChild.  # noqa: E501
        :rtype: str
        """
        return self._hierarchy_id

    @hierarchy_id.setter
    def hierarchy_id(self, hierarchy_id):
        """Sets the hierarchy_id of this IndicatorStatisticsHierarchyChild.


        :param hierarchy_id: The hierarchy_id of this IndicatorStatisticsHierarchyChild.  # noqa: E501
        :type: str
        """
        if hierarchy_id is None:
            raise ValueError("Invalid value for `hierarchy_id`, must not be `None`")  # noqa: E501

        self._hierarchy_id = hierarchy_id

    @property
    def hierarchy_name(self):
        """Gets the hierarchy_name of this IndicatorStatisticsHierarchyChild.  # noqa: E501


        :return: The hierarchy_name of this IndicatorStatisticsHierarchyChild.  # noqa: E501
        :rtype: str
        """
        return self._hierarchy_name

    @hierarchy_name.setter
    def hierarchy_name(self, hierarchy_name):
        """Sets the hierarchy_name of this IndicatorStatisticsHierarchyChild.


        :param hierarchy_name: The hierarchy_name of this IndicatorStatisticsHierarchyChild.  # noqa: E501
        :type: str
        """
        if hierarchy_name is None:
            raise ValueError("Invalid value for `hierarchy_name`, must not be `None`")  # noqa: E501

        self._hierarchy_name = hierarchy_name

    @property
    def hierarchy_abbreviation(self):
        """Gets the hierarchy_abbreviation of this IndicatorStatisticsHierarchyChild.  # noqa: E501


        :return: The hierarchy_abbreviation of this IndicatorStatisticsHierarchyChild.  # noqa: E501
        :rtype: str
        """
        return self._hierarchy_abbreviation

    @hierarchy_abbreviation.setter
    def hierarchy_abbreviation(self, hierarchy_abbreviation):
        """Sets the hierarchy_abbreviation of this IndicatorStatisticsHierarchyChild.


        :param hierarchy_abbreviation: The hierarchy_abbreviation of this IndicatorStatisticsHierarchyChild.  # noqa: E501
        :type: str
        """

        self._hierarchy_abbreviation = hierarchy_abbreviation

    @property
    def hierarchy_type(self):
        """Gets the hierarchy_type of this IndicatorStatisticsHierarchyChild.  # noqa: E501


        :return: The hierarchy_type of this IndicatorStatisticsHierarchyChild.  # noqa: E501
        :rtype: str
        """
        return self._hierarchy_type

    @hierarchy_type.setter
    def hierarchy_type(self, hierarchy_type):
        """Sets the hierarchy_type of this IndicatorStatisticsHierarchyChild.


        :param hierarchy_type: The hierarchy_type of this IndicatorStatisticsHierarchyChild.  # noqa: E501
        :type: str
        """
        if hierarchy_type is None:
            raise ValueError("Invalid value for `hierarchy_type`, must not be `None`")  # noqa: E501

        self._hierarchy_type = hierarchy_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndicatorStatisticsHierarchyChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndicatorStatisticsHierarchyChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
