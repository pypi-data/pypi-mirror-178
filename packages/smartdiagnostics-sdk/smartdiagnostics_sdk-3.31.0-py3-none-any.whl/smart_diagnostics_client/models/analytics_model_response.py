# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsModelResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'version': 'str',
        'created': 'datetime',
        'is_global': 'bool',
        'is_deprecated': 'bool',
        'last_upload': 'datetime',
        'error_type': 'AnalyticsModelErrorTypeCodes',
        'disable_date': 'datetime',
        'trigger_interval_in_seconds': 'int',
        'indicators': 'list[AnalyticsModelIndicatorChild]',
        'properties': 'list[PropertyChild]',
        'created_by': 'UserChild',
        'corporation': 'CorporationChild',
        'location': 'LocationChild'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'version': 'Version',
        'created': 'Created',
        'is_global': 'IsGlobal',
        'is_deprecated': 'IsDeprecated',
        'last_upload': 'LastUpload',
        'error_type': 'ErrorType',
        'disable_date': 'DisableDate',
        'trigger_interval_in_seconds': 'TriggerIntervalInSeconds',
        'indicators': 'Indicators',
        'properties': 'Properties',
        'created_by': 'CreatedBy',
        'corporation': 'Corporation',
        'location': 'Location'
    }

    def __init__(self, id=None, name=None, version=None, created=None, is_global=None, is_deprecated=None, last_upload=None, error_type=None, disable_date=None, trigger_interval_in_seconds=None, indicators=None, properties=None, created_by=None, corporation=None, location=None):  # noqa: E501
        """AnalyticsModelResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._version = None
        self._created = None
        self._is_global = None
        self._is_deprecated = None
        self._last_upload = None
        self._error_type = None
        self._disable_date = None
        self._trigger_interval_in_seconds = None
        self._indicators = None
        self._properties = None
        self._created_by = None
        self._corporation = None
        self._location = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.version = version
        self.created = created
        self.is_global = is_global
        self.is_deprecated = is_deprecated
        if last_upload is not None:
            self.last_upload = last_upload
        if error_type is not None:
            self.error_type = error_type
        if disable_date is not None:
            self.disable_date = disable_date
        self.trigger_interval_in_seconds = trigger_interval_in_seconds
        self.indicators = indicators
        self.properties = properties
        self.created_by = created_by
        if corporation is not None:
            self.corporation = corporation
        if location is not None:
            self.location = location

    @property
    def id(self):
        """Gets the id of this AnalyticsModelResponse.  # noqa: E501


        :return: The id of this AnalyticsModelResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalyticsModelResponse.


        :param id: The id of this AnalyticsModelResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this AnalyticsModelResponse.  # noqa: E501


        :return: The name of this AnalyticsModelResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsModelResponse.


        :param name: The name of this AnalyticsModelResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this AnalyticsModelResponse.  # noqa: E501


        :return: The version of this AnalyticsModelResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AnalyticsModelResponse.


        :param version: The version of this AnalyticsModelResponse.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def created(self):
        """Gets the created of this AnalyticsModelResponse.  # noqa: E501


        :return: The created of this AnalyticsModelResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AnalyticsModelResponse.


        :param created: The created of this AnalyticsModelResponse.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def is_global(self):
        """Gets the is_global of this AnalyticsModelResponse.  # noqa: E501


        :return: The is_global of this AnalyticsModelResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_global

    @is_global.setter
    def is_global(self, is_global):
        """Sets the is_global of this AnalyticsModelResponse.


        :param is_global: The is_global of this AnalyticsModelResponse.  # noqa: E501
        :type: bool
        """
        if is_global is None:
            raise ValueError("Invalid value for `is_global`, must not be `None`")  # noqa: E501

        self._is_global = is_global

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this AnalyticsModelResponse.  # noqa: E501


        :return: The is_deprecated of this AnalyticsModelResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this AnalyticsModelResponse.


        :param is_deprecated: The is_deprecated of this AnalyticsModelResponse.  # noqa: E501
        :type: bool
        """
        if is_deprecated is None:
            raise ValueError("Invalid value for `is_deprecated`, must not be `None`")  # noqa: E501

        self._is_deprecated = is_deprecated

    @property
    def last_upload(self):
        """Gets the last_upload of this AnalyticsModelResponse.  # noqa: E501


        :return: The last_upload of this AnalyticsModelResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_upload

    @last_upload.setter
    def last_upload(self, last_upload):
        """Sets the last_upload of this AnalyticsModelResponse.


        :param last_upload: The last_upload of this AnalyticsModelResponse.  # noqa: E501
        :type: datetime
        """

        self._last_upload = last_upload

    @property
    def error_type(self):
        """Gets the error_type of this AnalyticsModelResponse.  # noqa: E501


        :return: The error_type of this AnalyticsModelResponse.  # noqa: E501
        :rtype: AnalyticsModelErrorTypeCodes
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this AnalyticsModelResponse.


        :param error_type: The error_type of this AnalyticsModelResponse.  # noqa: E501
        :type: AnalyticsModelErrorTypeCodes
        """

        self._error_type = error_type

    @property
    def disable_date(self):
        """Gets the disable_date of this AnalyticsModelResponse.  # noqa: E501


        :return: The disable_date of this AnalyticsModelResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._disable_date

    @disable_date.setter
    def disable_date(self, disable_date):
        """Sets the disable_date of this AnalyticsModelResponse.


        :param disable_date: The disable_date of this AnalyticsModelResponse.  # noqa: E501
        :type: datetime
        """

        self._disable_date = disable_date

    @property
    def trigger_interval_in_seconds(self):
        """Gets the trigger_interval_in_seconds of this AnalyticsModelResponse.  # noqa: E501


        :return: The trigger_interval_in_seconds of this AnalyticsModelResponse.  # noqa: E501
        :rtype: int
        """
        return self._trigger_interval_in_seconds

    @trigger_interval_in_seconds.setter
    def trigger_interval_in_seconds(self, trigger_interval_in_seconds):
        """Sets the trigger_interval_in_seconds of this AnalyticsModelResponse.


        :param trigger_interval_in_seconds: The trigger_interval_in_seconds of this AnalyticsModelResponse.  # noqa: E501
        :type: int
        """
        if trigger_interval_in_seconds is None:
            raise ValueError("Invalid value for `trigger_interval_in_seconds`, must not be `None`")  # noqa: E501

        self._trigger_interval_in_seconds = trigger_interval_in_seconds

    @property
    def indicators(self):
        """Gets the indicators of this AnalyticsModelResponse.  # noqa: E501


        :return: The indicators of this AnalyticsModelResponse.  # noqa: E501
        :rtype: list[AnalyticsModelIndicatorChild]
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """Sets the indicators of this AnalyticsModelResponse.


        :param indicators: The indicators of this AnalyticsModelResponse.  # noqa: E501
        :type: list[AnalyticsModelIndicatorChild]
        """
        if indicators is None:
            raise ValueError("Invalid value for `indicators`, must not be `None`")  # noqa: E501

        self._indicators = indicators

    @property
    def properties(self):
        """Gets the properties of this AnalyticsModelResponse.  # noqa: E501


        :return: The properties of this AnalyticsModelResponse.  # noqa: E501
        :rtype: list[PropertyChild]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this AnalyticsModelResponse.


        :param properties: The properties of this AnalyticsModelResponse.  # noqa: E501
        :type: list[PropertyChild]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def created_by(self):
        """Gets the created_by of this AnalyticsModelResponse.  # noqa: E501


        :return: The created_by of this AnalyticsModelResponse.  # noqa: E501
        :rtype: UserChild
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AnalyticsModelResponse.


        :param created_by: The created_by of this AnalyticsModelResponse.  # noqa: E501
        :type: UserChild
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def corporation(self):
        """Gets the corporation of this AnalyticsModelResponse.  # noqa: E501


        :return: The corporation of this AnalyticsModelResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this AnalyticsModelResponse.


        :param corporation: The corporation of this AnalyticsModelResponse.  # noqa: E501
        :type: CorporationChild
        """

        self._corporation = corporation

    @property
    def location(self):
        """Gets the location of this AnalyticsModelResponse.  # noqa: E501


        :return: The location of this AnalyticsModelResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AnalyticsModelResponse.


        :param location: The location of this AnalyticsModelResponse.  # noqa: E501
        :type: LocationChild
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsModelResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsModelResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
