# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PowerBiReportChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'power_bi_report_access_token': 'str',
        'power_bi_report_name': 'str',
        'power_bi_report_url': 'str',
        'power_bi_report_embed_url': 'str',
        'error': 'PowerBiError'
    }

    attribute_map = {
        'power_bi_report_access_token': 'PowerBiReportAccessToken',
        'power_bi_report_name': 'PowerBiReportName',
        'power_bi_report_url': 'PowerBiReportUrl',
        'power_bi_report_embed_url': 'PowerBiReportEmbedUrl',
        'error': 'Error'
    }

    def __init__(self, power_bi_report_access_token=None, power_bi_report_name=None, power_bi_report_url=None, power_bi_report_embed_url=None, error=None):  # noqa: E501
        """PowerBiReportChild - a model defined in Swagger"""  # noqa: E501
        self._power_bi_report_access_token = None
        self._power_bi_report_name = None
        self._power_bi_report_url = None
        self._power_bi_report_embed_url = None
        self._error = None
        self.discriminator = None
        if power_bi_report_access_token is not None:
            self.power_bi_report_access_token = power_bi_report_access_token
        if power_bi_report_name is not None:
            self.power_bi_report_name = power_bi_report_name
        if power_bi_report_url is not None:
            self.power_bi_report_url = power_bi_report_url
        if power_bi_report_embed_url is not None:
            self.power_bi_report_embed_url = power_bi_report_embed_url
        if error is not None:
            self.error = error

    @property
    def power_bi_report_access_token(self):
        """Gets the power_bi_report_access_token of this PowerBiReportChild.  # noqa: E501


        :return: The power_bi_report_access_token of this PowerBiReportChild.  # noqa: E501
        :rtype: str
        """
        return self._power_bi_report_access_token

    @power_bi_report_access_token.setter
    def power_bi_report_access_token(self, power_bi_report_access_token):
        """Sets the power_bi_report_access_token of this PowerBiReportChild.


        :param power_bi_report_access_token: The power_bi_report_access_token of this PowerBiReportChild.  # noqa: E501
        :type: str
        """

        self._power_bi_report_access_token = power_bi_report_access_token

    @property
    def power_bi_report_name(self):
        """Gets the power_bi_report_name of this PowerBiReportChild.  # noqa: E501


        :return: The power_bi_report_name of this PowerBiReportChild.  # noqa: E501
        :rtype: str
        """
        return self._power_bi_report_name

    @power_bi_report_name.setter
    def power_bi_report_name(self, power_bi_report_name):
        """Sets the power_bi_report_name of this PowerBiReportChild.


        :param power_bi_report_name: The power_bi_report_name of this PowerBiReportChild.  # noqa: E501
        :type: str
        """

        self._power_bi_report_name = power_bi_report_name

    @property
    def power_bi_report_url(self):
        """Gets the power_bi_report_url of this PowerBiReportChild.  # noqa: E501


        :return: The power_bi_report_url of this PowerBiReportChild.  # noqa: E501
        :rtype: str
        """
        return self._power_bi_report_url

    @power_bi_report_url.setter
    def power_bi_report_url(self, power_bi_report_url):
        """Sets the power_bi_report_url of this PowerBiReportChild.


        :param power_bi_report_url: The power_bi_report_url of this PowerBiReportChild.  # noqa: E501
        :type: str
        """

        self._power_bi_report_url = power_bi_report_url

    @property
    def power_bi_report_embed_url(self):
        """Gets the power_bi_report_embed_url of this PowerBiReportChild.  # noqa: E501


        :return: The power_bi_report_embed_url of this PowerBiReportChild.  # noqa: E501
        :rtype: str
        """
        return self._power_bi_report_embed_url

    @power_bi_report_embed_url.setter
    def power_bi_report_embed_url(self, power_bi_report_embed_url):
        """Sets the power_bi_report_embed_url of this PowerBiReportChild.


        :param power_bi_report_embed_url: The power_bi_report_embed_url of this PowerBiReportChild.  # noqa: E501
        :type: str
        """

        self._power_bi_report_embed_url = power_bi_report_embed_url

    @property
    def error(self):
        """Gets the error of this PowerBiReportChild.  # noqa: E501


        :return: The error of this PowerBiReportChild.  # noqa: E501
        :rtype: PowerBiError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PowerBiReportChild.


        :param error: The error of this PowerBiReportChild.  # noqa: E501
        :type: PowerBiError
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PowerBiReportChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PowerBiReportChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
