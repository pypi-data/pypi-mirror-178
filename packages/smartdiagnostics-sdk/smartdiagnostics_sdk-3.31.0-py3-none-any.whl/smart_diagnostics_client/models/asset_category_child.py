# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetCategoryChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'int',
        'category_name': 'str',
        'category_short_name': 'str',
        'category_code': 'str',
        'category_marker': 'AssetCategoryMarkerChild'
    }

    attribute_map = {
        'category_id': 'CategoryId',
        'category_name': 'CategoryName',
        'category_short_name': 'CategoryShortName',
        'category_code': 'CategoryCode',
        'category_marker': 'CategoryMarker'
    }

    def __init__(self, category_id=None, category_name=None, category_short_name=None, category_code=None, category_marker=None):  # noqa: E501
        """AssetCategoryChild - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._category_name = None
        self._category_short_name = None
        self._category_code = None
        self._category_marker = None
        self.discriminator = None
        self.category_id = category_id
        self.category_name = category_name
        if category_short_name is not None:
            self.category_short_name = category_short_name
        self.category_code = category_code
        if category_marker is not None:
            self.category_marker = category_marker

    @property
    def category_id(self):
        """Gets the category_id of this AssetCategoryChild.  # noqa: E501


        :return: The category_id of this AssetCategoryChild.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this AssetCategoryChild.


        :param category_id: The category_id of this AssetCategoryChild.  # noqa: E501
        :type: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    @property
    def category_name(self):
        """Gets the category_name of this AssetCategoryChild.  # noqa: E501


        :return: The category_name of this AssetCategoryChild.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this AssetCategoryChild.


        :param category_name: The category_name of this AssetCategoryChild.  # noqa: E501
        :type: str
        """
        if category_name is None:
            raise ValueError("Invalid value for `category_name`, must not be `None`")  # noqa: E501

        self._category_name = category_name

    @property
    def category_short_name(self):
        """Gets the category_short_name of this AssetCategoryChild.  # noqa: E501


        :return: The category_short_name of this AssetCategoryChild.  # noqa: E501
        :rtype: str
        """
        return self._category_short_name

    @category_short_name.setter
    def category_short_name(self, category_short_name):
        """Sets the category_short_name of this AssetCategoryChild.


        :param category_short_name: The category_short_name of this AssetCategoryChild.  # noqa: E501
        :type: str
        """

        self._category_short_name = category_short_name

    @property
    def category_code(self):
        """Gets the category_code of this AssetCategoryChild.  # noqa: E501


        :return: The category_code of this AssetCategoryChild.  # noqa: E501
        :rtype: str
        """
        return self._category_code

    @category_code.setter
    def category_code(self, category_code):
        """Sets the category_code of this AssetCategoryChild.


        :param category_code: The category_code of this AssetCategoryChild.  # noqa: E501
        :type: str
        """
        if category_code is None:
            raise ValueError("Invalid value for `category_code`, must not be `None`")  # noqa: E501

        self._category_code = category_code

    @property
    def category_marker(self):
        """Gets the category_marker of this AssetCategoryChild.  # noqa: E501


        :return: The category_marker of this AssetCategoryChild.  # noqa: E501
        :rtype: AssetCategoryMarkerChild
        """
        return self._category_marker

    @category_marker.setter
    def category_marker(self, category_marker):
        """Sets the category_marker of this AssetCategoryChild.


        :param category_marker: The category_marker of this AssetCategoryChild.  # noqa: E501
        :type: AssetCategoryMarkerChild
        """

        self._category_marker = category_marker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetCategoryChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetCategoryChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
