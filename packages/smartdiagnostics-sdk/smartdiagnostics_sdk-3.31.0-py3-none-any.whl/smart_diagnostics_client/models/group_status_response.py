# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'alarm_count': 'int',
        'warning_count': 'int',
        'damage_score': 'float',
        'alarm_severity': 'int',
        'is_snoozed': 'bool',
        'is_paused': 'bool',
        'model_count': 'int',
        'ticket_count': 'int',
        'watchlist_ticket_id': 'str',
        'analytics_models': 'list[AnalyticsModelChild]',
        'hierarchy': 'list[HierarchyChild]'
    }

    attribute_map = {
        'name': 'Name',
        'id': 'Id',
        'alarm_count': 'AlarmCount',
        'warning_count': 'WarningCount',
        'damage_score': 'DamageScore',
        'alarm_severity': 'AlarmSeverity',
        'is_snoozed': 'IsSnoozed',
        'is_paused': 'IsPaused',
        'model_count': 'ModelCount',
        'ticket_count': 'TicketCount',
        'watchlist_ticket_id': 'WatchlistTicketId',
        'analytics_models': 'AnalyticsModels',
        'hierarchy': 'Hierarchy'
    }

    def __init__(self, name=None, id=None, alarm_count=None, warning_count=None, damage_score=None, alarm_severity=None, is_snoozed=None, is_paused=None, model_count=None, ticket_count=None, watchlist_ticket_id=None, analytics_models=None, hierarchy=None):  # noqa: E501
        """GroupStatusResponse - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._alarm_count = None
        self._warning_count = None
        self._damage_score = None
        self._alarm_severity = None
        self._is_snoozed = None
        self._is_paused = None
        self._model_count = None
        self._ticket_count = None
        self._watchlist_ticket_id = None
        self._analytics_models = None
        self._hierarchy = None
        self.discriminator = None
        self.name = name
        self.id = id
        self.alarm_count = alarm_count
        self.warning_count = warning_count
        if damage_score is not None:
            self.damage_score = damage_score
        if alarm_severity is not None:
            self.alarm_severity = alarm_severity
        self.is_snoozed = is_snoozed
        self.is_paused = is_paused
        self.model_count = model_count
        self.ticket_count = ticket_count
        if watchlist_ticket_id is not None:
            self.watchlist_ticket_id = watchlist_ticket_id
        self.analytics_models = analytics_models
        self.hierarchy = hierarchy

    @property
    def name(self):
        """Gets the name of this GroupStatusResponse.  # noqa: E501


        :return: The name of this GroupStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupStatusResponse.


        :param name: The name of this GroupStatusResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self):
        """Gets the id of this GroupStatusResponse.  # noqa: E501


        :return: The id of this GroupStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupStatusResponse.


        :param id: The id of this GroupStatusResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def alarm_count(self):
        """Gets the alarm_count of this GroupStatusResponse.  # noqa: E501


        :return: The alarm_count of this GroupStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._alarm_count

    @alarm_count.setter
    def alarm_count(self, alarm_count):
        """Sets the alarm_count of this GroupStatusResponse.


        :param alarm_count: The alarm_count of this GroupStatusResponse.  # noqa: E501
        :type: int
        """
        if alarm_count is None:
            raise ValueError("Invalid value for `alarm_count`, must not be `None`")  # noqa: E501

        self._alarm_count = alarm_count

    @property
    def warning_count(self):
        """Gets the warning_count of this GroupStatusResponse.  # noqa: E501


        :return: The warning_count of this GroupStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this GroupStatusResponse.


        :param warning_count: The warning_count of this GroupStatusResponse.  # noqa: E501
        :type: int
        """
        if warning_count is None:
            raise ValueError("Invalid value for `warning_count`, must not be `None`")  # noqa: E501

        self._warning_count = warning_count

    @property
    def damage_score(self):
        """Gets the damage_score of this GroupStatusResponse.  # noqa: E501


        :return: The damage_score of this GroupStatusResponse.  # noqa: E501
        :rtype: float
        """
        return self._damage_score

    @damage_score.setter
    def damage_score(self, damage_score):
        """Sets the damage_score of this GroupStatusResponse.


        :param damage_score: The damage_score of this GroupStatusResponse.  # noqa: E501
        :type: float
        """

        self._damage_score = damage_score

    @property
    def alarm_severity(self):
        """Gets the alarm_severity of this GroupStatusResponse.  # noqa: E501


        :return: The alarm_severity of this GroupStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._alarm_severity

    @alarm_severity.setter
    def alarm_severity(self, alarm_severity):
        """Sets the alarm_severity of this GroupStatusResponse.


        :param alarm_severity: The alarm_severity of this GroupStatusResponse.  # noqa: E501
        :type: int
        """

        self._alarm_severity = alarm_severity

    @property
    def is_snoozed(self):
        """Gets the is_snoozed of this GroupStatusResponse.  # noqa: E501


        :return: The is_snoozed of this GroupStatusResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_snoozed

    @is_snoozed.setter
    def is_snoozed(self, is_snoozed):
        """Sets the is_snoozed of this GroupStatusResponse.


        :param is_snoozed: The is_snoozed of this GroupStatusResponse.  # noqa: E501
        :type: bool
        """
        if is_snoozed is None:
            raise ValueError("Invalid value for `is_snoozed`, must not be `None`")  # noqa: E501

        self._is_snoozed = is_snoozed

    @property
    def is_paused(self):
        """Gets the is_paused of this GroupStatusResponse.  # noqa: E501


        :return: The is_paused of this GroupStatusResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this GroupStatusResponse.


        :param is_paused: The is_paused of this GroupStatusResponse.  # noqa: E501
        :type: bool
        """
        if is_paused is None:
            raise ValueError("Invalid value for `is_paused`, must not be `None`")  # noqa: E501

        self._is_paused = is_paused

    @property
    def model_count(self):
        """Gets the model_count of this GroupStatusResponse.  # noqa: E501


        :return: The model_count of this GroupStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._model_count

    @model_count.setter
    def model_count(self, model_count):
        """Sets the model_count of this GroupStatusResponse.


        :param model_count: The model_count of this GroupStatusResponse.  # noqa: E501
        :type: int
        """
        if model_count is None:
            raise ValueError("Invalid value for `model_count`, must not be `None`")  # noqa: E501

        self._model_count = model_count

    @property
    def ticket_count(self):
        """Gets the ticket_count of this GroupStatusResponse.  # noqa: E501

        The number of tickets with which the Group is associated.  # noqa: E501

        :return: The ticket_count of this GroupStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._ticket_count

    @ticket_count.setter
    def ticket_count(self, ticket_count):
        """Sets the ticket_count of this GroupStatusResponse.

        The number of tickets with which the Group is associated.  # noqa: E501

        :param ticket_count: The ticket_count of this GroupStatusResponse.  # noqa: E501
        :type: int
        """
        if ticket_count is None:
            raise ValueError("Invalid value for `ticket_count`, must not be `None`")  # noqa: E501

        self._ticket_count = ticket_count

    @property
    def watchlist_ticket_id(self):
        """Gets the watchlist_ticket_id of this GroupStatusResponse.  # noqa: E501

        The id of the current watchlist ticket with which the Group is associated, if one exists.  # noqa: E501

        :return: The watchlist_ticket_id of this GroupStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._watchlist_ticket_id

    @watchlist_ticket_id.setter
    def watchlist_ticket_id(self, watchlist_ticket_id):
        """Sets the watchlist_ticket_id of this GroupStatusResponse.

        The id of the current watchlist ticket with which the Group is associated, if one exists.  # noqa: E501

        :param watchlist_ticket_id: The watchlist_ticket_id of this GroupStatusResponse.  # noqa: E501
        :type: str
        """

        self._watchlist_ticket_id = watchlist_ticket_id

    @property
    def analytics_models(self):
        """Gets the analytics_models of this GroupStatusResponse.  # noqa: E501


        :return: The analytics_models of this GroupStatusResponse.  # noqa: E501
        :rtype: list[AnalyticsModelChild]
        """
        return self._analytics_models

    @analytics_models.setter
    def analytics_models(self, analytics_models):
        """Sets the analytics_models of this GroupStatusResponse.


        :param analytics_models: The analytics_models of this GroupStatusResponse.  # noqa: E501
        :type: list[AnalyticsModelChild]
        """
        if analytics_models is None:
            raise ValueError("Invalid value for `analytics_models`, must not be `None`")  # noqa: E501

        self._analytics_models = analytics_models

    @property
    def hierarchy(self):
        """Gets the hierarchy of this GroupStatusResponse.  # noqa: E501


        :return: The hierarchy of this GroupStatusResponse.  # noqa: E501
        :rtype: list[HierarchyChild]
        """
        return self._hierarchy

    @hierarchy.setter
    def hierarchy(self, hierarchy):
        """Sets the hierarchy of this GroupStatusResponse.


        :param hierarchy: The hierarchy of this GroupStatusResponse.  # noqa: E501
        :type: list[HierarchyChild]
        """
        if hierarchy is None:
            raise ValueError("Invalid value for `hierarchy`, must not be `None`")  # noqa: E501

        self._hierarchy = hierarchy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
