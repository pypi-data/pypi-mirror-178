# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventModelV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'location_id': 'str',
        'window_id': 'str',
        'date_occurred': 'datetime',
        'description': 'str',
        'reason': 'str',
        'content_type': 'CaseContentTypeForApi',
        'attachment': 'AttachmentModelV3',
        'code_ids': 'list[str]',
        'tag_details': 'list[str]',
        'document_url': 'str',
        'document_name': 'str',
        'title': 'str',
        'evidence_indicator_id': 'str',
        'created': 'datetime',
        'created_by': 'str',
        'modified': 'datetime',
        'modified_by': 'str',
        'savings': 'float',
        'group_name': 'str',
        'group_path': 'str',
        'group_type': 'GroupTypeCodesForApi'
    }

    attribute_map = {
        'id': 'Id',
        'location_id': 'LocationId',
        'window_id': 'WindowId',
        'date_occurred': 'DateOccurred',
        'description': 'Description',
        'reason': 'Reason',
        'content_type': 'ContentType',
        'attachment': 'Attachment',
        'code_ids': 'CodeIds',
        'tag_details': 'TagDetails',
        'document_url': 'DocumentUrl',
        'document_name': 'DocumentName',
        'title': 'Title',
        'evidence_indicator_id': 'EvidenceIndicatorId',
        'created': 'Created',
        'created_by': 'CreatedBy',
        'modified': 'Modified',
        'modified_by': 'ModifiedBy',
        'savings': 'Savings',
        'group_name': 'GroupName',
        'group_path': 'GroupPath',
        'group_type': 'GroupType'
    }

    def __init__(self, id=None, location_id=None, window_id=None, date_occurred=None, description=None, reason=None, content_type=None, attachment=None, code_ids=None, tag_details=None, document_url=None, document_name=None, title=None, evidence_indicator_id=None, created=None, created_by=None, modified=None, modified_by=None, savings=None, group_name=None, group_path=None, group_type=None):  # noqa: E501
        """EventModelV3 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._location_id = None
        self._window_id = None
        self._date_occurred = None
        self._description = None
        self._reason = None
        self._content_type = None
        self._attachment = None
        self._code_ids = None
        self._tag_details = None
        self._document_url = None
        self._document_name = None
        self._title = None
        self._evidence_indicator_id = None
        self._created = None
        self._created_by = None
        self._modified = None
        self._modified_by = None
        self._savings = None
        self._group_name = None
        self._group_path = None
        self._group_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if location_id is not None:
            self.location_id = location_id
        if window_id is not None:
            self.window_id = window_id
        self.date_occurred = date_occurred
        if description is not None:
            self.description = description
        if reason is not None:
            self.reason = reason
        self.content_type = content_type
        self.attachment = attachment
        if code_ids is not None:
            self.code_ids = code_ids
        if tag_details is not None:
            self.tag_details = tag_details
        if document_url is not None:
            self.document_url = document_url
        if document_name is not None:
            self.document_name = document_name
        if title is not None:
            self.title = title
        if evidence_indicator_id is not None:
            self.evidence_indicator_id = evidence_indicator_id
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if modified is not None:
            self.modified = modified
        if modified_by is not None:
            self.modified_by = modified_by
        if savings is not None:
            self.savings = savings
        if group_name is not None:
            self.group_name = group_name
        if group_path is not None:
            self.group_path = group_path
        if group_type is not None:
            self.group_type = group_type

    @property
    def id(self):
        """Gets the id of this EventModelV3.  # noqa: E501


        :return: The id of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventModelV3.


        :param id: The id of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location_id(self):
        """Gets the location_id of this EventModelV3.  # noqa: E501


        :return: The location_id of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this EventModelV3.


        :param location_id: The location_id of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def window_id(self):
        """Gets the window_id of this EventModelV3.  # noqa: E501


        :return: The window_id of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._window_id

    @window_id.setter
    def window_id(self, window_id):
        """Sets the window_id of this EventModelV3.


        :param window_id: The window_id of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._window_id = window_id

    @property
    def date_occurred(self):
        """Gets the date_occurred of this EventModelV3.  # noqa: E501


        :return: The date_occurred of this EventModelV3.  # noqa: E501
        :rtype: datetime
        """
        return self._date_occurred

    @date_occurred.setter
    def date_occurred(self, date_occurred):
        """Sets the date_occurred of this EventModelV3.


        :param date_occurred: The date_occurred of this EventModelV3.  # noqa: E501
        :type: datetime
        """
        if date_occurred is None:
            raise ValueError("Invalid value for `date_occurred`, must not be `None`")  # noqa: E501

        self._date_occurred = date_occurred

    @property
    def description(self):
        """Gets the description of this EventModelV3.  # noqa: E501


        :return: The description of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventModelV3.


        :param description: The description of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def reason(self):
        """Gets the reason of this EventModelV3.  # noqa: E501


        :return: The reason of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this EventModelV3.


        :param reason: The reason of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def content_type(self):
        """Gets the content_type of this EventModelV3.  # noqa: E501


        :return: The content_type of this EventModelV3.  # noqa: E501
        :rtype: CaseContentTypeForApi
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this EventModelV3.


        :param content_type: The content_type of this EventModelV3.  # noqa: E501
        :type: CaseContentTypeForApi
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")  # noqa: E501

        self._content_type = content_type

    @property
    def attachment(self):
        """Gets the attachment of this EventModelV3.  # noqa: E501


        :return: The attachment of this EventModelV3.  # noqa: E501
        :rtype: AttachmentModelV3
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this EventModelV3.


        :param attachment: The attachment of this EventModelV3.  # noqa: E501
        :type: AttachmentModelV3
        """
        if attachment is None:
            raise ValueError("Invalid value for `attachment`, must not be `None`")  # noqa: E501

        self._attachment = attachment

    @property
    def code_ids(self):
        """Gets the code_ids of this EventModelV3.  # noqa: E501


        :return: The code_ids of this EventModelV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_ids

    @code_ids.setter
    def code_ids(self, code_ids):
        """Sets the code_ids of this EventModelV3.


        :param code_ids: The code_ids of this EventModelV3.  # noqa: E501
        :type: list[str]
        """

        self._code_ids = code_ids

    @property
    def tag_details(self):
        """Gets the tag_details of this EventModelV3.  # noqa: E501


        :return: The tag_details of this EventModelV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_details

    @tag_details.setter
    def tag_details(self, tag_details):
        """Sets the tag_details of this EventModelV3.


        :param tag_details: The tag_details of this EventModelV3.  # noqa: E501
        :type: list[str]
        """

        self._tag_details = tag_details

    @property
    def document_url(self):
        """Gets the document_url of this EventModelV3.  # noqa: E501


        :return: The document_url of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._document_url

    @document_url.setter
    def document_url(self, document_url):
        """Sets the document_url of this EventModelV3.


        :param document_url: The document_url of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._document_url = document_url

    @property
    def document_name(self):
        """Gets the document_name of this EventModelV3.  # noqa: E501


        :return: The document_name of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this EventModelV3.


        :param document_name: The document_name of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._document_name = document_name

    @property
    def title(self):
        """Gets the title of this EventModelV3.  # noqa: E501


        :return: The title of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EventModelV3.


        :param title: The title of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def evidence_indicator_id(self):
        """Gets the evidence_indicator_id of this EventModelV3.  # noqa: E501


        :return: The evidence_indicator_id of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._evidence_indicator_id

    @evidence_indicator_id.setter
    def evidence_indicator_id(self, evidence_indicator_id):
        """Sets the evidence_indicator_id of this EventModelV3.


        :param evidence_indicator_id: The evidence_indicator_id of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._evidence_indicator_id = evidence_indicator_id

    @property
    def created(self):
        """Gets the created of this EventModelV3.  # noqa: E501


        :return: The created of this EventModelV3.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EventModelV3.


        :param created: The created of this EventModelV3.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this EventModelV3.  # noqa: E501


        :return: The created_by of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this EventModelV3.


        :param created_by: The created_by of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def modified(self):
        """Gets the modified of this EventModelV3.  # noqa: E501


        :return: The modified of this EventModelV3.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this EventModelV3.


        :param modified: The modified of this EventModelV3.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def modified_by(self):
        """Gets the modified_by of this EventModelV3.  # noqa: E501


        :return: The modified_by of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this EventModelV3.


        :param modified_by: The modified_by of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def savings(self):
        """Gets the savings of this EventModelV3.  # noqa: E501


        :return: The savings of this EventModelV3.  # noqa: E501
        :rtype: float
        """
        return self._savings

    @savings.setter
    def savings(self, savings):
        """Sets the savings of this EventModelV3.


        :param savings: The savings of this EventModelV3.  # noqa: E501
        :type: float
        """

        self._savings = savings

    @property
    def group_name(self):
        """Gets the group_name of this EventModelV3.  # noqa: E501


        :return: The group_name of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this EventModelV3.


        :param group_name: The group_name of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def group_path(self):
        """Gets the group_path of this EventModelV3.  # noqa: E501


        :return: The group_path of this EventModelV3.  # noqa: E501
        :rtype: str
        """
        return self._group_path

    @group_path.setter
    def group_path(self, group_path):
        """Sets the group_path of this EventModelV3.


        :param group_path: The group_path of this EventModelV3.  # noqa: E501
        :type: str
        """

        self._group_path = group_path

    @property
    def group_type(self):
        """Gets the group_type of this EventModelV3.  # noqa: E501


        :return: The group_type of this EventModelV3.  # noqa: E501
        :rtype: GroupTypeCodesForApi
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this EventModelV3.


        :param group_type: The group_type of this EventModelV3.  # noqa: E501
        :type: GroupTypeCodesForApi
        """

        self._group_type = group_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventModelV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventModelV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
