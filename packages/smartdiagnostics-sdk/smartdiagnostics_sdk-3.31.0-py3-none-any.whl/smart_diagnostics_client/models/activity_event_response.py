# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityEventResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'note': 'str',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'activity_line_enabled': 'bool',
        'asset_card_enabled': 'bool',
        'document': 'DocumentChild',
        'location': 'LocationChild',
        'category': 'ActivityEventCategoryChild',
        'subcategories': 'list[ActivityEventSubcategoryChild]',
        'binds': 'list[ActivityEventBindChild]',
        'fields': 'list[ActivityEventFieldEntryChild]',
        'relationships': 'list[ActivityEventRelationshipChild]'
    }

    attribute_map = {
        'id': 'Id',
        'title': 'Title',
        'description': 'Description',
        'note': 'Note',
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'activity_line_enabled': 'ActivityLineEnabled',
        'asset_card_enabled': 'AssetCardEnabled',
        'document': 'Document',
        'location': 'Location',
        'category': 'Category',
        'subcategories': 'Subcategories',
        'binds': 'Binds',
        'fields': 'Fields',
        'relationships': 'Relationships'
    }

    def __init__(self, id=None, title=None, description=None, note=None, start_date_time=None, end_date_time=None, activity_line_enabled=None, asset_card_enabled=None, document=None, location=None, category=None, subcategories=None, binds=None, fields=None, relationships=None):  # noqa: E501
        """ActivityEventResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._description = None
        self._note = None
        self._start_date_time = None
        self._end_date_time = None
        self._activity_line_enabled = None
        self._asset_card_enabled = None
        self._document = None
        self._location = None
        self._category = None
        self._subcategories = None
        self._binds = None
        self._fields = None
        self._relationships = None
        self.discriminator = None
        self.id = id
        self.title = title
        if description is not None:
            self.description = description
        if note is not None:
            self.note = note
        self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        self.activity_line_enabled = activity_line_enabled
        self.asset_card_enabled = asset_card_enabled
        if document is not None:
            self.document = document
        self.location = location
        self.category = category
        self.subcategories = subcategories
        self.binds = binds
        self.fields = fields
        self.relationships = relationships

    @property
    def id(self):
        """Gets the id of this ActivityEventResponse.  # noqa: E501

        Activity event id  # noqa: E501

        :return: The id of this ActivityEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityEventResponse.

        Activity event id  # noqa: E501

        :param id: The id of this ActivityEventResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this ActivityEventResponse.  # noqa: E501

        The title of activity event  # noqa: E501

        :return: The title of this ActivityEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActivityEventResponse.

        The title of activity event  # noqa: E501

        :param title: The title of this ActivityEventResponse.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this ActivityEventResponse.  # noqa: E501

        The description of what occurred during the activity event.  # noqa: E501

        :return: The description of this ActivityEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityEventResponse.

        The description of what occurred during the activity event.  # noqa: E501

        :param description: The description of this ActivityEventResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def note(self):
        """Gets the note of this ActivityEventResponse.  # noqa: E501

        Note for activity event  # noqa: E501

        :return: The note of this ActivityEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ActivityEventResponse.

        Note for activity event  # noqa: E501

        :param note: The note of this ActivityEventResponse.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ActivityEventResponse.  # noqa: E501

        Activity event start date / time  # noqa: E501

        :return: The start_date_time of this ActivityEventResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ActivityEventResponse.

        Activity event start date / time  # noqa: E501

        :param start_date_time: The start_date_time of this ActivityEventResponse.  # noqa: E501
        :type: datetime
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")  # noqa: E501

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ActivityEventResponse.  # noqa: E501

        Activity event end date / time (if available)  # noqa: E501

        :return: The end_date_time of this ActivityEventResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ActivityEventResponse.

        Activity event end date / time (if available)  # noqa: E501

        :param end_date_time: The end_date_time of this ActivityEventResponse.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def activity_line_enabled(self):
        """Gets the activity_line_enabled of this ActivityEventResponse.  # noqa: E501

        Enabled for activity line display  # noqa: E501

        :return: The activity_line_enabled of this ActivityEventResponse.  # noqa: E501
        :rtype: bool
        """
        return self._activity_line_enabled

    @activity_line_enabled.setter
    def activity_line_enabled(self, activity_line_enabled):
        """Sets the activity_line_enabled of this ActivityEventResponse.

        Enabled for activity line display  # noqa: E501

        :param activity_line_enabled: The activity_line_enabled of this ActivityEventResponse.  # noqa: E501
        :type: bool
        """
        if activity_line_enabled is None:
            raise ValueError("Invalid value for `activity_line_enabled`, must not be `None`")  # noqa: E501

        self._activity_line_enabled = activity_line_enabled

    @property
    def asset_card_enabled(self):
        """Gets the asset_card_enabled of this ActivityEventResponse.  # noqa: E501

        Enabled for asset card display  # noqa: E501

        :return: The asset_card_enabled of this ActivityEventResponse.  # noqa: E501
        :rtype: bool
        """
        return self._asset_card_enabled

    @asset_card_enabled.setter
    def asset_card_enabled(self, asset_card_enabled):
        """Sets the asset_card_enabled of this ActivityEventResponse.

        Enabled for asset card display  # noqa: E501

        :param asset_card_enabled: The asset_card_enabled of this ActivityEventResponse.  # noqa: E501
        :type: bool
        """
        if asset_card_enabled is None:
            raise ValueError("Invalid value for `asset_card_enabled`, must not be `None`")  # noqa: E501

        self._asset_card_enabled = asset_card_enabled

    @property
    def document(self):
        """Gets the document of this ActivityEventResponse.  # noqa: E501


        :return: The document of this ActivityEventResponse.  # noqa: E501
        :rtype: DocumentChild
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this ActivityEventResponse.


        :param document: The document of this ActivityEventResponse.  # noqa: E501
        :type: DocumentChild
        """

        self._document = document

    @property
    def location(self):
        """Gets the location of this ActivityEventResponse.  # noqa: E501


        :return: The location of this ActivityEventResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ActivityEventResponse.


        :param location: The location of this ActivityEventResponse.  # noqa: E501
        :type: LocationChild
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def category(self):
        """Gets the category of this ActivityEventResponse.  # noqa: E501


        :return: The category of this ActivityEventResponse.  # noqa: E501
        :rtype: ActivityEventCategoryChild
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ActivityEventResponse.


        :param category: The category of this ActivityEventResponse.  # noqa: E501
        :type: ActivityEventCategoryChild
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def subcategories(self):
        """Gets the subcategories of this ActivityEventResponse.  # noqa: E501

        List of subcategories  # noqa: E501

        :return: The subcategories of this ActivityEventResponse.  # noqa: E501
        :rtype: list[ActivityEventSubcategoryChild]
        """
        return self._subcategories

    @subcategories.setter
    def subcategories(self, subcategories):
        """Sets the subcategories of this ActivityEventResponse.

        List of subcategories  # noqa: E501

        :param subcategories: The subcategories of this ActivityEventResponse.  # noqa: E501
        :type: list[ActivityEventSubcategoryChild]
        """
        if subcategories is None:
            raise ValueError("Invalid value for `subcategories`, must not be `None`")  # noqa: E501

        self._subcategories = subcategories

    @property
    def binds(self):
        """Gets the binds of this ActivityEventResponse.  # noqa: E501

        List of binds (entity associations)  # noqa: E501

        :return: The binds of this ActivityEventResponse.  # noqa: E501
        :rtype: list[ActivityEventBindChild]
        """
        return self._binds

    @binds.setter
    def binds(self, binds):
        """Sets the binds of this ActivityEventResponse.

        List of binds (entity associations)  # noqa: E501

        :param binds: The binds of this ActivityEventResponse.  # noqa: E501
        :type: list[ActivityEventBindChild]
        """
        if binds is None:
            raise ValueError("Invalid value for `binds`, must not be `None`")  # noqa: E501

        self._binds = binds

    @property
    def fields(self):
        """Gets the fields of this ActivityEventResponse.  # noqa: E501

        List of field / field entries  # noqa: E501

        :return: The fields of this ActivityEventResponse.  # noqa: E501
        :rtype: list[ActivityEventFieldEntryChild]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ActivityEventResponse.

        List of field / field entries  # noqa: E501

        :param fields: The fields of this ActivityEventResponse.  # noqa: E501
        :type: list[ActivityEventFieldEntryChild]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    @property
    def relationships(self):
        """Gets the relationships of this ActivityEventResponse.  # noqa: E501

        List of relationships involving this activity event.  # noqa: E501

        :return: The relationships of this ActivityEventResponse.  # noqa: E501
        :rtype: list[ActivityEventRelationshipChild]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this ActivityEventResponse.

        List of relationships involving this activity event.  # noqa: E501

        :param relationships: The relationships of this ActivityEventResponse.  # noqa: E501
        :type: list[ActivityEventRelationshipChild]
        """
        if relationships is None:
            raise ValueError("Invalid value for `relationships`, must not be `None`")  # noqa: E501

        self._relationships = relationships

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityEventResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityEventResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
