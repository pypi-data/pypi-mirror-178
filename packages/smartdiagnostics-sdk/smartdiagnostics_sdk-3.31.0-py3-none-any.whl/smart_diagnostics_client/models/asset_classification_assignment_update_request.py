# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetClassificationAssignmentUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_type_id': 'int',
        'asset_category_id': 'int',
        'parameter_values': 'list[AssetClassificationParameterValueChild]'
    }

    attribute_map = {
        'asset_type_id': 'AssetTypeId',
        'asset_category_id': 'AssetCategoryId',
        'parameter_values': 'ParameterValues'
    }

    def __init__(self, asset_type_id=None, asset_category_id=None, parameter_values=None):  # noqa: E501
        """AssetClassificationAssignmentUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._asset_type_id = None
        self._asset_category_id = None
        self._parameter_values = None
        self.discriminator = None
        if asset_type_id is not None:
            self.asset_type_id = asset_type_id
        if asset_category_id is not None:
            self.asset_category_id = asset_category_id
        if parameter_values is not None:
            self.parameter_values = parameter_values

    @property
    def asset_type_id(self):
        """Gets the asset_type_id of this AssetClassificationAssignmentUpdateRequest.  # noqa: E501


        :return: The asset_type_id of this AssetClassificationAssignmentUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._asset_type_id

    @asset_type_id.setter
    def asset_type_id(self, asset_type_id):
        """Sets the asset_type_id of this AssetClassificationAssignmentUpdateRequest.


        :param asset_type_id: The asset_type_id of this AssetClassificationAssignmentUpdateRequest.  # noqa: E501
        :type: int
        """

        self._asset_type_id = asset_type_id

    @property
    def asset_category_id(self):
        """Gets the asset_category_id of this AssetClassificationAssignmentUpdateRequest.  # noqa: E501


        :return: The asset_category_id of this AssetClassificationAssignmentUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._asset_category_id

    @asset_category_id.setter
    def asset_category_id(self, asset_category_id):
        """Sets the asset_category_id of this AssetClassificationAssignmentUpdateRequest.


        :param asset_category_id: The asset_category_id of this AssetClassificationAssignmentUpdateRequest.  # noqa: E501
        :type: int
        """

        self._asset_category_id = asset_category_id

    @property
    def parameter_values(self):
        """Gets the parameter_values of this AssetClassificationAssignmentUpdateRequest.  # noqa: E501


        :return: The parameter_values of this AssetClassificationAssignmentUpdateRequest.  # noqa: E501
        :rtype: list[AssetClassificationParameterValueChild]
        """
        return self._parameter_values

    @parameter_values.setter
    def parameter_values(self, parameter_values):
        """Sets the parameter_values of this AssetClassificationAssignmentUpdateRequest.


        :param parameter_values: The parameter_values of this AssetClassificationAssignmentUpdateRequest.  # noqa: E501
        :type: list[AssetClassificationParameterValueChild]
        """

        self._parameter_values = parameter_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetClassificationAssignmentUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetClassificationAssignmentUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
