# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'abbreviation': 'str',
        'location_id': 'str',
        'is_collector_dependent_system': 'bool',
        'description': 'str',
        'is_visible': 'bool',
        'cds_master_system_ids': 'list[str]',
        'cds_base_station_ids': 'list[int]'
    }

    attribute_map = {
        'name': 'Name',
        'abbreviation': 'Abbreviation',
        'location_id': 'LocationId',
        'is_collector_dependent_system': 'IsCollectorDependentSystem',
        'description': 'Description',
        'is_visible': 'IsVisible',
        'cds_master_system_ids': 'CdsMasterSystemIds',
        'cds_base_station_ids': 'CdsBaseStationIds'
    }

    def __init__(self, name=None, abbreviation=None, location_id=None, is_collector_dependent_system=None, description=None, is_visible=None, cds_master_system_ids=None, cds_base_station_ids=None):  # noqa: E501
        """SystemCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._abbreviation = None
        self._location_id = None
        self._is_collector_dependent_system = None
        self._description = None
        self._is_visible = None
        self._cds_master_system_ids = None
        self._cds_base_station_ids = None
        self.discriminator = None
        self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        self.location_id = location_id
        self.is_collector_dependent_system = is_collector_dependent_system
        if description is not None:
            self.description = description
        self.is_visible = is_visible
        if cds_master_system_ids is not None:
            self.cds_master_system_ids = cds_master_system_ids
        if cds_base_station_ids is not None:
            self.cds_base_station_ids = cds_base_station_ids

    @property
    def name(self):
        """Gets the name of this SystemCreateRequest.  # noqa: E501


        :return: The name of this SystemCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemCreateRequest.


        :param name: The name of this SystemCreateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this SystemCreateRequest.  # noqa: E501


        :return: The abbreviation of this SystemCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this SystemCreateRequest.


        :param abbreviation: The abbreviation of this SystemCreateRequest.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def location_id(self):
        """Gets the location_id of this SystemCreateRequest.  # noqa: E501


        :return: The location_id of this SystemCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this SystemCreateRequest.


        :param location_id: The location_id of this SystemCreateRequest.  # noqa: E501
        :type: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def is_collector_dependent_system(self):
        """Gets the is_collector_dependent_system of this SystemCreateRequest.  # noqa: E501


        :return: The is_collector_dependent_system of this SystemCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_collector_dependent_system

    @is_collector_dependent_system.setter
    def is_collector_dependent_system(self, is_collector_dependent_system):
        """Sets the is_collector_dependent_system of this SystemCreateRequest.


        :param is_collector_dependent_system: The is_collector_dependent_system of this SystemCreateRequest.  # noqa: E501
        :type: bool
        """
        if is_collector_dependent_system is None:
            raise ValueError("Invalid value for `is_collector_dependent_system`, must not be `None`")  # noqa: E501

        self._is_collector_dependent_system = is_collector_dependent_system

    @property
    def description(self):
        """Gets the description of this SystemCreateRequest.  # noqa: E501


        :return: The description of this SystemCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SystemCreateRequest.


        :param description: The description of this SystemCreateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_visible(self):
        """Gets the is_visible of this SystemCreateRequest.  # noqa: E501


        :return: The is_visible of this SystemCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this SystemCreateRequest.


        :param is_visible: The is_visible of this SystemCreateRequest.  # noqa: E501
        :type: bool
        """
        if is_visible is None:
            raise ValueError("Invalid value for `is_visible`, must not be `None`")  # noqa: E501

        self._is_visible = is_visible

    @property
    def cds_master_system_ids(self):
        """Gets the cds_master_system_ids of this SystemCreateRequest.  # noqa: E501


        :return: The cds_master_system_ids of this SystemCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._cds_master_system_ids

    @cds_master_system_ids.setter
    def cds_master_system_ids(self, cds_master_system_ids):
        """Sets the cds_master_system_ids of this SystemCreateRequest.


        :param cds_master_system_ids: The cds_master_system_ids of this SystemCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._cds_master_system_ids = cds_master_system_ids

    @property
    def cds_base_station_ids(self):
        """Gets the cds_base_station_ids of this SystemCreateRequest.  # noqa: E501


        :return: The cds_base_station_ids of this SystemCreateRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._cds_base_station_ids

    @cds_base_station_ids.setter
    def cds_base_station_ids(self, cds_base_station_ids):
        """Sets the cds_base_station_ids of this SystemCreateRequest.


        :param cds_base_station_ids: The cds_base_station_ids of this SystemCreateRequest.  # noqa: E501
        :type: list[int]
        """

        self._cds_base_station_ids = cds_base_station_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
