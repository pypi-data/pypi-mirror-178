# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrentUserUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accept_eula': 'bool',
        'first_name': 'str',
        'last_name': 'str',
        'phone_number': 'str',
        'phone_confirmation_code': 'str'
    }

    attribute_map = {
        'accept_eula': 'AcceptEula',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'phone_number': 'PhoneNumber',
        'phone_confirmation_code': 'PhoneConfirmationCode'
    }

    def __init__(self, accept_eula=None, first_name=None, last_name=None, phone_number=None, phone_confirmation_code=None):  # noqa: E501
        """CurrentUserUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._accept_eula = None
        self._first_name = None
        self._last_name = None
        self._phone_number = None
        self._phone_confirmation_code = None
        self.discriminator = None
        self.accept_eula = accept_eula
        self.first_name = first_name
        self.last_name = last_name
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_confirmation_code is not None:
            self.phone_confirmation_code = phone_confirmation_code

    @property
    def accept_eula(self):
        """Gets the accept_eula of this CurrentUserUpdateRequest.  # noqa: E501

        If the EULA is accepted or declined  # noqa: E501

        :return: The accept_eula of this CurrentUserUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._accept_eula

    @accept_eula.setter
    def accept_eula(self, accept_eula):
        """Sets the accept_eula of this CurrentUserUpdateRequest.

        If the EULA is accepted or declined  # noqa: E501

        :param accept_eula: The accept_eula of this CurrentUserUpdateRequest.  # noqa: E501
        :type: bool
        """
        if accept_eula is None:
            raise ValueError("Invalid value for `accept_eula`, must not be `None`")  # noqa: E501

        self._accept_eula = accept_eula

    @property
    def first_name(self):
        """Gets the first_name of this CurrentUserUpdateRequest.  # noqa: E501

        The user's first name  # noqa: E501

        :return: The first_name of this CurrentUserUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CurrentUserUpdateRequest.

        The user's first name  # noqa: E501

        :param first_name: The first_name of this CurrentUserUpdateRequest.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CurrentUserUpdateRequest.  # noqa: E501

        The user's last name  # noqa: E501

        :return: The last_name of this CurrentUserUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CurrentUserUpdateRequest.

        The user's last name  # noqa: E501

        :param last_name: The last_name of this CurrentUserUpdateRequest.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this CurrentUserUpdateRequest.  # noqa: E501

        User's phone number, formatted as [+][country code][area code][local phone number] (ex: +14151231234)  # noqa: E501

        :return: The phone_number of this CurrentUserUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CurrentUserUpdateRequest.

        User's phone number, formatted as [+][country code][area code][local phone number] (ex: +14151231234)  # noqa: E501

        :param phone_number: The phone_number of this CurrentUserUpdateRequest.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_confirmation_code(self):
        """Gets the phone_confirmation_code of this CurrentUserUpdateRequest.  # noqa: E501

        Confirmation code from text message sent to user's phone. Must be included if changing a user's PhoneNumber  # noqa: E501

        :return: The phone_confirmation_code of this CurrentUserUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_confirmation_code

    @phone_confirmation_code.setter
    def phone_confirmation_code(self, phone_confirmation_code):
        """Sets the phone_confirmation_code of this CurrentUserUpdateRequest.

        Confirmation code from text message sent to user's phone. Must be included if changing a user's PhoneNumber  # noqa: E501

        :param phone_confirmation_code: The phone_confirmation_code of this CurrentUserUpdateRequest.  # noqa: E501
        :type: str
        """

        self._phone_confirmation_code = phone_confirmation_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentUserUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentUserUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
