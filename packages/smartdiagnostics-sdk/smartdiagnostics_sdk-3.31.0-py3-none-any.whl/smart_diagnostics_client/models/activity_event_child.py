# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityEventChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'description': 'str',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'location_id': 'str',
        'category': 'ActivityEventCategoryChild'
    }

    attribute_map = {
        'id': 'Id',
        'title': 'Title',
        'description': 'Description',
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'location_id': 'LocationId',
        'category': 'Category'
    }

    def __init__(self, id=None, title=None, description=None, start_date_time=None, end_date_time=None, location_id=None, category=None):  # noqa: E501
        """ActivityEventChild - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._description = None
        self._start_date_time = None
        self._end_date_time = None
        self._location_id = None
        self._category = None
        self.discriminator = None
        self.id = id
        self.title = title
        if description is not None:
            self.description = description
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.location_id = location_id
        self.category = category

    @property
    def id(self):
        """Gets the id of this ActivityEventChild.  # noqa: E501


        :return: The id of this ActivityEventChild.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityEventChild.


        :param id: The id of this ActivityEventChild.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this ActivityEventChild.  # noqa: E501


        :return: The title of this ActivityEventChild.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActivityEventChild.


        :param title: The title of this ActivityEventChild.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this ActivityEventChild.  # noqa: E501


        :return: The description of this ActivityEventChild.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityEventChild.


        :param description: The description of this ActivityEventChild.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ActivityEventChild.  # noqa: E501


        :return: The start_date_time of this ActivityEventChild.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ActivityEventChild.


        :param start_date_time: The start_date_time of this ActivityEventChild.  # noqa: E501
        :type: datetime
        """
        if start_date_time is None:
            raise ValueError("Invalid value for `start_date_time`, must not be `None`")  # noqa: E501

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ActivityEventChild.  # noqa: E501


        :return: The end_date_time of this ActivityEventChild.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ActivityEventChild.


        :param end_date_time: The end_date_time of this ActivityEventChild.  # noqa: E501
        :type: datetime
        """
        if end_date_time is None:
            raise ValueError("Invalid value for `end_date_time`, must not be `None`")  # noqa: E501

        self._end_date_time = end_date_time

    @property
    def location_id(self):
        """Gets the location_id of this ActivityEventChild.  # noqa: E501


        :return: The location_id of this ActivityEventChild.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ActivityEventChild.


        :param location_id: The location_id of this ActivityEventChild.  # noqa: E501
        :type: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def category(self):
        """Gets the category of this ActivityEventChild.  # noqa: E501


        :return: The category of this ActivityEventChild.  # noqa: E501
        :rtype: ActivityEventCategoryChild
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ActivityEventChild.


        :param category: The category of this ActivityEventChild.  # noqa: E501
        :type: ActivityEventCategoryChild
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityEventChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityEventChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
