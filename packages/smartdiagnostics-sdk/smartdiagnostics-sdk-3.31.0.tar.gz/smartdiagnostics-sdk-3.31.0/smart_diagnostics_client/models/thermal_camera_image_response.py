# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThermalCameraImageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'datetime',
        'image': 'str',
        'thermal_camera_serial_number': 'int'
    }

    attribute_map = {
        'timestamp': 'Timestamp',
        'image': 'Image',
        'thermal_camera_serial_number': 'ThermalCameraSerialNumber'
    }

    def __init__(self, timestamp=None, image=None, thermal_camera_serial_number=None):  # noqa: E501
        """ThermalCameraImageResponse - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._image = None
        self._thermal_camera_serial_number = None
        self.discriminator = None
        self.timestamp = timestamp
        self.image = image
        self.thermal_camera_serial_number = thermal_camera_serial_number

    @property
    def timestamp(self):
        """Gets the timestamp of this ThermalCameraImageResponse.  # noqa: E501


        :return: The timestamp of this ThermalCameraImageResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ThermalCameraImageResponse.


        :param timestamp: The timestamp of this ThermalCameraImageResponse.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def image(self):
        """Gets the image of this ThermalCameraImageResponse.  # noqa: E501


        :return: The image of this ThermalCameraImageResponse.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ThermalCameraImageResponse.


        :param image: The image of this ThermalCameraImageResponse.  # noqa: E501
        :type: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def thermal_camera_serial_number(self):
        """Gets the thermal_camera_serial_number of this ThermalCameraImageResponse.  # noqa: E501


        :return: The thermal_camera_serial_number of this ThermalCameraImageResponse.  # noqa: E501
        :rtype: int
        """
        return self._thermal_camera_serial_number

    @thermal_camera_serial_number.setter
    def thermal_camera_serial_number(self, thermal_camera_serial_number):
        """Sets the thermal_camera_serial_number of this ThermalCameraImageResponse.


        :param thermal_camera_serial_number: The thermal_camera_serial_number of this ThermalCameraImageResponse.  # noqa: E501
        :type: int
        """
        if thermal_camera_serial_number is None:
            raise ValueError("Invalid value for `thermal_camera_serial_number`, must not be `None`")  # noqa: E501

        self._thermal_camera_serial_number = thermal_camera_serial_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThermalCameraImageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThermalCameraImageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
