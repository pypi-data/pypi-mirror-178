# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_id': 'str',
        'status_name': 'str',
        'status_color': 'str',
        'status_icon': 'str',
        'status_active': 'bool',
        'status_is_custom': 'bool',
        'status_sort_order': 'int'
    }

    attribute_map = {
        'status_id': 'StatusId',
        'status_name': 'StatusName',
        'status_color': 'StatusColor',
        'status_icon': 'StatusIcon',
        'status_active': 'StatusActive',
        'status_is_custom': 'StatusIsCustom',
        'status_sort_order': 'StatusSortOrder'
    }

    def __init__(self, status_id=None, status_name=None, status_color=None, status_icon=None, status_active=None, status_is_custom=None, status_sort_order=None):  # noqa: E501
        """StatusChild - a model defined in Swagger"""  # noqa: E501
        self._status_id = None
        self._status_name = None
        self._status_color = None
        self._status_icon = None
        self._status_active = None
        self._status_is_custom = None
        self._status_sort_order = None
        self.discriminator = None
        self.status_id = status_id
        self.status_name = status_name
        self.status_color = status_color
        if status_icon is not None:
            self.status_icon = status_icon
        self.status_active = status_active
        self.status_is_custom = status_is_custom
        if status_sort_order is not None:
            self.status_sort_order = status_sort_order

    @property
    def status_id(self):
        """Gets the status_id of this StatusChild.  # noqa: E501

        The id of the status  # noqa: E501

        :return: The status_id of this StatusChild.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this StatusChild.

        The id of the status  # noqa: E501

        :param status_id: The status_id of this StatusChild.  # noqa: E501
        :type: str
        """
        if status_id is None:
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def status_name(self):
        """Gets the status_name of this StatusChild.  # noqa: E501

        The name of the status  # noqa: E501

        :return: The status_name of this StatusChild.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this StatusChild.

        The name of the status  # noqa: E501

        :param status_name: The status_name of this StatusChild.  # noqa: E501
        :type: str
        """
        if status_name is None:
            raise ValueError("Invalid value for `status_name`, must not be `None`")  # noqa: E501

        self._status_name = status_name

    @property
    def status_color(self):
        """Gets the status_color of this StatusChild.  # noqa: E501

        The color of the status in hex  # noqa: E501

        :return: The status_color of this StatusChild.  # noqa: E501
        :rtype: str
        """
        return self._status_color

    @status_color.setter
    def status_color(self, status_color):
        """Sets the status_color of this StatusChild.

        The color of the status in hex  # noqa: E501

        :param status_color: The status_color of this StatusChild.  # noqa: E501
        :type: str
        """
        if status_color is None:
            raise ValueError("Invalid value for `status_color`, must not be `None`")  # noqa: E501

        self._status_color = status_color

    @property
    def status_icon(self):
        """Gets the status_icon of this StatusChild.  # noqa: E501

        The fontawesome icon name of the status  # noqa: E501

        :return: The status_icon of this StatusChild.  # noqa: E501
        :rtype: str
        """
        return self._status_icon

    @status_icon.setter
    def status_icon(self, status_icon):
        """Sets the status_icon of this StatusChild.

        The fontawesome icon name of the status  # noqa: E501

        :param status_icon: The status_icon of this StatusChild.  # noqa: E501
        :type: str
        """

        self._status_icon = status_icon

    @property
    def status_active(self):
        """Gets the status_active of this StatusChild.  # noqa: E501

        Whether the status is active  # noqa: E501

        :return: The status_active of this StatusChild.  # noqa: E501
        :rtype: bool
        """
        return self._status_active

    @status_active.setter
    def status_active(self, status_active):
        """Sets the status_active of this StatusChild.

        Whether the status is active  # noqa: E501

        :param status_active: The status_active of this StatusChild.  # noqa: E501
        :type: bool
        """
        if status_active is None:
            raise ValueError("Invalid value for `status_active`, must not be `None`")  # noqa: E501

        self._status_active = status_active

    @property
    def status_is_custom(self):
        """Gets the status_is_custom of this StatusChild.  # noqa: E501

        Whether the status is custom  # noqa: E501

        :return: The status_is_custom of this StatusChild.  # noqa: E501
        :rtype: bool
        """
        return self._status_is_custom

    @status_is_custom.setter
    def status_is_custom(self, status_is_custom):
        """Sets the status_is_custom of this StatusChild.

        Whether the status is custom  # noqa: E501

        :param status_is_custom: The status_is_custom of this StatusChild.  # noqa: E501
        :type: bool
        """
        if status_is_custom is None:
            raise ValueError("Invalid value for `status_is_custom`, must not be `None`")  # noqa: E501

        self._status_is_custom = status_is_custom

    @property
    def status_sort_order(self):
        """Gets the status_sort_order of this StatusChild.  # noqa: E501

        The sort order for the status  # noqa: E501

        :return: The status_sort_order of this StatusChild.  # noqa: E501
        :rtype: int
        """
        return self._status_sort_order

    @status_sort_order.setter
    def status_sort_order(self, status_sort_order):
        """Sets the status_sort_order of this StatusChild.

        The sort order for the status  # noqa: E501

        :param status_sort_order: The status_sort_order of this StatusChild.  # noqa: E501
        :type: int
        """

        self._status_sort_order = status_sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
