# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_id': 'str',
        'name': 'str',
        'abbreviation': 'str',
        'supplier': 'str',
        'manufacturer': 'str',
        'model_name': 'str',
        'location_notes': 'str',
        'notes': 'str',
        'generic_input': 'str',
        'is_operator_view': 'bool',
        'type_id': 'int',
        'category_id': 'int',
        'size_id': 'int',
        'criticality_id': 'int',
        'asset_cost': 'float',
        'date_installed': 'datetime',
        'annual_run_time': 'float',
        'lost_production_cost': 'float',
        'overhaul_cost': 'float',
        'power_consumption': 'float',
        'life_expectancy': 'float',
        'unscheduled_downtime': 'float',
        'running_speed_harmonic': 'float'
    }

    attribute_map = {
        'parent_id': 'ParentId',
        'name': 'Name',
        'abbreviation': 'Abbreviation',
        'supplier': 'Supplier',
        'manufacturer': 'Manufacturer',
        'model_name': 'ModelName',
        'location_notes': 'LocationNotes',
        'notes': 'Notes',
        'generic_input': 'GenericInput',
        'is_operator_view': 'IsOperatorView',
        'type_id': 'TypeId',
        'category_id': 'CategoryId',
        'size_id': 'SizeId',
        'criticality_id': 'CriticalityId',
        'asset_cost': 'AssetCost',
        'date_installed': 'DateInstalled',
        'annual_run_time': 'AnnualRunTime',
        'lost_production_cost': 'LostProductionCost',
        'overhaul_cost': 'OverhaulCost',
        'power_consumption': 'PowerConsumption',
        'life_expectancy': 'LifeExpectancy',
        'unscheduled_downtime': 'UnscheduledDowntime',
        'running_speed_harmonic': 'RunningSpeedHarmonic'
    }

    def __init__(self, parent_id=None, name=None, abbreviation=None, supplier=None, manufacturer=None, model_name=None, location_notes=None, notes=None, generic_input=None, is_operator_view=None, type_id=None, category_id=None, size_id=None, criticality_id=None, asset_cost=None, date_installed=None, annual_run_time=None, lost_production_cost=None, overhaul_cost=None, power_consumption=None, life_expectancy=None, unscheduled_downtime=None, running_speed_harmonic=None):  # noqa: E501
        """AssetCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._parent_id = None
        self._name = None
        self._abbreviation = None
        self._supplier = None
        self._manufacturer = None
        self._model_name = None
        self._location_notes = None
        self._notes = None
        self._generic_input = None
        self._is_operator_view = None
        self._type_id = None
        self._category_id = None
        self._size_id = None
        self._criticality_id = None
        self._asset_cost = None
        self._date_installed = None
        self._annual_run_time = None
        self._lost_production_cost = None
        self._overhaul_cost = None
        self._power_consumption = None
        self._life_expectancy = None
        self._unscheduled_downtime = None
        self._running_speed_harmonic = None
        self.discriminator = None
        self.parent_id = parent_id
        self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if supplier is not None:
            self.supplier = supplier
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if model_name is not None:
            self.model_name = model_name
        if location_notes is not None:
            self.location_notes = location_notes
        if notes is not None:
            self.notes = notes
        if generic_input is not None:
            self.generic_input = generic_input
        self.is_operator_view = is_operator_view
        if type_id is not None:
            self.type_id = type_id
        if category_id is not None:
            self.category_id = category_id
        if size_id is not None:
            self.size_id = size_id
        if criticality_id is not None:
            self.criticality_id = criticality_id
        if asset_cost is not None:
            self.asset_cost = asset_cost
        if date_installed is not None:
            self.date_installed = date_installed
        if annual_run_time is not None:
            self.annual_run_time = annual_run_time
        if lost_production_cost is not None:
            self.lost_production_cost = lost_production_cost
        if overhaul_cost is not None:
            self.overhaul_cost = overhaul_cost
        if power_consumption is not None:
            self.power_consumption = power_consumption
        if life_expectancy is not None:
            self.life_expectancy = life_expectancy
        if unscheduled_downtime is not None:
            self.unscheduled_downtime = unscheduled_downtime
        if running_speed_harmonic is not None:
            self.running_speed_harmonic = running_speed_harmonic

    @property
    def parent_id(self):
        """Gets the parent_id of this AssetCreateRequest.  # noqa: E501


        :return: The parent_id of this AssetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this AssetCreateRequest.


        :param parent_id: The parent_id of this AssetCreateRequest.  # noqa: E501
        :type: str
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")  # noqa: E501

        self._parent_id = parent_id

    @property
    def name(self):
        """Gets the name of this AssetCreateRequest.  # noqa: E501


        :return: The name of this AssetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetCreateRequest.


        :param name: The name of this AssetCreateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this AssetCreateRequest.  # noqa: E501


        :return: The abbreviation of this AssetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this AssetCreateRequest.


        :param abbreviation: The abbreviation of this AssetCreateRequest.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def supplier(self):
        """Gets the supplier of this AssetCreateRequest.  # noqa: E501


        :return: The supplier of this AssetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this AssetCreateRequest.


        :param supplier: The supplier of this AssetCreateRequest.  # noqa: E501
        :type: str
        """

        self._supplier = supplier

    @property
    def manufacturer(self):
        """Gets the manufacturer of this AssetCreateRequest.  # noqa: E501


        :return: The manufacturer of this AssetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this AssetCreateRequest.


        :param manufacturer: The manufacturer of this AssetCreateRequest.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def model_name(self):
        """Gets the model_name of this AssetCreateRequest.  # noqa: E501


        :return: The model_name of this AssetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this AssetCreateRequest.


        :param model_name: The model_name of this AssetCreateRequest.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def location_notes(self):
        """Gets the location_notes of this AssetCreateRequest.  # noqa: E501


        :return: The location_notes of this AssetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_notes

    @location_notes.setter
    def location_notes(self, location_notes):
        """Sets the location_notes of this AssetCreateRequest.


        :param location_notes: The location_notes of this AssetCreateRequest.  # noqa: E501
        :type: str
        """

        self._location_notes = location_notes

    @property
    def notes(self):
        """Gets the notes of this AssetCreateRequest.  # noqa: E501


        :return: The notes of this AssetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AssetCreateRequest.


        :param notes: The notes of this AssetCreateRequest.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def generic_input(self):
        """Gets the generic_input of this AssetCreateRequest.  # noqa: E501


        :return: The generic_input of this AssetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._generic_input

    @generic_input.setter
    def generic_input(self, generic_input):
        """Sets the generic_input of this AssetCreateRequest.


        :param generic_input: The generic_input of this AssetCreateRequest.  # noqa: E501
        :type: str
        """

        self._generic_input = generic_input

    @property
    def is_operator_view(self):
        """Gets the is_operator_view of this AssetCreateRequest.  # noqa: E501


        :return: The is_operator_view of this AssetCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_operator_view

    @is_operator_view.setter
    def is_operator_view(self, is_operator_view):
        """Sets the is_operator_view of this AssetCreateRequest.


        :param is_operator_view: The is_operator_view of this AssetCreateRequest.  # noqa: E501
        :type: bool
        """
        if is_operator_view is None:
            raise ValueError("Invalid value for `is_operator_view`, must not be `None`")  # noqa: E501

        self._is_operator_view = is_operator_view

    @property
    def type_id(self):
        """Gets the type_id of this AssetCreateRequest.  # noqa: E501


        :return: The type_id of this AssetCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this AssetCreateRequest.


        :param type_id: The type_id of this AssetCreateRequest.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def category_id(self):
        """Gets the category_id of this AssetCreateRequest.  # noqa: E501


        :return: The category_id of this AssetCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this AssetCreateRequest.


        :param category_id: The category_id of this AssetCreateRequest.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def size_id(self):
        """Gets the size_id of this AssetCreateRequest.  # noqa: E501


        :return: The size_id of this AssetCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._size_id

    @size_id.setter
    def size_id(self, size_id):
        """Sets the size_id of this AssetCreateRequest.


        :param size_id: The size_id of this AssetCreateRequest.  # noqa: E501
        :type: int
        """

        self._size_id = size_id

    @property
    def criticality_id(self):
        """Gets the criticality_id of this AssetCreateRequest.  # noqa: E501


        :return: The criticality_id of this AssetCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._criticality_id

    @criticality_id.setter
    def criticality_id(self, criticality_id):
        """Sets the criticality_id of this AssetCreateRequest.


        :param criticality_id: The criticality_id of this AssetCreateRequest.  # noqa: E501
        :type: int
        """

        self._criticality_id = criticality_id

    @property
    def asset_cost(self):
        """Gets the asset_cost of this AssetCreateRequest.  # noqa: E501


        :return: The asset_cost of this AssetCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._asset_cost

    @asset_cost.setter
    def asset_cost(self, asset_cost):
        """Sets the asset_cost of this AssetCreateRequest.


        :param asset_cost: The asset_cost of this AssetCreateRequest.  # noqa: E501
        :type: float
        """

        self._asset_cost = asset_cost

    @property
    def date_installed(self):
        """Gets the date_installed of this AssetCreateRequest.  # noqa: E501


        :return: The date_installed of this AssetCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_installed

    @date_installed.setter
    def date_installed(self, date_installed):
        """Sets the date_installed of this AssetCreateRequest.


        :param date_installed: The date_installed of this AssetCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._date_installed = date_installed

    @property
    def annual_run_time(self):
        """Gets the annual_run_time of this AssetCreateRequest.  # noqa: E501


        :return: The annual_run_time of this AssetCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._annual_run_time

    @annual_run_time.setter
    def annual_run_time(self, annual_run_time):
        """Sets the annual_run_time of this AssetCreateRequest.


        :param annual_run_time: The annual_run_time of this AssetCreateRequest.  # noqa: E501
        :type: float
        """

        self._annual_run_time = annual_run_time

    @property
    def lost_production_cost(self):
        """Gets the lost_production_cost of this AssetCreateRequest.  # noqa: E501


        :return: The lost_production_cost of this AssetCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._lost_production_cost

    @lost_production_cost.setter
    def lost_production_cost(self, lost_production_cost):
        """Sets the lost_production_cost of this AssetCreateRequest.


        :param lost_production_cost: The lost_production_cost of this AssetCreateRequest.  # noqa: E501
        :type: float
        """

        self._lost_production_cost = lost_production_cost

    @property
    def overhaul_cost(self):
        """Gets the overhaul_cost of this AssetCreateRequest.  # noqa: E501


        :return: The overhaul_cost of this AssetCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._overhaul_cost

    @overhaul_cost.setter
    def overhaul_cost(self, overhaul_cost):
        """Sets the overhaul_cost of this AssetCreateRequest.


        :param overhaul_cost: The overhaul_cost of this AssetCreateRequest.  # noqa: E501
        :type: float
        """

        self._overhaul_cost = overhaul_cost

    @property
    def power_consumption(self):
        """Gets the power_consumption of this AssetCreateRequest.  # noqa: E501


        :return: The power_consumption of this AssetCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._power_consumption

    @power_consumption.setter
    def power_consumption(self, power_consumption):
        """Sets the power_consumption of this AssetCreateRequest.


        :param power_consumption: The power_consumption of this AssetCreateRequest.  # noqa: E501
        :type: float
        """

        self._power_consumption = power_consumption

    @property
    def life_expectancy(self):
        """Gets the life_expectancy of this AssetCreateRequest.  # noqa: E501


        :return: The life_expectancy of this AssetCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._life_expectancy

    @life_expectancy.setter
    def life_expectancy(self, life_expectancy):
        """Sets the life_expectancy of this AssetCreateRequest.


        :param life_expectancy: The life_expectancy of this AssetCreateRequest.  # noqa: E501
        :type: float
        """

        self._life_expectancy = life_expectancy

    @property
    def unscheduled_downtime(self):
        """Gets the unscheduled_downtime of this AssetCreateRequest.  # noqa: E501


        :return: The unscheduled_downtime of this AssetCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._unscheduled_downtime

    @unscheduled_downtime.setter
    def unscheduled_downtime(self, unscheduled_downtime):
        """Sets the unscheduled_downtime of this AssetCreateRequest.


        :param unscheduled_downtime: The unscheduled_downtime of this AssetCreateRequest.  # noqa: E501
        :type: float
        """

        self._unscheduled_downtime = unscheduled_downtime

    @property
    def running_speed_harmonic(self):
        """Gets the running_speed_harmonic of this AssetCreateRequest.  # noqa: E501


        :return: The running_speed_harmonic of this AssetCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._running_speed_harmonic

    @running_speed_harmonic.setter
    def running_speed_harmonic(self, running_speed_harmonic):
        """Sets the running_speed_harmonic of this AssetCreateRequest.


        :param running_speed_harmonic: The running_speed_harmonic of this AssetCreateRequest.  # noqa: E501
        :type: float
        """

        self._running_speed_harmonic = running_speed_harmonic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
