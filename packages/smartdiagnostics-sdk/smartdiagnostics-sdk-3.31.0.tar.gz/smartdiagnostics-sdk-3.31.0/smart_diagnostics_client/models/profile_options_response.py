# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileOptionsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acceleration_units': 'list[OptionChild]',
        'date_formats': 'list[OptionChild]',
        'pressure_units': 'list[OptionChild]',
        'temperature_units': 'list[OptionChild]',
        'time_formats': 'list[OptionChild]',
        'velocity_units': 'list[OptionChild]',
        'time_zones': 'list[OptionChild]'
    }

    attribute_map = {
        'acceleration_units': 'AccelerationUnits',
        'date_formats': 'DateFormats',
        'pressure_units': 'PressureUnits',
        'temperature_units': 'TemperatureUnits',
        'time_formats': 'TimeFormats',
        'velocity_units': 'VelocityUnits',
        'time_zones': 'TimeZones'
    }

    def __init__(self, acceleration_units=None, date_formats=None, pressure_units=None, temperature_units=None, time_formats=None, velocity_units=None, time_zones=None):  # noqa: E501
        """ProfileOptionsResponse - a model defined in Swagger"""  # noqa: E501
        self._acceleration_units = None
        self._date_formats = None
        self._pressure_units = None
        self._temperature_units = None
        self._time_formats = None
        self._velocity_units = None
        self._time_zones = None
        self.discriminator = None
        self.acceleration_units = acceleration_units
        self.date_formats = date_formats
        self.pressure_units = pressure_units
        self.temperature_units = temperature_units
        self.time_formats = time_formats
        self.velocity_units = velocity_units
        self.time_zones = time_zones

    @property
    def acceleration_units(self):
        """Gets the acceleration_units of this ProfileOptionsResponse.  # noqa: E501

        All acceleration units that the user is able to choose from  # noqa: E501

        :return: The acceleration_units of this ProfileOptionsResponse.  # noqa: E501
        :rtype: list[OptionChild]
        """
        return self._acceleration_units

    @acceleration_units.setter
    def acceleration_units(self, acceleration_units):
        """Sets the acceleration_units of this ProfileOptionsResponse.

        All acceleration units that the user is able to choose from  # noqa: E501

        :param acceleration_units: The acceleration_units of this ProfileOptionsResponse.  # noqa: E501
        :type: list[OptionChild]
        """
        if acceleration_units is None:
            raise ValueError("Invalid value for `acceleration_units`, must not be `None`")  # noqa: E501

        self._acceleration_units = acceleration_units

    @property
    def date_formats(self):
        """Gets the date_formats of this ProfileOptionsResponse.  # noqa: E501

        All date formats that the user is able to choose from  # noqa: E501

        :return: The date_formats of this ProfileOptionsResponse.  # noqa: E501
        :rtype: list[OptionChild]
        """
        return self._date_formats

    @date_formats.setter
    def date_formats(self, date_formats):
        """Sets the date_formats of this ProfileOptionsResponse.

        All date formats that the user is able to choose from  # noqa: E501

        :param date_formats: The date_formats of this ProfileOptionsResponse.  # noqa: E501
        :type: list[OptionChild]
        """
        if date_formats is None:
            raise ValueError("Invalid value for `date_formats`, must not be `None`")  # noqa: E501

        self._date_formats = date_formats

    @property
    def pressure_units(self):
        """Gets the pressure_units of this ProfileOptionsResponse.  # noqa: E501

        All pressure units that the user is able to choose from  # noqa: E501

        :return: The pressure_units of this ProfileOptionsResponse.  # noqa: E501
        :rtype: list[OptionChild]
        """
        return self._pressure_units

    @pressure_units.setter
    def pressure_units(self, pressure_units):
        """Sets the pressure_units of this ProfileOptionsResponse.

        All pressure units that the user is able to choose from  # noqa: E501

        :param pressure_units: The pressure_units of this ProfileOptionsResponse.  # noqa: E501
        :type: list[OptionChild]
        """
        if pressure_units is None:
            raise ValueError("Invalid value for `pressure_units`, must not be `None`")  # noqa: E501

        self._pressure_units = pressure_units

    @property
    def temperature_units(self):
        """Gets the temperature_units of this ProfileOptionsResponse.  # noqa: E501

        All temperature units that the user is able to choose from  # noqa: E501

        :return: The temperature_units of this ProfileOptionsResponse.  # noqa: E501
        :rtype: list[OptionChild]
        """
        return self._temperature_units

    @temperature_units.setter
    def temperature_units(self, temperature_units):
        """Sets the temperature_units of this ProfileOptionsResponse.

        All temperature units that the user is able to choose from  # noqa: E501

        :param temperature_units: The temperature_units of this ProfileOptionsResponse.  # noqa: E501
        :type: list[OptionChild]
        """
        if temperature_units is None:
            raise ValueError("Invalid value for `temperature_units`, must not be `None`")  # noqa: E501

        self._temperature_units = temperature_units

    @property
    def time_formats(self):
        """Gets the time_formats of this ProfileOptionsResponse.  # noqa: E501

        All time formats that the user is able to choose from  # noqa: E501

        :return: The time_formats of this ProfileOptionsResponse.  # noqa: E501
        :rtype: list[OptionChild]
        """
        return self._time_formats

    @time_formats.setter
    def time_formats(self, time_formats):
        """Sets the time_formats of this ProfileOptionsResponse.

        All time formats that the user is able to choose from  # noqa: E501

        :param time_formats: The time_formats of this ProfileOptionsResponse.  # noqa: E501
        :type: list[OptionChild]
        """
        if time_formats is None:
            raise ValueError("Invalid value for `time_formats`, must not be `None`")  # noqa: E501

        self._time_formats = time_formats

    @property
    def velocity_units(self):
        """Gets the velocity_units of this ProfileOptionsResponse.  # noqa: E501

        All velocity units that the user is able to choose from  # noqa: E501

        :return: The velocity_units of this ProfileOptionsResponse.  # noqa: E501
        :rtype: list[OptionChild]
        """
        return self._velocity_units

    @velocity_units.setter
    def velocity_units(self, velocity_units):
        """Sets the velocity_units of this ProfileOptionsResponse.

        All velocity units that the user is able to choose from  # noqa: E501

        :param velocity_units: The velocity_units of this ProfileOptionsResponse.  # noqa: E501
        :type: list[OptionChild]
        """
        if velocity_units is None:
            raise ValueError("Invalid value for `velocity_units`, must not be `None`")  # noqa: E501

        self._velocity_units = velocity_units

    @property
    def time_zones(self):
        """Gets the time_zones of this ProfileOptionsResponse.  # noqa: E501

        All time zones that the user is able to choose from  # noqa: E501

        :return: The time_zones of this ProfileOptionsResponse.  # noqa: E501
        :rtype: list[OptionChild]
        """
        return self._time_zones

    @time_zones.setter
    def time_zones(self, time_zones):
        """Sets the time_zones of this ProfileOptionsResponse.

        All time zones that the user is able to choose from  # noqa: E501

        :param time_zones: The time_zones of this ProfileOptionsResponse.  # noqa: E501
        :type: list[OptionChild]
        """
        if time_zones is None:
            raise ValueError("Invalid value for `time_zones`, must not be `None`")  # noqa: E501

        self._time_zones = time_zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileOptionsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileOptionsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
