# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilesUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'parent_folder_id': 'str',
        'description': 'str',
        'group_ids': 'list[str]'
    }

    attribute_map = {
        'display_name': 'DisplayName',
        'parent_folder_id': 'ParentFolderId',
        'description': 'Description',
        'group_ids': 'GroupIds'
    }

    def __init__(self, display_name=None, parent_folder_id=None, description=None, group_ids=None):  # noqa: E501
        """FilesUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._parent_folder_id = None
        self._description = None
        self._group_ids = None
        self.discriminator = None
        self.display_name = display_name
        self.parent_folder_id = parent_folder_id
        if description is not None:
            self.description = description
        if group_ids is not None:
            self.group_ids = group_ids

    @property
    def display_name(self):
        """Gets the display_name of this FilesUpdateRequest.  # noqa: E501


        :return: The display_name of this FilesUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FilesUpdateRequest.


        :param display_name: The display_name of this FilesUpdateRequest.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this FilesUpdateRequest.  # noqa: E501


        :return: The parent_folder_id of this FilesUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this FilesUpdateRequest.


        :param parent_folder_id: The parent_folder_id of this FilesUpdateRequest.  # noqa: E501
        :type: str
        """
        if parent_folder_id is None:
            raise ValueError("Invalid value for `parent_folder_id`, must not be `None`")  # noqa: E501

        self._parent_folder_id = parent_folder_id

    @property
    def description(self):
        """Gets the description of this FilesUpdateRequest.  # noqa: E501


        :return: The description of this FilesUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FilesUpdateRequest.


        :param description: The description of this FilesUpdateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def group_ids(self):
        """Gets the group_ids of this FilesUpdateRequest.  # noqa: E501


        :return: The group_ids of this FilesUpdateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this FilesUpdateRequest.


        :param group_ids: The group_ids of this FilesUpdateRequest.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
