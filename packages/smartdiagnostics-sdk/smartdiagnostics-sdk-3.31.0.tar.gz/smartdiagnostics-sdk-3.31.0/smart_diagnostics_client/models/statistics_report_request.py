# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatisticsReportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_percent_time_in_alarm': 'bool',
        'include_percent_time_in_warning': 'bool',
        'include_percent_on_time': 'bool',
        'include_seconds_in_alarm': 'bool',
        'include_average_value': 'bool',
        'include_max_value': 'bool',
        'filter_id': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'file_name': 'str'
    }

    attribute_map = {
        'include_percent_time_in_alarm': 'IncludePercentTimeInAlarm',
        'include_percent_time_in_warning': 'IncludePercentTimeInWarning',
        'include_percent_on_time': 'IncludePercentOnTime',
        'include_seconds_in_alarm': 'IncludeSecondsInAlarm',
        'include_average_value': 'IncludeAverageValue',
        'include_max_value': 'IncludeMaxValue',
        'filter_id': 'FilterId',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'file_name': 'FileName'
    }

    def __init__(self, include_percent_time_in_alarm=None, include_percent_time_in_warning=None, include_percent_on_time=None, include_seconds_in_alarm=None, include_average_value=None, include_max_value=None, filter_id=None, start_date=None, end_date=None, file_name=None):  # noqa: E501
        """StatisticsReportRequest - a model defined in Swagger"""  # noqa: E501
        self._include_percent_time_in_alarm = None
        self._include_percent_time_in_warning = None
        self._include_percent_on_time = None
        self._include_seconds_in_alarm = None
        self._include_average_value = None
        self._include_max_value = None
        self._filter_id = None
        self._start_date = None
        self._end_date = None
        self._file_name = None
        self.discriminator = None
        if include_percent_time_in_alarm is not None:
            self.include_percent_time_in_alarm = include_percent_time_in_alarm
        if include_percent_time_in_warning is not None:
            self.include_percent_time_in_warning = include_percent_time_in_warning
        if include_percent_on_time is not None:
            self.include_percent_on_time = include_percent_on_time
        if include_seconds_in_alarm is not None:
            self.include_seconds_in_alarm = include_seconds_in_alarm
        if include_average_value is not None:
            self.include_average_value = include_average_value
        if include_max_value is not None:
            self.include_max_value = include_max_value
        if filter_id is not None:
            self.filter_id = filter_id
        self.start_date = start_date
        self.end_date = end_date
        self.file_name = file_name

    @property
    def include_percent_time_in_alarm(self):
        """Gets the include_percent_time_in_alarm of this StatisticsReportRequest.  # noqa: E501

        Whether or not to include percent time in alarm in the calculations  # noqa: E501

        :return: The include_percent_time_in_alarm of this StatisticsReportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_percent_time_in_alarm

    @include_percent_time_in_alarm.setter
    def include_percent_time_in_alarm(self, include_percent_time_in_alarm):
        """Sets the include_percent_time_in_alarm of this StatisticsReportRequest.

        Whether or not to include percent time in alarm in the calculations  # noqa: E501

        :param include_percent_time_in_alarm: The include_percent_time_in_alarm of this StatisticsReportRequest.  # noqa: E501
        :type: bool
        """

        self._include_percent_time_in_alarm = include_percent_time_in_alarm

    @property
    def include_percent_time_in_warning(self):
        """Gets the include_percent_time_in_warning of this StatisticsReportRequest.  # noqa: E501

        Whether or not to include percent time in warning in the calculations  # noqa: E501

        :return: The include_percent_time_in_warning of this StatisticsReportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_percent_time_in_warning

    @include_percent_time_in_warning.setter
    def include_percent_time_in_warning(self, include_percent_time_in_warning):
        """Sets the include_percent_time_in_warning of this StatisticsReportRequest.

        Whether or not to include percent time in warning in the calculations  # noqa: E501

        :param include_percent_time_in_warning: The include_percent_time_in_warning of this StatisticsReportRequest.  # noqa: E501
        :type: bool
        """

        self._include_percent_time_in_warning = include_percent_time_in_warning

    @property
    def include_percent_on_time(self):
        """Gets the include_percent_on_time of this StatisticsReportRequest.  # noqa: E501

        Whether or not to include percent on time in the calculations  # noqa: E501

        :return: The include_percent_on_time of this StatisticsReportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_percent_on_time

    @include_percent_on_time.setter
    def include_percent_on_time(self, include_percent_on_time):
        """Sets the include_percent_on_time of this StatisticsReportRequest.

        Whether or not to include percent on time in the calculations  # noqa: E501

        :param include_percent_on_time: The include_percent_on_time of this StatisticsReportRequest.  # noqa: E501
        :type: bool
        """

        self._include_percent_on_time = include_percent_on_time

    @property
    def include_seconds_in_alarm(self):
        """Gets the include_seconds_in_alarm of this StatisticsReportRequest.  # noqa: E501

        Whether or not to include time in alarm in the calculations  # noqa: E501

        :return: The include_seconds_in_alarm of this StatisticsReportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_seconds_in_alarm

    @include_seconds_in_alarm.setter
    def include_seconds_in_alarm(self, include_seconds_in_alarm):
        """Sets the include_seconds_in_alarm of this StatisticsReportRequest.

        Whether or not to include time in alarm in the calculations  # noqa: E501

        :param include_seconds_in_alarm: The include_seconds_in_alarm of this StatisticsReportRequest.  # noqa: E501
        :type: bool
        """

        self._include_seconds_in_alarm = include_seconds_in_alarm

    @property
    def include_average_value(self):
        """Gets the include_average_value of this StatisticsReportRequest.  # noqa: E501

        Whether or not to include the average value in the calculations  # noqa: E501

        :return: The include_average_value of this StatisticsReportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_average_value

    @include_average_value.setter
    def include_average_value(self, include_average_value):
        """Sets the include_average_value of this StatisticsReportRequest.

        Whether or not to include the average value in the calculations  # noqa: E501

        :param include_average_value: The include_average_value of this StatisticsReportRequest.  # noqa: E501
        :type: bool
        """

        self._include_average_value = include_average_value

    @property
    def include_max_value(self):
        """Gets the include_max_value of this StatisticsReportRequest.  # noqa: E501

        Whether or not to include the max value in the calculations  # noqa: E501

        :return: The include_max_value of this StatisticsReportRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_max_value

    @include_max_value.setter
    def include_max_value(self, include_max_value):
        """Sets the include_max_value of this StatisticsReportRequest.

        Whether or not to include the max value in the calculations  # noqa: E501

        :param include_max_value: The include_max_value of this StatisticsReportRequest.  # noqa: E501
        :type: bool
        """

        self._include_max_value = include_max_value

    @property
    def filter_id(self):
        """Gets the filter_id of this StatisticsReportRequest.  # noqa: E501

        The filter to use. Optional  # noqa: E501

        :return: The filter_id of this StatisticsReportRequest.  # noqa: E501
        :rtype: str
        """
        return self._filter_id

    @filter_id.setter
    def filter_id(self, filter_id):
        """Sets the filter_id of this StatisticsReportRequest.

        The filter to use. Optional  # noqa: E501

        :param filter_id: The filter_id of this StatisticsReportRequest.  # noqa: E501
        :type: str
        """

        self._filter_id = filter_id

    @property
    def start_date(self):
        """Gets the start_date of this StatisticsReportRequest.  # noqa: E501

        The start date of the time range to get the report for. Nullable so Required can catch nulls, will not  be null later.  # noqa: E501

        :return: The start_date of this StatisticsReportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this StatisticsReportRequest.

        The start date of the time range to get the report for. Nullable so Required can catch nulls, will not  be null later.  # noqa: E501

        :param start_date: The start_date of this StatisticsReportRequest.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this StatisticsReportRequest.  # noqa: E501

        The end date of the time range to get the values for. Nullable so Required can catch nulls, will not  be null later.  # noqa: E501

        :return: The end_date of this StatisticsReportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this StatisticsReportRequest.

        The end date of the time range to get the values for. Nullable so Required can catch nulls, will not  be null later.  # noqa: E501

        :param end_date: The end_date of this StatisticsReportRequest.  # noqa: E501
        :type: datetime
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def file_name(self):
        """Gets the file_name of this StatisticsReportRequest.  # noqa: E501

        The filename to use for the report  # noqa: E501

        :return: The file_name of this StatisticsReportRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this StatisticsReportRequest.

        The filename to use for the report  # noqa: E501

        :param file_name: The file_name of this StatisticsReportRequest.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatisticsReportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatisticsReportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
