# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeImageRepositoryAccessRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location_ids': 'list[str]',
        'corporation_ids': 'list[str]',
        'append': 'bool',
        'grant_access_to_all': 'bool'
    }

    attribute_map = {
        'location_ids': 'LocationIds',
        'corporation_ids': 'CorporationIds',
        'append': 'Append',
        'grant_access_to_all': 'GrantAccessToAll'
    }

    def __init__(self, location_ids=None, corporation_ids=None, append=None, grant_access_to_all=None):  # noqa: E501
        """EdgeImageRepositoryAccessRequest - a model defined in Swagger"""  # noqa: E501
        self._location_ids = None
        self._corporation_ids = None
        self._append = None
        self._grant_access_to_all = None
        self.discriminator = None
        self.location_ids = location_ids
        self.corporation_ids = corporation_ids
        self.append = append
        self.grant_access_to_all = grant_access_to_all

    @property
    def location_ids(self):
        """Gets the location_ids of this EdgeImageRepositoryAccessRequest.  # noqa: E501

        Location Ids.   Locations that can use this repository or definition  # noqa: E501

        :return: The location_ids of this EdgeImageRepositoryAccessRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this EdgeImageRepositoryAccessRequest.

        Location Ids.   Locations that can use this repository or definition  # noqa: E501

        :param location_ids: The location_ids of this EdgeImageRepositoryAccessRequest.  # noqa: E501
        :type: list[str]
        """
        if location_ids is None:
            raise ValueError("Invalid value for `location_ids`, must not be `None`")  # noqa: E501

        self._location_ids = location_ids

    @property
    def corporation_ids(self):
        """Gets the corporation_ids of this EdgeImageRepositoryAccessRequest.  # noqa: E501

        Corporation Ids.   All locations underneath these corporations can implicitly use this repository or definition.  # noqa: E501

        :return: The corporation_ids of this EdgeImageRepositoryAccessRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._corporation_ids

    @corporation_ids.setter
    def corporation_ids(self, corporation_ids):
        """Sets the corporation_ids of this EdgeImageRepositoryAccessRequest.

        Corporation Ids.   All locations underneath these corporations can implicitly use this repository or definition.  # noqa: E501

        :param corporation_ids: The corporation_ids of this EdgeImageRepositoryAccessRequest.  # noqa: E501
        :type: list[str]
        """
        if corporation_ids is None:
            raise ValueError("Invalid value for `corporation_ids`, must not be `None`")  # noqa: E501

        self._corporation_ids = corporation_ids

    @property
    def append(self):
        """Gets the append of this EdgeImageRepositoryAccessRequest.  # noqa: E501

        True to append instead of replace  # noqa: E501

        :return: The append of this EdgeImageRepositoryAccessRequest.  # noqa: E501
        :rtype: bool
        """
        return self._append

    @append.setter
    def append(self, append):
        """Sets the append of this EdgeImageRepositoryAccessRequest.

        True to append instead of replace  # noqa: E501

        :param append: The append of this EdgeImageRepositoryAccessRequest.  # noqa: E501
        :type: bool
        """
        if append is None:
            raise ValueError("Invalid value for `append`, must not be `None`")  # noqa: E501

        self._append = append

    @property
    def grant_access_to_all(self):
        """Gets the grant_access_to_all of this EdgeImageRepositoryAccessRequest.  # noqa: E501

        Whether the definition or image repository has been granted access   to all locations and corporations.  Only Global Admins can grant access to all.  # noqa: E501

        :return: The grant_access_to_all of this EdgeImageRepositoryAccessRequest.  # noqa: E501
        :rtype: bool
        """
        return self._grant_access_to_all

    @grant_access_to_all.setter
    def grant_access_to_all(self, grant_access_to_all):
        """Sets the grant_access_to_all of this EdgeImageRepositoryAccessRequest.

        Whether the definition or image repository has been granted access   to all locations and corporations.  Only Global Admins can grant access to all.  # noqa: E501

        :param grant_access_to_all: The grant_access_to_all of this EdgeImageRepositoryAccessRequest.  # noqa: E501
        :type: bool
        """
        if grant_access_to_all is None:
            raise ValueError("Invalid value for `grant_access_to_all`, must not be `None`")  # noqa: E501

        self._grant_access_to_all = grant_access_to_all

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeImageRepositoryAccessRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeImageRepositoryAccessRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
