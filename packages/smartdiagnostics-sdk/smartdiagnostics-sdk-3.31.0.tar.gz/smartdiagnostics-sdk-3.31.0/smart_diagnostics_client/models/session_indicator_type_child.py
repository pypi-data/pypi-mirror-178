# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SessionIndicatorTypeChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'indicator_type': 'MetricTypeCodes',
        'numeric_value': 'int'
    }

    attribute_map = {
        'indicator_type': 'IndicatorType',
        'numeric_value': 'NumericValue'
    }

    def __init__(self, indicator_type=None, numeric_value=None):  # noqa: E501
        """SessionIndicatorTypeChild - a model defined in Swagger"""  # noqa: E501
        self._indicator_type = None
        self._numeric_value = None
        self.discriminator = None
        self.indicator_type = indicator_type
        self.numeric_value = numeric_value

    @property
    def indicator_type(self):
        """Gets the indicator_type of this SessionIndicatorTypeChild.  # noqa: E501


        :return: The indicator_type of this SessionIndicatorTypeChild.  # noqa: E501
        :rtype: MetricTypeCodes
        """
        return self._indicator_type

    @indicator_type.setter
    def indicator_type(self, indicator_type):
        """Sets the indicator_type of this SessionIndicatorTypeChild.


        :param indicator_type: The indicator_type of this SessionIndicatorTypeChild.  # noqa: E501
        :type: MetricTypeCodes
        """
        if indicator_type is None:
            raise ValueError("Invalid value for `indicator_type`, must not be `None`")  # noqa: E501

        self._indicator_type = indicator_type

    @property
    def numeric_value(self):
        """Gets the numeric_value of this SessionIndicatorTypeChild.  # noqa: E501


        :return: The numeric_value of this SessionIndicatorTypeChild.  # noqa: E501
        :rtype: int
        """
        return self._numeric_value

    @numeric_value.setter
    def numeric_value(self, numeric_value):
        """Sets the numeric_value of this SessionIndicatorTypeChild.


        :param numeric_value: The numeric_value of this SessionIndicatorTypeChild.  # noqa: E501
        :type: int
        """
        if numeric_value is None:
            raise ValueError("Invalid value for `numeric_value`, must not be `None`")  # noqa: E501

        self._numeric_value = numeric_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionIndicatorTypeChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionIndicatorTypeChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
