# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrentUserResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone_number': 'str',
        'application_role': 'UserRoleCodes',
        'accepted_eula': 'bool',
        'corporations': 'list[UserCorporationChild]',
        'locations': 'list[UserLocationChild]',
        'profile': 'ProfileChild',
        'identity_provider_name': 'str',
        'is_approved': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'email': 'Email',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'phone_number': 'PhoneNumber',
        'application_role': 'ApplicationRole',
        'accepted_eula': 'AcceptedEula',
        'corporations': 'Corporations',
        'locations': 'Locations',
        'profile': 'Profile',
        'identity_provider_name': 'IdentityProviderName',
        'is_approved': 'IsApproved'
    }

    def __init__(self, id=None, email=None, first_name=None, last_name=None, phone_number=None, application_role=None, accepted_eula=None, corporations=None, locations=None, profile=None, identity_provider_name=None, is_approved=None):  # noqa: E501
        """CurrentUserResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._phone_number = None
        self._application_role = None
        self._accepted_eula = None
        self._corporations = None
        self._locations = None
        self._profile = None
        self._identity_provider_name = None
        self._is_approved = None
        self.discriminator = None
        self.id = id
        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        if phone_number is not None:
            self.phone_number = phone_number
        self.application_role = application_role
        self.accepted_eula = accepted_eula
        self.corporations = corporations
        self.locations = locations
        self.profile = profile
        if identity_provider_name is not None:
            self.identity_provider_name = identity_provider_name
        self.is_approved = is_approved

    @property
    def id(self):
        """Gets the id of this CurrentUserResponse.  # noqa: E501

        The current user's unique identifier.  # noqa: E501

        :return: The id of this CurrentUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurrentUserResponse.

        The current user's unique identifier.  # noqa: E501

        :param id: The id of this CurrentUserResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def email(self):
        """Gets the email of this CurrentUserResponse.  # noqa: E501

        The current user's email address.  # noqa: E501

        :return: The email of this CurrentUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CurrentUserResponse.

        The current user's email address.  # noqa: E501

        :param email: The email of this CurrentUserResponse.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this CurrentUserResponse.  # noqa: E501

        The current user's first name.  # noqa: E501

        :return: The first_name of this CurrentUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CurrentUserResponse.

        The current user's first name.  # noqa: E501

        :param first_name: The first_name of this CurrentUserResponse.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CurrentUserResponse.  # noqa: E501

        The current user's last name.  # noqa: E501

        :return: The last_name of this CurrentUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CurrentUserResponse.

        The current user's last name.  # noqa: E501

        :param last_name: The last_name of this CurrentUserResponse.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this CurrentUserResponse.  # noqa: E501

        The current user's phone number. May not exist if the user has not set their phone number.  # noqa: E501

        :return: The phone_number of this CurrentUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CurrentUserResponse.

        The current user's phone number. May not exist if the user has not set their phone number.  # noqa: E501

        :param phone_number: The phone_number of this CurrentUserResponse.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def application_role(self):
        """Gets the application_role of this CurrentUserResponse.  # noqa: E501


        :return: The application_role of this CurrentUserResponse.  # noqa: E501
        :rtype: UserRoleCodes
        """
        return self._application_role

    @application_role.setter
    def application_role(self, application_role):
        """Sets the application_role of this CurrentUserResponse.


        :param application_role: The application_role of this CurrentUserResponse.  # noqa: E501
        :type: UserRoleCodes
        """
        if application_role is None:
            raise ValueError("Invalid value for `application_role`, must not be `None`")  # noqa: E501

        self._application_role = application_role

    @property
    def accepted_eula(self):
        """Gets the accepted_eula of this CurrentUserResponse.  # noqa: E501

        The current user's EULA status.  # noqa: E501

        :return: The accepted_eula of this CurrentUserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._accepted_eula

    @accepted_eula.setter
    def accepted_eula(self, accepted_eula):
        """Sets the accepted_eula of this CurrentUserResponse.

        The current user's EULA status.  # noqa: E501

        :param accepted_eula: The accepted_eula of this CurrentUserResponse.  # noqa: E501
        :type: bool
        """
        if accepted_eula is None:
            raise ValueError("Invalid value for `accepted_eula`, must not be `None`")  # noqa: E501

        self._accepted_eula = accepted_eula

    @property
    def corporations(self):
        """Gets the corporations of this CurrentUserResponse.  # noqa: E501

        The current user's assigned corporations. For users with access to all corporations, this will be an empty list.  # noqa: E501

        :return: The corporations of this CurrentUserResponse.  # noqa: E501
        :rtype: list[UserCorporationChild]
        """
        return self._corporations

    @corporations.setter
    def corporations(self, corporations):
        """Sets the corporations of this CurrentUserResponse.

        The current user's assigned corporations. For users with access to all corporations, this will be an empty list.  # noqa: E501

        :param corporations: The corporations of this CurrentUserResponse.  # noqa: E501
        :type: list[UserCorporationChild]
        """
        if corporations is None:
            raise ValueError("Invalid value for `corporations`, must not be `None`")  # noqa: E501

        self._corporations = corporations

    @property
    def locations(self):
        """Gets the locations of this CurrentUserResponse.  # noqa: E501

        The current user's assigned locations. For users with access to all locations, this will be an empty list.  # noqa: E501

        :return: The locations of this CurrentUserResponse.  # noqa: E501
        :rtype: list[UserLocationChild]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this CurrentUserResponse.

        The current user's assigned locations. For users with access to all locations, this will be an empty list.  # noqa: E501

        :param locations: The locations of this CurrentUserResponse.  # noqa: E501
        :type: list[UserLocationChild]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")  # noqa: E501

        self._locations = locations

    @property
    def profile(self):
        """Gets the profile of this CurrentUserResponse.  # noqa: E501


        :return: The profile of this CurrentUserResponse.  # noqa: E501
        :rtype: ProfileChild
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this CurrentUserResponse.


        :param profile: The profile of this CurrentUserResponse.  # noqa: E501
        :type: ProfileChild
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")  # noqa: E501

        self._profile = profile

    @property
    def identity_provider_name(self):
        """Gets the identity_provider_name of this CurrentUserResponse.  # noqa: E501

        The current user's identity provider. May not exist if user isn't assigned to an IDP  # noqa: E501

        :return: The identity_provider_name of this CurrentUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._identity_provider_name

    @identity_provider_name.setter
    def identity_provider_name(self, identity_provider_name):
        """Sets the identity_provider_name of this CurrentUserResponse.

        The current user's identity provider. May not exist if user isn't assigned to an IDP  # noqa: E501

        :param identity_provider_name: The identity_provider_name of this CurrentUserResponse.  # noqa: E501
        :type: str
        """

        self._identity_provider_name = identity_provider_name

    @property
    def is_approved(self):
        """Gets the is_approved of this CurrentUserResponse.  # noqa: E501

        The current user's approval status.  # noqa: E501

        :return: The is_approved of this CurrentUserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_approved

    @is_approved.setter
    def is_approved(self, is_approved):
        """Sets the is_approved of this CurrentUserResponse.

        The current user's approval status.  # noqa: E501

        :param is_approved: The is_approved of this CurrentUserResponse.  # noqa: E501
        :type: bool
        """
        if is_approved is None:
            raise ValueError("Invalid value for `is_approved`, must not be `None`")  # noqa: E501

        self._is_approved = is_approved

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentUserResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentUserResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
