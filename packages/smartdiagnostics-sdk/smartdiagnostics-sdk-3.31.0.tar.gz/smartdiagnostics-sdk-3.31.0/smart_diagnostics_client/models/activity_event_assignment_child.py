# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityEventAssignmentChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment_id': 'str',
        'assignment_type': 'ActivityEventAssignmentType',
        'assignment_date_time': 'datetime',
        'assignment_note': 'str',
        'assignment_user': 'UserChild'
    }

    attribute_map = {
        'assignment_id': 'AssignmentId',
        'assignment_type': 'AssignmentType',
        'assignment_date_time': 'AssignmentDateTime',
        'assignment_note': 'AssignmentNote',
        'assignment_user': 'AssignmentUser'
    }

    def __init__(self, assignment_id=None, assignment_type=None, assignment_date_time=None, assignment_note=None, assignment_user=None):  # noqa: E501
        """ActivityEventAssignmentChild - a model defined in Swagger"""  # noqa: E501
        self._assignment_id = None
        self._assignment_type = None
        self._assignment_date_time = None
        self._assignment_note = None
        self._assignment_user = None
        self.discriminator = None
        self.assignment_id = assignment_id
        self.assignment_type = assignment_type
        self.assignment_date_time = assignment_date_time
        if assignment_note is not None:
            self.assignment_note = assignment_note
        if assignment_user is not None:
            self.assignment_user = assignment_user

    @property
    def assignment_id(self):
        """Gets the assignment_id of this ActivityEventAssignmentChild.  # noqa: E501

        Assignment record id  # noqa: E501

        :return: The assignment_id of this ActivityEventAssignmentChild.  # noqa: E501
        :rtype: str
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this ActivityEventAssignmentChild.

        Assignment record id  # noqa: E501

        :param assignment_id: The assignment_id of this ActivityEventAssignmentChild.  # noqa: E501
        :type: str
        """
        if assignment_id is None:
            raise ValueError("Invalid value for `assignment_id`, must not be `None`")  # noqa: E501

        self._assignment_id = assignment_id

    @property
    def assignment_type(self):
        """Gets the assignment_type of this ActivityEventAssignmentChild.  # noqa: E501


        :return: The assignment_type of this ActivityEventAssignmentChild.  # noqa: E501
        :rtype: ActivityEventAssignmentType
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this ActivityEventAssignmentChild.


        :param assignment_type: The assignment_type of this ActivityEventAssignmentChild.  # noqa: E501
        :type: ActivityEventAssignmentType
        """
        if assignment_type is None:
            raise ValueError("Invalid value for `assignment_type`, must not be `None`")  # noqa: E501

        self._assignment_type = assignment_type

    @property
    def assignment_date_time(self):
        """Gets the assignment_date_time of this ActivityEventAssignmentChild.  # noqa: E501

        Date of assignment  # noqa: E501

        :return: The assignment_date_time of this ActivityEventAssignmentChild.  # noqa: E501
        :rtype: datetime
        """
        return self._assignment_date_time

    @assignment_date_time.setter
    def assignment_date_time(self, assignment_date_time):
        """Sets the assignment_date_time of this ActivityEventAssignmentChild.

        Date of assignment  # noqa: E501

        :param assignment_date_time: The assignment_date_time of this ActivityEventAssignmentChild.  # noqa: E501
        :type: datetime
        """
        if assignment_date_time is None:
            raise ValueError("Invalid value for `assignment_date_time`, must not be `None`")  # noqa: E501

        self._assignment_date_time = assignment_date_time

    @property
    def assignment_note(self):
        """Gets the assignment_note of this ActivityEventAssignmentChild.  # noqa: E501

        Note (if available) for this assignment  # noqa: E501

        :return: The assignment_note of this ActivityEventAssignmentChild.  # noqa: E501
        :rtype: str
        """
        return self._assignment_note

    @assignment_note.setter
    def assignment_note(self, assignment_note):
        """Sets the assignment_note of this ActivityEventAssignmentChild.

        Note (if available) for this assignment  # noqa: E501

        :param assignment_note: The assignment_note of this ActivityEventAssignmentChild.  # noqa: E501
        :type: str
        """

        self._assignment_note = assignment_note

    @property
    def assignment_user(self):
        """Gets the assignment_user of this ActivityEventAssignmentChild.  # noqa: E501


        :return: The assignment_user of this ActivityEventAssignmentChild.  # noqa: E501
        :rtype: UserChild
        """
        return self._assignment_user

    @assignment_user.setter
    def assignment_user(self, assignment_user):
        """Sets the assignment_user of this ActivityEventAssignmentChild.


        :param assignment_user: The assignment_user of this ActivityEventAssignmentChild.  # noqa: E501
        :type: UserChild
        """

        self._assignment_user = assignment_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityEventAssignmentChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityEventAssignmentChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
