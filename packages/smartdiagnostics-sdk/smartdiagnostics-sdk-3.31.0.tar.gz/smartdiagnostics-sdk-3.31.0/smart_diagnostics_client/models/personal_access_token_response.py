# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PersonalAccessTokenResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'created': 'datetime',
        'updated': 'datetime',
        'last_used': 'datetime',
        'active': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'description': 'Description',
        'created': 'Created',
        'updated': 'Updated',
        'last_used': 'LastUsed',
        'active': 'Active'
    }

    def __init__(self, id=None, description=None, created=None, updated=None, last_used=None, active=None):  # noqa: E501
        """PersonalAccessTokenResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._created = None
        self._updated = None
        self._last_used = None
        self._active = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if last_used is not None:
            self.last_used = last_used
        if active is not None:
            self.active = active

    @property
    def id(self):
        """Gets the id of this PersonalAccessTokenResponse.  # noqa: E501


        :return: The id of this PersonalAccessTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalAccessTokenResponse.


        :param id: The id of this PersonalAccessTokenResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this PersonalAccessTokenResponse.  # noqa: E501


        :return: The description of this PersonalAccessTokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PersonalAccessTokenResponse.


        :param description: The description of this PersonalAccessTokenResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created(self):
        """Gets the created of this PersonalAccessTokenResponse.  # noqa: E501


        :return: The created of this PersonalAccessTokenResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PersonalAccessTokenResponse.


        :param created: The created of this PersonalAccessTokenResponse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this PersonalAccessTokenResponse.  # noqa: E501


        :return: The updated of this PersonalAccessTokenResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this PersonalAccessTokenResponse.


        :param updated: The updated of this PersonalAccessTokenResponse.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def last_used(self):
        """Gets the last_used of this PersonalAccessTokenResponse.  # noqa: E501


        :return: The last_used of this PersonalAccessTokenResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this PersonalAccessTokenResponse.


        :param last_used: The last_used of this PersonalAccessTokenResponse.  # noqa: E501
        :type: datetime
        """

        self._last_used = last_used

    @property
    def active(self):
        """Gets the active of this PersonalAccessTokenResponse.  # noqa: E501


        :return: The active of this PersonalAccessTokenResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PersonalAccessTokenResponse.


        :param active: The active of this PersonalAccessTokenResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonalAccessTokenResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalAccessTokenResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
