# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityEventFieldValueResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'activity_event_field_id': 'str',
        'bind': 'ActivityEventBindChild',
        'value': 'str',
        'label': 'str',
        'order': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'activity_event_field_id': 'ActivityEventFieldId',
        'bind': 'Bind',
        'value': 'Value',
        'label': 'Label',
        'order': 'Order'
    }

    def __init__(self, id=None, activity_event_field_id=None, bind=None, value=None, label=None, order=None):  # noqa: E501
        """ActivityEventFieldValueResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._activity_event_field_id = None
        self._bind = None
        self._value = None
        self._label = None
        self._order = None
        self.discriminator = None
        self.id = id
        self.activity_event_field_id = activity_event_field_id
        if bind is not None:
            self.bind = bind
        if value is not None:
            self.value = value
        if label is not None:
            self.label = label
        self.order = order

    @property
    def id(self):
        """Gets the id of this ActivityEventFieldValueResponse.  # noqa: E501


        :return: The id of this ActivityEventFieldValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityEventFieldValueResponse.


        :param id: The id of this ActivityEventFieldValueResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def activity_event_field_id(self):
        """Gets the activity_event_field_id of this ActivityEventFieldValueResponse.  # noqa: E501


        :return: The activity_event_field_id of this ActivityEventFieldValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._activity_event_field_id

    @activity_event_field_id.setter
    def activity_event_field_id(self, activity_event_field_id):
        """Sets the activity_event_field_id of this ActivityEventFieldValueResponse.


        :param activity_event_field_id: The activity_event_field_id of this ActivityEventFieldValueResponse.  # noqa: E501
        :type: str
        """
        if activity_event_field_id is None:
            raise ValueError("Invalid value for `activity_event_field_id`, must not be `None`")  # noqa: E501

        self._activity_event_field_id = activity_event_field_id

    @property
    def bind(self):
        """Gets the bind of this ActivityEventFieldValueResponse.  # noqa: E501


        :return: The bind of this ActivityEventFieldValueResponse.  # noqa: E501
        :rtype: ActivityEventBindChild
        """
        return self._bind

    @bind.setter
    def bind(self, bind):
        """Sets the bind of this ActivityEventFieldValueResponse.


        :param bind: The bind of this ActivityEventFieldValueResponse.  # noqa: E501
        :type: ActivityEventBindChild
        """

        self._bind = bind

    @property
    def value(self):
        """Gets the value of this ActivityEventFieldValueResponse.  # noqa: E501


        :return: The value of this ActivityEventFieldValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ActivityEventFieldValueResponse.


        :param value: The value of this ActivityEventFieldValueResponse.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def label(self):
        """Gets the label of this ActivityEventFieldValueResponse.  # noqa: E501


        :return: The label of this ActivityEventFieldValueResponse.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ActivityEventFieldValueResponse.


        :param label: The label of this ActivityEventFieldValueResponse.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def order(self):
        """Gets the order of this ActivityEventFieldValueResponse.  # noqa: E501


        :return: The order of this ActivityEventFieldValueResponse.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ActivityEventFieldValueResponse.


        :param order: The order of this ActivityEventFieldValueResponse.  # noqa: E501
        :type: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityEventFieldValueResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityEventFieldValueResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
