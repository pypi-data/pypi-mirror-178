# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CorporationCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'access_level': 'AccessLevel',
        'abbreviation': 'str',
        'industry_id': 'int',
        'net_suite_id': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'access_level': 'AccessLevel',
        'abbreviation': 'Abbreviation',
        'industry_id': 'IndustryId',
        'net_suite_id': 'NetSuiteId'
    }

    def __init__(self, name=None, access_level=None, abbreviation=None, industry_id=None, net_suite_id=None):  # noqa: E501
        """CorporationCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._access_level = None
        self._abbreviation = None
        self._industry_id = None
        self._net_suite_id = None
        self.discriminator = None
        self.name = name
        self.access_level = access_level
        if abbreviation is not None:
            self.abbreviation = abbreviation
        if industry_id is not None:
            self.industry_id = industry_id
        if net_suite_id is not None:
            self.net_suite_id = net_suite_id

    @property
    def name(self):
        """Gets the name of this CorporationCreateRequest.  # noqa: E501


        :return: The name of this CorporationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CorporationCreateRequest.


        :param name: The name of this CorporationCreateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def access_level(self):
        """Gets the access_level of this CorporationCreateRequest.  # noqa: E501


        :return: The access_level of this CorporationCreateRequest.  # noqa: E501
        :rtype: AccessLevel
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """Sets the access_level of this CorporationCreateRequest.


        :param access_level: The access_level of this CorporationCreateRequest.  # noqa: E501
        :type: AccessLevel
        """
        if access_level is None:
            raise ValueError("Invalid value for `access_level`, must not be `None`")  # noqa: E501

        self._access_level = access_level

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CorporationCreateRequest.  # noqa: E501


        :return: The abbreviation of this CorporationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CorporationCreateRequest.


        :param abbreviation: The abbreviation of this CorporationCreateRequest.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def industry_id(self):
        """Gets the industry_id of this CorporationCreateRequest.  # noqa: E501


        :return: The industry_id of this CorporationCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._industry_id

    @industry_id.setter
    def industry_id(self, industry_id):
        """Sets the industry_id of this CorporationCreateRequest.


        :param industry_id: The industry_id of this CorporationCreateRequest.  # noqa: E501
        :type: int
        """

        self._industry_id = industry_id

    @property
    def net_suite_id(self):
        """Gets the net_suite_id of this CorporationCreateRequest.  # noqa: E501


        :return: The net_suite_id of this CorporationCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._net_suite_id

    @net_suite_id.setter
    def net_suite_id(self, net_suite_id):
        """Sets the net_suite_id of this CorporationCreateRequest.


        :param net_suite_id: The net_suite_id of this CorporationCreateRequest.  # noqa: E501
        :type: str
        """

        self._net_suite_id = net_suite_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CorporationCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorporationCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
