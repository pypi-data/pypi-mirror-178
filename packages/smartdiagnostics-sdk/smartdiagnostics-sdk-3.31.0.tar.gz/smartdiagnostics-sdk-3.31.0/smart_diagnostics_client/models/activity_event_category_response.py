# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityEventCategoryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'name': 'str',
        'description': 'str',
        'activity_line_enabled': 'bool',
        'category_flag': 'ActivityEventCategoryFlag',
        'asset_card_enabled': 'bool',
        'owner': 'ActivityEventCategoryOwnerChild',
        'internal': 'bool',
        'subcategories': 'list[ActivityEventSubcategoryChild]',
        'fields': 'list[ActivityEventFieldChild]'
    }

    attribute_map = {
        'id': 'Id',
        'code': 'Code',
        'name': 'Name',
        'description': 'Description',
        'activity_line_enabled': 'ActivityLineEnabled',
        'category_flag': 'CategoryFlag',
        'asset_card_enabled': 'AssetCardEnabled',
        'owner': 'Owner',
        'internal': 'Internal',
        'subcategories': 'Subcategories',
        'fields': 'Fields'
    }

    def __init__(self, id=None, code=None, name=None, description=None, activity_line_enabled=None, category_flag=None, asset_card_enabled=None, owner=None, internal=None, subcategories=None, fields=None):  # noqa: E501
        """ActivityEventCategoryResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._name = None
        self._description = None
        self._activity_line_enabled = None
        self._category_flag = None
        self._asset_card_enabled = None
        self._owner = None
        self._internal = None
        self._subcategories = None
        self._fields = None
        self.discriminator = None
        self.id = id
        self.code = code
        self.name = name
        if description is not None:
            self.description = description
        self.activity_line_enabled = activity_line_enabled
        if category_flag is not None:
            self.category_flag = category_flag
        self.asset_card_enabled = asset_card_enabled
        if owner is not None:
            self.owner = owner
        self.internal = internal
        self.subcategories = subcategories
        self.fields = fields

    @property
    def id(self):
        """Gets the id of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The id of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityEventCategoryResponse.


        :param id: The id of this ActivityEventCategoryResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def code(self):
        """Gets the code of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The code of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ActivityEventCategoryResponse.


        :param code: The code of this ActivityEventCategoryResponse.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def name(self):
        """Gets the name of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The name of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivityEventCategoryResponse.


        :param name: The name of this ActivityEventCategoryResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The description of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityEventCategoryResponse.


        :param description: The description of this ActivityEventCategoryResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def activity_line_enabled(self):
        """Gets the activity_line_enabled of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The activity_line_enabled of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._activity_line_enabled

    @activity_line_enabled.setter
    def activity_line_enabled(self, activity_line_enabled):
        """Sets the activity_line_enabled of this ActivityEventCategoryResponse.


        :param activity_line_enabled: The activity_line_enabled of this ActivityEventCategoryResponse.  # noqa: E501
        :type: bool
        """
        if activity_line_enabled is None:
            raise ValueError("Invalid value for `activity_line_enabled`, must not be `None`")  # noqa: E501

        self._activity_line_enabled = activity_line_enabled

    @property
    def category_flag(self):
        """Gets the category_flag of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The category_flag of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: ActivityEventCategoryFlag
        """
        return self._category_flag

    @category_flag.setter
    def category_flag(self, category_flag):
        """Sets the category_flag of this ActivityEventCategoryResponse.


        :param category_flag: The category_flag of this ActivityEventCategoryResponse.  # noqa: E501
        :type: ActivityEventCategoryFlag
        """

        self._category_flag = category_flag

    @property
    def asset_card_enabled(self):
        """Gets the asset_card_enabled of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The asset_card_enabled of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._asset_card_enabled

    @asset_card_enabled.setter
    def asset_card_enabled(self, asset_card_enabled):
        """Sets the asset_card_enabled of this ActivityEventCategoryResponse.


        :param asset_card_enabled: The asset_card_enabled of this ActivityEventCategoryResponse.  # noqa: E501
        :type: bool
        """
        if asset_card_enabled is None:
            raise ValueError("Invalid value for `asset_card_enabled`, must not be `None`")  # noqa: E501

        self._asset_card_enabled = asset_card_enabled

    @property
    def owner(self):
        """Gets the owner of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The owner of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: ActivityEventCategoryOwnerChild
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ActivityEventCategoryResponse.


        :param owner: The owner of this ActivityEventCategoryResponse.  # noqa: E501
        :type: ActivityEventCategoryOwnerChild
        """

        self._owner = owner

    @property
    def internal(self):
        """Gets the internal of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The internal of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this ActivityEventCategoryResponse.


        :param internal: The internal of this ActivityEventCategoryResponse.  # noqa: E501
        :type: bool
        """
        if internal is None:
            raise ValueError("Invalid value for `internal`, must not be `None`")  # noqa: E501

        self._internal = internal

    @property
    def subcategories(self):
        """Gets the subcategories of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The subcategories of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: list[ActivityEventSubcategoryChild]
        """
        return self._subcategories

    @subcategories.setter
    def subcategories(self, subcategories):
        """Sets the subcategories of this ActivityEventCategoryResponse.


        :param subcategories: The subcategories of this ActivityEventCategoryResponse.  # noqa: E501
        :type: list[ActivityEventSubcategoryChild]
        """
        if subcategories is None:
            raise ValueError("Invalid value for `subcategories`, must not be `None`")  # noqa: E501

        self._subcategories = subcategories

    @property
    def fields(self):
        """Gets the fields of this ActivityEventCategoryResponse.  # noqa: E501


        :return: The fields of this ActivityEventCategoryResponse.  # noqa: E501
        :rtype: list[ActivityEventFieldChild]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ActivityEventCategoryResponse.


        :param fields: The fields of this ActivityEventCategoryResponse.  # noqa: E501
        :type: list[ActivityEventFieldChild]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityEventCategoryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityEventCategoryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
