# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CorporationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'abbreviation': 'str',
        'access_level': 'AccessLevel',
        'icon_url': 'str',
        'active': 'bool',
        'created': 'datetime',
        'industry': 'CorporationIndustryChild',
        'locations': 'list[LocationChild]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'abbreviation': 'Abbreviation',
        'access_level': 'AccessLevel',
        'icon_url': 'IconUrl',
        'active': 'Active',
        'created': 'Created',
        'industry': 'Industry',
        'locations': 'Locations'
    }

    def __init__(self, id=None, name=None, abbreviation=None, access_level=None, icon_url=None, active=None, created=None, industry=None, locations=None):  # noqa: E501
        """CorporationResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._abbreviation = None
        self._access_level = None
        self._icon_url = None
        self._active = None
        self._created = None
        self._industry = None
        self._locations = None
        self.discriminator = None
        self.id = id
        self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        self.access_level = access_level
        if icon_url is not None:
            self.icon_url = icon_url
        self.active = active
        self.created = created
        if industry is not None:
            self.industry = industry
        self.locations = locations

    @property
    def id(self):
        """Gets the id of this CorporationResponse.  # noqa: E501


        :return: The id of this CorporationResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CorporationResponse.


        :param id: The id of this CorporationResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this CorporationResponse.  # noqa: E501


        :return: The name of this CorporationResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CorporationResponse.


        :param name: The name of this CorporationResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this CorporationResponse.  # noqa: E501


        :return: The abbreviation of this CorporationResponse.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this CorporationResponse.


        :param abbreviation: The abbreviation of this CorporationResponse.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def access_level(self):
        """Gets the access_level of this CorporationResponse.  # noqa: E501


        :return: The access_level of this CorporationResponse.  # noqa: E501
        :rtype: AccessLevel
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level):
        """Sets the access_level of this CorporationResponse.


        :param access_level: The access_level of this CorporationResponse.  # noqa: E501
        :type: AccessLevel
        """
        if access_level is None:
            raise ValueError("Invalid value for `access_level`, must not be `None`")  # noqa: E501

        self._access_level = access_level

    @property
    def icon_url(self):
        """Gets the icon_url of this CorporationResponse.  # noqa: E501


        :return: The icon_url of this CorporationResponse.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this CorporationResponse.


        :param icon_url: The icon_url of this CorporationResponse.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def active(self):
        """Gets the active of this CorporationResponse.  # noqa: E501


        :return: The active of this CorporationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CorporationResponse.


        :param active: The active of this CorporationResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def created(self):
        """Gets the created of this CorporationResponse.  # noqa: E501


        :return: The created of this CorporationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CorporationResponse.


        :param created: The created of this CorporationResponse.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def industry(self):
        """Gets the industry of this CorporationResponse.  # noqa: E501


        :return: The industry of this CorporationResponse.  # noqa: E501
        :rtype: CorporationIndustryChild
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this CorporationResponse.


        :param industry: The industry of this CorporationResponse.  # noqa: E501
        :type: CorporationIndustryChild
        """

        self._industry = industry

    @property
    def locations(self):
        """Gets the locations of this CorporationResponse.  # noqa: E501


        :return: The locations of this CorporationResponse.  # noqa: E501
        :rtype: list[LocationChild]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this CorporationResponse.


        :param locations: The locations of this CorporationResponse.  # noqa: E501
        :type: list[LocationChild]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")  # noqa: E501

        self._locations = locations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CorporationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorporationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
