# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HardwareStatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location_hardware_statuses': 'list[HardwareStatusChild]',
        'total_hardware_count': 'int',
        'total_unassigned_count': 'int',
        'total_online_count': 'int',
        'total_offline_count': 'int'
    }

    attribute_map = {
        'location_hardware_statuses': 'LocationHardwareStatuses',
        'total_hardware_count': 'TotalHardwareCount',
        'total_unassigned_count': 'TotalUnassignedCount',
        'total_online_count': 'TotalOnlineCount',
        'total_offline_count': 'TotalOfflineCount'
    }

    def __init__(self, location_hardware_statuses=None, total_hardware_count=None, total_unassigned_count=None, total_online_count=None, total_offline_count=None):  # noqa: E501
        """HardwareStatusResponse - a model defined in Swagger"""  # noqa: E501
        self._location_hardware_statuses = None
        self._total_hardware_count = None
        self._total_unassigned_count = None
        self._total_online_count = None
        self._total_offline_count = None
        self.discriminator = None
        self.location_hardware_statuses = location_hardware_statuses
        self.total_hardware_count = total_hardware_count
        if total_unassigned_count is not None:
            self.total_unassigned_count = total_unassigned_count
        self.total_online_count = total_online_count
        self.total_offline_count = total_offline_count

    @property
    def location_hardware_statuses(self):
        """Gets the location_hardware_statuses of this HardwareStatusResponse.  # noqa: E501


        :return: The location_hardware_statuses of this HardwareStatusResponse.  # noqa: E501
        :rtype: list[HardwareStatusChild]
        """
        return self._location_hardware_statuses

    @location_hardware_statuses.setter
    def location_hardware_statuses(self, location_hardware_statuses):
        """Sets the location_hardware_statuses of this HardwareStatusResponse.


        :param location_hardware_statuses: The location_hardware_statuses of this HardwareStatusResponse.  # noqa: E501
        :type: list[HardwareStatusChild]
        """
        if location_hardware_statuses is None:
            raise ValueError("Invalid value for `location_hardware_statuses`, must not be `None`")  # noqa: E501

        self._location_hardware_statuses = location_hardware_statuses

    @property
    def total_hardware_count(self):
        """Gets the total_hardware_count of this HardwareStatusResponse.  # noqa: E501


        :return: The total_hardware_count of this HardwareStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_hardware_count

    @total_hardware_count.setter
    def total_hardware_count(self, total_hardware_count):
        """Sets the total_hardware_count of this HardwareStatusResponse.


        :param total_hardware_count: The total_hardware_count of this HardwareStatusResponse.  # noqa: E501
        :type: int
        """
        if total_hardware_count is None:
            raise ValueError("Invalid value for `total_hardware_count`, must not be `None`")  # noqa: E501

        self._total_hardware_count = total_hardware_count

    @property
    def total_unassigned_count(self):
        """Gets the total_unassigned_count of this HardwareStatusResponse.  # noqa: E501


        :return: The total_unassigned_count of this HardwareStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_unassigned_count

    @total_unassigned_count.setter
    def total_unassigned_count(self, total_unassigned_count):
        """Sets the total_unassigned_count of this HardwareStatusResponse.


        :param total_unassigned_count: The total_unassigned_count of this HardwareStatusResponse.  # noqa: E501
        :type: int
        """

        self._total_unassigned_count = total_unassigned_count

    @property
    def total_online_count(self):
        """Gets the total_online_count of this HardwareStatusResponse.  # noqa: E501


        :return: The total_online_count of this HardwareStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_online_count

    @total_online_count.setter
    def total_online_count(self, total_online_count):
        """Sets the total_online_count of this HardwareStatusResponse.


        :param total_online_count: The total_online_count of this HardwareStatusResponse.  # noqa: E501
        :type: int
        """
        if total_online_count is None:
            raise ValueError("Invalid value for `total_online_count`, must not be `None`")  # noqa: E501

        self._total_online_count = total_online_count

    @property
    def total_offline_count(self):
        """Gets the total_offline_count of this HardwareStatusResponse.  # noqa: E501


        :return: The total_offline_count of this HardwareStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_offline_count

    @total_offline_count.setter
    def total_offline_count(self, total_offline_count):
        """Sets the total_offline_count of this HardwareStatusResponse.


        :param total_offline_count: The total_offline_count of this HardwareStatusResponse.  # noqa: E501
        :type: int
        """
        if total_offline_count is None:
            raise ValueError("Invalid value for `total_offline_count`, must not be `None`")  # noqa: E501

        self._total_offline_count = total_offline_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HardwareStatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardwareStatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
