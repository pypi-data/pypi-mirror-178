# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseStationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'serial_number': 'str',
        'name': 'str',
        'location': 'LocationChild',
        'corporation': 'CorporationChild',
        'last_status_update': 'datetime',
        'push_to_stage': 'bool',
        'release_ring': 'ReleaseRingChild',
        'targeted_software_release': 'TargetedSoftwareReleaseChild',
        'current_software_release': 'CurrentSoftwareReleaseChild',
        'hardware_revision': 'HardwareRevisionChild',
        'receiver': 'BaseStationReceiverChild',
        'repeaters': 'list[RepeaterChild]',
        'total_online_node_count': 'int',
        'allowed_auto_frequencies': 'list[str]',
        'last_data_update': 'datetime',
        'is_online': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'serial_number': 'SerialNumber',
        'name': 'Name',
        'location': 'Location',
        'corporation': 'Corporation',
        'last_status_update': 'LastStatusUpdate',
        'push_to_stage': 'PushToStage',
        'release_ring': 'ReleaseRing',
        'targeted_software_release': 'TargetedSoftwareRelease',
        'current_software_release': 'CurrentSoftwareRelease',
        'hardware_revision': 'HardwareRevision',
        'receiver': 'Receiver',
        'repeaters': 'Repeaters',
        'total_online_node_count': 'TotalOnlineNodeCount',
        'allowed_auto_frequencies': 'AllowedAutoFrequencies',
        'last_data_update': 'LastDataUpdate',
        'is_online': 'IsOnline'
    }

    def __init__(self, id=None, serial_number=None, name=None, location=None, corporation=None, last_status_update=None, push_to_stage=None, release_ring=None, targeted_software_release=None, current_software_release=None, hardware_revision=None, receiver=None, repeaters=None, total_online_node_count=None, allowed_auto_frequencies=None, last_data_update=None, is_online=None):  # noqa: E501
        """BaseStationResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._serial_number = None
        self._name = None
        self._location = None
        self._corporation = None
        self._last_status_update = None
        self._push_to_stage = None
        self._release_ring = None
        self._targeted_software_release = None
        self._current_software_release = None
        self._hardware_revision = None
        self._receiver = None
        self._repeaters = None
        self._total_online_node_count = None
        self._allowed_auto_frequencies = None
        self._last_data_update = None
        self._is_online = None
        self.discriminator = None
        self.id = id
        self.serial_number = serial_number
        if name is not None:
            self.name = name
        self.location = location
        self.corporation = corporation
        if last_status_update is not None:
            self.last_status_update = last_status_update
        self.push_to_stage = push_to_stage
        if release_ring is not None:
            self.release_ring = release_ring
        if targeted_software_release is not None:
            self.targeted_software_release = targeted_software_release
        if current_software_release is not None:
            self.current_software_release = current_software_release
        if hardware_revision is not None:
            self.hardware_revision = hardware_revision
        if receiver is not None:
            self.receiver = receiver
        self.repeaters = repeaters
        self.total_online_node_count = total_online_node_count
        self.allowed_auto_frequencies = allowed_auto_frequencies
        if last_data_update is not None:
            self.last_data_update = last_data_update
        if is_online is not None:
            self.is_online = is_online

    @property
    def id(self):
        """Gets the id of this BaseStationResponse.  # noqa: E501


        :return: The id of this BaseStationResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseStationResponse.


        :param id: The id of this BaseStationResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def serial_number(self):
        """Gets the serial_number of this BaseStationResponse.  # noqa: E501


        :return: The serial_number of this BaseStationResponse.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this BaseStationResponse.


        :param serial_number: The serial_number of this BaseStationResponse.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def name(self):
        """Gets the name of this BaseStationResponse.  # noqa: E501


        :return: The name of this BaseStationResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseStationResponse.


        :param name: The name of this BaseStationResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def location(self):
        """Gets the location of this BaseStationResponse.  # noqa: E501


        :return: The location of this BaseStationResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BaseStationResponse.


        :param location: The location of this BaseStationResponse.  # noqa: E501
        :type: LocationChild
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def corporation(self):
        """Gets the corporation of this BaseStationResponse.  # noqa: E501


        :return: The corporation of this BaseStationResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this BaseStationResponse.


        :param corporation: The corporation of this BaseStationResponse.  # noqa: E501
        :type: CorporationChild
        """
        if corporation is None:
            raise ValueError("Invalid value for `corporation`, must not be `None`")  # noqa: E501

        self._corporation = corporation

    @property
    def last_status_update(self):
        """Gets the last_status_update of this BaseStationResponse.  # noqa: E501


        :return: The last_status_update of this BaseStationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_status_update

    @last_status_update.setter
    def last_status_update(self, last_status_update):
        """Sets the last_status_update of this BaseStationResponse.


        :param last_status_update: The last_status_update of this BaseStationResponse.  # noqa: E501
        :type: datetime
        """

        self._last_status_update = last_status_update

    @property
    def push_to_stage(self):
        """Gets the push_to_stage of this BaseStationResponse.  # noqa: E501


        :return: The push_to_stage of this BaseStationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._push_to_stage

    @push_to_stage.setter
    def push_to_stage(self, push_to_stage):
        """Sets the push_to_stage of this BaseStationResponse.


        :param push_to_stage: The push_to_stage of this BaseStationResponse.  # noqa: E501
        :type: bool
        """
        if push_to_stage is None:
            raise ValueError("Invalid value for `push_to_stage`, must not be `None`")  # noqa: E501

        self._push_to_stage = push_to_stage

    @property
    def release_ring(self):
        """Gets the release_ring of this BaseStationResponse.  # noqa: E501


        :return: The release_ring of this BaseStationResponse.  # noqa: E501
        :rtype: ReleaseRingChild
        """
        return self._release_ring

    @release_ring.setter
    def release_ring(self, release_ring):
        """Sets the release_ring of this BaseStationResponse.


        :param release_ring: The release_ring of this BaseStationResponse.  # noqa: E501
        :type: ReleaseRingChild
        """

        self._release_ring = release_ring

    @property
    def targeted_software_release(self):
        """Gets the targeted_software_release of this BaseStationResponse.  # noqa: E501


        :return: The targeted_software_release of this BaseStationResponse.  # noqa: E501
        :rtype: TargetedSoftwareReleaseChild
        """
        return self._targeted_software_release

    @targeted_software_release.setter
    def targeted_software_release(self, targeted_software_release):
        """Sets the targeted_software_release of this BaseStationResponse.


        :param targeted_software_release: The targeted_software_release of this BaseStationResponse.  # noqa: E501
        :type: TargetedSoftwareReleaseChild
        """

        self._targeted_software_release = targeted_software_release

    @property
    def current_software_release(self):
        """Gets the current_software_release of this BaseStationResponse.  # noqa: E501


        :return: The current_software_release of this BaseStationResponse.  # noqa: E501
        :rtype: CurrentSoftwareReleaseChild
        """
        return self._current_software_release

    @current_software_release.setter
    def current_software_release(self, current_software_release):
        """Sets the current_software_release of this BaseStationResponse.


        :param current_software_release: The current_software_release of this BaseStationResponse.  # noqa: E501
        :type: CurrentSoftwareReleaseChild
        """

        self._current_software_release = current_software_release

    @property
    def hardware_revision(self):
        """Gets the hardware_revision of this BaseStationResponse.  # noqa: E501


        :return: The hardware_revision of this BaseStationResponse.  # noqa: E501
        :rtype: HardwareRevisionChild
        """
        return self._hardware_revision

    @hardware_revision.setter
    def hardware_revision(self, hardware_revision):
        """Sets the hardware_revision of this BaseStationResponse.


        :param hardware_revision: The hardware_revision of this BaseStationResponse.  # noqa: E501
        :type: HardwareRevisionChild
        """

        self._hardware_revision = hardware_revision

    @property
    def receiver(self):
        """Gets the receiver of this BaseStationResponse.  # noqa: E501


        :return: The receiver of this BaseStationResponse.  # noqa: E501
        :rtype: BaseStationReceiverChild
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver):
        """Sets the receiver of this BaseStationResponse.


        :param receiver: The receiver of this BaseStationResponse.  # noqa: E501
        :type: BaseStationReceiverChild
        """

        self._receiver = receiver

    @property
    def repeaters(self):
        """Gets the repeaters of this BaseStationResponse.  # noqa: E501

        A repeater extends a signal to allow communication between nodes   and Base Stations within large work sites.   A Base Station can connect with up to 4 repeaters.  # noqa: E501

        :return: The repeaters of this BaseStationResponse.  # noqa: E501
        :rtype: list[RepeaterChild]
        """
        return self._repeaters

    @repeaters.setter
    def repeaters(self, repeaters):
        """Sets the repeaters of this BaseStationResponse.

        A repeater extends a signal to allow communication between nodes   and Base Stations within large work sites.   A Base Station can connect with up to 4 repeaters.  # noqa: E501

        :param repeaters: The repeaters of this BaseStationResponse.  # noqa: E501
        :type: list[RepeaterChild]
        """
        if repeaters is None:
            raise ValueError("Invalid value for `repeaters`, must not be `None`")  # noqa: E501

        self._repeaters = repeaters

    @property
    def total_online_node_count(self):
        """Gets the total_online_node_count of this BaseStationResponse.  # noqa: E501

        The number of nodes talking to the Base Station.  This number includes the nodes talking to any receivers or repeaters connected to the Base Station.  # noqa: E501

        :return: The total_online_node_count of this BaseStationResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_online_node_count

    @total_online_node_count.setter
    def total_online_node_count(self, total_online_node_count):
        """Sets the total_online_node_count of this BaseStationResponse.

        The number of nodes talking to the Base Station.  This number includes the nodes talking to any receivers or repeaters connected to the Base Station.  # noqa: E501

        :param total_online_node_count: The total_online_node_count of this BaseStationResponse.  # noqa: E501
        :type: int
        """
        if total_online_node_count is None:
            raise ValueError("Invalid value for `total_online_node_count`, must not be `None`")  # noqa: E501

        self._total_online_node_count = total_online_node_count

    @property
    def allowed_auto_frequencies(self):
        """Gets the allowed_auto_frequencies of this BaseStationResponse.  # noqa: E501


        :return: The allowed_auto_frequencies of this BaseStationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_auto_frequencies

    @allowed_auto_frequencies.setter
    def allowed_auto_frequencies(self, allowed_auto_frequencies):
        """Sets the allowed_auto_frequencies of this BaseStationResponse.


        :param allowed_auto_frequencies: The allowed_auto_frequencies of this BaseStationResponse.  # noqa: E501
        :type: list[str]
        """
        if allowed_auto_frequencies is None:
            raise ValueError("Invalid value for `allowed_auto_frequencies`, must not be `None`")  # noqa: E501

        self._allowed_auto_frequencies = allowed_auto_frequencies

    @property
    def last_data_update(self):
        """Gets the last_data_update of this BaseStationResponse.  # noqa: E501


        :return: The last_data_update of this BaseStationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_data_update

    @last_data_update.setter
    def last_data_update(self, last_data_update):
        """Sets the last_data_update of this BaseStationResponse.


        :param last_data_update: The last_data_update of this BaseStationResponse.  # noqa: E501
        :type: datetime
        """

        self._last_data_update = last_data_update

    @property
    def is_online(self):
        """Gets the is_online of this BaseStationResponse.  # noqa: E501

        Determines whether or not the Base Station is connected to a network (wifi, ethernet, cell tower etc)  # noqa: E501

        :return: The is_online of this BaseStationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this BaseStationResponse.

        Determines whether or not the Base Station is connected to a network (wifi, ethernet, cell tower etc)  # noqa: E501

        :param is_online: The is_online of this BaseStationResponse.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseStationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseStationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
