# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetCategoryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'short_name': 'str',
        'code': 'str',
        'active': 'bool',
        'parent_category': 'AssetCategoryParentChild',
        'asset_type': 'AssetTypeChild',
        'asset_sizes': 'list[AssetSizeChild]',
        'parameter_count': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'short_name': 'ShortName',
        'code': 'Code',
        'active': 'Active',
        'parent_category': 'ParentCategory',
        'asset_type': 'AssetType',
        'asset_sizes': 'AssetSizes',
        'parameter_count': 'ParameterCount'
    }

    def __init__(self, id=None, name=None, short_name=None, code=None, active=None, parent_category=None, asset_type=None, asset_sizes=None, parameter_count=None):  # noqa: E501
        """AssetCategoryResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._short_name = None
        self._code = None
        self._active = None
        self._parent_category = None
        self._asset_type = None
        self._asset_sizes = None
        self._parameter_count = None
        self.discriminator = None
        self.id = id
        self.name = name
        if short_name is not None:
            self.short_name = short_name
        self.code = code
        self.active = active
        if parent_category is not None:
            self.parent_category = parent_category
        self.asset_type = asset_type
        self.asset_sizes = asset_sizes
        self.parameter_count = parameter_count

    @property
    def id(self):
        """Gets the id of this AssetCategoryResponse.  # noqa: E501


        :return: The id of this AssetCategoryResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetCategoryResponse.


        :param id: The id of this AssetCategoryResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this AssetCategoryResponse.  # noqa: E501


        :return: The name of this AssetCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetCategoryResponse.


        :param name: The name of this AssetCategoryResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def short_name(self):
        """Gets the short_name of this AssetCategoryResponse.  # noqa: E501


        :return: The short_name of this AssetCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this AssetCategoryResponse.


        :param short_name: The short_name of this AssetCategoryResponse.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def code(self):
        """Gets the code of this AssetCategoryResponse.  # noqa: E501


        :return: The code of this AssetCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AssetCategoryResponse.


        :param code: The code of this AssetCategoryResponse.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def active(self):
        """Gets the active of this AssetCategoryResponse.  # noqa: E501


        :return: The active of this AssetCategoryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AssetCategoryResponse.


        :param active: The active of this AssetCategoryResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def parent_category(self):
        """Gets the parent_category of this AssetCategoryResponse.  # noqa: E501


        :return: The parent_category of this AssetCategoryResponse.  # noqa: E501
        :rtype: AssetCategoryParentChild
        """
        return self._parent_category

    @parent_category.setter
    def parent_category(self, parent_category):
        """Sets the parent_category of this AssetCategoryResponse.


        :param parent_category: The parent_category of this AssetCategoryResponse.  # noqa: E501
        :type: AssetCategoryParentChild
        """

        self._parent_category = parent_category

    @property
    def asset_type(self):
        """Gets the asset_type of this AssetCategoryResponse.  # noqa: E501


        :return: The asset_type of this AssetCategoryResponse.  # noqa: E501
        :rtype: AssetTypeChild
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this AssetCategoryResponse.


        :param asset_type: The asset_type of this AssetCategoryResponse.  # noqa: E501
        :type: AssetTypeChild
        """
        if asset_type is None:
            raise ValueError("Invalid value for `asset_type`, must not be `None`")  # noqa: E501

        self._asset_type = asset_type

    @property
    def asset_sizes(self):
        """Gets the asset_sizes of this AssetCategoryResponse.  # noqa: E501


        :return: The asset_sizes of this AssetCategoryResponse.  # noqa: E501
        :rtype: list[AssetSizeChild]
        """
        return self._asset_sizes

    @asset_sizes.setter
    def asset_sizes(self, asset_sizes):
        """Sets the asset_sizes of this AssetCategoryResponse.


        :param asset_sizes: The asset_sizes of this AssetCategoryResponse.  # noqa: E501
        :type: list[AssetSizeChild]
        """
        if asset_sizes is None:
            raise ValueError("Invalid value for `asset_sizes`, must not be `None`")  # noqa: E501

        self._asset_sizes = asset_sizes

    @property
    def parameter_count(self):
        """Gets the parameter_count of this AssetCategoryResponse.  # noqa: E501


        :return: The parameter_count of this AssetCategoryResponse.  # noqa: E501
        :rtype: int
        """
        return self._parameter_count

    @parameter_count.setter
    def parameter_count(self, parameter_count):
        """Sets the parameter_count of this AssetCategoryResponse.


        :param parameter_count: The parameter_count of this AssetCategoryResponse.  # noqa: E501
        :type: int
        """
        if parameter_count is None:
            raise ValueError("Invalid value for `parameter_count`, must not be `None`")  # noqa: E501

        self._parameter_count = parameter_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetCategoryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetCategoryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
