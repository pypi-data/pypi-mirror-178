# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeRegistryNotificationRequestRecordChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'addr': 'str',
        'host': 'str',
        'method': 'str',
        'user_agent': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'addr': 'Addr',
        'host': 'Host',
        'method': 'Method',
        'user_agent': 'UserAgent'
    }

    def __init__(self, id=None, addr=None, host=None, method=None, user_agent=None):  # noqa: E501
        """EdgeRegistryNotificationRequestRecordChild - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._addr = None
        self._host = None
        self._method = None
        self._user_agent = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if addr is not None:
            self.addr = addr
        if host is not None:
            self.host = host
        if method is not None:
            self.method = method
        if user_agent is not None:
            self.user_agent = user_agent

    @property
    def id(self):
        """Gets the id of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501

        Identifies the request that initiated the event  # noqa: E501

        :return: The id of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgeRegistryNotificationRequestRecordChild.

        Identifies the request that initiated the event  # noqa: E501

        :param id: The id of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def addr(self):
        """Gets the addr of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501

        Addr contains the ip or hostname and possibly port of the client connection that initiated the event  # noqa: E501

        :return: The addr of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this EdgeRegistryNotificationRequestRecordChild.

        Addr contains the ip or hostname and possibly port of the client connection that initiated the event  # noqa: E501

        :param addr: The addr of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501
        :type: str
        """

        self._addr = addr

    @property
    def host(self):
        """Gets the host of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501

        Externally accessible host name of the registry instance  # noqa: E501

        :return: The host of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this EdgeRegistryNotificationRequestRecordChild.

        Externally accessible host name of the registry instance  # noqa: E501

        :param host: The host of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def method(self):
        """Gets the method of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501

        Request method that generated the event  # noqa: E501

        :return: The method of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EdgeRegistryNotificationRequestRecordChild.

        Request method that generated the event  # noqa: E501

        :param method: The method of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def user_agent(self):
        """Gets the user_agent of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501

        User agent header of the request  # noqa: E501

        :return: The user_agent of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this EdgeRegistryNotificationRequestRecordChild.

        User agent header of the request  # noqa: E501

        :param user_agent: The user_agent of this EdgeRegistryNotificationRequestRecordChild.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeRegistryNotificationRequestRecordChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeRegistryNotificationRequestRecordChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
