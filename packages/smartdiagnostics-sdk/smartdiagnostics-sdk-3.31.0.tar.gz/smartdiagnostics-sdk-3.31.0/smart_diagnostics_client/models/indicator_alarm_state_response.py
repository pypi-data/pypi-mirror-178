# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndicatorAlarmStateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_value': 'float',
        'last_update': 'datetime',
        'id': 'str',
        'alarm_severity': 'int'
    }

    attribute_map = {
        'current_value': 'CurrentValue',
        'last_update': 'LastUpdate',
        'id': 'Id',
        'alarm_severity': 'AlarmSeverity'
    }

    def __init__(self, current_value=None, last_update=None, id=None, alarm_severity=None):  # noqa: E501
        """IndicatorAlarmStateResponse - a model defined in Swagger"""  # noqa: E501
        self._current_value = None
        self._last_update = None
        self._id = None
        self._alarm_severity = None
        self.discriminator = None
        if current_value is not None:
            self.current_value = current_value
        if last_update is not None:
            self.last_update = last_update
        self.id = id
        if alarm_severity is not None:
            self.alarm_severity = alarm_severity

    @property
    def current_value(self):
        """Gets the current_value of this IndicatorAlarmStateResponse.  # noqa: E501

        Current Value of indicator  # noqa: E501

        :return: The current_value of this IndicatorAlarmStateResponse.  # noqa: E501
        :rtype: float
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this IndicatorAlarmStateResponse.

        Current Value of indicator  # noqa: E501

        :param current_value: The current_value of this IndicatorAlarmStateResponse.  # noqa: E501
        :type: float
        """

        self._current_value = current_value

    @property
    def last_update(self):
        """Gets the last_update of this IndicatorAlarmStateResponse.  # noqa: E501

        Last time it was updated  # noqa: E501

        :return: The last_update of this IndicatorAlarmStateResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this IndicatorAlarmStateResponse.

        Last time it was updated  # noqa: E501

        :param last_update: The last_update of this IndicatorAlarmStateResponse.  # noqa: E501
        :type: datetime
        """

        self._last_update = last_update

    @property
    def id(self):
        """Gets the id of this IndicatorAlarmStateResponse.  # noqa: E501

        Id of entity  # noqa: E501

        :return: The id of this IndicatorAlarmStateResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IndicatorAlarmStateResponse.

        Id of entity  # noqa: E501

        :param id: The id of this IndicatorAlarmStateResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def alarm_severity(self):
        """Gets the alarm_severity of this IndicatorAlarmStateResponse.  # noqa: E501

        Alarm severity  # noqa: E501

        :return: The alarm_severity of this IndicatorAlarmStateResponse.  # noqa: E501
        :rtype: int
        """
        return self._alarm_severity

    @alarm_severity.setter
    def alarm_severity(self, alarm_severity):
        """Sets the alarm_severity of this IndicatorAlarmStateResponse.

        Alarm severity  # noqa: E501

        :param alarm_severity: The alarm_severity of this IndicatorAlarmStateResponse.  # noqa: E501
        :type: int
        """

        self._alarm_severity = alarm_severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndicatorAlarmStateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndicatorAlarmStateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
