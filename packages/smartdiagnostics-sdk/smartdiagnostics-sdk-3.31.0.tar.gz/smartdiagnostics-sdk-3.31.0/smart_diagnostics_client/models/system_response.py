# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_collector_dependent_system': 'bool',
        'children': 'list[DescendantChild]',
        'description': 'str',
        'is_visible': 'bool',
        'cds_base_stations': 'list[BaseStationChild]',
        'cds_master_systems': 'list[SystemChild]',
        'id': 'str',
        'name': 'str',
        'abbreviation': 'str',
        'active': 'bool',
        'is_paused': 'bool',
        'is_snoozed': 'bool',
        'created': 'datetime',
        'corporation': 'CorporationChild',
        'location': 'LocationChild'
    }

    attribute_map = {
        'is_collector_dependent_system': 'IsCollectorDependentSystem',
        'children': 'Children',
        'description': 'Description',
        'is_visible': 'IsVisible',
        'cds_base_stations': 'CdsBaseStations',
        'cds_master_systems': 'CdsMasterSystems',
        'id': 'Id',
        'name': 'Name',
        'abbreviation': 'Abbreviation',
        'active': 'Active',
        'is_paused': 'IsPaused',
        'is_snoozed': 'IsSnoozed',
        'created': 'Created',
        'corporation': 'Corporation',
        'location': 'Location'
    }

    def __init__(self, is_collector_dependent_system=None, children=None, description=None, is_visible=None, cds_base_stations=None, cds_master_systems=None, id=None, name=None, abbreviation=None, active=None, is_paused=None, is_snoozed=None, created=None, corporation=None, location=None):  # noqa: E501
        """SystemResponse - a model defined in Swagger"""  # noqa: E501
        self._is_collector_dependent_system = None
        self._children = None
        self._description = None
        self._is_visible = None
        self._cds_base_stations = None
        self._cds_master_systems = None
        self._id = None
        self._name = None
        self._abbreviation = None
        self._active = None
        self._is_paused = None
        self._is_snoozed = None
        self._created = None
        self._corporation = None
        self._location = None
        self.discriminator = None
        self.is_collector_dependent_system = is_collector_dependent_system
        self.children = children
        if description is not None:
            self.description = description
        self.is_visible = is_visible
        self.cds_base_stations = cds_base_stations
        self.cds_master_systems = cds_master_systems
        self.id = id
        self.name = name
        self.abbreviation = abbreviation
        self.active = active
        self.is_paused = is_paused
        self.is_snoozed = is_snoozed
        self.created = created
        self.corporation = corporation
        self.location = location

    @property
    def is_collector_dependent_system(self):
        """Gets the is_collector_dependent_system of this SystemResponse.  # noqa: E501


        :return: The is_collector_dependent_system of this SystemResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_collector_dependent_system

    @is_collector_dependent_system.setter
    def is_collector_dependent_system(self, is_collector_dependent_system):
        """Sets the is_collector_dependent_system of this SystemResponse.


        :param is_collector_dependent_system: The is_collector_dependent_system of this SystemResponse.  # noqa: E501
        :type: bool
        """
        if is_collector_dependent_system is None:
            raise ValueError("Invalid value for `is_collector_dependent_system`, must not be `None`")  # noqa: E501

        self._is_collector_dependent_system = is_collector_dependent_system

    @property
    def children(self):
        """Gets the children of this SystemResponse.  # noqa: E501


        :return: The children of this SystemResponse.  # noqa: E501
        :rtype: list[DescendantChild]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this SystemResponse.


        :param children: The children of this SystemResponse.  # noqa: E501
        :type: list[DescendantChild]
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")  # noqa: E501

        self._children = children

    @property
    def description(self):
        """Gets the description of this SystemResponse.  # noqa: E501


        :return: The description of this SystemResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SystemResponse.


        :param description: The description of this SystemResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_visible(self):
        """Gets the is_visible of this SystemResponse.  # noqa: E501


        :return: The is_visible of this SystemResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this SystemResponse.


        :param is_visible: The is_visible of this SystemResponse.  # noqa: E501
        :type: bool
        """
        if is_visible is None:
            raise ValueError("Invalid value for `is_visible`, must not be `None`")  # noqa: E501

        self._is_visible = is_visible

    @property
    def cds_base_stations(self):
        """Gets the cds_base_stations of this SystemResponse.  # noqa: E501


        :return: The cds_base_stations of this SystemResponse.  # noqa: E501
        :rtype: list[BaseStationChild]
        """
        return self._cds_base_stations

    @cds_base_stations.setter
    def cds_base_stations(self, cds_base_stations):
        """Sets the cds_base_stations of this SystemResponse.


        :param cds_base_stations: The cds_base_stations of this SystemResponse.  # noqa: E501
        :type: list[BaseStationChild]
        """
        if cds_base_stations is None:
            raise ValueError("Invalid value for `cds_base_stations`, must not be `None`")  # noqa: E501

        self._cds_base_stations = cds_base_stations

    @property
    def cds_master_systems(self):
        """Gets the cds_master_systems of this SystemResponse.  # noqa: E501


        :return: The cds_master_systems of this SystemResponse.  # noqa: E501
        :rtype: list[SystemChild]
        """
        return self._cds_master_systems

    @cds_master_systems.setter
    def cds_master_systems(self, cds_master_systems):
        """Sets the cds_master_systems of this SystemResponse.


        :param cds_master_systems: The cds_master_systems of this SystemResponse.  # noqa: E501
        :type: list[SystemChild]
        """
        if cds_master_systems is None:
            raise ValueError("Invalid value for `cds_master_systems`, must not be `None`")  # noqa: E501

        self._cds_master_systems = cds_master_systems

    @property
    def id(self):
        """Gets the id of this SystemResponse.  # noqa: E501


        :return: The id of this SystemResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SystemResponse.


        :param id: The id of this SystemResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this SystemResponse.  # noqa: E501


        :return: The name of this SystemResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SystemResponse.


        :param name: The name of this SystemResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this SystemResponse.  # noqa: E501


        :return: The abbreviation of this SystemResponse.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this SystemResponse.


        :param abbreviation: The abbreviation of this SystemResponse.  # noqa: E501
        :type: str
        """
        if abbreviation is None:
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def active(self):
        """Gets the active of this SystemResponse.  # noqa: E501


        :return: The active of this SystemResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SystemResponse.


        :param active: The active of this SystemResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def is_paused(self):
        """Gets the is_paused of this SystemResponse.  # noqa: E501


        :return: The is_paused of this SystemResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this SystemResponse.


        :param is_paused: The is_paused of this SystemResponse.  # noqa: E501
        :type: bool
        """
        if is_paused is None:
            raise ValueError("Invalid value for `is_paused`, must not be `None`")  # noqa: E501

        self._is_paused = is_paused

    @property
    def is_snoozed(self):
        """Gets the is_snoozed of this SystemResponse.  # noqa: E501


        :return: The is_snoozed of this SystemResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_snoozed

    @is_snoozed.setter
    def is_snoozed(self, is_snoozed):
        """Sets the is_snoozed of this SystemResponse.


        :param is_snoozed: The is_snoozed of this SystemResponse.  # noqa: E501
        :type: bool
        """
        if is_snoozed is None:
            raise ValueError("Invalid value for `is_snoozed`, must not be `None`")  # noqa: E501

        self._is_snoozed = is_snoozed

    @property
    def created(self):
        """Gets the created of this SystemResponse.  # noqa: E501


        :return: The created of this SystemResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SystemResponse.


        :param created: The created of this SystemResponse.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def corporation(self):
        """Gets the corporation of this SystemResponse.  # noqa: E501


        :return: The corporation of this SystemResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this SystemResponse.


        :param corporation: The corporation of this SystemResponse.  # noqa: E501
        :type: CorporationChild
        """
        if corporation is None:
            raise ValueError("Invalid value for `corporation`, must not be `None`")  # noqa: E501

        self._corporation = corporation

    @property
    def location(self):
        """Gets the location of this SystemResponse.  # noqa: E501


        :return: The location of this SystemResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SystemResponse.


        :param location: The location of this SystemResponse.  # noqa: E501
        :type: LocationChild
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
