# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelAssignmentUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'properties': 'list[SetPropertyChild]',
        'assigned_group_ids': 'list[str]'
    }

    attribute_map = {
        'properties': 'Properties',
        'assigned_group_ids': 'AssignedGroupIds'
    }

    def __init__(self, properties=None, assigned_group_ids=None):  # noqa: E501
        """ModelAssignmentUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._properties = None
        self._assigned_group_ids = None
        self.discriminator = None
        self.properties = properties
        self.assigned_group_ids = assigned_group_ids

    @property
    def properties(self):
        """Gets the properties of this ModelAssignmentUpdateRequest.  # noqa: E501

        Property values for the model assignment  # noqa: E501

        :return: The properties of this ModelAssignmentUpdateRequest.  # noqa: E501
        :rtype: list[SetPropertyChild]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ModelAssignmentUpdateRequest.

        Property values for the model assignment  # noqa: E501

        :param properties: The properties of this ModelAssignmentUpdateRequest.  # noqa: E501
        :type: list[SetPropertyChild]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def assigned_group_ids(self):
        """Gets the assigned_group_ids of this ModelAssignmentUpdateRequest.  # noqa: E501

        Groups that provide data for the model assignment. They must be the assignment group's parent or its descendants  and must be Monitoring Point, Asset, or Group type.  # noqa: E501

        :return: The assigned_group_ids of this ModelAssignmentUpdateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_group_ids

    @assigned_group_ids.setter
    def assigned_group_ids(self, assigned_group_ids):
        """Sets the assigned_group_ids of this ModelAssignmentUpdateRequest.

        Groups that provide data for the model assignment. They must be the assignment group's parent or its descendants  and must be Monitoring Point, Asset, or Group type.  # noqa: E501

        :param assigned_group_ids: The assigned_group_ids of this ModelAssignmentUpdateRequest.  # noqa: E501
        :type: list[str]
        """
        if assigned_group_ids is None:
            raise ValueError("Invalid value for `assigned_group_ids`, must not be `None`")  # noqa: E501

        self._assigned_group_ids = assigned_group_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelAssignmentUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelAssignmentUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
