# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaselineWithSignificantDigitsChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baseline_value_with_significant_digits': 'str',
        'baseline_value': 'float',
        'baseline_range_end_date': 'datetime',
        'baseline_range_start_date': 'datetime',
        'baseline_error': 'str',
        'baseline_type': 'str',
        'baseline_state': 'str',
        'baseline_sampling_frequency': 'int'
    }

    attribute_map = {
        'baseline_value_with_significant_digits': 'BaselineValueWithSignificantDigits',
        'baseline_value': 'BaselineValue',
        'baseline_range_end_date': 'BaselineRangeEndDate',
        'baseline_range_start_date': 'BaselineRangeStartDate',
        'baseline_error': 'BaselineError',
        'baseline_type': 'BaselineType',
        'baseline_state': 'BaselineState',
        'baseline_sampling_frequency': 'BaselineSamplingFrequency'
    }

    def __init__(self, baseline_value_with_significant_digits=None, baseline_value=None, baseline_range_end_date=None, baseline_range_start_date=None, baseline_error=None, baseline_type=None, baseline_state=None, baseline_sampling_frequency=None):  # noqa: E501
        """BaselineWithSignificantDigitsChild - a model defined in Swagger"""  # noqa: E501
        self._baseline_value_with_significant_digits = None
        self._baseline_value = None
        self._baseline_range_end_date = None
        self._baseline_range_start_date = None
        self._baseline_error = None
        self._baseline_type = None
        self._baseline_state = None
        self._baseline_sampling_frequency = None
        self.discriminator = None
        if baseline_value_with_significant_digits is not None:
            self.baseline_value_with_significant_digits = baseline_value_with_significant_digits
        if baseline_value is not None:
            self.baseline_value = baseline_value
        if baseline_range_end_date is not None:
            self.baseline_range_end_date = baseline_range_end_date
        if baseline_range_start_date is not None:
            self.baseline_range_start_date = baseline_range_start_date
        if baseline_error is not None:
            self.baseline_error = baseline_error
        self.baseline_type = baseline_type
        self.baseline_state = baseline_state
        if baseline_sampling_frequency is not None:
            self.baseline_sampling_frequency = baseline_sampling_frequency

    @property
    def baseline_value_with_significant_digits(self):
        """Gets the baseline_value_with_significant_digits of this BaselineWithSignificantDigitsChild.  # noqa: E501

        Formats the baseline value to use significant digits  # noqa: E501

        :return: The baseline_value_with_significant_digits of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :rtype: str
        """
        return self._baseline_value_with_significant_digits

    @baseline_value_with_significant_digits.setter
    def baseline_value_with_significant_digits(self, baseline_value_with_significant_digits):
        """Sets the baseline_value_with_significant_digits of this BaselineWithSignificantDigitsChild.

        Formats the baseline value to use significant digits  # noqa: E501

        :param baseline_value_with_significant_digits: The baseline_value_with_significant_digits of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :type: str
        """

        self._baseline_value_with_significant_digits = baseline_value_with_significant_digits

    @property
    def baseline_value(self):
        """Gets the baseline_value of this BaselineWithSignificantDigitsChild.  # noqa: E501

        Baseline Value (aka Baseline Number) for a given Damage indicator  # noqa: E501

        :return: The baseline_value of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :rtype: float
        """
        return self._baseline_value

    @baseline_value.setter
    def baseline_value(self, baseline_value):
        """Sets the baseline_value of this BaselineWithSignificantDigitsChild.

        Baseline Value (aka Baseline Number) for a given Damage indicator  # noqa: E501

        :param baseline_value: The baseline_value of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :type: float
        """

        self._baseline_value = baseline_value

    @property
    def baseline_range_end_date(self):
        """Gets the baseline_range_end_date of this BaselineWithSignificantDigitsChild.  # noqa: E501

        The ending date of the baseline.  Will be null when the BaselineType is Single  # noqa: E501

        :return: The baseline_range_end_date of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :rtype: datetime
        """
        return self._baseline_range_end_date

    @baseline_range_end_date.setter
    def baseline_range_end_date(self, baseline_range_end_date):
        """Sets the baseline_range_end_date of this BaselineWithSignificantDigitsChild.

        The ending date of the baseline.  Will be null when the BaselineType is Single  # noqa: E501

        :param baseline_range_end_date: The baseline_range_end_date of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :type: datetime
        """

        self._baseline_range_end_date = baseline_range_end_date

    @property
    def baseline_range_start_date(self):
        """Gets the baseline_range_start_date of this BaselineWithSignificantDigitsChild.  # noqa: E501

        The starting date for the baseline  # noqa: E501

        :return: The baseline_range_start_date of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :rtype: datetime
        """
        return self._baseline_range_start_date

    @baseline_range_start_date.setter
    def baseline_range_start_date(self, baseline_range_start_date):
        """Sets the baseline_range_start_date of this BaselineWithSignificantDigitsChild.

        The starting date for the baseline  # noqa: E501

        :param baseline_range_start_date: The baseline_range_start_date of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :type: datetime
        """

        self._baseline_range_start_date = baseline_range_start_date

    @property
    def baseline_error(self):
        """Gets the baseline_error of this BaselineWithSignificantDigitsChild.  # noqa: E501

        Description of the error, if any occurred  # noqa: E501

        :return: The baseline_error of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :rtype: str
        """
        return self._baseline_error

    @baseline_error.setter
    def baseline_error(self, baseline_error):
        """Sets the baseline_error of this BaselineWithSignificantDigitsChild.

        Description of the error, if any occurred  # noqa: E501

        :param baseline_error: The baseline_error of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :type: str
        """

        self._baseline_error = baseline_error

    @property
    def baseline_type(self):
        """Gets the baseline_type of this BaselineWithSignificantDigitsChild.  # noqa: E501

        The type of baseline taken being either single, range, or none  # noqa: E501

        :return: The baseline_type of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :rtype: str
        """
        return self._baseline_type

    @baseline_type.setter
    def baseline_type(self, baseline_type):
        """Sets the baseline_type of this BaselineWithSignificantDigitsChild.

        The type of baseline taken being either single, range, or none  # noqa: E501

        :param baseline_type: The baseline_type of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :type: str
        """
        if baseline_type is None:
            raise ValueError("Invalid value for `baseline_type`, must not be `None`")  # noqa: E501

        self._baseline_type = baseline_type

    @property
    def baseline_state(self):
        """Gets the baseline_state of this BaselineWithSignificantDigitsChild.  # noqa: E501

        The state of the baseline. Whether the baseline is complete, has an error, or does not exist.  # noqa: E501

        :return: The baseline_state of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :rtype: str
        """
        return self._baseline_state

    @baseline_state.setter
    def baseline_state(self, baseline_state):
        """Sets the baseline_state of this BaselineWithSignificantDigitsChild.

        The state of the baseline. Whether the baseline is complete, has an error, or does not exist.  # noqa: E501

        :param baseline_state: The baseline_state of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :type: str
        """
        if baseline_state is None:
            raise ValueError("Invalid value for `baseline_state`, must not be `None`")  # noqa: E501

        self._baseline_state = baseline_state

    @property
    def baseline_sampling_frequency(self):
        """Gets the baseline_sampling_frequency of this BaselineWithSignificantDigitsChild.  # noqa: E501

        Defines how often the number of samples are taken for the baseline  # noqa: E501

        :return: The baseline_sampling_frequency of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :rtype: int
        """
        return self._baseline_sampling_frequency

    @baseline_sampling_frequency.setter
    def baseline_sampling_frequency(self, baseline_sampling_frequency):
        """Sets the baseline_sampling_frequency of this BaselineWithSignificantDigitsChild.

        Defines how often the number of samples are taken for the baseline  # noqa: E501

        :param baseline_sampling_frequency: The baseline_sampling_frequency of this BaselineWithSignificantDigitsChild.  # noqa: E501
        :type: int
        """

        self._baseline_sampling_frequency = baseline_sampling_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaselineWithSignificantDigitsChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaselineWithSignificantDigitsChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
