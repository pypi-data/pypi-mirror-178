# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetSizeChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'size_id': 'int',
        'size_name': 'str',
        'size_code': 'str'
    }

    attribute_map = {
        'size_id': 'SizeId',
        'size_name': 'SizeName',
        'size_code': 'SizeCode'
    }

    def __init__(self, size_id=None, size_name=None, size_code=None):  # noqa: E501
        """AssetSizeChild - a model defined in Swagger"""  # noqa: E501
        self._size_id = None
        self._size_name = None
        self._size_code = None
        self.discriminator = None
        self.size_id = size_id
        self.size_name = size_name
        self.size_code = size_code

    @property
    def size_id(self):
        """Gets the size_id of this AssetSizeChild.  # noqa: E501


        :return: The size_id of this AssetSizeChild.  # noqa: E501
        :rtype: int
        """
        return self._size_id

    @size_id.setter
    def size_id(self, size_id):
        """Sets the size_id of this AssetSizeChild.


        :param size_id: The size_id of this AssetSizeChild.  # noqa: E501
        :type: int
        """
        if size_id is None:
            raise ValueError("Invalid value for `size_id`, must not be `None`")  # noqa: E501

        self._size_id = size_id

    @property
    def size_name(self):
        """Gets the size_name of this AssetSizeChild.  # noqa: E501


        :return: The size_name of this AssetSizeChild.  # noqa: E501
        :rtype: str
        """
        return self._size_name

    @size_name.setter
    def size_name(self, size_name):
        """Sets the size_name of this AssetSizeChild.


        :param size_name: The size_name of this AssetSizeChild.  # noqa: E501
        :type: str
        """
        if size_name is None:
            raise ValueError("Invalid value for `size_name`, must not be `None`")  # noqa: E501

        self._size_name = size_name

    @property
    def size_code(self):
        """Gets the size_code of this AssetSizeChild.  # noqa: E501


        :return: The size_code of this AssetSizeChild.  # noqa: E501
        :rtype: str
        """
        return self._size_code

    @size_code.setter
    def size_code(self, size_code):
        """Sets the size_code of this AssetSizeChild.


        :param size_code: The size_code of this AssetSizeChild.  # noqa: E501
        :type: str
        """
        if size_code is None:
            raise ValueError("Invalid value for `size_code`, must not be `None`")  # noqa: E501

        self._size_code = size_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetSizeChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetSizeChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
