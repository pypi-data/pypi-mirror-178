# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeImageTagChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag_id': 'str',
        'tag_name': 'str',
        'tag_pushed': 'datetime',
        'tag_note': 'str',
        'tag_times_pulled': 'int',
        'tag_last_pulled': 'datetime'
    }

    attribute_map = {
        'tag_id': 'TagId',
        'tag_name': 'TagName',
        'tag_pushed': 'TagPushed',
        'tag_note': 'TagNote',
        'tag_times_pulled': 'TagTimesPulled',
        'tag_last_pulled': 'TagLastPulled'
    }

    def __init__(self, tag_id=None, tag_name=None, tag_pushed=None, tag_note=None, tag_times_pulled=None, tag_last_pulled=None):  # noqa: E501
        """EdgeImageTagChild - a model defined in Swagger"""  # noqa: E501
        self._tag_id = None
        self._tag_name = None
        self._tag_pushed = None
        self._tag_note = None
        self._tag_times_pulled = None
        self._tag_last_pulled = None
        self.discriminator = None
        self.tag_id = tag_id
        self.tag_name = tag_name
        self.tag_pushed = tag_pushed
        if tag_note is not None:
            self.tag_note = tag_note
        if tag_times_pulled is not None:
            self.tag_times_pulled = tag_times_pulled
        if tag_last_pulled is not None:
            self.tag_last_pulled = tag_last_pulled

    @property
    def tag_id(self):
        """Gets the tag_id of this EdgeImageTagChild.  # noqa: E501

        The id of the image tag record  # noqa: E501

        :return: The tag_id of this EdgeImageTagChild.  # noqa: E501
        :rtype: str
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this EdgeImageTagChild.

        The id of the image tag record  # noqa: E501

        :param tag_id: The tag_id of this EdgeImageTagChild.  # noqa: E501
        :type: str
        """
        if tag_id is None:
            raise ValueError("Invalid value for `tag_id`, must not be `None`")  # noqa: E501

        self._tag_id = tag_id

    @property
    def tag_name(self):
        """Gets the tag_name of this EdgeImageTagChild.  # noqa: E501

        The tag (name)  # noqa: E501

        :return: The tag_name of this EdgeImageTagChild.  # noqa: E501
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this EdgeImageTagChild.

        The tag (name)  # noqa: E501

        :param tag_name: The tag_name of this EdgeImageTagChild.  # noqa: E501
        :type: str
        """
        if tag_name is None:
            raise ValueError("Invalid value for `tag_name`, must not be `None`")  # noqa: E501

        self._tag_name = tag_name

    @property
    def tag_pushed(self):
        """Gets the tag_pushed of this EdgeImageTagChild.  # noqa: E501

        The date time that an image tag was pushed (created)  # noqa: E501

        :return: The tag_pushed of this EdgeImageTagChild.  # noqa: E501
        :rtype: datetime
        """
        return self._tag_pushed

    @tag_pushed.setter
    def tag_pushed(self, tag_pushed):
        """Sets the tag_pushed of this EdgeImageTagChild.

        The date time that an image tag was pushed (created)  # noqa: E501

        :param tag_pushed: The tag_pushed of this EdgeImageTagChild.  # noqa: E501
        :type: datetime
        """
        if tag_pushed is None:
            raise ValueError("Invalid value for `tag_pushed`, must not be `None`")  # noqa: E501

        self._tag_pushed = tag_pushed

    @property
    def tag_note(self):
        """Gets the tag_note of this EdgeImageTagChild.  # noqa: E501

        Note for this tag  # noqa: E501

        :return: The tag_note of this EdgeImageTagChild.  # noqa: E501
        :rtype: str
        """
        return self._tag_note

    @tag_note.setter
    def tag_note(self, tag_note):
        """Sets the tag_note of this EdgeImageTagChild.

        Note for this tag  # noqa: E501

        :param tag_note: The tag_note of this EdgeImageTagChild.  # noqa: E501
        :type: str
        """

        self._tag_note = tag_note

    @property
    def tag_times_pulled(self):
        """Gets the tag_times_pulled of this EdgeImageTagChild.  # noqa: E501

        Number of recorded times this image tag was pulled  # noqa: E501

        :return: The tag_times_pulled of this EdgeImageTagChild.  # noqa: E501
        :rtype: int
        """
        return self._tag_times_pulled

    @tag_times_pulled.setter
    def tag_times_pulled(self, tag_times_pulled):
        """Sets the tag_times_pulled of this EdgeImageTagChild.

        Number of recorded times this image tag was pulled  # noqa: E501

        :param tag_times_pulled: The tag_times_pulled of this EdgeImageTagChild.  # noqa: E501
        :type: int
        """

        self._tag_times_pulled = tag_times_pulled

    @property
    def tag_last_pulled(self):
        """Gets the tag_last_pulled of this EdgeImageTagChild.  # noqa: E501

        Last recorded time image tag was pulled  # noqa: E501

        :return: The tag_last_pulled of this EdgeImageTagChild.  # noqa: E501
        :rtype: datetime
        """
        return self._tag_last_pulled

    @tag_last_pulled.setter
    def tag_last_pulled(self, tag_last_pulled):
        """Sets the tag_last_pulled of this EdgeImageTagChild.

        Last recorded time image tag was pulled  # noqa: E501

        :param tag_last_pulled: The tag_last_pulled of this EdgeImageTagChild.  # noqa: E501
        :type: datetime
        """

        self._tag_last_pulled = tag_last_pulled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeImageTagChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeImageTagChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
