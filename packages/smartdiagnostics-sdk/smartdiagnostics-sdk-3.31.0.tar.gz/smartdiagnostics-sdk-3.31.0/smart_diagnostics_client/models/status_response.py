# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'color': 'str',
        'icon': 'str',
        'active': 'bool',
        'is_custom': 'bool',
        'created': 'datetime',
        'updated': 'datetime'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'color': 'Color',
        'icon': 'Icon',
        'active': 'Active',
        'is_custom': 'IsCustom',
        'created': 'Created',
        'updated': 'Updated'
    }

    def __init__(self, id=None, name=None, color=None, icon=None, active=None, is_custom=None, created=None, updated=None):  # noqa: E501
        """StatusResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._color = None
        self._icon = None
        self._active = None
        self._is_custom = None
        self._created = None
        self._updated = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.color = color
        if icon is not None:
            self.icon = icon
        self.active = active
        self.is_custom = is_custom
        self.created = created
        self.updated = updated

    @property
    def id(self):
        """Gets the id of this StatusResponse.  # noqa: E501

        The id of the status  # noqa: E501

        :return: The id of this StatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatusResponse.

        The id of the status  # noqa: E501

        :param id: The id of this StatusResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this StatusResponse.  # noqa: E501

        The name of the status  # noqa: E501

        :return: The name of this StatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatusResponse.

        The name of the status  # noqa: E501

        :param name: The name of this StatusResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def color(self):
        """Gets the color of this StatusResponse.  # noqa: E501

        The color of the status in hex  # noqa: E501

        :return: The color of this StatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this StatusResponse.

        The color of the status in hex  # noqa: E501

        :param color: The color of this StatusResponse.  # noqa: E501
        :type: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")  # noqa: E501

        self._color = color

    @property
    def icon(self):
        """Gets the icon of this StatusResponse.  # noqa: E501

        The fontawesome icon name of the status  # noqa: E501

        :return: The icon of this StatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this StatusResponse.

        The fontawesome icon name of the status  # noqa: E501

        :param icon: The icon of this StatusResponse.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def active(self):
        """Gets the active of this StatusResponse.  # noqa: E501

        Whether the status is active  # noqa: E501

        :return: The active of this StatusResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this StatusResponse.

        Whether the status is active  # noqa: E501

        :param active: The active of this StatusResponse.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def is_custom(self):
        """Gets the is_custom of this StatusResponse.  # noqa: E501

        Whether the status is custom  # noqa: E501

        :return: The is_custom of this StatusResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_custom

    @is_custom.setter
    def is_custom(self, is_custom):
        """Sets the is_custom of this StatusResponse.

        Whether the status is custom  # noqa: E501

        :param is_custom: The is_custom of this StatusResponse.  # noqa: E501
        :type: bool
        """
        if is_custom is None:
            raise ValueError("Invalid value for `is_custom`, must not be `None`")  # noqa: E501

        self._is_custom = is_custom

    @property
    def created(self):
        """Gets the created of this StatusResponse.  # noqa: E501

        When the status was created  # noqa: E501

        :return: The created of this StatusResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this StatusResponse.

        When the status was created  # noqa: E501

        :param created: The created of this StatusResponse.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this StatusResponse.  # noqa: E501

        When the status was updated  # noqa: E501

        :return: The updated of this StatusResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this StatusResponse.

        When the status was updated  # noqa: E501

        :param updated: The updated of this StatusResponse.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
