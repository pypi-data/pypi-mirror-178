# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeDefinitionAccessResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grant_access_to_corporations': 'list[EdgeGrantedToCorporationChild]',
        'grant_access_to_locations': 'list[EdgeGrantedToLocationChild]',
        'id': 'str',
        'name': 'str',
        'grant_access_to_all': 'bool'
    }

    attribute_map = {
        'grant_access_to_corporations': 'GrantAccessToCorporations',
        'grant_access_to_locations': 'GrantAccessToLocations',
        'id': 'Id',
        'name': 'Name',
        'grant_access_to_all': 'GrantAccessToAll'
    }

    def __init__(self, grant_access_to_corporations=None, grant_access_to_locations=None, id=None, name=None, grant_access_to_all=None):  # noqa: E501
        """EdgeDefinitionAccessResponse - a model defined in Swagger"""  # noqa: E501
        self._grant_access_to_corporations = None
        self._grant_access_to_locations = None
        self._id = None
        self._name = None
        self._grant_access_to_all = None
        self.discriminator = None
        self.grant_access_to_corporations = grant_access_to_corporations
        self.grant_access_to_locations = grant_access_to_locations
        self.id = id
        self.name = name
        self.grant_access_to_all = grant_access_to_all

    @property
    def grant_access_to_corporations(self):
        """Gets the grant_access_to_corporations of this EdgeDefinitionAccessResponse.  # noqa: E501

        A list of corporations currently given access   to use the definition or image repository.  Will not be populated if the definition or image has been granted access to all.  # noqa: E501

        :return: The grant_access_to_corporations of this EdgeDefinitionAccessResponse.  # noqa: E501
        :rtype: list[EdgeGrantedToCorporationChild]
        """
        return self._grant_access_to_corporations

    @grant_access_to_corporations.setter
    def grant_access_to_corporations(self, grant_access_to_corporations):
        """Sets the grant_access_to_corporations of this EdgeDefinitionAccessResponse.

        A list of corporations currently given access   to use the definition or image repository.  Will not be populated if the definition or image has been granted access to all.  # noqa: E501

        :param grant_access_to_corporations: The grant_access_to_corporations of this EdgeDefinitionAccessResponse.  # noqa: E501
        :type: list[EdgeGrantedToCorporationChild]
        """
        if grant_access_to_corporations is None:
            raise ValueError("Invalid value for `grant_access_to_corporations`, must not be `None`")  # noqa: E501

        self._grant_access_to_corporations = grant_access_to_corporations

    @property
    def grant_access_to_locations(self):
        """Gets the grant_access_to_locations of this EdgeDefinitionAccessResponse.  # noqa: E501

        A list of locations currently given access   to use the definition or image repository.  Will not be populated if the definition or image has been granted access to all.  # noqa: E501

        :return: The grant_access_to_locations of this EdgeDefinitionAccessResponse.  # noqa: E501
        :rtype: list[EdgeGrantedToLocationChild]
        """
        return self._grant_access_to_locations

    @grant_access_to_locations.setter
    def grant_access_to_locations(self, grant_access_to_locations):
        """Sets the grant_access_to_locations of this EdgeDefinitionAccessResponse.

        A list of locations currently given access   to use the definition or image repository.  Will not be populated if the definition or image has been granted access to all.  # noqa: E501

        :param grant_access_to_locations: The grant_access_to_locations of this EdgeDefinitionAccessResponse.  # noqa: E501
        :type: list[EdgeGrantedToLocationChild]
        """
        if grant_access_to_locations is None:
            raise ValueError("Invalid value for `grant_access_to_locations`, must not be `None`")  # noqa: E501

        self._grant_access_to_locations = grant_access_to_locations

    @property
    def id(self):
        """Gets the id of this EdgeDefinitionAccessResponse.  # noqa: E501

        The id of definition  # noqa: E501

        :return: The id of this EdgeDefinitionAccessResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgeDefinitionAccessResponse.

        The id of definition  # noqa: E501

        :param id: The id of this EdgeDefinitionAccessResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this EdgeDefinitionAccessResponse.  # noqa: E501

        The name of the definition  # noqa: E501

        :return: The name of this EdgeDefinitionAccessResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EdgeDefinitionAccessResponse.

        The name of the definition  # noqa: E501

        :param name: The name of this EdgeDefinitionAccessResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def grant_access_to_all(self):
        """Gets the grant_access_to_all of this EdgeDefinitionAccessResponse.  # noqa: E501

        Whether the definition or image repository has been granted access   to all locations and corporations.  # noqa: E501

        :return: The grant_access_to_all of this EdgeDefinitionAccessResponse.  # noqa: E501
        :rtype: bool
        """
        return self._grant_access_to_all

    @grant_access_to_all.setter
    def grant_access_to_all(self, grant_access_to_all):
        """Sets the grant_access_to_all of this EdgeDefinitionAccessResponse.

        Whether the definition or image repository has been granted access   to all locations and corporations.  # noqa: E501

        :param grant_access_to_all: The grant_access_to_all of this EdgeDefinitionAccessResponse.  # noqa: E501
        :type: bool
        """
        if grant_access_to_all is None:
            raise ValueError("Invalid value for `grant_access_to_all`, must not be `None`")  # noqa: E501

        self._grant_access_to_all = grant_access_to_all

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeDefinitionAccessResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeDefinitionAccessResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
