# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseStationUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'location_id': 'str',
        'release_ring_id': 'str',
        'push_to_stage': 'bool',
        'allowed_auto_frequencies': 'list[str]'
    }

    attribute_map = {
        'name': 'Name',
        'location_id': 'LocationId',
        'release_ring_id': 'ReleaseRingId',
        'push_to_stage': 'PushToStage',
        'allowed_auto_frequencies': 'AllowedAutoFrequencies'
    }

    def __init__(self, name=None, location_id=None, release_ring_id=None, push_to_stage=None, allowed_auto_frequencies=None):  # noqa: E501
        """BaseStationUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._location_id = None
        self._release_ring_id = None
        self._push_to_stage = None
        self._allowed_auto_frequencies = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if location_id is not None:
            self.location_id = location_id
        if release_ring_id is not None:
            self.release_ring_id = release_ring_id
        if push_to_stage is not None:
            self.push_to_stage = push_to_stage
        if allowed_auto_frequencies is not None:
            self.allowed_auto_frequencies = allowed_auto_frequencies

    @property
    def name(self):
        """Gets the name of this BaseStationUpdateRequest.  # noqa: E501


        :return: The name of this BaseStationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseStationUpdateRequest.


        :param name: The name of this BaseStationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def location_id(self):
        """Gets the location_id of this BaseStationUpdateRequest.  # noqa: E501


        :return: The location_id of this BaseStationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this BaseStationUpdateRequest.


        :param location_id: The location_id of this BaseStationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def release_ring_id(self):
        """Gets the release_ring_id of this BaseStationUpdateRequest.  # noqa: E501


        :return: The release_ring_id of this BaseStationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._release_ring_id

    @release_ring_id.setter
    def release_ring_id(self, release_ring_id):
        """Sets the release_ring_id of this BaseStationUpdateRequest.


        :param release_ring_id: The release_ring_id of this BaseStationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._release_ring_id = release_ring_id

    @property
    def push_to_stage(self):
        """Gets the push_to_stage of this BaseStationUpdateRequest.  # noqa: E501


        :return: The push_to_stage of this BaseStationUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._push_to_stage

    @push_to_stage.setter
    def push_to_stage(self, push_to_stage):
        """Sets the push_to_stage of this BaseStationUpdateRequest.


        :param push_to_stage: The push_to_stage of this BaseStationUpdateRequest.  # noqa: E501
        :type: bool
        """

        self._push_to_stage = push_to_stage

    @property
    def allowed_auto_frequencies(self):
        """Gets the allowed_auto_frequencies of this BaseStationUpdateRequest.  # noqa: E501


        :return: The allowed_auto_frequencies of this BaseStationUpdateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_auto_frequencies

    @allowed_auto_frequencies.setter
    def allowed_auto_frequencies(self, allowed_auto_frequencies):
        """Sets the allowed_auto_frequencies of this BaseStationUpdateRequest.


        :param allowed_auto_frequencies: The allowed_auto_frequencies of this BaseStationUpdateRequest.  # noqa: E501
        :type: list[str]
        """

        self._allowed_auto_frequencies = allowed_auto_frequencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseStationUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseStationUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
