# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TicketCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'status_id': 'str',
        'board_id': 'str',
        'asset_ids': 'list[str]'
    }

    attribute_map = {
        'name': 'Name',
        'description': 'Description',
        'status_id': 'StatusId',
        'board_id': 'BoardId',
        'asset_ids': 'AssetIds'
    }

    def __init__(self, name=None, description=None, status_id=None, board_id=None, asset_ids=None):  # noqa: E501
        """TicketCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._status_id = None
        self._board_id = None
        self._asset_ids = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        self.status_id = status_id
        self.board_id = board_id
        if asset_ids is not None:
            self.asset_ids = asset_ids

    @property
    def name(self):
        """Gets the name of this TicketCreateRequest.  # noqa: E501

        Ticket name  # noqa: E501

        :return: The name of this TicketCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TicketCreateRequest.

        Ticket name  # noqa: E501

        :param name: The name of this TicketCreateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TicketCreateRequest.  # noqa: E501

        Ticket description  # noqa: E501

        :return: The description of this TicketCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TicketCreateRequest.

        Ticket description  # noqa: E501

        :param description: The description of this TicketCreateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status_id(self):
        """Gets the status_id of this TicketCreateRequest.  # noqa: E501

        The id of the status of the ticket  # noqa: E501

        :return: The status_id of this TicketCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this TicketCreateRequest.

        The id of the status of the ticket  # noqa: E501

        :param status_id: The status_id of this TicketCreateRequest.  # noqa: E501
        :type: str
        """
        if status_id is None:
            raise ValueError("Invalid value for `status_id`, must not be `None`")  # noqa: E501

        self._status_id = status_id

    @property
    def board_id(self):
        """Gets the board_id of this TicketCreateRequest.  # noqa: E501

        Id of the board the ticket is in  # noqa: E501

        :return: The board_id of this TicketCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._board_id

    @board_id.setter
    def board_id(self, board_id):
        """Sets the board_id of this TicketCreateRequest.

        Id of the board the ticket is in  # noqa: E501

        :param board_id: The board_id of this TicketCreateRequest.  # noqa: E501
        :type: str
        """
        if board_id is None:
            raise ValueError("Invalid value for `board_id`, must not be `None`")  # noqa: E501

        self._board_id = board_id

    @property
    def asset_ids(self):
        """Gets the asset_ids of this TicketCreateRequest.  # noqa: E501

        Ids of assets associated with the ticket  # noqa: E501

        :return: The asset_ids of this TicketCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._asset_ids

    @asset_ids.setter
    def asset_ids(self, asset_ids):
        """Sets the asset_ids of this TicketCreateRequest.

        Ids of assets associated with the ticket  # noqa: E501

        :param asset_ids: The asset_ids of this TicketCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._asset_ids = asset_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TicketCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
