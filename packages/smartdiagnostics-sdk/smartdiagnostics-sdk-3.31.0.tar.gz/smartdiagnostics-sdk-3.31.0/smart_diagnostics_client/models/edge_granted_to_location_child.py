# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeGrantedToLocationChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currently_in_use': 'bool',
        'parent_corporation': 'EdgeGrantedToCorporationChild',
        'location_id': 'str',
        'location_name': 'str',
        'location_abbreviation': 'str'
    }

    attribute_map = {
        'currently_in_use': 'CurrentlyInUse',
        'parent_corporation': 'ParentCorporation',
        'location_id': 'LocationId',
        'location_name': 'LocationName',
        'location_abbreviation': 'LocationAbbreviation'
    }

    def __init__(self, currently_in_use=None, parent_corporation=None, location_id=None, location_name=None, location_abbreviation=None):  # noqa: E501
        """EdgeGrantedToLocationChild - a model defined in Swagger"""  # noqa: E501
        self._currently_in_use = None
        self._parent_corporation = None
        self._location_id = None
        self._location_name = None
        self._location_abbreviation = None
        self.discriminator = None
        if currently_in_use is not None:
            self.currently_in_use = currently_in_use
        self.parent_corporation = parent_corporation
        self.location_id = location_id
        self.location_name = location_name
        self.location_abbreviation = location_abbreviation

    @property
    def currently_in_use(self):
        """Gets the currently_in_use of this EdgeGrantedToLocationChild.  # noqa: E501

        Whether or not a location is currently being used  with an edge compute resource (definition/assignment)  # noqa: E501

        :return: The currently_in_use of this EdgeGrantedToLocationChild.  # noqa: E501
        :rtype: bool
        """
        return self._currently_in_use

    @currently_in_use.setter
    def currently_in_use(self, currently_in_use):
        """Sets the currently_in_use of this EdgeGrantedToLocationChild.

        Whether or not a location is currently being used  with an edge compute resource (definition/assignment)  # noqa: E501

        :param currently_in_use: The currently_in_use of this EdgeGrantedToLocationChild.  # noqa: E501
        :type: bool
        """

        self._currently_in_use = currently_in_use

    @property
    def parent_corporation(self):
        """Gets the parent_corporation of this EdgeGrantedToLocationChild.  # noqa: E501


        :return: The parent_corporation of this EdgeGrantedToLocationChild.  # noqa: E501
        :rtype: EdgeGrantedToCorporationChild
        """
        return self._parent_corporation

    @parent_corporation.setter
    def parent_corporation(self, parent_corporation):
        """Sets the parent_corporation of this EdgeGrantedToLocationChild.


        :param parent_corporation: The parent_corporation of this EdgeGrantedToLocationChild.  # noqa: E501
        :type: EdgeGrantedToCorporationChild
        """
        if parent_corporation is None:
            raise ValueError("Invalid value for `parent_corporation`, must not be `None`")  # noqa: E501

        self._parent_corporation = parent_corporation

    @property
    def location_id(self):
        """Gets the location_id of this EdgeGrantedToLocationChild.  # noqa: E501

        The Id of the location  # noqa: E501

        :return: The location_id of this EdgeGrantedToLocationChild.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this EdgeGrantedToLocationChild.

        The Id of the location  # noqa: E501

        :param location_id: The location_id of this EdgeGrantedToLocationChild.  # noqa: E501
        :type: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def location_name(self):
        """Gets the location_name of this EdgeGrantedToLocationChild.  # noqa: E501

        The name of the location  # noqa: E501

        :return: The location_name of this EdgeGrantedToLocationChild.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this EdgeGrantedToLocationChild.

        The name of the location  # noqa: E501

        :param location_name: The location_name of this EdgeGrantedToLocationChild.  # noqa: E501
        :type: str
        """
        if location_name is None:
            raise ValueError("Invalid value for `location_name`, must not be `None`")  # noqa: E501

        self._location_name = location_name

    @property
    def location_abbreviation(self):
        """Gets the location_abbreviation of this EdgeGrantedToLocationChild.  # noqa: E501

        The abbreviation of the location.   If an abbreviation doesn't exist, the abbreviation is set to the first 5  characters of the location name.  # noqa: E501

        :return: The location_abbreviation of this EdgeGrantedToLocationChild.  # noqa: E501
        :rtype: str
        """
        return self._location_abbreviation

    @location_abbreviation.setter
    def location_abbreviation(self, location_abbreviation):
        """Sets the location_abbreviation of this EdgeGrantedToLocationChild.

        The abbreviation of the location.   If an abbreviation doesn't exist, the abbreviation is set to the first 5  characters of the location name.  # noqa: E501

        :param location_abbreviation: The location_abbreviation of this EdgeGrantedToLocationChild.  # noqa: E501
        :type: str
        """
        if location_abbreviation is None:
            raise ValueError("Invalid value for `location_abbreviation`, must not be `None`")  # noqa: E501

        self._location_abbreviation = location_abbreviation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeGrantedToLocationChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeGrantedToLocationChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
