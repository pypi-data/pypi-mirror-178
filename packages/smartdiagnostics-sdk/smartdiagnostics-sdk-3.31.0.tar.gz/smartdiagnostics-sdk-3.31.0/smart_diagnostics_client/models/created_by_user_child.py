# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatedByUserChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by_user_id': 'str',
        'created_by_user_first_name': 'str',
        'created_by_user_last_name': 'str',
        'created_by_user_email': 'str'
    }

    attribute_map = {
        'created_by_user_id': 'CreatedByUserId',
        'created_by_user_first_name': 'CreatedByUserFirstName',
        'created_by_user_last_name': 'CreatedByUserLastName',
        'created_by_user_email': 'CreatedByUserEmail'
    }

    def __init__(self, created_by_user_id=None, created_by_user_first_name=None, created_by_user_last_name=None, created_by_user_email=None):  # noqa: E501
        """CreatedByUserChild - a model defined in Swagger"""  # noqa: E501
        self._created_by_user_id = None
        self._created_by_user_first_name = None
        self._created_by_user_last_name = None
        self._created_by_user_email = None
        self.discriminator = None
        self.created_by_user_id = created_by_user_id
        self.created_by_user_first_name = created_by_user_first_name
        self.created_by_user_last_name = created_by_user_last_name
        self.created_by_user_email = created_by_user_email

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this CreatedByUserChild.  # noqa: E501

        The Id of the user who created the resource  # noqa: E501

        :return: The created_by_user_id of this CreatedByUserChild.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this CreatedByUserChild.

        The Id of the user who created the resource  # noqa: E501

        :param created_by_user_id: The created_by_user_id of this CreatedByUserChild.  # noqa: E501
        :type: str
        """
        if created_by_user_id is None:
            raise ValueError("Invalid value for `created_by_user_id`, must not be `None`")  # noqa: E501

        self._created_by_user_id = created_by_user_id

    @property
    def created_by_user_first_name(self):
        """Gets the created_by_user_first_name of this CreatedByUserChild.  # noqa: E501

        The first name of the user who created the resource  # noqa: E501

        :return: The created_by_user_first_name of this CreatedByUserChild.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_first_name

    @created_by_user_first_name.setter
    def created_by_user_first_name(self, created_by_user_first_name):
        """Sets the created_by_user_first_name of this CreatedByUserChild.

        The first name of the user who created the resource  # noqa: E501

        :param created_by_user_first_name: The created_by_user_first_name of this CreatedByUserChild.  # noqa: E501
        :type: str
        """
        if created_by_user_first_name is None:
            raise ValueError("Invalid value for `created_by_user_first_name`, must not be `None`")  # noqa: E501

        self._created_by_user_first_name = created_by_user_first_name

    @property
    def created_by_user_last_name(self):
        """Gets the created_by_user_last_name of this CreatedByUserChild.  # noqa: E501

        The last name of the user who created the resource  # noqa: E501

        :return: The created_by_user_last_name of this CreatedByUserChild.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_last_name

    @created_by_user_last_name.setter
    def created_by_user_last_name(self, created_by_user_last_name):
        """Sets the created_by_user_last_name of this CreatedByUserChild.

        The last name of the user who created the resource  # noqa: E501

        :param created_by_user_last_name: The created_by_user_last_name of this CreatedByUserChild.  # noqa: E501
        :type: str
        """
        if created_by_user_last_name is None:
            raise ValueError("Invalid value for `created_by_user_last_name`, must not be `None`")  # noqa: E501

        self._created_by_user_last_name = created_by_user_last_name

    @property
    def created_by_user_email(self):
        """Gets the created_by_user_email of this CreatedByUserChild.  # noqa: E501

        The email of the user who created the resource  # noqa: E501

        :return: The created_by_user_email of this CreatedByUserChild.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_email

    @created_by_user_email.setter
    def created_by_user_email(self, created_by_user_email):
        """Sets the created_by_user_email of this CreatedByUserChild.

        The email of the user who created the resource  # noqa: E501

        :param created_by_user_email: The created_by_user_email of this CreatedByUserChild.  # noqa: E501
        :type: str
        """
        if created_by_user_email is None:
            raise ValueError("Invalid value for `created_by_user_email`, must not be `None`")  # noqa: E501

        self._created_by_user_email = created_by_user_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatedByUserChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatedByUserChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
