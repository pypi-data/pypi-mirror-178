# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeDefinitionAssignmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'definition': 'EdgeDefinitionChild',
        'base_station': 'EdgeDefinitionAssignmentBaseStationChild',
        'note': 'str',
        'created': 'EdgeCreationChild',
        'updated': 'EdgeUpdateChild',
        'definition_overrides': 'list[EdgeDefinitionServiceOverrideChild]',
        'edge_agent_settings': 'EdgeAgentSettingsChild',
        'can_edit_definition': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'definition': 'Definition',
        'base_station': 'BaseStation',
        'note': 'Note',
        'created': 'Created',
        'updated': 'Updated',
        'definition_overrides': 'DefinitionOverrides',
        'edge_agent_settings': 'EdgeAgentSettings',
        'can_edit_definition': 'CanEditDefinition'
    }

    def __init__(self, id=None, definition=None, base_station=None, note=None, created=None, updated=None, definition_overrides=None, edge_agent_settings=None, can_edit_definition=None):  # noqa: E501
        """EdgeDefinitionAssignmentResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._definition = None
        self._base_station = None
        self._note = None
        self._created = None
        self._updated = None
        self._definition_overrides = None
        self._edge_agent_settings = None
        self._can_edit_definition = None
        self.discriminator = None
        self.id = id
        self.definition = definition
        self.base_station = base_station
        if note is not None:
            self.note = note
        self.created = created
        if updated is not None:
            self.updated = updated
        self.definition_overrides = definition_overrides
        self.edge_agent_settings = edge_agent_settings
        self.can_edit_definition = can_edit_definition

    @property
    def id(self):
        """Gets the id of this EdgeDefinitionAssignmentResponse.  # noqa: E501

        The Id of the definition assignment  # noqa: E501

        :return: The id of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgeDefinitionAssignmentResponse.

        The Id of the definition assignment  # noqa: E501

        :param id: The id of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def definition(self):
        """Gets the definition of this EdgeDefinitionAssignmentResponse.  # noqa: E501


        :return: The definition of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :rtype: EdgeDefinitionChild
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this EdgeDefinitionAssignmentResponse.


        :param definition: The definition of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :type: EdgeDefinitionChild
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")  # noqa: E501

        self._definition = definition

    @property
    def base_station(self):
        """Gets the base_station of this EdgeDefinitionAssignmentResponse.  # noqa: E501


        :return: The base_station of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :rtype: EdgeDefinitionAssignmentBaseStationChild
        """
        return self._base_station

    @base_station.setter
    def base_station(self, base_station):
        """Sets the base_station of this EdgeDefinitionAssignmentResponse.


        :param base_station: The base_station of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :type: EdgeDefinitionAssignmentBaseStationChild
        """
        if base_station is None:
            raise ValueError("Invalid value for `base_station`, must not be `None`")  # noqa: E501

        self._base_station = base_station

    @property
    def note(self):
        """Gets the note of this EdgeDefinitionAssignmentResponse.  # noqa: E501

        A note describing the definition assignment  # noqa: E501

        :return: The note of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EdgeDefinitionAssignmentResponse.

        A note describing the definition assignment  # noqa: E501

        :param note: The note of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def created(self):
        """Gets the created of this EdgeDefinitionAssignmentResponse.  # noqa: E501


        :return: The created of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :rtype: EdgeCreationChild
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EdgeDefinitionAssignmentResponse.


        :param created: The created of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :type: EdgeCreationChild
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this EdgeDefinitionAssignmentResponse.  # noqa: E501


        :return: The updated of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :rtype: EdgeUpdateChild
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this EdgeDefinitionAssignmentResponse.


        :param updated: The updated of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :type: EdgeUpdateChild
        """

        self._updated = updated

    @property
    def definition_overrides(self):
        """Gets the definition_overrides of this EdgeDefinitionAssignmentResponse.  # noqa: E501

        A list of properties to override for services  # noqa: E501

        :return: The definition_overrides of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :rtype: list[EdgeDefinitionServiceOverrideChild]
        """
        return self._definition_overrides

    @definition_overrides.setter
    def definition_overrides(self, definition_overrides):
        """Sets the definition_overrides of this EdgeDefinitionAssignmentResponse.

        A list of properties to override for services  # noqa: E501

        :param definition_overrides: The definition_overrides of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :type: list[EdgeDefinitionServiceOverrideChild]
        """
        if definition_overrides is None:
            raise ValueError("Invalid value for `definition_overrides`, must not be `None`")  # noqa: E501

        self._definition_overrides = definition_overrides

    @property
    def edge_agent_settings(self):
        """Gets the edge_agent_settings of this EdgeDefinitionAssignmentResponse.  # noqa: E501


        :return: The edge_agent_settings of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :rtype: EdgeAgentSettingsChild
        """
        return self._edge_agent_settings

    @edge_agent_settings.setter
    def edge_agent_settings(self, edge_agent_settings):
        """Sets the edge_agent_settings of this EdgeDefinitionAssignmentResponse.


        :param edge_agent_settings: The edge_agent_settings of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :type: EdgeAgentSettingsChild
        """
        if edge_agent_settings is None:
            raise ValueError("Invalid value for `edge_agent_settings`, must not be `None`")  # noqa: E501

        self._edge_agent_settings = edge_agent_settings

    @property
    def can_edit_definition(self):
        """Gets the can_edit_definition of this EdgeDefinitionAssignmentResponse.  # noqa: E501

        Whether or not the user has access to edit the definition  # noqa: E501

        :return: The can_edit_definition of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_definition

    @can_edit_definition.setter
    def can_edit_definition(self, can_edit_definition):
        """Sets the can_edit_definition of this EdgeDefinitionAssignmentResponse.

        Whether or not the user has access to edit the definition  # noqa: E501

        :param can_edit_definition: The can_edit_definition of this EdgeDefinitionAssignmentResponse.  # noqa: E501
        :type: bool
        """
        if can_edit_definition is None:
            raise ValueError("Invalid value for `can_edit_definition`, must not be `None`")  # noqa: E501

        self._can_edit_definition = can_edit_definition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeDefinitionAssignmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeDefinitionAssignmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
