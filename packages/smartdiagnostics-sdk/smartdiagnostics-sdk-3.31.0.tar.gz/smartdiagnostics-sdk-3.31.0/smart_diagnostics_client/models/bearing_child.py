# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BearingChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bearing_id': 'str',
        'bearing_name': 'str',
        'bearing_manufacturer': 'str',
        'bearing_bpfi': 'float'
    }

    attribute_map = {
        'bearing_id': 'BearingId',
        'bearing_name': 'BearingName',
        'bearing_manufacturer': 'BearingManufacturer',
        'bearing_bpfi': 'BearingBpfi'
    }

    def __init__(self, bearing_id=None, bearing_name=None, bearing_manufacturer=None, bearing_bpfi=None):  # noqa: E501
        """BearingChild - a model defined in Swagger"""  # noqa: E501
        self._bearing_id = None
        self._bearing_name = None
        self._bearing_manufacturer = None
        self._bearing_bpfi = None
        self.discriminator = None
        self.bearing_id = bearing_id
        self.bearing_name = bearing_name
        self.bearing_manufacturer = bearing_manufacturer
        self.bearing_bpfi = bearing_bpfi

    @property
    def bearing_id(self):
        """Gets the bearing_id of this BearingChild.  # noqa: E501


        :return: The bearing_id of this BearingChild.  # noqa: E501
        :rtype: str
        """
        return self._bearing_id

    @bearing_id.setter
    def bearing_id(self, bearing_id):
        """Sets the bearing_id of this BearingChild.


        :param bearing_id: The bearing_id of this BearingChild.  # noqa: E501
        :type: str
        """
        if bearing_id is None:
            raise ValueError("Invalid value for `bearing_id`, must not be `None`")  # noqa: E501

        self._bearing_id = bearing_id

    @property
    def bearing_name(self):
        """Gets the bearing_name of this BearingChild.  # noqa: E501


        :return: The bearing_name of this BearingChild.  # noqa: E501
        :rtype: str
        """
        return self._bearing_name

    @bearing_name.setter
    def bearing_name(self, bearing_name):
        """Sets the bearing_name of this BearingChild.


        :param bearing_name: The bearing_name of this BearingChild.  # noqa: E501
        :type: str
        """
        if bearing_name is None:
            raise ValueError("Invalid value for `bearing_name`, must not be `None`")  # noqa: E501

        self._bearing_name = bearing_name

    @property
    def bearing_manufacturer(self):
        """Gets the bearing_manufacturer of this BearingChild.  # noqa: E501


        :return: The bearing_manufacturer of this BearingChild.  # noqa: E501
        :rtype: str
        """
        return self._bearing_manufacturer

    @bearing_manufacturer.setter
    def bearing_manufacturer(self, bearing_manufacturer):
        """Sets the bearing_manufacturer of this BearingChild.


        :param bearing_manufacturer: The bearing_manufacturer of this BearingChild.  # noqa: E501
        :type: str
        """
        if bearing_manufacturer is None:
            raise ValueError("Invalid value for `bearing_manufacturer`, must not be `None`")  # noqa: E501

        self._bearing_manufacturer = bearing_manufacturer

    @property
    def bearing_bpfi(self):
        """Gets the bearing_bpfi of this BearingChild.  # noqa: E501


        :return: The bearing_bpfi of this BearingChild.  # noqa: E501
        :rtype: float
        """
        return self._bearing_bpfi

    @bearing_bpfi.setter
    def bearing_bpfi(self, bearing_bpfi):
        """Sets the bearing_bpfi of this BearingChild.


        :param bearing_bpfi: The bearing_bpfi of this BearingChild.  # noqa: E501
        :type: float
        """
        if bearing_bpfi is None:
            raise ValueError("Invalid value for `bearing_bpfi`, must not be `None`")  # noqa: E501

        self._bearing_bpfi = bearing_bpfi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BearingChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BearingChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
