# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeServiceRequestChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_repository': 'str',
        'name': 'str',
        'volumes': 'list[ServiceVolumeFromToRequestChild]',
        'parameters': 'list[ServiceEnvironmentParameterChild]',
        'dependencies': 'list[str]',
        'tag': 'ServiceTagChild',
        'ports': 'list[ServicePortFromToRequestChild]',
        'deployment': 'ServiceDeploymentChild',
        'health_check': 'ServiceHealthCheckChild'
    }

    attribute_map = {
        'image_repository': 'ImageRepository',
        'name': 'Name',
        'volumes': 'Volumes',
        'parameters': 'Parameters',
        'dependencies': 'Dependencies',
        'tag': 'Tag',
        'ports': 'Ports',
        'deployment': 'Deployment',
        'health_check': 'HealthCheck'
    }

    def __init__(self, image_repository=None, name=None, volumes=None, parameters=None, dependencies=None, tag=None, ports=None, deployment=None, health_check=None):  # noqa: E501
        """EdgeServiceRequestChild - a model defined in Swagger"""  # noqa: E501
        self._image_repository = None
        self._name = None
        self._volumes = None
        self._parameters = None
        self._dependencies = None
        self._tag = None
        self._ports = None
        self._deployment = None
        self._health_check = None
        self.discriminator = None
        self.image_repository = image_repository
        self.name = name
        if volumes is not None:
            self.volumes = volumes
        if parameters is not None:
            self.parameters = parameters
        if dependencies is not None:
            self.dependencies = dependencies
        self.tag = tag
        if ports is not None:
            self.ports = ports
        if deployment is not None:
            self.deployment = deployment
        if health_check is not None:
            self.health_check = health_check

    @property
    def image_repository(self):
        """Gets the image_repository of this EdgeServiceRequestChild.  # noqa: E501

        The path of the image.  Made from the name of the service and the  Id of the organization.   Example: \"kcf001/kcf_service1\"  # noqa: E501

        :return: The image_repository of this EdgeServiceRequestChild.  # noqa: E501
        :rtype: str
        """
        return self._image_repository

    @image_repository.setter
    def image_repository(self, image_repository):
        """Sets the image_repository of this EdgeServiceRequestChild.

        The path of the image.  Made from the name of the service and the  Id of the organization.   Example: \"kcf001/kcf_service1\"  # noqa: E501

        :param image_repository: The image_repository of this EdgeServiceRequestChild.  # noqa: E501
        :type: str
        """
        if image_repository is None:
            raise ValueError("Invalid value for `image_repository`, must not be `None`")  # noqa: E501

        self._image_repository = image_repository

    @property
    def name(self):
        """Gets the name of this EdgeServiceRequestChild.  # noqa: E501

        The name of the service.  Example: \"kcf_service1\"  # noqa: E501

        :return: The name of this EdgeServiceRequestChild.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EdgeServiceRequestChild.

        The name of the service.  Example: \"kcf_service1\"  # noqa: E501

        :param name: The name of this EdgeServiceRequestChild.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def volumes(self):
        """Gets the volumes of this EdgeServiceRequestChild.  # noqa: E501

        A list of volume paths (from:to) to persist data for the service  # noqa: E501

        :return: The volumes of this EdgeServiceRequestChild.  # noqa: E501
        :rtype: list[ServiceVolumeFromToRequestChild]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this EdgeServiceRequestChild.

        A list of volume paths (from:to) to persist data for the service  # noqa: E501

        :param volumes: The volumes of this EdgeServiceRequestChild.  # noqa: E501
        :type: list[ServiceVolumeFromToRequestChild]
        """

        self._volumes = volumes

    @property
    def parameters(self):
        """Gets the parameters of this EdgeServiceRequestChild.  # noqa: E501

        A list of environment parameters  # noqa: E501

        :return: The parameters of this EdgeServiceRequestChild.  # noqa: E501
        :rtype: list[ServiceEnvironmentParameterChild]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this EdgeServiceRequestChild.

        A list of environment parameters  # noqa: E501

        :param parameters: The parameters of this EdgeServiceRequestChild.  # noqa: E501
        :type: list[ServiceEnvironmentParameterChild]
        """

        self._parameters = parameters

    @property
    def dependencies(self):
        """Gets the dependencies of this EdgeServiceRequestChild.  # noqa: E501

        A list of services that the service depends on to work properly  # noqa: E501

        :return: The dependencies of this EdgeServiceRequestChild.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this EdgeServiceRequestChild.

        A list of services that the service depends on to work properly  # noqa: E501

        :param dependencies: The dependencies of this EdgeServiceRequestChild.  # noqa: E501
        :type: list[str]
        """

        self._dependencies = dependencies

    @property
    def tag(self):
        """Gets the tag of this EdgeServiceRequestChild.  # noqa: E501


        :return: The tag of this EdgeServiceRequestChild.  # noqa: E501
        :rtype: ServiceTagChild
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this EdgeServiceRequestChild.


        :param tag: The tag of this EdgeServiceRequestChild.  # noqa: E501
        :type: ServiceTagChild
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    @property
    def ports(self):
        """Gets the ports of this EdgeServiceRequestChild.  # noqa: E501

        A list of port paths (from:to) used to access other services within  the container  # noqa: E501

        :return: The ports of this EdgeServiceRequestChild.  # noqa: E501
        :rtype: list[ServicePortFromToRequestChild]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this EdgeServiceRequestChild.

        A list of port paths (from:to) used to access other services within  the container  # noqa: E501

        :param ports: The ports of this EdgeServiceRequestChild.  # noqa: E501
        :type: list[ServicePortFromToRequestChild]
        """

        self._ports = ports

    @property
    def deployment(self):
        """Gets the deployment of this EdgeServiceRequestChild.  # noqa: E501


        :return: The deployment of this EdgeServiceRequestChild.  # noqa: E501
        :rtype: ServiceDeploymentChild
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this EdgeServiceRequestChild.


        :param deployment: The deployment of this EdgeServiceRequestChild.  # noqa: E501
        :type: ServiceDeploymentChild
        """

        self._deployment = deployment

    @property
    def health_check(self):
        """Gets the health_check of this EdgeServiceRequestChild.  # noqa: E501


        :return: The health_check of this EdgeServiceRequestChild.  # noqa: E501
        :rtype: ServiceHealthCheckChild
        """
        return self._health_check

    @health_check.setter
    def health_check(self, health_check):
        """Sets the health_check of this EdgeServiceRequestChild.


        :param health_check: The health_check of this EdgeServiceRequestChild.  # noqa: E501
        :type: ServiceHealthCheckChild
        """

        self._health_check = health_check

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeServiceRequestChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeServiceRequestChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
