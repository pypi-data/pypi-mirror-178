# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReceiverResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'serial_number': 'str',
        'firmware_version': 'str',
        'network_id': 'str',
        'receiver_location_type': 'ReceiverLocationTypeCodes',
        'receiver_type': 'ReceiverTypeCodes',
        'rf_channel': 'int',
        'pending_rf_channel': 'int',
        'mac_address': 'str',
        'radio_mac_address': 'str',
        'location': 'LocationChild',
        'corporation': 'CorporationChild',
        'name': 'str',
        'last_base_station': 'BaseStationChild',
        'last_status_update': 'datetime'
    }

    attribute_map = {
        'id': 'Id',
        'serial_number': 'SerialNumber',
        'firmware_version': 'FirmwareVersion',
        'network_id': 'NetworkId',
        'receiver_location_type': 'ReceiverLocationType',
        'receiver_type': 'ReceiverType',
        'rf_channel': 'RfChannel',
        'pending_rf_channel': 'PendingRfChannel',
        'mac_address': 'MacAddress',
        'radio_mac_address': 'RadioMacAddress',
        'location': 'Location',
        'corporation': 'Corporation',
        'name': 'Name',
        'last_base_station': 'LastBaseStation',
        'last_status_update': 'LastStatusUpdate'
    }

    def __init__(self, id=None, serial_number=None, firmware_version=None, network_id=None, receiver_location_type=None, receiver_type=None, rf_channel=None, pending_rf_channel=None, mac_address=None, radio_mac_address=None, location=None, corporation=None, name=None, last_base_station=None, last_status_update=None):  # noqa: E501
        """ReceiverResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._serial_number = None
        self._firmware_version = None
        self._network_id = None
        self._receiver_location_type = None
        self._receiver_type = None
        self._rf_channel = None
        self._pending_rf_channel = None
        self._mac_address = None
        self._radio_mac_address = None
        self._location = None
        self._corporation = None
        self._name = None
        self._last_base_station = None
        self._last_status_update = None
        self.discriminator = None
        self.id = id
        self.serial_number = serial_number
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if network_id is not None:
            self.network_id = network_id
        self.receiver_location_type = receiver_location_type
        self.receiver_type = receiver_type
        if rf_channel is not None:
            self.rf_channel = rf_channel
        if pending_rf_channel is not None:
            self.pending_rf_channel = pending_rf_channel
        if mac_address is not None:
            self.mac_address = mac_address
        if radio_mac_address is not None:
            self.radio_mac_address = radio_mac_address
        if location is not None:
            self.location = location
        if corporation is not None:
            self.corporation = corporation
        if name is not None:
            self.name = name
        if last_base_station is not None:
            self.last_base_station = last_base_station
        if last_status_update is not None:
            self.last_status_update = last_status_update

    @property
    def id(self):
        """Gets the id of this ReceiverResponse.  # noqa: E501


        :return: The id of this ReceiverResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReceiverResponse.


        :param id: The id of this ReceiverResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def serial_number(self):
        """Gets the serial_number of this ReceiverResponse.  # noqa: E501


        :return: The serial_number of this ReceiverResponse.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ReceiverResponse.


        :param serial_number: The serial_number of this ReceiverResponse.  # noqa: E501
        :type: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def firmware_version(self):
        """Gets the firmware_version of this ReceiverResponse.  # noqa: E501


        :return: The firmware_version of this ReceiverResponse.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this ReceiverResponse.


        :param firmware_version: The firmware_version of this ReceiverResponse.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def network_id(self):
        """Gets the network_id of this ReceiverResponse.  # noqa: E501


        :return: The network_id of this ReceiverResponse.  # noqa: E501
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this ReceiverResponse.


        :param network_id: The network_id of this ReceiverResponse.  # noqa: E501
        :type: str
        """

        self._network_id = network_id

    @property
    def receiver_location_type(self):
        """Gets the receiver_location_type of this ReceiverResponse.  # noqa: E501


        :return: The receiver_location_type of this ReceiverResponse.  # noqa: E501
        :rtype: ReceiverLocationTypeCodes
        """
        return self._receiver_location_type

    @receiver_location_type.setter
    def receiver_location_type(self, receiver_location_type):
        """Sets the receiver_location_type of this ReceiverResponse.


        :param receiver_location_type: The receiver_location_type of this ReceiverResponse.  # noqa: E501
        :type: ReceiverLocationTypeCodes
        """
        if receiver_location_type is None:
            raise ValueError("Invalid value for `receiver_location_type`, must not be `None`")  # noqa: E501

        self._receiver_location_type = receiver_location_type

    @property
    def receiver_type(self):
        """Gets the receiver_type of this ReceiverResponse.  # noqa: E501


        :return: The receiver_type of this ReceiverResponse.  # noqa: E501
        :rtype: ReceiverTypeCodes
        """
        return self._receiver_type

    @receiver_type.setter
    def receiver_type(self, receiver_type):
        """Sets the receiver_type of this ReceiverResponse.


        :param receiver_type: The receiver_type of this ReceiverResponse.  # noqa: E501
        :type: ReceiverTypeCodes
        """
        if receiver_type is None:
            raise ValueError("Invalid value for `receiver_type`, must not be `None`")  # noqa: E501

        self._receiver_type = receiver_type

    @property
    def rf_channel(self):
        """Gets the rf_channel of this ReceiverResponse.  # noqa: E501


        :return: The rf_channel of this ReceiverResponse.  # noqa: E501
        :rtype: int
        """
        return self._rf_channel

    @rf_channel.setter
    def rf_channel(self, rf_channel):
        """Sets the rf_channel of this ReceiverResponse.


        :param rf_channel: The rf_channel of this ReceiverResponse.  # noqa: E501
        :type: int
        """

        self._rf_channel = rf_channel

    @property
    def pending_rf_channel(self):
        """Gets the pending_rf_channel of this ReceiverResponse.  # noqa: E501


        :return: The pending_rf_channel of this ReceiverResponse.  # noqa: E501
        :rtype: int
        """
        return self._pending_rf_channel

    @pending_rf_channel.setter
    def pending_rf_channel(self, pending_rf_channel):
        """Sets the pending_rf_channel of this ReceiverResponse.


        :param pending_rf_channel: The pending_rf_channel of this ReceiverResponse.  # noqa: E501
        :type: int
        """

        self._pending_rf_channel = pending_rf_channel

    @property
    def mac_address(self):
        """Gets the mac_address of this ReceiverResponse.  # noqa: E501


        :return: The mac_address of this ReceiverResponse.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this ReceiverResponse.


        :param mac_address: The mac_address of this ReceiverResponse.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def radio_mac_address(self):
        """Gets the radio_mac_address of this ReceiverResponse.  # noqa: E501


        :return: The radio_mac_address of this ReceiverResponse.  # noqa: E501
        :rtype: str
        """
        return self._radio_mac_address

    @radio_mac_address.setter
    def radio_mac_address(self, radio_mac_address):
        """Sets the radio_mac_address of this ReceiverResponse.


        :param radio_mac_address: The radio_mac_address of this ReceiverResponse.  # noqa: E501
        :type: str
        """

        self._radio_mac_address = radio_mac_address

    @property
    def location(self):
        """Gets the location of this ReceiverResponse.  # noqa: E501


        :return: The location of this ReceiverResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ReceiverResponse.


        :param location: The location of this ReceiverResponse.  # noqa: E501
        :type: LocationChild
        """

        self._location = location

    @property
    def corporation(self):
        """Gets the corporation of this ReceiverResponse.  # noqa: E501


        :return: The corporation of this ReceiverResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this ReceiverResponse.


        :param corporation: The corporation of this ReceiverResponse.  # noqa: E501
        :type: CorporationChild
        """

        self._corporation = corporation

    @property
    def name(self):
        """Gets the name of this ReceiverResponse.  # noqa: E501


        :return: The name of this ReceiverResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReceiverResponse.


        :param name: The name of this ReceiverResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def last_base_station(self):
        """Gets the last_base_station of this ReceiverResponse.  # noqa: E501


        :return: The last_base_station of this ReceiverResponse.  # noqa: E501
        :rtype: BaseStationChild
        """
        return self._last_base_station

    @last_base_station.setter
    def last_base_station(self, last_base_station):
        """Sets the last_base_station of this ReceiverResponse.


        :param last_base_station: The last_base_station of this ReceiverResponse.  # noqa: E501
        :type: BaseStationChild
        """

        self._last_base_station = last_base_station

    @property
    def last_status_update(self):
        """Gets the last_status_update of this ReceiverResponse.  # noqa: E501


        :return: The last_status_update of this ReceiverResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_status_update

    @last_status_update.setter
    def last_status_update(self, last_status_update):
        """Sets the last_status_update of this ReceiverResponse.


        :param last_status_update: The last_status_update of this ReceiverResponse.  # noqa: E501
        :type: datetime
        """

        self._last_status_update = last_status_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReceiverResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReceiverResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
