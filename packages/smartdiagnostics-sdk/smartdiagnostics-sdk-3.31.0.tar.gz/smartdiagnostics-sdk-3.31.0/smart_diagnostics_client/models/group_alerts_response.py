# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupAlertsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'indicator_id': 'str',
        'indicator_name': 'str',
        'indicator_sort_order': 'int',
        'hierarchy': 'list[HierarchyChild]',
        'time_of_alert': 'datetime',
        'external_notification': 'ExternalNotificationChild'
    }

    attribute_map = {
        'indicator_id': 'IndicatorId',
        'indicator_name': 'IndicatorName',
        'indicator_sort_order': 'IndicatorSortOrder',
        'hierarchy': 'Hierarchy',
        'time_of_alert': 'TimeOfAlert',
        'external_notification': 'ExternalNotification'
    }

    def __init__(self, indicator_id=None, indicator_name=None, indicator_sort_order=None, hierarchy=None, time_of_alert=None, external_notification=None):  # noqa: E501
        """GroupAlertsResponse - a model defined in Swagger"""  # noqa: E501
        self._indicator_id = None
        self._indicator_name = None
        self._indicator_sort_order = None
        self._hierarchy = None
        self._time_of_alert = None
        self._external_notification = None
        self.discriminator = None
        self.indicator_id = indicator_id
        self.indicator_name = indicator_name
        if indicator_sort_order is not None:
            self.indicator_sort_order = indicator_sort_order
        self.hierarchy = hierarchy
        if time_of_alert is not None:
            self.time_of_alert = time_of_alert
        if external_notification is not None:
            self.external_notification = external_notification

    @property
    def indicator_id(self):
        """Gets the indicator_id of this GroupAlertsResponse.  # noqa: E501


        :return: The indicator_id of this GroupAlertsResponse.  # noqa: E501
        :rtype: str
        """
        return self._indicator_id

    @indicator_id.setter
    def indicator_id(self, indicator_id):
        """Sets the indicator_id of this GroupAlertsResponse.


        :param indicator_id: The indicator_id of this GroupAlertsResponse.  # noqa: E501
        :type: str
        """
        if indicator_id is None:
            raise ValueError("Invalid value for `indicator_id`, must not be `None`")  # noqa: E501

        self._indicator_id = indicator_id

    @property
    def indicator_name(self):
        """Gets the indicator_name of this GroupAlertsResponse.  # noqa: E501


        :return: The indicator_name of this GroupAlertsResponse.  # noqa: E501
        :rtype: str
        """
        return self._indicator_name

    @indicator_name.setter
    def indicator_name(self, indicator_name):
        """Sets the indicator_name of this GroupAlertsResponse.


        :param indicator_name: The indicator_name of this GroupAlertsResponse.  # noqa: E501
        :type: str
        """
        if indicator_name is None:
            raise ValueError("Invalid value for `indicator_name`, must not be `None`")  # noqa: E501

        self._indicator_name = indicator_name

    @property
    def indicator_sort_order(self):
        """Gets the indicator_sort_order of this GroupAlertsResponse.  # noqa: E501


        :return: The indicator_sort_order of this GroupAlertsResponse.  # noqa: E501
        :rtype: int
        """
        return self._indicator_sort_order

    @indicator_sort_order.setter
    def indicator_sort_order(self, indicator_sort_order):
        """Sets the indicator_sort_order of this GroupAlertsResponse.


        :param indicator_sort_order: The indicator_sort_order of this GroupAlertsResponse.  # noqa: E501
        :type: int
        """

        self._indicator_sort_order = indicator_sort_order

    @property
    def hierarchy(self):
        """Gets the hierarchy of this GroupAlertsResponse.  # noqa: E501


        :return: The hierarchy of this GroupAlertsResponse.  # noqa: E501
        :rtype: list[HierarchyChild]
        """
        return self._hierarchy

    @hierarchy.setter
    def hierarchy(self, hierarchy):
        """Sets the hierarchy of this GroupAlertsResponse.


        :param hierarchy: The hierarchy of this GroupAlertsResponse.  # noqa: E501
        :type: list[HierarchyChild]
        """
        if hierarchy is None:
            raise ValueError("Invalid value for `hierarchy`, must not be `None`")  # noqa: E501

        self._hierarchy = hierarchy

    @property
    def time_of_alert(self):
        """Gets the time_of_alert of this GroupAlertsResponse.  # noqa: E501


        :return: The time_of_alert of this GroupAlertsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._time_of_alert

    @time_of_alert.setter
    def time_of_alert(self, time_of_alert):
        """Sets the time_of_alert of this GroupAlertsResponse.


        :param time_of_alert: The time_of_alert of this GroupAlertsResponse.  # noqa: E501
        :type: datetime
        """

        self._time_of_alert = time_of_alert

    @property
    def external_notification(self):
        """Gets the external_notification of this GroupAlertsResponse.  # noqa: E501


        :return: The external_notification of this GroupAlertsResponse.  # noqa: E501
        :rtype: ExternalNotificationChild
        """
        return self._external_notification

    @external_notification.setter
    def external_notification(self, external_notification):
        """Sets the external_notification of this GroupAlertsResponse.


        :param external_notification: The external_notification of this GroupAlertsResponse.  # noqa: E501
        :type: ExternalNotificationChild
        """

        self._external_notification = external_notification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupAlertsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupAlertsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
