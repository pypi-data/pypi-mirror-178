# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityEventCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location_id': 'str',
        'category_id': 'int',
        'category_code': 'str',
        'created_by_user_name': 'str',
        'title': 'str',
        'description': 'str',
        'note': 'str',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'document': 'ActivityEventDocumentRequest',
        'subcategories': 'list[ActivityEventSubcategoryEntryRequest]',
        'binds': 'list[ActivityEventBindRequest]',
        'fields': 'list[ActivityEventFieldEntryRequest]'
    }

    attribute_map = {
        'location_id': 'LocationId',
        'category_id': 'CategoryId',
        'category_code': 'CategoryCode',
        'created_by_user_name': 'CreatedByUserName',
        'title': 'Title',
        'description': 'Description',
        'note': 'Note',
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'document': 'Document',
        'subcategories': 'Subcategories',
        'binds': 'Binds',
        'fields': 'Fields'
    }

    def __init__(self, location_id=None, category_id=None, category_code=None, created_by_user_name=None, title=None, description=None, note=None, start_date_time=None, end_date_time=None, document=None, subcategories=None, binds=None, fields=None):  # noqa: E501
        """ActivityEventCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._location_id = None
        self._category_id = None
        self._category_code = None
        self._created_by_user_name = None
        self._title = None
        self._description = None
        self._note = None
        self._start_date_time = None
        self._end_date_time = None
        self._document = None
        self._subcategories = None
        self._binds = None
        self._fields = None
        self.discriminator = None
        self.location_id = location_id
        if category_id is not None:
            self.category_id = category_id
        if category_code is not None:
            self.category_code = category_code
        if created_by_user_name is not None:
            self.created_by_user_name = created_by_user_name
        self.title = title
        if description is not None:
            self.description = description
        if note is not None:
            self.note = note
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if document is not None:
            self.document = document
        if subcategories is not None:
            self.subcategories = subcategories
        if binds is not None:
            self.binds = binds
        if fields is not None:
            self.fields = fields

    @property
    def location_id(self):
        """Gets the location_id of this ActivityEventCreateRequest.  # noqa: E501

        Location of the activity event.  # noqa: E501

        :return: The location_id of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ActivityEventCreateRequest.

        Location of the activity event.  # noqa: E501

        :param location_id: The location_id of this ActivityEventCreateRequest.  # noqa: E501
        :type: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def category_id(self):
        """Gets the category_id of this ActivityEventCreateRequest.  # noqa: E501

        Activity Event category id  <remarks>  Use either a CategoryId or CategoryCode, not both. One is required.  </remarks>  # noqa: E501

        :return: The category_id of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ActivityEventCreateRequest.

        Activity Event category id  <remarks>  Use either a CategoryId or CategoryCode, not both. One is required.  </remarks>  # noqa: E501

        :param category_id: The category_id of this ActivityEventCreateRequest.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def category_code(self):
        """Gets the category_code of this ActivityEventCreateRequest.  # noqa: E501

        Activity Event category code. Will be used to lookup the category instead of id.  Some examples of category codes:  <list type=\"bullet\">  ** <item><description>fault</description></item>  ** <item><description>correctivemaintenance</description></item>  ** <item><description>machineiq.fault</description></item></list><remarks>  Use either a CategoryId or CategoryCode, not both. One is required.  </remarks>  # noqa: E501

        :return: The category_code of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._category_code

    @category_code.setter
    def category_code(self, category_code):
        """Sets the category_code of this ActivityEventCreateRequest.

        Activity Event category code. Will be used to lookup the category instead of id.  Some examples of category codes:  <list type=\"bullet\">  ** <item><description>fault</description></item>  ** <item><description>correctivemaintenance</description></item>  ** <item><description>machineiq.fault</description></item></list><remarks>  Use either a CategoryId or CategoryCode, not both. One is required.  </remarks>  # noqa: E501

        :param category_code: The category_code of this ActivityEventCreateRequest.  # noqa: E501
        :type: str
        """

        self._category_code = category_code

    @property
    def created_by_user_name(self):
        """Gets the created_by_user_name of this ActivityEventCreateRequest.  # noqa: E501

        Username for created by field  # noqa: E501

        :return: The created_by_user_name of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user_name

    @created_by_user_name.setter
    def created_by_user_name(self, created_by_user_name):
        """Sets the created_by_user_name of this ActivityEventCreateRequest.

        Username for created by field  # noqa: E501

        :param created_by_user_name: The created_by_user_name of this ActivityEventCreateRequest.  # noqa: E501
        :type: str
        """

        self._created_by_user_name = created_by_user_name

    @property
    def title(self):
        """Gets the title of this ActivityEventCreateRequest.  # noqa: E501

        Activity event title  # noqa: E501

        :return: The title of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActivityEventCreateRequest.

        Activity event title  # noqa: E501

        :param title: The title of this ActivityEventCreateRequest.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this ActivityEventCreateRequest.  # noqa: E501


        :return: The description of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityEventCreateRequest.


        :param description: The description of this ActivityEventCreateRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def note(self):
        """Gets the note of this ActivityEventCreateRequest.  # noqa: E501


        :return: The note of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ActivityEventCreateRequest.


        :param note: The note of this ActivityEventCreateRequest.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ActivityEventCreateRequest.  # noqa: E501


        :return: The start_date_time of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ActivityEventCreateRequest.


        :param start_date_time: The start_date_time of this ActivityEventCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ActivityEventCreateRequest.  # noqa: E501


        :return: The end_date_time of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ActivityEventCreateRequest.


        :param end_date_time: The end_date_time of this ActivityEventCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def document(self):
        """Gets the document of this ActivityEventCreateRequest.  # noqa: E501


        :return: The document of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: ActivityEventDocumentRequest
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this ActivityEventCreateRequest.


        :param document: The document of this ActivityEventCreateRequest.  # noqa: E501
        :type: ActivityEventDocumentRequest
        """

        self._document = document

    @property
    def subcategories(self):
        """Gets the subcategories of this ActivityEventCreateRequest.  # noqa: E501


        :return: The subcategories of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: list[ActivityEventSubcategoryEntryRequest]
        """
        return self._subcategories

    @subcategories.setter
    def subcategories(self, subcategories):
        """Sets the subcategories of this ActivityEventCreateRequest.


        :param subcategories: The subcategories of this ActivityEventCreateRequest.  # noqa: E501
        :type: list[ActivityEventSubcategoryEntryRequest]
        """

        self._subcategories = subcategories

    @property
    def binds(self):
        """Gets the binds of this ActivityEventCreateRequest.  # noqa: E501


        :return: The binds of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: list[ActivityEventBindRequest]
        """
        return self._binds

    @binds.setter
    def binds(self, binds):
        """Sets the binds of this ActivityEventCreateRequest.


        :param binds: The binds of this ActivityEventCreateRequest.  # noqa: E501
        :type: list[ActivityEventBindRequest]
        """

        self._binds = binds

    @property
    def fields(self):
        """Gets the fields of this ActivityEventCreateRequest.  # noqa: E501


        :return: The fields of this ActivityEventCreateRequest.  # noqa: E501
        :rtype: list[ActivityEventFieldEntryRequest]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ActivityEventCreateRequest.


        :param fields: The fields of this ActivityEventCreateRequest.  # noqa: E501
        :type: list[ActivityEventFieldEntryRequest]
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityEventCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityEventCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
