# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LocationUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'abbreviation': 'str',
        'corporation_id': 'str',
        'max_vibration_update_interval': 'int',
        'max_oil_quality_update_interval': 'int',
        'max_transport_interval': 'int',
        'opc_enabled': 'bool',
        'external_notification_type': 'ExternalNotificationType',
        'is_active': 'bool'
    }

    attribute_map = {
        'name': 'Name',
        'abbreviation': 'Abbreviation',
        'corporation_id': 'CorporationId',
        'max_vibration_update_interval': 'MaxVibrationUpdateInterval',
        'max_oil_quality_update_interval': 'MaxOilQualityUpdateInterval',
        'max_transport_interval': 'MaxTransportInterval',
        'opc_enabled': 'OpcEnabled',
        'external_notification_type': 'ExternalNotificationType',
        'is_active': 'IsActive'
    }

    def __init__(self, name=None, abbreviation=None, corporation_id=None, max_vibration_update_interval=None, max_oil_quality_update_interval=None, max_transport_interval=None, opc_enabled=None, external_notification_type=None, is_active=None):  # noqa: E501
        """LocationUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._abbreviation = None
        self._corporation_id = None
        self._max_vibration_update_interval = None
        self._max_oil_quality_update_interval = None
        self._max_transport_interval = None
        self._opc_enabled = None
        self._external_notification_type = None
        self._is_active = None
        self.discriminator = None
        self.name = name
        if abbreviation is not None:
            self.abbreviation = abbreviation
        self.corporation_id = corporation_id
        self.max_vibration_update_interval = max_vibration_update_interval
        self.max_oil_quality_update_interval = max_oil_quality_update_interval
        self.max_transport_interval = max_transport_interval
        self.opc_enabled = opc_enabled
        self.external_notification_type = external_notification_type
        self.is_active = is_active

    @property
    def name(self):
        """Gets the name of this LocationUpdateRequest.  # noqa: E501


        :return: The name of this LocationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocationUpdateRequest.


        :param name: The name of this LocationUpdateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def abbreviation(self):
        """Gets the abbreviation of this LocationUpdateRequest.  # noqa: E501


        :return: The abbreviation of this LocationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this LocationUpdateRequest.


        :param abbreviation: The abbreviation of this LocationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._abbreviation = abbreviation

    @property
    def corporation_id(self):
        """Gets the corporation_id of this LocationUpdateRequest.  # noqa: E501


        :return: The corporation_id of this LocationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._corporation_id

    @corporation_id.setter
    def corporation_id(self, corporation_id):
        """Sets the corporation_id of this LocationUpdateRequest.


        :param corporation_id: The corporation_id of this LocationUpdateRequest.  # noqa: E501
        :type: str
        """
        if corporation_id is None:
            raise ValueError("Invalid value for `corporation_id`, must not be `None`")  # noqa: E501

        self._corporation_id = corporation_id

    @property
    def max_vibration_update_interval(self):
        """Gets the max_vibration_update_interval of this LocationUpdateRequest.  # noqa: E501


        :return: The max_vibration_update_interval of this LocationUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_vibration_update_interval

    @max_vibration_update_interval.setter
    def max_vibration_update_interval(self, max_vibration_update_interval):
        """Sets the max_vibration_update_interval of this LocationUpdateRequest.


        :param max_vibration_update_interval: The max_vibration_update_interval of this LocationUpdateRequest.  # noqa: E501
        :type: int
        """
        if max_vibration_update_interval is None:
            raise ValueError("Invalid value for `max_vibration_update_interval`, must not be `None`")  # noqa: E501

        self._max_vibration_update_interval = max_vibration_update_interval

    @property
    def max_oil_quality_update_interval(self):
        """Gets the max_oil_quality_update_interval of this LocationUpdateRequest.  # noqa: E501


        :return: The max_oil_quality_update_interval of this LocationUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_oil_quality_update_interval

    @max_oil_quality_update_interval.setter
    def max_oil_quality_update_interval(self, max_oil_quality_update_interval):
        """Sets the max_oil_quality_update_interval of this LocationUpdateRequest.


        :param max_oil_quality_update_interval: The max_oil_quality_update_interval of this LocationUpdateRequest.  # noqa: E501
        :type: int
        """
        if max_oil_quality_update_interval is None:
            raise ValueError("Invalid value for `max_oil_quality_update_interval`, must not be `None`")  # noqa: E501

        self._max_oil_quality_update_interval = max_oil_quality_update_interval

    @property
    def max_transport_interval(self):
        """Gets the max_transport_interval of this LocationUpdateRequest.  # noqa: E501


        :return: The max_transport_interval of this LocationUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_transport_interval

    @max_transport_interval.setter
    def max_transport_interval(self, max_transport_interval):
        """Sets the max_transport_interval of this LocationUpdateRequest.


        :param max_transport_interval: The max_transport_interval of this LocationUpdateRequest.  # noqa: E501
        :type: int
        """
        if max_transport_interval is None:
            raise ValueError("Invalid value for `max_transport_interval`, must not be `None`")  # noqa: E501

        self._max_transport_interval = max_transport_interval

    @property
    def opc_enabled(self):
        """Gets the opc_enabled of this LocationUpdateRequest.  # noqa: E501


        :return: The opc_enabled of this LocationUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._opc_enabled

    @opc_enabled.setter
    def opc_enabled(self, opc_enabled):
        """Sets the opc_enabled of this LocationUpdateRequest.


        :param opc_enabled: The opc_enabled of this LocationUpdateRequest.  # noqa: E501
        :type: bool
        """
        if opc_enabled is None:
            raise ValueError("Invalid value for `opc_enabled`, must not be `None`")  # noqa: E501

        self._opc_enabled = opc_enabled

    @property
    def external_notification_type(self):
        """Gets the external_notification_type of this LocationUpdateRequest.  # noqa: E501


        :return: The external_notification_type of this LocationUpdateRequest.  # noqa: E501
        :rtype: ExternalNotificationType
        """
        return self._external_notification_type

    @external_notification_type.setter
    def external_notification_type(self, external_notification_type):
        """Sets the external_notification_type of this LocationUpdateRequest.


        :param external_notification_type: The external_notification_type of this LocationUpdateRequest.  # noqa: E501
        :type: ExternalNotificationType
        """
        if external_notification_type is None:
            raise ValueError("Invalid value for `external_notification_type`, must not be `None`")  # noqa: E501

        self._external_notification_type = external_notification_type

    @property
    def is_active(self):
        """Gets the is_active of this LocationUpdateRequest.  # noqa: E501


        :return: The is_active of this LocationUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this LocationUpdateRequest.


        :param is_active: The is_active of this LocationUpdateRequest.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocationUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocationUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
