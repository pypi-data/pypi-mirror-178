# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduledReportSubscriptionCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location_id': 'str',
        'interval_type': 'ScheduledReportSubscriptionIntervalType',
        'user_ids': 'list[str]',
        'report_type': 'ScheduledReportType'
    }

    attribute_map = {
        'location_id': 'LocationId',
        'interval_type': 'IntervalType',
        'user_ids': 'UserIds',
        'report_type': 'ReportType'
    }

    def __init__(self, location_id=None, interval_type=None, user_ids=None, report_type=None):  # noqa: E501
        """ScheduledReportSubscriptionCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._location_id = None
        self._interval_type = None
        self._user_ids = None
        self._report_type = None
        self.discriminator = None
        self.location_id = location_id
        self.interval_type = interval_type
        self.user_ids = user_ids
        self.report_type = report_type

    @property
    def location_id(self):
        """Gets the location_id of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501

        The location Id to schedule the subscription for.  # noqa: E501

        :return: The location_id of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ScheduledReportSubscriptionCreateRequest.

        The location Id to schedule the subscription for.  # noqa: E501

        :param location_id: The location_id of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501
        :type: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def interval_type(self):
        """Gets the interval_type of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501


        :return: The interval_type of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501
        :rtype: ScheduledReportSubscriptionIntervalType
        """
        return self._interval_type

    @interval_type.setter
    def interval_type(self, interval_type):
        """Sets the interval_type of this ScheduledReportSubscriptionCreateRequest.


        :param interval_type: The interval_type of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501
        :type: ScheduledReportSubscriptionIntervalType
        """
        if interval_type is None:
            raise ValueError("Invalid value for `interval_type`, must not be `None`")  # noqa: E501

        self._interval_type = interval_type

    @property
    def user_ids(self):
        """Gets the user_ids of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501

        A list of users to add to the scheduled subscription.  # noqa: E501

        :return: The user_ids of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this ScheduledReportSubscriptionCreateRequest.

        A list of users to add to the scheduled subscription.  # noqa: E501

        :param user_ids: The user_ids of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501
        :type: list[str]
        """
        if user_ids is None:
            raise ValueError("Invalid value for `user_ids`, must not be `None`")  # noqa: E501

        self._user_ids = user_ids

    @property
    def report_type(self):
        """Gets the report_type of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501


        :return: The report_type of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501
        :rtype: ScheduledReportType
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ScheduledReportSubscriptionCreateRequest.


        :param report_type: The report_type of this ScheduledReportSubscriptionCreateRequest.  # noqa: E501
        :type: ScheduledReportType
        """
        if report_type is None:
            raise ValueError("Invalid value for `report_type`, must not be `None`")  # noqa: E501

        self._report_type = report_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledReportSubscriptionCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledReportSubscriptionCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
