# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeRegistryRepositoryChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repository_name': 'str',
        'repository_tag': 'str',
        'permissions': 'EdgeRegistryPermissionsChild'
    }

    attribute_map = {
        'repository_name': 'RepositoryName',
        'repository_tag': 'RepositoryTag',
        'permissions': 'Permissions'
    }

    def __init__(self, repository_name=None, repository_tag=None, permissions=None):  # noqa: E501
        """EdgeRegistryRepositoryChild - a model defined in Swagger"""  # noqa: E501
        self._repository_name = None
        self._repository_tag = None
        self._permissions = None
        self.discriminator = None
        self.repository_name = repository_name
        if repository_tag is not None:
            self.repository_tag = repository_tag
        if permissions is not None:
            self.permissions = permissions

    @property
    def repository_name(self):
        """Gets the repository_name of this EdgeRegistryRepositoryChild.  # noqa: E501

        Docker Image Repository Name  # noqa: E501

        :return: The repository_name of this EdgeRegistryRepositoryChild.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this EdgeRegistryRepositoryChild.

        Docker Image Repository Name  # noqa: E501

        :param repository_name: The repository_name of this EdgeRegistryRepositoryChild.  # noqa: E501
        :type: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")  # noqa: E501

        self._repository_name = repository_name

    @property
    def repository_tag(self):
        """Gets the repository_tag of this EdgeRegistryRepositoryChild.  # noqa: E501

        Image Tag  # noqa: E501

        :return: The repository_tag of this EdgeRegistryRepositoryChild.  # noqa: E501
        :rtype: str
        """
        return self._repository_tag

    @repository_tag.setter
    def repository_tag(self, repository_tag):
        """Sets the repository_tag of this EdgeRegistryRepositoryChild.

        Image Tag  # noqa: E501

        :param repository_tag: The repository_tag of this EdgeRegistryRepositoryChild.  # noqa: E501
        :type: str
        """

        self._repository_tag = repository_tag

    @property
    def permissions(self):
        """Gets the permissions of this EdgeRegistryRepositoryChild.  # noqa: E501


        :return: The permissions of this EdgeRegistryRepositoryChild.  # noqa: E501
        :rtype: EdgeRegistryPermissionsChild
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this EdgeRegistryRepositoryChild.


        :param permissions: The permissions of this EdgeRegistryRepositoryChild.  # noqa: E501
        :type: EdgeRegistryPermissionsChild
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeRegistryRepositoryChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeRegistryRepositoryChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
