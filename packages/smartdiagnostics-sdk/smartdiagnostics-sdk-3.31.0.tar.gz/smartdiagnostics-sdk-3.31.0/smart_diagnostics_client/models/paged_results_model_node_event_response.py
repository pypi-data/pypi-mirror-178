# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PagedResultsModelNodeEventResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'list[NodeEventResponse]',
        'total': 'int',
        'total_pages': 'int',
        'current_page': 'int',
        'page_size': 'int'
    }

    attribute_map = {
        'result': 'Result',
        'total': 'Total',
        'total_pages': 'TotalPages',
        'current_page': 'CurrentPage',
        'page_size': 'PageSize'
    }

    def __init__(self, result=None, total=None, total_pages=None, current_page=None, page_size=None):  # noqa: E501
        """PagedResultsModelNodeEventResponse - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._total = None
        self._total_pages = None
        self._current_page = None
        self._page_size = None
        self.discriminator = None
        self.result = result
        self.total = total
        self.total_pages = total_pages
        self.current_page = current_page
        self.page_size = page_size

    @property
    def result(self):
        """Gets the result of this PagedResultsModelNodeEventResponse.  # noqa: E501

        The items in the current page.  # noqa: E501

        :return: The result of this PagedResultsModelNodeEventResponse.  # noqa: E501
        :rtype: list[NodeEventResponse]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PagedResultsModelNodeEventResponse.

        The items in the current page.  # noqa: E501

        :param result: The result of this PagedResultsModelNodeEventResponse.  # noqa: E501
        :type: list[NodeEventResponse]
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def total(self):
        """Gets the total of this PagedResultsModelNodeEventResponse.  # noqa: E501

        The total number of items in the query.  # noqa: E501

        :return: The total of this PagedResultsModelNodeEventResponse.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PagedResultsModelNodeEventResponse.

        The total number of items in the query.  # noqa: E501

        :param total: The total of this PagedResultsModelNodeEventResponse.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def total_pages(self):
        """Gets the total_pages of this PagedResultsModelNodeEventResponse.  # noqa: E501

        The total number of pages in the query.  # noqa: E501

        :return: The total_pages of this PagedResultsModelNodeEventResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this PagedResultsModelNodeEventResponse.

        The total number of pages in the query.  # noqa: E501

        :param total_pages: The total_pages of this PagedResultsModelNodeEventResponse.  # noqa: E501
        :type: int
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")  # noqa: E501

        self._total_pages = total_pages

    @property
    def current_page(self):
        """Gets the current_page of this PagedResultsModelNodeEventResponse.  # noqa: E501

        The page number for the current set of results.  # noqa: E501

        :return: The current_page of this PagedResultsModelNodeEventResponse.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this PagedResultsModelNodeEventResponse.

        The page number for the current set of results.  # noqa: E501

        :param current_page: The current_page of this PagedResultsModelNodeEventResponse.  # noqa: E501
        :type: int
        """
        if current_page is None:
            raise ValueError("Invalid value for `current_page`, must not be `None`")  # noqa: E501

        self._current_page = current_page

    @property
    def page_size(self):
        """Gets the page_size of this PagedResultsModelNodeEventResponse.  # noqa: E501

        The size of each result set.  # noqa: E501

        :return: The page_size of this PagedResultsModelNodeEventResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PagedResultsModelNodeEventResponse.

        The size of each result set.  # noqa: E501

        :param page_size: The page_size of this PagedResultsModelNodeEventResponse.  # noqa: E501
        :type: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PagedResultsModelNodeEventResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PagedResultsModelNodeEventResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
