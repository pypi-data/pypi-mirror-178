# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThermalCameraSettingsCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'atmosphere_temperature': 'float',
        'emissivity': 'float',
        'distance': 'float',
        'reflected_temperature': 'float',
        'relative_humidity': 'float',
        'window_transmission_rate': 'float',
        'window_temperature': 'float',
        'update_interval': 'int'
    }

    attribute_map = {
        'atmosphere_temperature': 'AtmosphereTemperature',
        'emissivity': 'Emissivity',
        'distance': 'Distance',
        'reflected_temperature': 'ReflectedTemperature',
        'relative_humidity': 'RelativeHumidity',
        'window_transmission_rate': 'WindowTransmissionRate',
        'window_temperature': 'WindowTemperature',
        'update_interval': 'UpdateInterval'
    }

    def __init__(self, atmosphere_temperature=None, emissivity=None, distance=None, reflected_temperature=None, relative_humidity=None, window_transmission_rate=None, window_temperature=None, update_interval=None):  # noqa: E501
        """ThermalCameraSettingsCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._atmosphere_temperature = None
        self._emissivity = None
        self._distance = None
        self._reflected_temperature = None
        self._relative_humidity = None
        self._window_transmission_rate = None
        self._window_temperature = None
        self._update_interval = None
        self.discriminator = None
        self.atmosphere_temperature = atmosphere_temperature
        self.emissivity = emissivity
        self.distance = distance
        self.reflected_temperature = reflected_temperature
        self.relative_humidity = relative_humidity
        self.window_transmission_rate = window_transmission_rate
        self.window_temperature = window_temperature
        self.update_interval = update_interval

    @property
    def atmosphere_temperature(self):
        """Gets the atmosphere_temperature of this ThermalCameraSettingsCreateRequest.  # noqa: E501

        The ambient temperature on the camera in Kelvin.  # noqa: E501

        :return: The atmosphere_temperature of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._atmosphere_temperature

    @atmosphere_temperature.setter
    def atmosphere_temperature(self, atmosphere_temperature):
        """Sets the atmosphere_temperature of this ThermalCameraSettingsCreateRequest.

        The ambient temperature on the camera in Kelvin.  # noqa: E501

        :param atmosphere_temperature: The atmosphere_temperature of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :type: float
        """
        if atmosphere_temperature is None:
            raise ValueError("Invalid value for `atmosphere_temperature`, must not be `None`")  # noqa: E501

        self._atmosphere_temperature = atmosphere_temperature

    @property
    def emissivity(self):
        """Gets the emissivity of this ThermalCameraSettingsCreateRequest.  # noqa: E501

        The Emissivity value used in calculating temperature.  # noqa: E501

        :return: The emissivity of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._emissivity

    @emissivity.setter
    def emissivity(self, emissivity):
        """Sets the emissivity of this ThermalCameraSettingsCreateRequest.

        The Emissivity value used in calculating temperature.  # noqa: E501

        :param emissivity: The emissivity of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :type: float
        """
        if emissivity is None:
            raise ValueError("Invalid value for `emissivity`, must not be `None`")  # noqa: E501

        self._emissivity = emissivity

    @property
    def distance(self):
        """Gets the distance of this ThermalCameraSettingsCreateRequest.  # noqa: E501

        The distance in meters between the camera and the object being measured.  # noqa: E501

        :return: The distance of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ThermalCameraSettingsCreateRequest.

        The distance in meters between the camera and the object being measured.  # noqa: E501

        :param distance: The distance of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :type: float
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    @property
    def reflected_temperature(self):
        """Gets the reflected_temperature of this ThermalCameraSettingsCreateRequest.  # noqa: E501

        The reflected temperature of the object in Kelvin.  # noqa: E501

        :return: The reflected_temperature of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._reflected_temperature

    @reflected_temperature.setter
    def reflected_temperature(self, reflected_temperature):
        """Sets the reflected_temperature of this ThermalCameraSettingsCreateRequest.

        The reflected temperature of the object in Kelvin.  # noqa: E501

        :param reflected_temperature: The reflected_temperature of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :type: float
        """
        if reflected_temperature is None:
            raise ValueError("Invalid value for `reflected_temperature`, must not be `None`")  # noqa: E501

        self._reflected_temperature = reflected_temperature

    @property
    def relative_humidity(self):
        """Gets the relative_humidity of this ThermalCameraSettingsCreateRequest.  # noqa: E501

        The relative humidity of the camera.  # noqa: E501

        :return: The relative_humidity of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._relative_humidity

    @relative_humidity.setter
    def relative_humidity(self, relative_humidity):
        """Sets the relative_humidity of this ThermalCameraSettingsCreateRequest.

        The relative humidity of the camera.  # noqa: E501

        :param relative_humidity: The relative_humidity of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :type: float
        """
        if relative_humidity is None:
            raise ValueError("Invalid value for `relative_humidity`, must not be `None`")  # noqa: E501

        self._relative_humidity = relative_humidity

    @property
    def window_transmission_rate(self):
        """Gets the window_transmission_rate of this ThermalCameraSettingsCreateRequest.  # noqa: E501

        The amount of thermal radiation allowed through an external window.  # noqa: E501

        :return: The window_transmission_rate of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._window_transmission_rate

    @window_transmission_rate.setter
    def window_transmission_rate(self, window_transmission_rate):
        """Sets the window_transmission_rate of this ThermalCameraSettingsCreateRequest.

        The amount of thermal radiation allowed through an external window.  # noqa: E501

        :param window_transmission_rate: The window_transmission_rate of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :type: float
        """
        if window_transmission_rate is None:
            raise ValueError("Invalid value for `window_transmission_rate`, must not be `None`")  # noqa: E501

        self._window_transmission_rate = window_transmission_rate

    @property
    def window_temperature(self):
        """Gets the window_temperature of this ThermalCameraSettingsCreateRequest.  # noqa: E501

        The temperature of any external thermal windows in Kelvin.  # noqa: E501

        :return: The window_temperature of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._window_temperature

    @window_temperature.setter
    def window_temperature(self, window_temperature):
        """Sets the window_temperature of this ThermalCameraSettingsCreateRequest.

        The temperature of any external thermal windows in Kelvin.  # noqa: E501

        :param window_temperature: The window_temperature of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :type: float
        """
        if window_temperature is None:
            raise ValueError("Invalid value for `window_temperature`, must not be `None`")  # noqa: E501

        self._window_temperature = window_temperature

    @property
    def update_interval(self):
        """Gets the update_interval of this ThermalCameraSettingsCreateRequest.  # noqa: E501

        How often a value is transmitted to SD  # noqa: E501

        :return: The update_interval of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._update_interval

    @update_interval.setter
    def update_interval(self, update_interval):
        """Sets the update_interval of this ThermalCameraSettingsCreateRequest.

        How often a value is transmitted to SD  # noqa: E501

        :param update_interval: The update_interval of this ThermalCameraSettingsCreateRequest.  # noqa: E501
        :type: int
        """
        if update_interval is None:
            raise ValueError("Invalid value for `update_interval`, must not be `None`")  # noqa: E501

        self._update_interval = update_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThermalCameraSettingsCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThermalCameraSettingsCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
