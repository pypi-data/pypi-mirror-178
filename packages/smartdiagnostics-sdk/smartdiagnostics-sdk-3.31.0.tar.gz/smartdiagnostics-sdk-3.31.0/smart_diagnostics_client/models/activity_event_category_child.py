# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityEventCategoryChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'int',
        'category_code': 'str',
        'category_name': 'str',
        'category_description': 'str',
        'category_owner_type': 'ActivityEventOwnerType',
        'category_flag': 'ActivityEventCategoryFlag'
    }

    attribute_map = {
        'category_id': 'CategoryId',
        'category_code': 'CategoryCode',
        'category_name': 'CategoryName',
        'category_description': 'CategoryDescription',
        'category_owner_type': 'CategoryOwnerType',
        'category_flag': 'CategoryFlag'
    }

    def __init__(self, category_id=None, category_code=None, category_name=None, category_description=None, category_owner_type=None, category_flag=None):  # noqa: E501
        """ActivityEventCategoryChild - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._category_code = None
        self._category_name = None
        self._category_description = None
        self._category_owner_type = None
        self._category_flag = None
        self.discriminator = None
        self.category_id = category_id
        self.category_code = category_code
        self.category_name = category_name
        if category_description is not None:
            self.category_description = category_description
        if category_owner_type is not None:
            self.category_owner_type = category_owner_type
        if category_flag is not None:
            self.category_flag = category_flag

    @property
    def category_id(self):
        """Gets the category_id of this ActivityEventCategoryChild.  # noqa: E501


        :return: The category_id of this ActivityEventCategoryChild.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ActivityEventCategoryChild.


        :param category_id: The category_id of this ActivityEventCategoryChild.  # noqa: E501
        :type: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    @property
    def category_code(self):
        """Gets the category_code of this ActivityEventCategoryChild.  # noqa: E501


        :return: The category_code of this ActivityEventCategoryChild.  # noqa: E501
        :rtype: str
        """
        return self._category_code

    @category_code.setter
    def category_code(self, category_code):
        """Sets the category_code of this ActivityEventCategoryChild.


        :param category_code: The category_code of this ActivityEventCategoryChild.  # noqa: E501
        :type: str
        """
        if category_code is None:
            raise ValueError("Invalid value for `category_code`, must not be `None`")  # noqa: E501

        self._category_code = category_code

    @property
    def category_name(self):
        """Gets the category_name of this ActivityEventCategoryChild.  # noqa: E501


        :return: The category_name of this ActivityEventCategoryChild.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this ActivityEventCategoryChild.


        :param category_name: The category_name of this ActivityEventCategoryChild.  # noqa: E501
        :type: str
        """
        if category_name is None:
            raise ValueError("Invalid value for `category_name`, must not be `None`")  # noqa: E501

        self._category_name = category_name

    @property
    def category_description(self):
        """Gets the category_description of this ActivityEventCategoryChild.  # noqa: E501


        :return: The category_description of this ActivityEventCategoryChild.  # noqa: E501
        :rtype: str
        """
        return self._category_description

    @category_description.setter
    def category_description(self, category_description):
        """Sets the category_description of this ActivityEventCategoryChild.


        :param category_description: The category_description of this ActivityEventCategoryChild.  # noqa: E501
        :type: str
        """

        self._category_description = category_description

    @property
    def category_owner_type(self):
        """Gets the category_owner_type of this ActivityEventCategoryChild.  # noqa: E501


        :return: The category_owner_type of this ActivityEventCategoryChild.  # noqa: E501
        :rtype: ActivityEventOwnerType
        """
        return self._category_owner_type

    @category_owner_type.setter
    def category_owner_type(self, category_owner_type):
        """Sets the category_owner_type of this ActivityEventCategoryChild.


        :param category_owner_type: The category_owner_type of this ActivityEventCategoryChild.  # noqa: E501
        :type: ActivityEventOwnerType
        """

        self._category_owner_type = category_owner_type

    @property
    def category_flag(self):
        """Gets the category_flag of this ActivityEventCategoryChild.  # noqa: E501


        :return: The category_flag of this ActivityEventCategoryChild.  # noqa: E501
        :rtype: ActivityEventCategoryFlag
        """
        return self._category_flag

    @category_flag.setter
    def category_flag(self, category_flag):
        """Sets the category_flag of this ActivityEventCategoryChild.


        :param category_flag: The category_flag of this ActivityEventCategoryChild.  # noqa: E501
        :type: ActivityEventCategoryFlag
        """

        self._category_flag = category_flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityEventCategoryChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityEventCategoryChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
