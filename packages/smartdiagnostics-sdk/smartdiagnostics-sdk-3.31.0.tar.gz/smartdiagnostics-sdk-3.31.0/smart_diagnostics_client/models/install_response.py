# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstallResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'active': 'bool',
        'location': 'LocationChild',
        'corporation': 'CorporationChild',
        'users': 'list[UserChild]',
        'node_status': 'InstallNodesStatusChild'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'active': 'Active',
        'location': 'Location',
        'corporation': 'Corporation',
        'users': 'Users',
        'node_status': 'NodeStatus'
    }

    def __init__(self, id=None, name=None, start_date=None, end_date=None, active=None, location=None, corporation=None, users=None, node_status=None):  # noqa: E501
        """InstallResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._start_date = None
        self._end_date = None
        self._active = None
        self._location = None
        self._corporation = None
        self._users = None
        self._node_status = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if active is not None:
            self.active = active
        if location is not None:
            self.location = location
        if corporation is not None:
            self.corporation = corporation
        self.users = users
        if node_status is not None:
            self.node_status = node_status

    @property
    def id(self):
        """Gets the id of this InstallResponse.  # noqa: E501


        :return: The id of this InstallResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstallResponse.


        :param id: The id of this InstallResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this InstallResponse.  # noqa: E501


        :return: The name of this InstallResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstallResponse.


        :param name: The name of this InstallResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this InstallResponse.  # noqa: E501


        :return: The start_date of this InstallResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this InstallResponse.


        :param start_date: The start_date of this InstallResponse.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this InstallResponse.  # noqa: E501


        :return: The end_date of this InstallResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this InstallResponse.


        :param end_date: The end_date of this InstallResponse.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def active(self):
        """Gets the active of this InstallResponse.  # noqa: E501


        :return: The active of this InstallResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InstallResponse.


        :param active: The active of this InstallResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def location(self):
        """Gets the location of this InstallResponse.  # noqa: E501


        :return: The location of this InstallResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InstallResponse.


        :param location: The location of this InstallResponse.  # noqa: E501
        :type: LocationChild
        """

        self._location = location

    @property
    def corporation(self):
        """Gets the corporation of this InstallResponse.  # noqa: E501


        :return: The corporation of this InstallResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this InstallResponse.


        :param corporation: The corporation of this InstallResponse.  # noqa: E501
        :type: CorporationChild
        """

        self._corporation = corporation

    @property
    def users(self):
        """Gets the users of this InstallResponse.  # noqa: E501


        :return: The users of this InstallResponse.  # noqa: E501
        :rtype: list[UserChild]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this InstallResponse.


        :param users: The users of this InstallResponse.  # noqa: E501
        :type: list[UserChild]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")  # noqa: E501

        self._users = users

    @property
    def node_status(self):
        """Gets the node_status of this InstallResponse.  # noqa: E501


        :return: The node_status of this InstallResponse.  # noqa: E501
        :rtype: InstallNodesStatusChild
        """
        return self._node_status

    @node_status.setter
    def node_status(self, node_status):
        """Sets the node_status of this InstallResponse.


        :param node_status: The node_status of this InstallResponse.  # noqa: E501
        :type: InstallNodesStatusChild
        """

        self._node_status = node_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
