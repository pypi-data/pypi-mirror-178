# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityEventRelationshipResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'relationship_type': 'ActivityEventRelationshipType',
        'from_activity_event': 'ActivityEventChild',
        'to_activity_event': 'ActivityEventChild'
    }

    attribute_map = {
        'id': 'Id',
        'relationship_type': 'RelationshipType',
        'from_activity_event': 'FromActivityEvent',
        'to_activity_event': 'ToActivityEvent'
    }

    def __init__(self, id=None, relationship_type=None, from_activity_event=None, to_activity_event=None):  # noqa: E501
        """ActivityEventRelationshipResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._relationship_type = None
        self._from_activity_event = None
        self._to_activity_event = None
        self.discriminator = None
        self.id = id
        self.relationship_type = relationship_type
        self.from_activity_event = from_activity_event
        self.to_activity_event = to_activity_event

    @property
    def id(self):
        """Gets the id of this ActivityEventRelationshipResponse.  # noqa: E501


        :return: The id of this ActivityEventRelationshipResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityEventRelationshipResponse.


        :param id: The id of this ActivityEventRelationshipResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def relationship_type(self):
        """Gets the relationship_type of this ActivityEventRelationshipResponse.  # noqa: E501


        :return: The relationship_type of this ActivityEventRelationshipResponse.  # noqa: E501
        :rtype: ActivityEventRelationshipType
        """
        return self._relationship_type

    @relationship_type.setter
    def relationship_type(self, relationship_type):
        """Sets the relationship_type of this ActivityEventRelationshipResponse.


        :param relationship_type: The relationship_type of this ActivityEventRelationshipResponse.  # noqa: E501
        :type: ActivityEventRelationshipType
        """
        if relationship_type is None:
            raise ValueError("Invalid value for `relationship_type`, must not be `None`")  # noqa: E501

        self._relationship_type = relationship_type

    @property
    def from_activity_event(self):
        """Gets the from_activity_event of this ActivityEventRelationshipResponse.  # noqa: E501


        :return: The from_activity_event of this ActivityEventRelationshipResponse.  # noqa: E501
        :rtype: ActivityEventChild
        """
        return self._from_activity_event

    @from_activity_event.setter
    def from_activity_event(self, from_activity_event):
        """Sets the from_activity_event of this ActivityEventRelationshipResponse.


        :param from_activity_event: The from_activity_event of this ActivityEventRelationshipResponse.  # noqa: E501
        :type: ActivityEventChild
        """
        if from_activity_event is None:
            raise ValueError("Invalid value for `from_activity_event`, must not be `None`")  # noqa: E501

        self._from_activity_event = from_activity_event

    @property
    def to_activity_event(self):
        """Gets the to_activity_event of this ActivityEventRelationshipResponse.  # noqa: E501


        :return: The to_activity_event of this ActivityEventRelationshipResponse.  # noqa: E501
        :rtype: ActivityEventChild
        """
        return self._to_activity_event

    @to_activity_event.setter
    def to_activity_event(self, to_activity_event):
        """Sets the to_activity_event of this ActivityEventRelationshipResponse.


        :param to_activity_event: The to_activity_event of this ActivityEventRelationshipResponse.  # noqa: E501
        :type: ActivityEventChild
        """
        if to_activity_event is None:
            raise ValueError("Invalid value for `to_activity_event`, must not be `None`")  # noqa: E501

        self._to_activity_event = to_activity_event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityEventRelationshipResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityEventRelationshipResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
