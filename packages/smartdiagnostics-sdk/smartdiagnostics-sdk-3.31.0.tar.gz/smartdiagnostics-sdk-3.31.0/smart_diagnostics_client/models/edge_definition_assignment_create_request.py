# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeDefinitionAssignmentCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_station_id': 'int',
        'definition_id': 'str',
        'note': 'str',
        'definition_overrides': 'list[EdgeDefinitionServiceOverrideRequestChild]'
    }

    attribute_map = {
        'base_station_id': 'BaseStationId',
        'definition_id': 'DefinitionId',
        'note': 'Note',
        'definition_overrides': 'DefinitionOverrides'
    }

    def __init__(self, base_station_id=None, definition_id=None, note=None, definition_overrides=None):  # noqa: E501
        """EdgeDefinitionAssignmentCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._base_station_id = None
        self._definition_id = None
        self._note = None
        self._definition_overrides = None
        self.discriminator = None
        self.base_station_id = base_station_id
        self.definition_id = definition_id
        if note is not None:
            self.note = note
        if definition_overrides is not None:
            self.definition_overrides = definition_overrides

    @property
    def base_station_id(self):
        """Gets the base_station_id of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501

        The base station Id to create the assignment.  Only one base station can be assigned to a definition assignment.  # noqa: E501

        :return: The base_station_id of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._base_station_id

    @base_station_id.setter
    def base_station_id(self, base_station_id):
        """Sets the base_station_id of this EdgeDefinitionAssignmentCreateRequest.

        The base station Id to create the assignment.  Only one base station can be assigned to a definition assignment.  # noqa: E501

        :param base_station_id: The base_station_id of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501
        :type: int
        """
        if base_station_id is None:
            raise ValueError("Invalid value for `base_station_id`, must not be `None`")  # noqa: E501

        self._base_station_id = base_station_id

    @property
    def definition_id(self):
        """Gets the definition_id of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501

        The definition to assign to the base station  # noqa: E501

        :return: The definition_id of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._definition_id

    @definition_id.setter
    def definition_id(self, definition_id):
        """Sets the definition_id of this EdgeDefinitionAssignmentCreateRequest.

        The definition to assign to the base station  # noqa: E501

        :param definition_id: The definition_id of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501
        :type: str
        """
        if definition_id is None:
            raise ValueError("Invalid value for `definition_id`, must not be `None`")  # noqa: E501

        self._definition_id = definition_id

    @property
    def note(self):
        """Gets the note of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501

        A note describing the definition assignment  # noqa: E501

        :return: The note of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this EdgeDefinitionAssignmentCreateRequest.

        A note describing the definition assignment  # noqa: E501

        :param note: The note of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def definition_overrides(self):
        """Gets the definition_overrides of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501

        A list of service properties to override  # noqa: E501

        :return: The definition_overrides of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501
        :rtype: list[EdgeDefinitionServiceOverrideRequestChild]
        """
        return self._definition_overrides

    @definition_overrides.setter
    def definition_overrides(self, definition_overrides):
        """Sets the definition_overrides of this EdgeDefinitionAssignmentCreateRequest.

        A list of service properties to override  # noqa: E501

        :param definition_overrides: The definition_overrides of this EdgeDefinitionAssignmentCreateRequest.  # noqa: E501
        :type: list[EdgeDefinitionServiceOverrideRequestChild]
        """

        self._definition_overrides = definition_overrides

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeDefinitionAssignmentCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeDefinitionAssignmentCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
