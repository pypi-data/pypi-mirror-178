# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstallNodeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_id': 'int',
        'install_id': 'str',
        'node_serial_number': 'str',
        'node_nickname': 'str',
        'install_status': 'InstallNodeStatusChild',
        'location': 'LocationChild'
    }

    attribute_map = {
        'node_id': 'NodeId',
        'install_id': 'InstallId',
        'node_serial_number': 'NodeSerialNumber',
        'node_nickname': 'NodeNickname',
        'install_status': 'InstallStatus',
        'location': 'Location'
    }

    def __init__(self, node_id=None, install_id=None, node_serial_number=None, node_nickname=None, install_status=None, location=None):  # noqa: E501
        """InstallNodeResponse - a model defined in Swagger"""  # noqa: E501
        self._node_id = None
        self._install_id = None
        self._node_serial_number = None
        self._node_nickname = None
        self._install_status = None
        self._location = None
        self.discriminator = None
        self.node_id = node_id
        if install_id is not None:
            self.install_id = install_id
        self.node_serial_number = node_serial_number
        if node_nickname is not None:
            self.node_nickname = node_nickname
        if install_status is not None:
            self.install_status = install_status
        if location is not None:
            self.location = location

    @property
    def node_id(self):
        """Gets the node_id of this InstallNodeResponse.  # noqa: E501


        :return: The node_id of this InstallNodeResponse.  # noqa: E501
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this InstallNodeResponse.


        :param node_id: The node_id of this InstallNodeResponse.  # noqa: E501
        :type: int
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def install_id(self):
        """Gets the install_id of this InstallNodeResponse.  # noqa: E501


        :return: The install_id of this InstallNodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._install_id

    @install_id.setter
    def install_id(self, install_id):
        """Sets the install_id of this InstallNodeResponse.


        :param install_id: The install_id of this InstallNodeResponse.  # noqa: E501
        :type: str
        """

        self._install_id = install_id

    @property
    def node_serial_number(self):
        """Gets the node_serial_number of this InstallNodeResponse.  # noqa: E501


        :return: The node_serial_number of this InstallNodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._node_serial_number

    @node_serial_number.setter
    def node_serial_number(self, node_serial_number):
        """Sets the node_serial_number of this InstallNodeResponse.


        :param node_serial_number: The node_serial_number of this InstallNodeResponse.  # noqa: E501
        :type: str
        """
        if node_serial_number is None:
            raise ValueError("Invalid value for `node_serial_number`, must not be `None`")  # noqa: E501

        self._node_serial_number = node_serial_number

    @property
    def node_nickname(self):
        """Gets the node_nickname of this InstallNodeResponse.  # noqa: E501


        :return: The node_nickname of this InstallNodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._node_nickname

    @node_nickname.setter
    def node_nickname(self, node_nickname):
        """Sets the node_nickname of this InstallNodeResponse.


        :param node_nickname: The node_nickname of this InstallNodeResponse.  # noqa: E501
        :type: str
        """

        self._node_nickname = node_nickname

    @property
    def install_status(self):
        """Gets the install_status of this InstallNodeResponse.  # noqa: E501


        :return: The install_status of this InstallNodeResponse.  # noqa: E501
        :rtype: InstallNodeStatusChild
        """
        return self._install_status

    @install_status.setter
    def install_status(self, install_status):
        """Sets the install_status of this InstallNodeResponse.


        :param install_status: The install_status of this InstallNodeResponse.  # noqa: E501
        :type: InstallNodeStatusChild
        """

        self._install_status = install_status

    @property
    def location(self):
        """Gets the location of this InstallNodeResponse.  # noqa: E501


        :return: The location of this InstallNodeResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InstallNodeResponse.


        :param location: The location of this InstallNodeResponse.  # noqa: E501
        :type: LocationChild
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallNodeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallNodeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
