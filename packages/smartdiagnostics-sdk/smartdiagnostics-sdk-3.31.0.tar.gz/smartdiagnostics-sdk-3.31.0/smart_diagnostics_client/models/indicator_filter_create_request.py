# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndicatorFilterCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'indicator_types': 'list[MetricTypeCodes]',
        'sort_order': 'int',
        'tag_ids': 'list[str]',
        'location_id': 'str',
        'system_id': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'indicator_types': 'IndicatorTypes',
        'sort_order': 'SortOrder',
        'tag_ids': 'TagIds',
        'location_id': 'LocationId',
        'system_id': 'SystemId'
    }

    def __init__(self, name=None, indicator_types=None, sort_order=None, tag_ids=None, location_id=None, system_id=None):  # noqa: E501
        """IndicatorFilterCreateRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._indicator_types = None
        self._sort_order = None
        self._tag_ids = None
        self._location_id = None
        self._system_id = None
        self.discriminator = None
        self.name = name
        if indicator_types is not None:
            self.indicator_types = indicator_types
        if sort_order is not None:
            self.sort_order = sort_order
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if location_id is not None:
            self.location_id = location_id
        if system_id is not None:
            self.system_id = system_id

    @property
    def name(self):
        """Gets the name of this IndicatorFilterCreateRequest.  # noqa: E501


        :return: The name of this IndicatorFilterCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IndicatorFilterCreateRequest.


        :param name: The name of this IndicatorFilterCreateRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def indicator_types(self):
        """Gets the indicator_types of this IndicatorFilterCreateRequest.  # noqa: E501


        :return: The indicator_types of this IndicatorFilterCreateRequest.  # noqa: E501
        :rtype: list[MetricTypeCodes]
        """
        return self._indicator_types

    @indicator_types.setter
    def indicator_types(self, indicator_types):
        """Sets the indicator_types of this IndicatorFilterCreateRequest.


        :param indicator_types: The indicator_types of this IndicatorFilterCreateRequest.  # noqa: E501
        :type: list[MetricTypeCodes]
        """

        self._indicator_types = indicator_types

    @property
    def sort_order(self):
        """Gets the sort_order of this IndicatorFilterCreateRequest.  # noqa: E501


        :return: The sort_order of this IndicatorFilterCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this IndicatorFilterCreateRequest.


        :param sort_order: The sort_order of this IndicatorFilterCreateRequest.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def tag_ids(self):
        """Gets the tag_ids of this IndicatorFilterCreateRequest.  # noqa: E501


        :return: The tag_ids of this IndicatorFilterCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this IndicatorFilterCreateRequest.


        :param tag_ids: The tag_ids of this IndicatorFilterCreateRequest.  # noqa: E501
        :type: list[str]
        """

        self._tag_ids = tag_ids

    @property
    def location_id(self):
        """Gets the location_id of this IndicatorFilterCreateRequest.  # noqa: E501


        :return: The location_id of this IndicatorFilterCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this IndicatorFilterCreateRequest.


        :param location_id: The location_id of this IndicatorFilterCreateRequest.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def system_id(self):
        """Gets the system_id of this IndicatorFilterCreateRequest.  # noqa: E501


        :return: The system_id of this IndicatorFilterCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this IndicatorFilterCreateRequest.


        :param system_id: The system_id of this IndicatorFilterCreateRequest.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndicatorFilterCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndicatorFilterCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
