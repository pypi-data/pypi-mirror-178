# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetClassificationAssignmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'GroupChild',
        'asset_type': 'AssetTypeChild',
        'asset_category': 'AssetClassificationCategoryChild',
        'parameter_values': 'list[AssetClassificationParameterValueChild]'
    }

    attribute_map = {
        'asset': 'Asset',
        'asset_type': 'AssetType',
        'asset_category': 'AssetCategory',
        'parameter_values': 'ParameterValues'
    }

    def __init__(self, asset=None, asset_type=None, asset_category=None, parameter_values=None):  # noqa: E501
        """AssetClassificationAssignmentResponse - a model defined in Swagger"""  # noqa: E501
        self._asset = None
        self._asset_type = None
        self._asset_category = None
        self._parameter_values = None
        self.discriminator = None
        self.asset = asset
        if asset_type is not None:
            self.asset_type = asset_type
        if asset_category is not None:
            self.asset_category = asset_category
        self.parameter_values = parameter_values

    @property
    def asset(self):
        """Gets the asset of this AssetClassificationAssignmentResponse.  # noqa: E501


        :return: The asset of this AssetClassificationAssignmentResponse.  # noqa: E501
        :rtype: GroupChild
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this AssetClassificationAssignmentResponse.


        :param asset: The asset of this AssetClassificationAssignmentResponse.  # noqa: E501
        :type: GroupChild
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def asset_type(self):
        """Gets the asset_type of this AssetClassificationAssignmentResponse.  # noqa: E501


        :return: The asset_type of this AssetClassificationAssignmentResponse.  # noqa: E501
        :rtype: AssetTypeChild
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this AssetClassificationAssignmentResponse.


        :param asset_type: The asset_type of this AssetClassificationAssignmentResponse.  # noqa: E501
        :type: AssetTypeChild
        """

        self._asset_type = asset_type

    @property
    def asset_category(self):
        """Gets the asset_category of this AssetClassificationAssignmentResponse.  # noqa: E501


        :return: The asset_category of this AssetClassificationAssignmentResponse.  # noqa: E501
        :rtype: AssetClassificationCategoryChild
        """
        return self._asset_category

    @asset_category.setter
    def asset_category(self, asset_category):
        """Sets the asset_category of this AssetClassificationAssignmentResponse.


        :param asset_category: The asset_category of this AssetClassificationAssignmentResponse.  # noqa: E501
        :type: AssetClassificationCategoryChild
        """

        self._asset_category = asset_category

    @property
    def parameter_values(self):
        """Gets the parameter_values of this AssetClassificationAssignmentResponse.  # noqa: E501

        A list of parameter values made of a code and value.  A code describes the value being assigned.   Code = \"piston.count\", Value = \"3\"  Will return an empty list when an asset has no parameter values assigned.  # noqa: E501

        :return: The parameter_values of this AssetClassificationAssignmentResponse.  # noqa: E501
        :rtype: list[AssetClassificationParameterValueChild]
        """
        return self._parameter_values

    @parameter_values.setter
    def parameter_values(self, parameter_values):
        """Sets the parameter_values of this AssetClassificationAssignmentResponse.

        A list of parameter values made of a code and value.  A code describes the value being assigned.   Code = \"piston.count\", Value = \"3\"  Will return an empty list when an asset has no parameter values assigned.  # noqa: E501

        :param parameter_values: The parameter_values of this AssetClassificationAssignmentResponse.  # noqa: E501
        :type: list[AssetClassificationParameterValueChild]
        """
        if parameter_values is None:
            raise ValueError("Invalid value for `parameter_values`, must not be `None`")  # noqa: E501

        self._parameter_values = parameter_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetClassificationAssignmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetClassificationAssignmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
