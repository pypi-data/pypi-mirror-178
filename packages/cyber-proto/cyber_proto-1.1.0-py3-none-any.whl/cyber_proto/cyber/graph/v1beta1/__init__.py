# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cyber/graph/v1beta1/query.proto, cyber/graph/v1beta1/tx.proto, cyber/graph/v1beta1/types.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class Link(betterproto.Message):
    from_: str = betterproto.string_field(1)
    to: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgCyberlink(betterproto.Message):
    neuron: str = betterproto.string_field(1)
    links: List["Link"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgCyberlinkResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryGraphStatsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryGraphStatsResponse(betterproto.Message):
    cyberlinks: int = betterproto.uint64_field(1)
    particles: int = betterproto.uint64_field(2)


class MsgStub(betterproto.ServiceStub):
    async def cyberlink(
        self, *, neuron: str = "", links: Optional[List["Link"]] = None
    ) -> "MsgCyberlinkResponse":
        links = links or []

        request = MsgCyberlink()
        request.neuron = neuron
        if links is not None:
            request.links = links

        return await self._unary_unary(
            "/cyber.graph.v1beta1.Msg/Cyberlink", request, MsgCyberlinkResponse
        )


class QueryStub(betterproto.ServiceStub):
    async def graph_stats(self) -> "QueryGraphStatsResponse":

        request = QueryGraphStatsRequest()

        return await self._unary_unary(
            "/cyber.graph.v1beta1.Query/GraphStats", request, QueryGraphStatsResponse
        )


class MsgBase(ServiceBase):
    async def cyberlink(
        self, neuron: str, links: Optional[List["Link"]]
    ) -> "MsgCyberlinkResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_cyberlink(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "neuron": request.neuron,
            "links": request.links,
        }

        response = await self.cyberlink(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cyber.graph.v1beta1.Msg/Cyberlink": grpclib.const.Handler(
                self.__rpc_cyberlink,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCyberlink,
                MsgCyberlinkResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def graph_stats(self) -> "QueryGraphStatsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_graph_stats(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.graph_stats(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cyber.graph.v1beta1.Query/GraphStats": grpclib.const.Handler(
                self.__rpc_graph_stats,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGraphStatsRequest,
                QueryGraphStatsResponse,
            ),
        }
