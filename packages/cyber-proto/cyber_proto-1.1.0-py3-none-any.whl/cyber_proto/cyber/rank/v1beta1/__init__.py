# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cyber/rank/v1beta1/genesis.proto, cyber/rank/v1beta1/query.proto, cyber/rank/v1beta1/types.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    calculation_period: int = betterproto.int64_field(1)
    damping_factor: str = betterproto.string_field(2)
    tolerance: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RankedParticle(betterproto.Message):
    particle: str = betterproto.string_field(1)
    rank: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryRankRequest(betterproto.Message):
    particle: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryRankResponse(betterproto.Message):
    rank: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QuerySearchRequest(betterproto.Message):
    particle: str = betterproto.string_field(1)
    pagination: "__base_query_v1_beta1__.PageRequest" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QuerySearchResponse(betterproto.Message):
    result: List["RankedParticle"] = betterproto.message_field(1)
    pagination: "__base_query_v1_beta1__.PageResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueryTopRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryIsLinkExistRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    to: str = betterproto.string_field(2)
    address: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryIsAnyLinkExistRequest(betterproto.Message):
    from_: str = betterproto.string_field(1)
    to: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryLinkExistResponse(betterproto.Message):
    exist: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class QueryNegentropyPartilceRequest(betterproto.Message):
    particle: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryNegentropyParticleResponse(betterproto.Message):
    entropy: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryNegentropyRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryNegentropyResponse(betterproto.Message):
    negentropy: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryKarmaRequest(betterproto.Message):
    neuron: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryKarmaResponse(betterproto.Message):
    karma: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


class QueryStub(betterproto.ServiceStub):
    async def params(self) -> "QueryParamsResponse":

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/cyber.rank.v1beta1.Query/Params", request, QueryParamsResponse
        )

    async def rank(self, *, particle: str = "") -> "QueryRankResponse":

        request = QueryRankRequest()
        request.particle = particle

        return await self._unary_unary(
            "/cyber.rank.v1beta1.Query/Rank", request, QueryRankResponse
        )

    async def search(
        self,
        *,
        particle: str = "",
        pagination: "__base_query_v1_beta1__.PageRequest" = None
    ) -> "QuerySearchResponse":

        request = QuerySearchRequest()
        request.particle = particle
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cyber.rank.v1beta1.Query/Search", request, QuerySearchResponse
        )

    async def backlinks(
        self,
        *,
        particle: str = "",
        pagination: "__base_query_v1_beta1__.PageRequest" = None
    ) -> "QuerySearchResponse":

        request = QuerySearchRequest()
        request.particle = particle
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cyber.rank.v1beta1.Query/Backlinks", request, QuerySearchResponse
        )

    async def top(self, *, page: int = 0, per_page: int = 0) -> "QuerySearchResponse":

        request = __base_query_v1_beta1__.PageRequest()
        request.page = page
        request.per_page = per_page

        return await self._unary_unary(
            "/cyber.rank.v1beta1.Query/Top", request, QuerySearchResponse
        )

    async def is_link_exist(
        self, *, from_: str = "", to: str = "", address: str = ""
    ) -> "QueryLinkExistResponse":

        request = QueryIsLinkExistRequest()
        request.from_ = from_
        request.to = to
        request.address = address

        return await self._unary_unary(
            "/cyber.rank.v1beta1.Query/IsLinkExist", request, QueryLinkExistResponse
        )

    async def is_any_link_exist(
        self, *, from_: str = "", to: str = ""
    ) -> "QueryLinkExistResponse":

        request = QueryIsAnyLinkExistRequest()
        request.from_ = from_
        request.to = to

        return await self._unary_unary(
            "/cyber.rank.v1beta1.Query/IsAnyLinkExist", request, QueryLinkExistResponse
        )

    async def particle_negentropy(
        self, *, particle: str = ""
    ) -> "QueryNegentropyParticleResponse":

        request = QueryNegentropyPartilceRequest()
        request.particle = particle

        return await self._unary_unary(
            "/cyber.rank.v1beta1.Query/ParticleNegentropy",
            request,
            QueryNegentropyParticleResponse,
        )

    async def negentropy(self) -> "QueryNegentropyResponse":

        request = QueryNegentropyRequest()

        return await self._unary_unary(
            "/cyber.rank.v1beta1.Query/Negentropy", request, QueryNegentropyResponse
        )

    async def karma(self, *, neuron: str = "") -> "QueryKarmaResponse":

        request = QueryKarmaRequest()
        request.neuron = neuron

        return await self._unary_unary(
            "/cyber.rank.v1beta1.Query/Karma", request, QueryKarmaResponse
        )


class QueryBase(ServiceBase):
    async def params(self) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def rank(self, particle: str) -> "QueryRankResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search(
        self, particle: str, pagination: "__base_query_v1_beta1__.PageRequest"
    ) -> "QuerySearchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def backlinks(
        self, particle: str, pagination: "__base_query_v1_beta1__.PageRequest"
    ) -> "QuerySearchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def top(self, page: int, per_page: int) -> "QuerySearchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_link_exist(
        self, from_: str, to: str, address: str
    ) -> "QueryLinkExistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_any_link_exist(self, from_: str, to: str) -> "QueryLinkExistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def particle_negentropy(
        self, particle: str
    ) -> "QueryNegentropyParticleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def negentropy(self) -> "QueryNegentropyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def karma(self, neuron: str) -> "QueryKarmaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.params(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_rank(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "particle": request.particle,
        }

        response = await self.rank(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_search(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "particle": request.particle,
            "pagination": request.pagination,
        }

        response = await self.search(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_backlinks(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "particle": request.particle,
            "pagination": request.pagination,
        }

        response = await self.backlinks(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_top(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "page": request.page,
            "per_page": request.per_page,
        }

        response = await self.top(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_is_link_exist(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "from_": request.from_,
            "to": request.to,
            "address": request.address,
        }

        response = await self.is_link_exist(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_is_any_link_exist(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "from_": request.from_,
            "to": request.to,
        }

        response = await self.is_any_link_exist(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_particle_negentropy(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "particle": request.particle,
        }

        response = await self.particle_negentropy(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_negentropy(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.negentropy(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_karma(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "neuron": request.neuron,
        }

        response = await self.karma(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cyber.rank.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/cyber.rank.v1beta1.Query/Rank": grpclib.const.Handler(
                self.__rpc_rank,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRankRequest,
                QueryRankResponse,
            ),
            "/cyber.rank.v1beta1.Query/Search": grpclib.const.Handler(
                self.__rpc_search,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySearchRequest,
                QuerySearchResponse,
            ),
            "/cyber.rank.v1beta1.Query/Backlinks": grpclib.const.Handler(
                self.__rpc_backlinks,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySearchRequest,
                QuerySearchResponse,
            ),
            "/cyber.rank.v1beta1.Query/Top": grpclib.const.Handler(
                self.__rpc_top,
                grpclib.const.Cardinality.UNARY_UNARY,
                __base_query_v1_beta1__.PageRequest,
                QuerySearchResponse,
            ),
            "/cyber.rank.v1beta1.Query/IsLinkExist": grpclib.const.Handler(
                self.__rpc_is_link_exist,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIsLinkExistRequest,
                QueryLinkExistResponse,
            ),
            "/cyber.rank.v1beta1.Query/IsAnyLinkExist": grpclib.const.Handler(
                self.__rpc_is_any_link_exist,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIsAnyLinkExistRequest,
                QueryLinkExistResponse,
            ),
            "/cyber.rank.v1beta1.Query/ParticleNegentropy": grpclib.const.Handler(
                self.__rpc_particle_negentropy,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryNegentropyPartilceRequest,
                QueryNegentropyParticleResponse,
            ),
            "/cyber.rank.v1beta1.Query/Negentropy": grpclib.const.Handler(
                self.__rpc_negentropy,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryNegentropyRequest,
                QueryNegentropyResponse,
            ),
            "/cyber.rank.v1beta1.Query/Karma": grpclib.const.Handler(
                self.__rpc_karma,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryKarmaRequest,
                QueryKarmaResponse,
            ),
        }


from ...base.query import v1beta1 as __base_query_v1_beta1__
