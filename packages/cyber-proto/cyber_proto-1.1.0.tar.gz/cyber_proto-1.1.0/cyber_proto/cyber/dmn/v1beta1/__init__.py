# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cyber/dmn/v1beta1/genesis.proto, cyber/dmn/v1beta1/query.proto, cyber/dmn/v1beta1/tx.proto, cyber/dmn/v1beta1/types.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    max_slots: int = betterproto.uint32_field(1)
    max_gas: int = betterproto.uint32_field(2)
    fee_ttl: int = betterproto.uint32_field(3)


@dataclass(eq=False, repr=False)
class Thought(betterproto.Message):
    program: str = betterproto.string_field(1)
    trigger: "Trigger" = betterproto.message_field(2)
    load: "Load" = betterproto.message_field(3)
    name: str = betterproto.string_field(4)
    particle: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class Trigger(betterproto.Message):
    period: int = betterproto.uint64_field(1)
    block: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class Load(betterproto.Message):
    input: str = betterproto.string_field(1)
    gas_price: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ThoughtStats(betterproto.Message):
    program: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    calls: int = betterproto.uint64_field(3)
    fees: int = betterproto.uint64_field(4)
    gas: int = betterproto.uint64_field(5)
    last_block: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class MsgCreateThought(betterproto.Message):
    program: str = betterproto.string_field(1)
    trigger: "Trigger" = betterproto.message_field(2)
    load: "Load" = betterproto.message_field(3)
    name: str = betterproto.string_field(4)
    particle: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MsgForgetThought(betterproto.Message):
    program: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgChangeThoughtParticle(betterproto.Message):
    program: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    particle: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgChangeThoughtName(betterproto.Message):
    program: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    new_name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgChangeThoughtInput(betterproto.Message):
    program: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    input: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgChangeThoughtGasPrice(betterproto.Message):
    program: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    gas_price: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgChangeThoughtPeriod(betterproto.Message):
    program: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    period: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgChangeThoughtBlock(betterproto.Message):
    program: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    block: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class MsgCreateThoughtResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgForgetThoughtResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgChangeThoughtParticleResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgChangeThoughtNameResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgChangeThoughtInputResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgChangeThoughtGasPriceResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgChangeThoughtPeriodResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgChangeThoughtBlockResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryThoughtParamsRequest(betterproto.Message):
    program: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryThoughtResponse(betterproto.Message):
    thought: "Thought" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryThoughtStatsResponse(betterproto.Message):
    thought_stats: "ThoughtStats" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryThoughtsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryThoughtsResponse(betterproto.Message):
    thoughts: List["Thought"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryThoughtsStatsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryThoughtsStatsResponse(betterproto.Message):
    thoughts_stats: List["ThoughtStats"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    async def create_thought(
        self,
        *,
        program: str = "",
        trigger: "Trigger" = None,
        load: "Load" = None,
        name: str = "",
        particle: str = ""
    ) -> "MsgCreateThoughtResponse":

        request = MsgCreateThought()
        request.program = program
        if trigger is not None:
            request.trigger = trigger
        if load is not None:
            request.load = load
        request.name = name
        request.particle = particle

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Msg/CreateThought", request, MsgCreateThoughtResponse
        )

    async def forget_thought(
        self, *, program: str = "", name: str = ""
    ) -> "MsgForgetThoughtResponse":

        request = MsgForgetThought()
        request.program = program
        request.name = name

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Msg/ForgetThought", request, MsgForgetThoughtResponse
        )

    async def change_thought_particle(
        self, *, program: str = "", name: str = "", particle: str = ""
    ) -> "MsgChangeThoughtParticleResponse":

        request = MsgChangeThoughtParticle()
        request.program = program
        request.name = name
        request.particle = particle

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtParticle",
            request,
            MsgChangeThoughtParticleResponse,
        )

    async def change_thought_name(
        self, *, program: str = "", name: str = "", new_name: str = ""
    ) -> "MsgChangeThoughtNameResponse":

        request = MsgChangeThoughtName()
        request.program = program
        request.name = name
        request.new_name = new_name

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtName",
            request,
            MsgChangeThoughtNameResponse,
        )

    async def change_thought_input(
        self, *, program: str = "", name: str = "", input: str = ""
    ) -> "MsgChangeThoughtInputResponse":

        request = MsgChangeThoughtInput()
        request.program = program
        request.name = name
        request.input = input

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtInput",
            request,
            MsgChangeThoughtInputResponse,
        )

    async def change_thought_gas_price(
        self,
        *,
        program: str = "",
        name: str = "",
        gas_price: "___cosmos_base_v1_beta1__.Coin" = None
    ) -> "MsgChangeThoughtGasPriceResponse":

        request = MsgChangeThoughtGasPrice()
        request.program = program
        request.name = name
        if gas_price is not None:
            request.gas_price = gas_price

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtGasPrice",
            request,
            MsgChangeThoughtGasPriceResponse,
        )

    async def change_thought_period(
        self, *, program: str = "", name: str = "", period: int = 0
    ) -> "MsgChangeThoughtPeriodResponse":

        request = MsgChangeThoughtPeriod()
        request.program = program
        request.name = name
        request.period = period

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtPeriod",
            request,
            MsgChangeThoughtPeriodResponse,
        )

    async def change_thought_block(
        self, *, program: str = "", name: str = "", block: int = 0
    ) -> "MsgChangeThoughtBlockResponse":

        request = MsgChangeThoughtBlock()
        request.program = program
        request.name = name
        request.block = block

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtBlock",
            request,
            MsgChangeThoughtBlockResponse,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(self) -> "QueryParamsResponse":

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Query/Params", request, QueryParamsResponse
        )

    async def thought(
        self, *, program: str = "", name: str = ""
    ) -> "QueryThoughtResponse":

        request = QueryThoughtParamsRequest()
        request.program = program
        request.name = name

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Query/Thought", request, QueryThoughtResponse
        )

    async def thought_stats(
        self, *, program: str = "", name: str = ""
    ) -> "QueryThoughtStatsResponse":

        request = QueryThoughtParamsRequest()
        request.program = program
        request.name = name

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Query/ThoughtStats", request, QueryThoughtStatsResponse
        )

    async def thoughts(self) -> "QueryThoughtsResponse":

        request = QueryThoughtsRequest()

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Query/Thoughts", request, QueryThoughtsResponse
        )

    async def thoughts_stats(self) -> "QueryThoughtsStatsResponse":

        request = QueryThoughtsStatsRequest()

        return await self._unary_unary(
            "/cyber.dmn.v1beta1.Query/ThoughtsStats",
            request,
            QueryThoughtsStatsResponse,
        )


class MsgBase(ServiceBase):
    async def create_thought(
        self, program: str, trigger: "Trigger", load: "Load", name: str, particle: str
    ) -> "MsgCreateThoughtResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def forget_thought(
        self, program: str, name: str
    ) -> "MsgForgetThoughtResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_thought_particle(
        self, program: str, name: str, particle: str
    ) -> "MsgChangeThoughtParticleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_thought_name(
        self, program: str, name: str, new_name: str
    ) -> "MsgChangeThoughtNameResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_thought_input(
        self, program: str, name: str, input: str
    ) -> "MsgChangeThoughtInputResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_thought_gas_price(
        self, program: str, name: str, gas_price: "___cosmos_base_v1_beta1__.Coin"
    ) -> "MsgChangeThoughtGasPriceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_thought_period(
        self, program: str, name: str, period: int
    ) -> "MsgChangeThoughtPeriodResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def change_thought_block(
        self, program: str, name: str, block: int
    ) -> "MsgChangeThoughtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_thought(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "program": request.program,
            "trigger": request.trigger,
            "load": request.load,
            "name": request.name,
            "particle": request.particle,
        }

        response = await self.create_thought(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_forget_thought(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "program": request.program,
            "name": request.name,
        }

        response = await self.forget_thought(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_change_thought_particle(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "program": request.program,
            "name": request.name,
            "particle": request.particle,
        }

        response = await self.change_thought_particle(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_change_thought_name(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "program": request.program,
            "name": request.name,
            "new_name": request.new_name,
        }

        response = await self.change_thought_name(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_change_thought_input(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "program": request.program,
            "name": request.name,
            "input": request.input,
        }

        response = await self.change_thought_input(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_change_thought_gas_price(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "program": request.program,
            "name": request.name,
            "gas_price": request.gas_price,
        }

        response = await self.change_thought_gas_price(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_change_thought_period(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "program": request.program,
            "name": request.name,
            "period": request.period,
        }

        response = await self.change_thought_period(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_change_thought_block(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "program": request.program,
            "name": request.name,
            "block": request.block,
        }

        response = await self.change_thought_block(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cyber.dmn.v1beta1.Msg/CreateThought": grpclib.const.Handler(
                self.__rpc_create_thought,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateThought,
                MsgCreateThoughtResponse,
            ),
            "/cyber.dmn.v1beta1.Msg/ForgetThought": grpclib.const.Handler(
                self.__rpc_forget_thought,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgForgetThought,
                MsgForgetThoughtResponse,
            ),
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtParticle": grpclib.const.Handler(
                self.__rpc_change_thought_particle,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgChangeThoughtParticle,
                MsgChangeThoughtParticleResponse,
            ),
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtName": grpclib.const.Handler(
                self.__rpc_change_thought_name,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgChangeThoughtName,
                MsgChangeThoughtNameResponse,
            ),
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtInput": grpclib.const.Handler(
                self.__rpc_change_thought_input,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgChangeThoughtInput,
                MsgChangeThoughtInputResponse,
            ),
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtGasPrice": grpclib.const.Handler(
                self.__rpc_change_thought_gas_price,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgChangeThoughtGasPrice,
                MsgChangeThoughtGasPriceResponse,
            ),
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtPeriod": grpclib.const.Handler(
                self.__rpc_change_thought_period,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgChangeThoughtPeriod,
                MsgChangeThoughtPeriodResponse,
            ),
            "/cyber.dmn.v1beta1.Msg/ChangeThoughtBlock": grpclib.const.Handler(
                self.__rpc_change_thought_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgChangeThoughtBlock,
                MsgChangeThoughtBlockResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def params(self) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def thought(self, program: str, name: str) -> "QueryThoughtResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def thought_stats(
        self, program: str, name: str
    ) -> "QueryThoughtStatsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def thoughts(self) -> "QueryThoughtsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def thoughts_stats(self) -> "QueryThoughtsStatsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.params(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_thought(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "program": request.program,
            "name": request.name,
        }

        response = await self.thought(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_thought_stats(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "program": request.program,
            "name": request.name,
        }

        response = await self.thought_stats(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_thoughts(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.thoughts(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_thoughts_stats(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.thoughts_stats(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cyber.dmn.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/cyber.dmn.v1beta1.Query/Thought": grpclib.const.Handler(
                self.__rpc_thought,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryThoughtParamsRequest,
                QueryThoughtResponse,
            ),
            "/cyber.dmn.v1beta1.Query/ThoughtStats": grpclib.const.Handler(
                self.__rpc_thought_stats,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryThoughtParamsRequest,
                QueryThoughtStatsResponse,
            ),
            "/cyber.dmn.v1beta1.Query/Thoughts": grpclib.const.Handler(
                self.__rpc_thoughts,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryThoughtsRequest,
                QueryThoughtsResponse,
            ),
            "/cyber.dmn.v1beta1.Query/ThoughtsStats": grpclib.const.Handler(
                self.__rpc_thoughts_stats,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryThoughtsStatsRequest,
                QueryThoughtsStatsResponse,
            ),
        }


from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
