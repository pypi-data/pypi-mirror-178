# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cyber/grid/v1beta1/genesis.proto, cyber/grid/v1beta1/query.proto, cyber/grid/v1beta1/tx.proto, cyber/grid/v1beta1/types.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class MsgCreateRoute(betterproto.Message):
    source: str = betterproto.string_field(1)
    destination: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgEditRoute(betterproto.Message):
    source: str = betterproto.string_field(1)
    destination: str = betterproto.string_field(2)
    value: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgDeleteRoute(betterproto.Message):
    source: str = betterproto.string_field(1)
    destination: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgEditRouteName(betterproto.Message):
    source: str = betterproto.string_field(1)
    destination: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgCreateRouteResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgEditRouteResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDeleteRouteResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgEditRouteNameResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    max_routes: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class Route(betterproto.Message):
    source: str = betterproto.string_field(1)
    destination: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    value: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class Value(betterproto.Message):
    value: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuerySourceRequest(betterproto.Message):
    source: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryDestinationRequest(betterproto.Message):
    destination: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryRoutedEnergyResponse(betterproto.Message):
    value: List["___cosmos_base_v1_beta1__.Coin"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryRouteRequest(betterproto.Message):
    source: str = betterproto.string_field(1)
    destination: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryRouteResponse(betterproto.Message):
    route: "Route" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryRoutesRequest(betterproto.Message):
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class QueryRoutesResponse(betterproto.Message):
    routes: List["Route"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    params: "Params" = betterproto.message_field(1)
    routes: List["Route"] = betterproto.message_field(2)


class MsgStub(betterproto.ServiceStub):
    async def create_route(
        self, *, source: str = "", destination: str = "", name: str = ""
    ) -> "MsgCreateRouteResponse":

        request = MsgCreateRoute()
        request.source = source
        request.destination = destination
        request.name = name

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Msg/CreateRoute", request, MsgCreateRouteResponse
        )

    async def edit_route(
        self,
        *,
        source: str = "",
        destination: str = "",
        value: "___cosmos_base_v1_beta1__.Coin" = None
    ) -> "MsgEditRouteResponse":

        request = MsgEditRoute()
        request.source = source
        request.destination = destination
        if value is not None:
            request.value = value

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Msg/EditRoute", request, MsgEditRouteResponse
        )

    async def delete_route(
        self, *, source: str = "", destination: str = ""
    ) -> "MsgDeleteRouteResponse":

        request = MsgDeleteRoute()
        request.source = source
        request.destination = destination

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Msg/DeleteRoute", request, MsgDeleteRouteResponse
        )

    async def edit_route_name(
        self, *, source: str = "", destination: str = "", name: str = ""
    ) -> "MsgEditRouteNameResponse":

        request = MsgEditRouteName()
        request.source = source
        request.destination = destination
        request.name = name

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Msg/EditRouteName", request, MsgEditRouteNameResponse
        )


class QueryStub(betterproto.ServiceStub):
    async def params(self) -> "QueryParamsResponse":

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Query/Params", request, QueryParamsResponse
        )

    async def source_routes(self, *, source: str = "") -> "QueryRoutesResponse":

        request = QuerySourceRequest()
        request.source = source

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Query/SourceRoutes", request, QueryRoutesResponse
        )

    async def destination_routes(
        self, *, destination: str = ""
    ) -> "QueryRoutesResponse":

        request = QueryDestinationRequest()
        request.destination = destination

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Query/DestinationRoutes", request, QueryRoutesResponse
        )

    async def destination_routed_energy(
        self, *, destination: str = ""
    ) -> "QueryRoutedEnergyResponse":

        request = QueryDestinationRequest()
        request.destination = destination

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Query/DestinationRoutedEnergy",
            request,
            QueryRoutedEnergyResponse,
        )

    async def source_routed_energy(
        self, *, source: str = ""
    ) -> "QueryRoutedEnergyResponse":

        request = QuerySourceRequest()
        request.source = source

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Query/SourceRoutedEnergy",
            request,
            QueryRoutedEnergyResponse,
        )

    async def route(
        self, *, source: str = "", destination: str = ""
    ) -> "QueryRouteResponse":

        request = QueryRouteRequest()
        request.source = source
        request.destination = destination

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Query/Route", request, QueryRouteResponse
        )

    async def routes(
        self, *, pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = None
    ) -> "QueryRoutesResponse":

        request = QueryRoutesRequest()
        if pagination is not None:
            request.pagination = pagination

        return await self._unary_unary(
            "/cyber.grid.v1beta1.Query/Routes", request, QueryRoutesResponse
        )


class MsgBase(ServiceBase):
    async def create_route(
        self, source: str, destination: str, name: str
    ) -> "MsgCreateRouteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def edit_route(
        self, source: str, destination: str, value: "___cosmos_base_v1_beta1__.Coin"
    ) -> "MsgEditRouteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_route(
        self, source: str, destination: str
    ) -> "MsgDeleteRouteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def edit_route_name(
        self, source: str, destination: str, name: str
    ) -> "MsgEditRouteNameResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_route(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "source": request.source,
            "destination": request.destination,
            "name": request.name,
        }

        response = await self.create_route(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_edit_route(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "source": request.source,
            "destination": request.destination,
            "value": request.value,
        }

        response = await self.edit_route(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_delete_route(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "source": request.source,
            "destination": request.destination,
        }

        response = await self.delete_route(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_edit_route_name(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "source": request.source,
            "destination": request.destination,
            "name": request.name,
        }

        response = await self.edit_route_name(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cyber.grid.v1beta1.Msg/CreateRoute": grpclib.const.Handler(
                self.__rpc_create_route,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateRoute,
                MsgCreateRouteResponse,
            ),
            "/cyber.grid.v1beta1.Msg/EditRoute": grpclib.const.Handler(
                self.__rpc_edit_route,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgEditRoute,
                MsgEditRouteResponse,
            ),
            "/cyber.grid.v1beta1.Msg/DeleteRoute": grpclib.const.Handler(
                self.__rpc_delete_route,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDeleteRoute,
                MsgDeleteRouteResponse,
            ),
            "/cyber.grid.v1beta1.Msg/EditRouteName": grpclib.const.Handler(
                self.__rpc_edit_route_name,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgEditRouteName,
                MsgEditRouteNameResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def params(self) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def source_routes(self, source: str) -> "QueryRoutesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def destination_routes(self, destination: str) -> "QueryRoutesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def destination_routed_energy(
        self, destination: str
    ) -> "QueryRoutedEnergyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def source_routed_energy(self, source: str) -> "QueryRoutedEnergyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def route(self, source: str, destination: str) -> "QueryRouteResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def routes(
        self, pagination: "___cosmos_base_query_v1_beta1__.PageRequest"
    ) -> "QueryRoutesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.params(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_source_routes(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "source": request.source,
        }

        response = await self.source_routes(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_destination_routes(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "destination": request.destination,
        }

        response = await self.destination_routes(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_destination_routed_energy(
        self, stream: grpclib.server.Stream
    ) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "destination": request.destination,
        }

        response = await self.destination_routed_energy(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_source_routed_energy(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "source": request.source,
        }

        response = await self.source_routed_energy(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_route(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "source": request.source,
            "destination": request.destination,
        }

        response = await self.route(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_routes(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "pagination": request.pagination,
        }

        response = await self.routes(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cyber.grid.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/cyber.grid.v1beta1.Query/SourceRoutes": grpclib.const.Handler(
                self.__rpc_source_routes,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySourceRequest,
                QueryRoutesResponse,
            ),
            "/cyber.grid.v1beta1.Query/DestinationRoutes": grpclib.const.Handler(
                self.__rpc_destination_routes,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDestinationRequest,
                QueryRoutesResponse,
            ),
            "/cyber.grid.v1beta1.Query/DestinationRoutedEnergy": grpclib.const.Handler(
                self.__rpc_destination_routed_energy,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDestinationRequest,
                QueryRoutedEnergyResponse,
            ),
            "/cyber.grid.v1beta1.Query/SourceRoutedEnergy": grpclib.const.Handler(
                self.__rpc_source_routed_energy,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySourceRequest,
                QueryRoutedEnergyResponse,
            ),
            "/cyber.grid.v1beta1.Query/Route": grpclib.const.Handler(
                self.__rpc_route,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRouteRequest,
                QueryRouteResponse,
            ),
            "/cyber.grid.v1beta1.Query/Routes": grpclib.const.Handler(
                self.__rpc_routes,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRoutesRequest,
                QueryRoutesResponse,
            ),
        }


from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__
