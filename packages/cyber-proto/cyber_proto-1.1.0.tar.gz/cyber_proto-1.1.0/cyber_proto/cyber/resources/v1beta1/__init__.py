# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cyber/resources/v1beta1/genesis.proto, cyber/resources/v1beta1/query.proto, cyber/resources/v1beta1/tx.proto, cyber/resources/v1beta1/types.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class MsgInvestmint(betterproto.Message):
    neuron: str = betterproto.string_field(1)
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)
    resource: str = betterproto.string_field(3)
    length: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class MsgInvestmintResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    max_slots: int = betterproto.uint32_field(1)
    halving_period_volt_blocks: int = betterproto.uint32_field(2)
    halving_period_ampere_blocks: int = betterproto.uint32_field(3)
    base_investmint_period_volt: int = betterproto.uint32_field(4)
    base_investmint_period_ampere: int = betterproto.uint32_field(5)
    min_investmint_period: int = betterproto.uint32_field(6)
    base_investmint_amount_volt: "___cosmos_base_v1_beta1__.Coin" = (
        betterproto.message_field(7)
    )
    base_investmint_amount_ampere: "___cosmos_base_v1_beta1__.Coin" = (
        betterproto.message_field(8)
    )


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryInvestmintRequest(betterproto.Message):
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)
    resource: str = betterproto.string_field(2)
    length: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class QueryInvestmintResponse(betterproto.Message):
    amount: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    params: "Params" = betterproto.message_field(1)


class MsgStub(betterproto.ServiceStub):
    async def investmint(
        self,
        *,
        neuron: str = "",
        amount: "___cosmos_base_v1_beta1__.Coin" = None,
        resource: str = "",
        length: int = 0
    ) -> "MsgInvestmintResponse":

        request = MsgInvestmint()
        request.neuron = neuron
        if amount is not None:
            request.amount = amount
        request.resource = resource
        request.length = length

        return await self._unary_unary(
            "/cyber.resources.v1beta1.Msg/Investmint", request, MsgInvestmintResponse
        )


class QueryStub(betterproto.ServiceStub):
    async def params(self) -> "QueryParamsResponse":

        request = QueryParamsRequest()

        return await self._unary_unary(
            "/cyber.resources.v1beta1.Query/Params", request, QueryParamsResponse
        )

    async def investmint(
        self,
        *,
        amount: "___cosmos_base_v1_beta1__.Coin" = None,
        resource: str = "",
        length: int = 0
    ) -> "QueryInvestmintResponse":

        request = QueryInvestmintRequest()
        if amount is not None:
            request.amount = amount
        request.resource = resource
        request.length = length

        return await self._unary_unary(
            "/cyber.resources.v1beta1.Query/Investmint",
            request,
            QueryInvestmintResponse,
        )


class MsgBase(ServiceBase):
    async def investmint(
        self,
        neuron: str,
        amount: "___cosmos_base_v1_beta1__.Coin",
        resource: str,
        length: int,
    ) -> "MsgInvestmintResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_investmint(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "neuron": request.neuron,
            "amount": request.amount,
            "resource": request.resource,
            "length": request.length,
        }

        response = await self.investmint(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cyber.resources.v1beta1.Msg/Investmint": grpclib.const.Handler(
                self.__rpc_investmint,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgInvestmint,
                MsgInvestmintResponse,
            ),
        }


class QueryBase(ServiceBase):
    async def params(self) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def investmint(
        self, amount: "___cosmos_base_v1_beta1__.Coin", resource: str, length: int
    ) -> "QueryInvestmintResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {}

        response = await self.params(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_investmint(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "amount": request.amount,
            "resource": request.resource,
            "length": request.length,
        }

        response = await self.investmint(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cyber.resources.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/cyber.resources.v1beta1.Query/Investmint": grpclib.const.Handler(
                self.__rpc_investmint,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryInvestmintRequest,
                QueryInvestmintResponse,
            ),
        }


from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__
