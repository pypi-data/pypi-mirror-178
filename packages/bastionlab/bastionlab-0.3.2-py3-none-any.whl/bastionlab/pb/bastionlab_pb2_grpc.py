# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bastionlab_pb2 as bastionlab__pb2


class BastionLabStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendDataFrame = channel.stream_unary(
                '/bastionlab.BastionLab/SendDataFrame',
                request_serializer=bastionlab__pb2.SendChunk.SerializeToString,
                response_deserializer=bastionlab__pb2.ReferenceResponse.FromString,
                )
        self.RunQuery = channel.unary_unary(
                '/bastionlab.BastionLab/RunQuery',
                request_serializer=bastionlab__pb2.Query.SerializeToString,
                response_deserializer=bastionlab__pb2.ReferenceResponse.FromString,
                )
        self.GetChallenge = channel.unary_unary(
                '/bastionlab.BastionLab/GetChallenge',
                request_serializer=bastionlab__pb2.Empty.SerializeToString,
                response_deserializer=bastionlab__pb2.ChallengeResponse.FromString,
                )
        self.FetchDataFrame = channel.unary_stream(
                '/bastionlab.BastionLab/FetchDataFrame',
                request_serializer=bastionlab__pb2.ReferenceRequest.SerializeToString,
                response_deserializer=bastionlab__pb2.FetchChunk.FromString,
                )
        self.ListDataFrames = channel.unary_unary(
                '/bastionlab.BastionLab/ListDataFrames',
                request_serializer=bastionlab__pb2.Empty.SerializeToString,
                response_deserializer=bastionlab__pb2.ReferenceList.FromString,
                )
        self.GetDataFrameHeader = channel.unary_unary(
                '/bastionlab.BastionLab/GetDataFrameHeader',
                request_serializer=bastionlab__pb2.ReferenceRequest.SerializeToString,
                response_deserializer=bastionlab__pb2.ReferenceResponse.FromString,
                )
        self.CreateSession = channel.unary_unary(
                '/bastionlab.BastionLab/CreateSession',
                request_serializer=bastionlab__pb2.ClientInfo.SerializeToString,
                response_deserializer=bastionlab__pb2.SessionInfo.FromString,
                )
        self.RefreshSession = channel.unary_unary(
                '/bastionlab.BastionLab/RefreshSession',
                request_serializer=bastionlab__pb2.Empty.SerializeToString,
                response_deserializer=bastionlab__pb2.Empty.FromString,
                )


class BastionLabServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendDataFrame(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChallenge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchDataFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDataFrames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataFrameHeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BastionLabServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendDataFrame': grpc.stream_unary_rpc_method_handler(
                    servicer.SendDataFrame,
                    request_deserializer=bastionlab__pb2.SendChunk.FromString,
                    response_serializer=bastionlab__pb2.ReferenceResponse.SerializeToString,
            ),
            'RunQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.RunQuery,
                    request_deserializer=bastionlab__pb2.Query.FromString,
                    response_serializer=bastionlab__pb2.ReferenceResponse.SerializeToString,
            ),
            'GetChallenge': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChallenge,
                    request_deserializer=bastionlab__pb2.Empty.FromString,
                    response_serializer=bastionlab__pb2.ChallengeResponse.SerializeToString,
            ),
            'FetchDataFrame': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchDataFrame,
                    request_deserializer=bastionlab__pb2.ReferenceRequest.FromString,
                    response_serializer=bastionlab__pb2.FetchChunk.SerializeToString,
            ),
            'ListDataFrames': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDataFrames,
                    request_deserializer=bastionlab__pb2.Empty.FromString,
                    response_serializer=bastionlab__pb2.ReferenceList.SerializeToString,
            ),
            'GetDataFrameHeader': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataFrameHeader,
                    request_deserializer=bastionlab__pb2.ReferenceRequest.FromString,
                    response_serializer=bastionlab__pb2.ReferenceResponse.SerializeToString,
            ),
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=bastionlab__pb2.ClientInfo.FromString,
                    response_serializer=bastionlab__pb2.SessionInfo.SerializeToString,
            ),
            'RefreshSession': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshSession,
                    request_deserializer=bastionlab__pb2.Empty.FromString,
                    response_serializer=bastionlab__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bastionlab.BastionLab', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BastionLab(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendDataFrame(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/bastionlab.BastionLab/SendDataFrame',
            bastionlab__pb2.SendChunk.SerializeToString,
            bastionlab__pb2.ReferenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab.BastionLab/RunQuery',
            bastionlab__pb2.Query.SerializeToString,
            bastionlab__pb2.ReferenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChallenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab.BastionLab/GetChallenge',
            bastionlab__pb2.Empty.SerializeToString,
            bastionlab__pb2.ChallengeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchDataFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bastionlab.BastionLab/FetchDataFrame',
            bastionlab__pb2.ReferenceRequest.SerializeToString,
            bastionlab__pb2.FetchChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDataFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab.BastionLab/ListDataFrames',
            bastionlab__pb2.Empty.SerializeToString,
            bastionlab__pb2.ReferenceList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataFrameHeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab.BastionLab/GetDataFrameHeader',
            bastionlab__pb2.ReferenceRequest.SerializeToString,
            bastionlab__pb2.ReferenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab.BastionLab/CreateSession',
            bastionlab__pb2.ClientInfo.SerializeToString,
            bastionlab__pb2.SessionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefreshSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bastionlab.BastionLab/RefreshSession',
            bastionlab__pb2.Empty.SerializeToString,
            bastionlab__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
