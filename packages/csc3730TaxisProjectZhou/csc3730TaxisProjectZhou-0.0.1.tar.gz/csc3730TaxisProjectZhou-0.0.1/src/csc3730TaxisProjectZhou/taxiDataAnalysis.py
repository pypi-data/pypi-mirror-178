# -*- coding: utf-8 -*-
"""TaxiDataAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NHcdGwSuWPgNKQDghObcgT7dqqhKXpCz
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
#import tensorflow as tf
#from keras.models import Sequential
#from keras.layers import Dense
#from keras.optimizers import Adam
#from keras.wrappers.scikit_learn import KerasRegressor
from sklearn import model_selection
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.pipeline import Pipeline

taxi=sns.load_dataset("taxis")
taxi.head(15)

taxi.shape

taxi=taxi.drop(['fare','tip','total'],axis=1)

u=pd.unique(taxi[['pickup_zone','dropoff_zone']].values.ravel())
u=pd.Series(np.arange(len(u)),u)

taxi[['pickup_zoneId','dropoff_zoneId']]=taxi[['pickup_zone','dropoff_zone']].applymap(u.get)
uq=pd.unique(taxi[['pickup_borough','dropoff_borough']].values.ravel())
uq=pd.Series(np.arange(len(uq)),uq)
taxi[['pickup_boroughId','dropoff_boroughId']]=taxi[['pickup_borough','dropoff_borough']].applymap(uq.get)

u.head()

for i in taxi.columns[[0,1]]:
  taxi[i]=pd.to_datetime(taxi[i])

taxi['pickDay']=taxi['pickup'].dt.day_name()
taxi['dropDay']=taxi['dropoff'].dt.day_name()
taxi['pickDayId']=taxi['pickup'].dt.weekday
taxi['dropDayId']=taxi['dropoff'].dt.weekday
taxi['pickMonth']=taxi['pickup'].dt.month_name()
taxi['dropMonth']=taxi['dropoff'].dt.month_name()
taxi['pickMonthId']=taxi['pickup'].dt.month
taxi['dropMonthId']=taxi['dropoff'].dt.month
taxi['pickHour']=taxi['pickup'].dt.hour
taxi['dropHour']=taxi['dropoff'].dt.hour
taxi['pickMinute']=taxi['pickup'].dt.minute
taxi['dropMinute']=taxi['dropoff'].dt.minute

duration=taxi['dropoff']-taxi['pickup']
trip_duration=[]
for i in duration:
  trip_duration.append(i.total_seconds()/60)
taxi['trip_duration']=trip_duration

uc=pd.unique(taxi[['color']].values.ravel())
uc.shape

ut=pd.unique(taxi[['tolls']].values.ravel())
#print(ut)

taxiId=[]
for i in taxi['color']:
  if(i=='yellow'):
    taxiId.append(0)
  else:
    taxiId.append(1)
taxi['taxiId']=taxiId

taxi=taxi.drop(['pickup','dropoff','payment','pickup_zone','dropoff_zone'],axis=1)

taxi=taxi.drop(['pickDay','dropDay','pickMonth','dropMonth','dropDayId','dropMonthId','dropHour','dropMinute','pickup_borough','dropoff_borough','color'],axis=1)

taxi=taxi.drop(['passengers','pickDayId','pickMonthId','pickHour','pickMinute','taxiId'],axis=1)
taxi.head()

plt.figure(figsize=(18,10))
sns.heatmap(taxi.corr(),annot=True)

xDF=taxi.drop(['trip_duration'],axis=1)
yDF=taxi['trip_duration']
xDF.shape

x=xDF.values
y=yDF.values

#def taxi_model():
#  model=Sequential()
#  model.add(Dense(13,input_shape=(6,),kernel_initializer='normal',activation='relu'))
#  model.add(Dense(6,kernel_initializer='normal',activation='relu'))
#  model.add(Dense(1,kernel_initializer='normal'))
#  model.compile(loss='mean_squared_error',optimizer='adam')
#  return model

#estimators=[]
#estimators.append(('standardize',StandardScaler()))
#estimators.append(('mlp',KerasRegressor(build_fn=taxi_model,epochs=18,batch_size=5,verbose=0)))
#pipeline=Pipeline(estimators)
#kFolder=KFold(n_splits=10)
#results=cross_val_score(pipeline,x,y,cv=kFolder)
#print(results.mean(),results.std())

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import MinMaxScaler,PolynomialFeatures
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

#pipeline.fit(x_train,y_train)

#score=pipeline.score(x_test,y_test)
#print(score)

#t=np.array([[1,0,0,1,0,0]])
#t=t/np.linalg.norm(t)
#yp=pipeline.predict(np.array([[1,0,0,1,0,0]]))

#print(yp)

#from pickle import TRUE
from sklearn.linear_model import LinearRegression

lr=LinearRegression(fit_intercept=True)
lr.fit(x,y)
t=np.array([[1,0,0,1,0,0]])
#t=t/np.linalg.norm(t)
#t=t.reshape(1,-1)
lr.predict(t)

lr.score(x_test,y_test)

from sklearn.tree import DecisionTreeRegressor
treeRegressor=DecisionTreeRegressor(random_state=0)
treeRegressor.fit(x,y)

yPredict=treeRegressor.predict(x_test)
#print(yPredict[:10])
t=np.array([1,0,0,1,0,0])
#t=t/np.linalg.norm(t)
t=t.reshape(1,-1)
#print(t)
tryPre=treeRegressor.predict(t)
#print(tryPre)

treeRegressor.score(x_test,y_test)

def calDis(pZone,dZone,pBorough,dBorough):
  pZoneId=u.loc[pZone]
  dZoneId=u.loc[dZone]
  pBoroughId=uq.loc[pBorough]
  dBoroughId=uq.loc[dBorough]
  d=xDF.loc[(xDF['pickup_zoneId']==pZoneId)&(xDF['dropoff_zoneId']==dZoneId)&(xDF['pickup_boroughId']==pBoroughId)&(xDF['dropoff_boroughId']==dBoroughId),['distance']].mean()
  return d

def tripDuration(pZone,pBorough,dZone,dBorough):
  pZoneId=u.loc[pZone]
  dZoneId=u.loc[dZone]
  pBoroughId=uq.loc[pBorough]
  dBoroughId=uq.loc[dBorough]
  dis=calDis(pZone,dZone,pBorough,dBorough)
  toll=xDF.loc[(xDF['pickup_zoneId']==pZoneId)&(xDF['dropoff_zoneId']==dZoneId)&(xDF['pickup_boroughId']==pBoroughId)&(xDF['dropoff_boroughId']==dBoroughId),['tolls']].mean()
  tripInput=[]
  tripInput.append(dis)
  tripInput.append(toll)
  tripInput.append(pZoneId)
  tripInput.append(dZoneId)
  tripInput.append(pBoroughId)
  tripInput.append(dBoroughId)
  predictTime=treeRegressor.predict(np.array([tripInput]))
  return predictTime

tripDuration('Alphabet City','Manhattan','West Village','Manhattan')

