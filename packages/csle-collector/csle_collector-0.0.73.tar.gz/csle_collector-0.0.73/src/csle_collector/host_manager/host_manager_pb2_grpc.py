# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import csle_collector.host_manager.host_manager_pb2 as host__manager__pb2

class HostManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.stopHostMonitor = channel.unary_unary(
                '/HostManager/stopHostMonitor',
                request_serializer=host__manager__pb2.StopHostMonitorMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostMonitorDTO.FromString,
                )
        self.startHostMonitor = channel.unary_unary(
                '/HostManager/startHostMonitor',
                request_serializer=host__manager__pb2.StartHostMonitorMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostMonitorDTO.FromString,
                )
        self.getHostMonitorStatus = channel.unary_unary(
                '/HostManager/getHostMonitorStatus',
                request_serializer=host__manager__pb2.GetHostMonitorStatusMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostMonitorDTO.FromString,
                )
        self.getHostMetrics = channel.unary_unary(
                '/HostManager/getHostMetrics',
                request_serializer=host__manager__pb2.GetHostMetricsMsg.SerializeToString,
                response_deserializer=host__manager__pb2.HostMetricsDTO.FromString,
                )


class HostManagerServicer(object):
    """Interface exported by the server
    """

    def stopHostMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startHostMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHostMonitorStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHostMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HostManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'stopHostMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.stopHostMonitor,
                    request_deserializer=host__manager__pb2.StopHostMonitorMsg.FromString,
                    response_serializer=host__manager__pb2.HostMonitorDTO.SerializeToString,
            ),
            'startHostMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.startHostMonitor,
                    request_deserializer=host__manager__pb2.StartHostMonitorMsg.FromString,
                    response_serializer=host__manager__pb2.HostMonitorDTO.SerializeToString,
            ),
            'getHostMonitorStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getHostMonitorStatus,
                    request_deserializer=host__manager__pb2.GetHostMonitorStatusMsg.FromString,
                    response_serializer=host__manager__pb2.HostMonitorDTO.SerializeToString,
            ),
            'getHostMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.getHostMetrics,
                    request_deserializer=host__manager__pb2.GetHostMetricsMsg.FromString,
                    response_serializer=host__manager__pb2.HostMetricsDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'HostManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HostManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def stopHostMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/stopHostMonitor',
            host__manager__pb2.StopHostMonitorMsg.SerializeToString,
            host__manager__pb2.HostMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startHostMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/startHostMonitor',
            host__manager__pb2.StartHostMonitorMsg.SerializeToString,
            host__manager__pb2.HostMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHostMonitorStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/getHostMonitorStatus',
            host__manager__pb2.GetHostMonitorStatusMsg.SerializeToString,
            host__manager__pb2.HostMonitorDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHostMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HostManager/getHostMetrics',
            host__manager__pb2.GetHostMetricsMsg.SerializeToString,
            host__manager__pb2.HostMetricsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
