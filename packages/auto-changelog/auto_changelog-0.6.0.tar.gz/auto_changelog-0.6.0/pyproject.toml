[tool.poetry]
name = "auto-changelog"
version = "0.6.0"
description = "Simple tool to generate nice, formatted changelogs from vcs"
authors = ["Michael F Bryan <michaelfbryan@gmail.com>", "Ken Mijime <kenaco666@gmail.com>"]
license = "MIT"
readme = "README.rst"
repository = "https://github.com/Michael-F-Bryan/auto-changelog"
keywords = ['git', 'changelog']
classifiers = [
#    'Development Status :: 1 - Planning',
#    'Development Status :: 2 - Pre-Alpha',
#    'Development Status :: 3 - Alpha',
    'Development Status :: 4 - Beta',
#    'Development Status :: 5 - Production/Stable',

    # Indicate who your project is intended for
    'Intended Audience :: Developers',
    'Topic :: Software Development :: Build Tools',

    'Environment :: Console',
    'Operating System :: POSIX :: Linux',
    'Topic :: Software Development :: Documentation',

    # Pick your license as you wish (should match "license" above)
    'License :: OSI Approved :: MIT License',

    # The python versions actively being supported
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
]

include = ["auto_changelog/templates/*.jinja2"]

[tool.poetry.dependencies]
python = ">=3.7.2"
jinja2 = ">=3.0"
gitpython = ">=2.1"
docopt = ">=0.6.2"
Click = ">=8.0"

[tool.poetry.group.dev.dependencies]
pytest = "*"
black = {version = "*", allow-prereleases = true}
flake8 = "*"
pre-commit = "*"
tox = "*"
pylint = "*"
mypy = "*"

[tool.poetry.scripts]
auto-changelog = 'auto_changelog.__main__:main'

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.bandit]
exclude_dirs = ["tests"]

[tool.black]
line-length = 120
target-version = ['py37', 'py38', 'py39']

[tool.isort]
profile = "black"
line_length = 120

[tool.mypy]

[[tool.mypy.overrides]]
module="pytest"
ignore_missing_imports = true

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 120
disable = ["fixme", "missing-module-docstring", "missing-class-docstring", "missing-function-docstring",
    "no-else-return", "invalid-name", "unused-argument"]

[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist = True
envlist = py37, py38, py39

[travis]
python =
    3.8: py38
    3.7: py37
    3.6: py36

[testenv]
whitelist_externals = poetry
skip_install = true
setenv =
    PYTHONPATH = {toxinidir}
commands =
    poetry install -v
    poetry run pytest --basetemp={envtmpdir}
"""
