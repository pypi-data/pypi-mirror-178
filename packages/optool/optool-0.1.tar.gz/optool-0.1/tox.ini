# Tox configuration file
# Read more under https://tox.wiki/

[tox]
minversion = 3.24
envlist = default
isolated_build = True


[testenv]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
extras =
    testing
commands =
    pytest {posargs} --junitxml=junit.xml --cov-config=setup.cfg --cov-append --cov-report=xml --cov-report=term-missing --cov=optool


[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# https://setuptools.pypa.io/en/stable/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
passenv =
    SETUPTOOLS_*
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}


[testenv:{format-python,check-format}]
description =
    Format all Python files using YAPF.
    For options see https://pypi.org/project/yapf/
deps =
    yapf
    toml
commands =
    format-python: yapf --in-place --recursive --verbose setup.py src tests
    check-format: yapf --diff --recursive --verbose setup.py src tests


[testenv:{format,check}-imports]
description =
    Format and order the imports of all Python files isort.
    For options see https://github.com/PyCQA/isort
deps =
    isort
commands =
    format-imports: isort .
    check-imports: isort . -c -v


[testenv:check-style]
description =
    Enforce code style consistency via Flake8.
    For options see: https://flake8.pycqa.org/en/latest/user/invocation.html
deps =
    flake8
commands =
    flake8 -v --statistics src tests


[testenv:check-typing]
description =
    Static type checking using Mypy.
    For options see https://mypy.readthedocs.io/en/stable/config_file.html
deps =
    mypy
commands =
    mypy -p optool
    mypy tests


[testenv:{update,check,init}-babel]
description =
    Internationalizing and localizing
    For options see https://babel.pocoo.org/en/latest/index.html
setenv =
    LOCALES_DIR = {toxinidir}/locales
    POT_FILE_ORIG = {env:LOCALES_DIR}/messages.pot
    {update,init}-babel: POT_FILE = {env:LOCALES_DIR}/messages.pot
    check-babel: POT_FILE = {env:LOCALES_DIR}/messages_check.pot
    BABEL_EXTRACT_OPTS = -o {env:POT_FILE} src --omit-header
    BABEL_INIT_OPTS = -d {env:LOCALES_DIR} -i {env:POT_FILE_ORIG} -l
    BABEL_UPDATE_OPTS = -d {env:LOCALES_DIR} -i {env:POT_FILE_ORIG} --no-fuzzy-matching --omit-header --ignore-obsolete
    BABEL_COMPILE_OPTS = -d {env:LOCALES_DIR} --use-fuzzy --statistics
deps =
    babel
commands =
    pybabel extract {env:BABEL_EXTRACT_OPTS}
    init-babel: pybabel init {env:BABEL_INIT_OPTS} {posargs}
#   Check that file has not changed
    check-babel: python -c "import sys; import filecmp; sys.exit(not filecmp.cmp('{env:POT_FILE}', '{env:POT_FILE_ORIG}'))"
    check-babel: python -c "import os; os.remove('{env:POT_FILE}')"
#   Update translation
    pybabel update {env:BABEL_UPDATE_OPTS}
#   Compile binary translation file
    pybabel compile {env:BABEL_COMPILE_OPTS}
#   Check that all messages were translated (parse response)
    check-babel: python -c "import sys; import subprocess; import re; output = subprocess.getoutput('pybabel compile {env:BABEL_COMPILE_OPTS}'); numbers = re.compile('\d+(?=%\) translated)').findall(output); sys.exit(not (output.startswith('0 of 0') or all(num == '100' for num in numbers)))"


[testenv:format-docs]
description =
    Format the docstrings using docformatter.
    For options see https://github.com/PyCQA/docformatter
setenv =
    FORMATTER_OPTS = --in-place --recursive --wrap-summaries 120 --wrap-descriptions 120 --pre-summary-newline --make-summary-multi-line
deps =
    docformatter
commands =
    docformatter {env:FORMATTER_OPTS} src
    docformatter {env:FORMATTER_OPTS} tests


[testenv:{build-docs,doctests,linkcheck}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    build-docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    sphinx
    python-docs-theme
    sphinx-autodoc-typehints
commands =
    sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" -a -E "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}


[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_REPOSITORY_URL
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
