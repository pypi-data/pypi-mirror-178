# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class ProteinMetaData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            pdbs = schemas.IntSchema
            crystals = schemas.IntSchema
            samples = schemas.IntSchema
            datacollections = schemas.IntSchema
            __annotations__ = {
                "pdbs": pdbs,
                "crystals": crystals,
                "samples": samples,
                "datacollections": datacollections,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pdbs"]) -> MetaOapg.properties.pdbs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crystals"]) -> MetaOapg.properties.crystals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["samples"]) -> MetaOapg.properties.samples: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datacollections"]) -> MetaOapg.properties.datacollections: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pdbs", "crystals", "samples", "datacollections", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pdbs"]) -> typing.Union[MetaOapg.properties.pdbs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crystals"]) -> typing.Union[MetaOapg.properties.crystals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["samples"]) -> typing.Union[MetaOapg.properties.samples, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datacollections"]) -> typing.Union[MetaOapg.properties.datacollections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pdbs", "crystals", "samples", "datacollections", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        pdbs: typing.Union[MetaOapg.properties.pdbs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        crystals: typing.Union[MetaOapg.properties.crystals, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        samples: typing.Union[MetaOapg.properties.samples, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        datacollections: typing.Union[MetaOapg.properties.datacollections, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProteinMetaData':
        return super().__new__(
            cls,
            *args,
            pdbs=pdbs,
            crystals=crystals,
            samples=samples,
            datacollections=datacollections,
            _configuration=_configuration,
            **kwargs,
        )
