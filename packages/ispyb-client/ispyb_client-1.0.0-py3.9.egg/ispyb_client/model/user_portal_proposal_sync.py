# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class UserPortalProposalSync(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "proposal",
        }
        
        class properties:
        
            @staticmethod
            def proposal() -> typing.Type['UPProposal']:
                return UPProposal
            
            
            class sessions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UPSession']:
                        return UPSession
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UPSession'], typing.List['UPSession']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sessions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UPSession':
                    return super().__getitem__(i)
            
            
            class proteins(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UPProtein']:
                        return UPProtein
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UPProtein'], typing.List['UPProtein']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'proteins':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UPProtein':
                    return super().__getitem__(i)
            __annotations__ = {
                "proposal": proposal,
                "sessions": sessions,
                "proteins": proteins,
            }
    
    proposal: 'UPProposal'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposal"]) -> 'UPProposal': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessions"]) -> MetaOapg.properties.sessions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proteins"]) -> MetaOapg.properties.proteins: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["proposal", "sessions", "proteins", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposal"]) -> 'UPProposal': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessions"]) -> typing.Union[MetaOapg.properties.sessions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proteins"]) -> typing.Union[MetaOapg.properties.proteins, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["proposal", "sessions", "proteins", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        proposal: 'UPProposal',
        sessions: typing.Union[MetaOapg.properties.sessions, list, tuple, schemas.Unset] = schemas.unset,
        proteins: typing.Union[MetaOapg.properties.proteins, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserPortalProposalSync':
        return super().__new__(
            cls,
            *args,
            proposal=proposal,
            sessions=sessions,
            proteins=proteins,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.up_proposal import UPProposal
from ispyb_client.model.up_protein import UPProtein
from ispyb_client.model.up_session import UPSession
