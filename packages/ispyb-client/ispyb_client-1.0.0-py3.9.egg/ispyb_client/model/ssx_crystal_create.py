# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SSXCrystalCreate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "components",
            "protein",
        }
        
        class properties:
        
            @staticmethod
            def protein() -> typing.Type['SSXProteinCreate']:
                return SSXProteinCreate
            
            
            class components(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SSXSampleComponentCreate']:
                        return SSXSampleComponentCreate
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SSXSampleComponentCreate'], typing.List['SSXSampleComponentCreate']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'components':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SSXSampleComponentCreate':
                    return super().__getitem__(i)
            size_X = schemas.NumberSchema
            size_Y = schemas.NumberSchema
            size_Z = schemas.NumberSchema
            abundance = schemas.NumberSchema
            __annotations__ = {
                "protein": protein,
                "components": components,
                "size_X": size_X,
                "size_Y": size_Y,
                "size_Z": size_Z,
                "abundance": abundance,
            }
    
    components: MetaOapg.properties.components
    protein: 'SSXProteinCreate'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protein"]) -> 'SSXProteinCreate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["components"]) -> MetaOapg.properties.components: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_X"]) -> MetaOapg.properties.size_X: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_Y"]) -> MetaOapg.properties.size_Y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_Z"]) -> MetaOapg.properties.size_Z: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abundance"]) -> MetaOapg.properties.abundance: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["protein", "components", "size_X", "size_Y", "size_Z", "abundance", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protein"]) -> 'SSXProteinCreate': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["components"]) -> MetaOapg.properties.components: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_X"]) -> typing.Union[MetaOapg.properties.size_X, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_Y"]) -> typing.Union[MetaOapg.properties.size_Y, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_Z"]) -> typing.Union[MetaOapg.properties.size_Z, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abundance"]) -> typing.Union[MetaOapg.properties.abundance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["protein", "components", "size_X", "size_Y", "size_Z", "abundance", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        components: typing.Union[MetaOapg.properties.components, list, tuple, ],
        protein: 'SSXProteinCreate',
        size_X: typing.Union[MetaOapg.properties.size_X, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        size_Y: typing.Union[MetaOapg.properties.size_Y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        size_Z: typing.Union[MetaOapg.properties.size_Z, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        abundance: typing.Union[MetaOapg.properties.abundance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SSXCrystalCreate':
        return super().__new__(
            cls,
            *args,
            components=components,
            protein=protein,
            size_X=size_X,
            size_Y=size_Y,
            size_Z=size_Z,
            abundance=abundance,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.ssx_protein_create import SSXProteinCreate
from ispyb_client.model.ssx_sample_component_create import SSXSampleComponentCreate
