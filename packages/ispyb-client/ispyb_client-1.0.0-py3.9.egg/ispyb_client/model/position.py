# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Position(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "posX",
            "posY",
        }
        
        class properties:
            posX = schemas.IntSchema
            posY = schemas.IntSchema
            __annotations__ = {
                "posX": posX,
                "posY": posY,
            }
    
    posX: MetaOapg.properties.posX
    posY: MetaOapg.properties.posY
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["posX"]) -> MetaOapg.properties.posX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["posY"]) -> MetaOapg.properties.posY: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["posX", "posY", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["posX"]) -> MetaOapg.properties.posX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["posY"]) -> MetaOapg.properties.posY: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["posX", "posY", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        posX: typing.Union[MetaOapg.properties.posX, decimal.Decimal, int, ],
        posY: typing.Union[MetaOapg.properties.posY, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Position':
        return super().__new__(
            cls,
            *args,
            posX=posX,
            posY=posY,
            _configuration=_configuration,
            **kwargs,
        )
