# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SSXDataCollection(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dataCollectionId",
        }
        
        class properties:
            dataCollectionId = schemas.IntSchema
            repetitionRate = schemas.NumberSchema
            energyBandwidth = schemas.NumberSchema
            monoStripe = schemas.StrSchema
            jetSpeed = schemas.NumberSchema
            jetSize = schemas.NumberSchema
            chipPattern = schemas.StrSchema
            chipModel = schemas.StrSchema
            reactionDuration = schemas.NumberSchema
            laserEnergy = schemas.NumberSchema
            experimentName = schemas.StrSchema
            __annotations__ = {
                "dataCollectionId": dataCollectionId,
                "repetitionRate": repetitionRate,
                "energyBandwidth": energyBandwidth,
                "monoStripe": monoStripe,
                "jetSpeed": jetSpeed,
                "jetSize": jetSize,
                "chipPattern": chipPattern,
                "chipModel": chipModel,
                "reactionDuration": reactionDuration,
                "laserEnergy": laserEnergy,
                "experimentName": experimentName,
            }
    
    dataCollectionId: MetaOapg.properties.dataCollectionId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repetitionRate"]) -> MetaOapg.properties.repetitionRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energyBandwidth"]) -> MetaOapg.properties.energyBandwidth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monoStripe"]) -> MetaOapg.properties.monoStripe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jetSpeed"]) -> MetaOapg.properties.jetSpeed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jetSize"]) -> MetaOapg.properties.jetSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chipPattern"]) -> MetaOapg.properties.chipPattern: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chipModel"]) -> MetaOapg.properties.chipModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reactionDuration"]) -> MetaOapg.properties.reactionDuration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["laserEnergy"]) -> MetaOapg.properties.laserEnergy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["experimentName"]) -> MetaOapg.properties.experimentName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataCollectionId", "repetitionRate", "energyBandwidth", "monoStripe", "jetSpeed", "jetSize", "chipPattern", "chipModel", "reactionDuration", "laserEnergy", "experimentName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repetitionRate"]) -> typing.Union[MetaOapg.properties.repetitionRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energyBandwidth"]) -> typing.Union[MetaOapg.properties.energyBandwidth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monoStripe"]) -> typing.Union[MetaOapg.properties.monoStripe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jetSpeed"]) -> typing.Union[MetaOapg.properties.jetSpeed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jetSize"]) -> typing.Union[MetaOapg.properties.jetSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chipPattern"]) -> typing.Union[MetaOapg.properties.chipPattern, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chipModel"]) -> typing.Union[MetaOapg.properties.chipModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reactionDuration"]) -> typing.Union[MetaOapg.properties.reactionDuration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["laserEnergy"]) -> typing.Union[MetaOapg.properties.laserEnergy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["experimentName"]) -> typing.Union[MetaOapg.properties.experimentName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataCollectionId", "repetitionRate", "energyBandwidth", "monoStripe", "jetSpeed", "jetSize", "chipPattern", "chipModel", "reactionDuration", "laserEnergy", "experimentName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataCollectionId: typing.Union[MetaOapg.properties.dataCollectionId, decimal.Decimal, int, ],
        repetitionRate: typing.Union[MetaOapg.properties.repetitionRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        energyBandwidth: typing.Union[MetaOapg.properties.energyBandwidth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monoStripe: typing.Union[MetaOapg.properties.monoStripe, str, schemas.Unset] = schemas.unset,
        jetSpeed: typing.Union[MetaOapg.properties.jetSpeed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        jetSize: typing.Union[MetaOapg.properties.jetSize, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        chipPattern: typing.Union[MetaOapg.properties.chipPattern, str, schemas.Unset] = schemas.unset,
        chipModel: typing.Union[MetaOapg.properties.chipModel, str, schemas.Unset] = schemas.unset,
        reactionDuration: typing.Union[MetaOapg.properties.reactionDuration, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        laserEnergy: typing.Union[MetaOapg.properties.laserEnergy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        experimentName: typing.Union[MetaOapg.properties.experimentName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SSXDataCollection':
        return super().__new__(
            cls,
            *args,
            dataCollectionId=dataCollectionId,
            repetitionRate=repetitionRate,
            energyBandwidth=energyBandwidth,
            monoStripe=monoStripe,
            jetSpeed=jetSpeed,
            jetSize=jetSize,
            chipPattern=chipPattern,
            chipModel=chipModel,
            reactionDuration=reactionDuration,
            laserEnergy=laserEnergy,
            experimentName=experimentName,
            _configuration=_configuration,
            **kwargs,
        )
