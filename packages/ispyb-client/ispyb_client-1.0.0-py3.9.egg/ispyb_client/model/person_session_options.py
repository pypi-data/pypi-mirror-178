# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class PersonSessionOptions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class role(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Local Contact": "LOCAL_CONTACT",
                        "Local Contact 2": "LOCAL_CONTACT_2",
                        "Staff": "STAFF",
                        "Team Leader": "TEAM_LEADER",
                        "Co-Investigator": "COINVESTIGATOR",
                        "Principal Investigator": "PRINCIPAL_INVESTIGATOR",
                        "Alternate Contact": "ALTERNATE_CONTACT",
                    }
                
                @schemas.classproperty
                def LOCAL_CONTACT(cls):
                    return cls("Local Contact")
                
                @schemas.classproperty
                def LOCAL_CONTACT_2(cls):
                    return cls("Local Contact 2")
                
                @schemas.classproperty
                def STAFF(cls):
                    return cls("Staff")
                
                @schemas.classproperty
                def TEAM_LEADER(cls):
                    return cls("Team Leader")
                
                @schemas.classproperty
                def COINVESTIGATOR(cls):
                    return cls("Co-Investigator")
                
                @schemas.classproperty
                def PRINCIPAL_INVESTIGATOR(cls):
                    return cls("Principal Investigator")
                
                @schemas.classproperty
                def ALTERNATE_CONTACT(cls):
                    return cls("Alternate Contact")
            remote = schemas.IntSchema
            __annotations__ = {
                "role": role,
                "remote": remote,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote"]) -> MetaOapg.properties.remote: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["role", "remote", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> typing.Union[MetaOapg.properties.role, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote"]) -> typing.Union[MetaOapg.properties.remote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["role", "remote", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        role: typing.Union[MetaOapg.properties.role, str, schemas.Unset] = schemas.unset,
        remote: typing.Union[MetaOapg.properties.remote, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonSessionOptions':
        return super().__new__(
            cls,
            *args,
            role=role,
            remote=remote,
            _configuration=_configuration,
            **kwargs,
        )
