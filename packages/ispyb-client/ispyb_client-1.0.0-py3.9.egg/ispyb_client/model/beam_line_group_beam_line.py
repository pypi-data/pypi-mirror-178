# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class BeamLineGroupBeamLine(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "beamLineName",
        }
        
        class properties:
            beamLineName = schemas.StrSchema
            sampleChangerType = schemas.AnyTypeSchema
            sampleChangerCapacity = schemas.AnyTypeSchema
            archived = schemas.BoolSchema
            __annotations__ = {
                "beamLineName": beamLineName,
                "sampleChangerType": sampleChangerType,
                "sampleChangerCapacity": sampleChangerCapacity,
                "archived": archived,
            }
    
    beamLineName: MetaOapg.properties.beamLineName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLineName"]) -> MetaOapg.properties.beamLineName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampleChangerType"]) -> MetaOapg.properties.sampleChangerType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampleChangerCapacity"]) -> MetaOapg.properties.sampleChangerCapacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["beamLineName", "sampleChangerType", "sampleChangerCapacity", "archived", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLineName"]) -> MetaOapg.properties.beamLineName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampleChangerType"]) -> typing.Union[MetaOapg.properties.sampleChangerType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampleChangerCapacity"]) -> typing.Union[MetaOapg.properties.sampleChangerCapacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> typing.Union[MetaOapg.properties.archived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["beamLineName", "sampleChangerType", "sampleChangerCapacity", "archived", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        beamLineName: typing.Union[MetaOapg.properties.beamLineName, str, ],
        sampleChangerType: typing.Union[MetaOapg.properties.sampleChangerType, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        sampleChangerCapacity: typing.Union[MetaOapg.properties.sampleChangerCapacity, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        archived: typing.Union[MetaOapg.properties.archived, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BeamLineGroupBeamLine':
        return super().__new__(
            cls,
            *args,
            beamLineName=beamLineName,
            sampleChangerType=sampleChangerType,
            sampleChangerCapacity=sampleChangerCapacity,
            archived=archived,
            _configuration=_configuration,
            **kwargs,
        )
