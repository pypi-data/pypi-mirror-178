# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Laboratory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "laboratoryId",
        }
        
        class properties:
            laboratoryId = schemas.IntSchema
            name = schemas.StrSchema
            address = schemas.StrSchema
            city = schemas.StrSchema
            country = schemas.StrSchema
            url = schemas.AnyTypeSchema
            laboratoryExtPk = schemas.AnyTypeSchema
            recordTimeStamp = schemas.DateTimeSchema
            __annotations__ = {
                "laboratoryId": laboratoryId,
                "name": name,
                "address": address,
                "city": city,
                "country": country,
                "url": url,
                "laboratoryExtPk": laboratoryExtPk,
                "recordTimeStamp": recordTimeStamp,
            }
    
    laboratoryId: MetaOapg.properties.laboratoryId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["laboratoryId"]) -> MetaOapg.properties.laboratoryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["laboratoryExtPk"]) -> MetaOapg.properties.laboratoryExtPk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recordTimeStamp"]) -> MetaOapg.properties.recordTimeStamp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["laboratoryId", "name", "address", "city", "country", "url", "laboratoryExtPk", "recordTimeStamp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["laboratoryId"]) -> MetaOapg.properties.laboratoryId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["laboratoryExtPk"]) -> typing.Union[MetaOapg.properties.laboratoryExtPk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recordTimeStamp"]) -> typing.Union[MetaOapg.properties.recordTimeStamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["laboratoryId", "name", "address", "city", "country", "url", "laboratoryExtPk", "recordTimeStamp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        laboratoryId: typing.Union[MetaOapg.properties.laboratoryId, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        laboratoryExtPk: typing.Union[MetaOapg.properties.laboratoryExtPk, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        recordTimeStamp: typing.Union[MetaOapg.properties.recordTimeStamp, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Laboratory':
        return super().__new__(
            cls,
            *args,
            laboratoryId=laboratoryId,
            name=name,
            address=address,
            city=city,
            country=country,
            url=url,
            laboratoryExtPk=laboratoryExtPk,
            recordTimeStamp=recordTimeStamp,
            _configuration=_configuration,
            **kwargs,
        )
