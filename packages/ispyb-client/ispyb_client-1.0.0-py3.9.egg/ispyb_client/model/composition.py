# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Composition(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "Component",
        }
        
        class properties:
        
            @staticmethod
            def Component() -> typing.Type['Component']:
                return Component
            abundance = schemas.NumberSchema
            ratio = schemas.NumberSchema
            ph = schemas.NumberSchema
            __annotations__ = {
                "Component": Component,
                "abundance": abundance,
                "ratio": ratio,
                "ph": ph,
            }
    
    Component: 'Component'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Component"]) -> 'Component': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abundance"]) -> MetaOapg.properties.abundance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratio"]) -> MetaOapg.properties.ratio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ph"]) -> MetaOapg.properties.ph: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Component", "abundance", "ratio", "ph", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Component"]) -> 'Component': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abundance"]) -> typing.Union[MetaOapg.properties.abundance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratio"]) -> typing.Union[MetaOapg.properties.ratio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ph"]) -> typing.Union[MetaOapg.properties.ph, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Component", "abundance", "ratio", "ph", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Component: 'Component',
        abundance: typing.Union[MetaOapg.properties.abundance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ratio: typing.Union[MetaOapg.properties.ratio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        ph: typing.Union[MetaOapg.properties.ph, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Composition':
        return super().__new__(
            cls,
            *args,
            Component=Component,
            abundance=abundance,
            ratio=ratio,
            ph=ph,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.component import Component
