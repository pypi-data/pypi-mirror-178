# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class UPProtein(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "acronym",
            "person",
            "containmentLevel",
            "hazardGroup",
        }
        
        class properties:
            acronym = schemas.StrSchema
            hazardGroup = schemas.IntSchema
            containmentLevel = schemas.IntSchema
        
            @staticmethod
            def person() -> typing.Type['PersonProposalLaboratory']:
                return PersonProposalLaboratory
            name = schemas.StrSchema
            description = schemas.StrSchema
            safetyLevel = schemas.StrSchema
            molecularMass = schemas.NumberSchema
            proteinType = schemas.StrSchema
            sequence = schemas.StrSchema
            isCreatedBySampleSheet = schemas.IntSchema
            externalId = schemas.IntSchema
            componentTypeId = schemas.IntSchema
            modId = schemas.StrSchema
            concentrationTypeId = schemas.IntSchema
            __annotations__ = {
                "acronym": acronym,
                "hazardGroup": hazardGroup,
                "containmentLevel": containmentLevel,
                "person": person,
                "name": name,
                "description": description,
                "safetyLevel": safetyLevel,
                "molecularMass": molecularMass,
                "proteinType": proteinType,
                "sequence": sequence,
                "isCreatedBySampleSheet": isCreatedBySampleSheet,
                "externalId": externalId,
                "componentTypeId": componentTypeId,
                "modId": modId,
                "concentrationTypeId": concentrationTypeId,
            }
    
    acronym: MetaOapg.properties.acronym
    person: 'PersonProposalLaboratory'
    containmentLevel: MetaOapg.properties.containmentLevel
    hazardGroup: MetaOapg.properties.hazardGroup
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acronym"]) -> MetaOapg.properties.acronym: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hazardGroup"]) -> MetaOapg.properties.hazardGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containmentLevel"]) -> MetaOapg.properties.containmentLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["person"]) -> 'PersonProposalLaboratory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safetyLevel"]) -> MetaOapg.properties.safetyLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["molecularMass"]) -> MetaOapg.properties.molecularMass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proteinType"]) -> MetaOapg.properties.proteinType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequence"]) -> MetaOapg.properties.sequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCreatedBySampleSheet"]) -> MetaOapg.properties.isCreatedBySampleSheet: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalId"]) -> MetaOapg.properties.externalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["componentTypeId"]) -> MetaOapg.properties.componentTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modId"]) -> MetaOapg.properties.modId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["concentrationTypeId"]) -> MetaOapg.properties.concentrationTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["acronym", "hazardGroup", "containmentLevel", "person", "name", "description", "safetyLevel", "molecularMass", "proteinType", "sequence", "isCreatedBySampleSheet", "externalId", "componentTypeId", "modId", "concentrationTypeId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acronym"]) -> MetaOapg.properties.acronym: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hazardGroup"]) -> MetaOapg.properties.hazardGroup: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containmentLevel"]) -> MetaOapg.properties.containmentLevel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["person"]) -> 'PersonProposalLaboratory': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safetyLevel"]) -> typing.Union[MetaOapg.properties.safetyLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["molecularMass"]) -> typing.Union[MetaOapg.properties.molecularMass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proteinType"]) -> typing.Union[MetaOapg.properties.proteinType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequence"]) -> typing.Union[MetaOapg.properties.sequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCreatedBySampleSheet"]) -> typing.Union[MetaOapg.properties.isCreatedBySampleSheet, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalId"]) -> typing.Union[MetaOapg.properties.externalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["componentTypeId"]) -> typing.Union[MetaOapg.properties.componentTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modId"]) -> typing.Union[MetaOapg.properties.modId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["concentrationTypeId"]) -> typing.Union[MetaOapg.properties.concentrationTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["acronym", "hazardGroup", "containmentLevel", "person", "name", "description", "safetyLevel", "molecularMass", "proteinType", "sequence", "isCreatedBySampleSheet", "externalId", "componentTypeId", "modId", "concentrationTypeId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        acronym: typing.Union[MetaOapg.properties.acronym, str, ],
        person: 'PersonProposalLaboratory',
        containmentLevel: typing.Union[MetaOapg.properties.containmentLevel, decimal.Decimal, int, ],
        hazardGroup: typing.Union[MetaOapg.properties.hazardGroup, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        safetyLevel: typing.Union[MetaOapg.properties.safetyLevel, str, schemas.Unset] = schemas.unset,
        molecularMass: typing.Union[MetaOapg.properties.molecularMass, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        proteinType: typing.Union[MetaOapg.properties.proteinType, str, schemas.Unset] = schemas.unset,
        sequence: typing.Union[MetaOapg.properties.sequence, str, schemas.Unset] = schemas.unset,
        isCreatedBySampleSheet: typing.Union[MetaOapg.properties.isCreatedBySampleSheet, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        externalId: typing.Union[MetaOapg.properties.externalId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        componentTypeId: typing.Union[MetaOapg.properties.componentTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        modId: typing.Union[MetaOapg.properties.modId, str, schemas.Unset] = schemas.unset,
        concentrationTypeId: typing.Union[MetaOapg.properties.concentrationTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UPProtein':
        return super().__new__(
            cls,
            *args,
            acronym=acronym,
            person=person,
            containmentLevel=containmentLevel,
            hazardGroup=hazardGroup,
            name=name,
            description=description,
            safetyLevel=safetyLevel,
            molecularMass=molecularMass,
            proteinType=proteinType,
            sequence=sequence,
            isCreatedBySampleSheet=isCreatedBySampleSheet,
            externalId=externalId,
            componentTypeId=componentTypeId,
            modId=modId,
            concentrationTypeId=concentrationTypeId,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.person_proposal_laboratory import PersonProposalLaboratory
