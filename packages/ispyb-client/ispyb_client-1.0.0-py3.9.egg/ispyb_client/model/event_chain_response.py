# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class EventChainResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dataCollectionId",
            "eventChainId",
            "events",
        }
        
        class properties:
            eventChainId = schemas.IntSchema
            dataCollectionId = schemas.IntSchema
            
            
            class events(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EventResponse']:
                        return EventResponse
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EventResponse'], typing.List['EventResponse']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'events':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EventResponse':
                    return super().__getitem__(i)
            name = schemas.StrSchema
            __annotations__ = {
                "eventChainId": eventChainId,
                "dataCollectionId": dataCollectionId,
                "events": events,
                "name": name,
            }
    
    dataCollectionId: MetaOapg.properties.dataCollectionId
    eventChainId: MetaOapg.properties.eventChainId
    events: MetaOapg.properties.events
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventChainId"]) -> MetaOapg.properties.eventChainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["eventChainId", "dataCollectionId", "events", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventChainId"]) -> MetaOapg.properties.eventChainId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["eventChainId", "dataCollectionId", "events", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataCollectionId: typing.Union[MetaOapg.properties.dataCollectionId, decimal.Decimal, int, ],
        eventChainId: typing.Union[MetaOapg.properties.eventChainId, decimal.Decimal, int, ],
        events: typing.Union[MetaOapg.properties.events, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventChainResponse':
        return super().__new__(
            cls,
            *args,
            dataCollectionId=dataCollectionId,
            eventChainId=eventChainId,
            events=events,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.event_response import EventResponse
