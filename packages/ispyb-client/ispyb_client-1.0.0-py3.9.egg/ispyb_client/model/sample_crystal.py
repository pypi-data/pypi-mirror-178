# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SampleCrystal(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "proteinId",
            "crystalId",
            "Protein",
        }
        
        class properties:
            
            
            class Protein(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            SampleProtein,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Protein':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            crystalId = schemas.IntSchema
            proteinId = schemas.IntSchema
            cell_a = schemas.AnyTypeSchema
            cell_b = schemas.AnyTypeSchema
            cell_c = schemas.AnyTypeSchema
            cell_alpha = schemas.AnyTypeSchema
            cell_beta = schemas.AnyTypeSchema
            cell_gamma = schemas.AnyTypeSchema
            size_X = schemas.NumberSchema
            size_Y = schemas.NumberSchema
            size_Z = schemas.NumberSchema
            abundance = schemas.NumberSchema
            
            
            class crystal_compositions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Composition']:
                        return Composition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Composition'], typing.List['Composition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'crystal_compositions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Composition':
                    return super().__getitem__(i)
            __annotations__ = {
                "Protein": Protein,
                "crystalId": crystalId,
                "proteinId": proteinId,
                "cell_a": cell_a,
                "cell_b": cell_b,
                "cell_c": cell_c,
                "cell_alpha": cell_alpha,
                "cell_beta": cell_beta,
                "cell_gamma": cell_gamma,
                "size_X": size_X,
                "size_Y": size_Y,
                "size_Z": size_Z,
                "abundance": abundance,
                "crystal_compositions": crystal_compositions,
            }
    
    proteinId: MetaOapg.properties.proteinId
    crystalId: MetaOapg.properties.crystalId
    Protein: MetaOapg.properties.Protein
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Protein"]) -> MetaOapg.properties.Protein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crystalId"]) -> MetaOapg.properties.crystalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proteinId"]) -> MetaOapg.properties.proteinId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cell_a"]) -> MetaOapg.properties.cell_a: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cell_b"]) -> MetaOapg.properties.cell_b: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cell_c"]) -> MetaOapg.properties.cell_c: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cell_alpha"]) -> MetaOapg.properties.cell_alpha: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cell_beta"]) -> MetaOapg.properties.cell_beta: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cell_gamma"]) -> MetaOapg.properties.cell_gamma: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_X"]) -> MetaOapg.properties.size_X: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_Y"]) -> MetaOapg.properties.size_Y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_Z"]) -> MetaOapg.properties.size_Z: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abundance"]) -> MetaOapg.properties.abundance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crystal_compositions"]) -> MetaOapg.properties.crystal_compositions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Protein", "crystalId", "proteinId", "cell_a", "cell_b", "cell_c", "cell_alpha", "cell_beta", "cell_gamma", "size_X", "size_Y", "size_Z", "abundance", "crystal_compositions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Protein"]) -> MetaOapg.properties.Protein: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crystalId"]) -> MetaOapg.properties.crystalId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proteinId"]) -> MetaOapg.properties.proteinId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cell_a"]) -> typing.Union[MetaOapg.properties.cell_a, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cell_b"]) -> typing.Union[MetaOapg.properties.cell_b, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cell_c"]) -> typing.Union[MetaOapg.properties.cell_c, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cell_alpha"]) -> typing.Union[MetaOapg.properties.cell_alpha, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cell_beta"]) -> typing.Union[MetaOapg.properties.cell_beta, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cell_gamma"]) -> typing.Union[MetaOapg.properties.cell_gamma, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_X"]) -> typing.Union[MetaOapg.properties.size_X, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_Y"]) -> typing.Union[MetaOapg.properties.size_Y, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_Z"]) -> typing.Union[MetaOapg.properties.size_Z, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abundance"]) -> typing.Union[MetaOapg.properties.abundance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crystal_compositions"]) -> typing.Union[MetaOapg.properties.crystal_compositions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Protein", "crystalId", "proteinId", "cell_a", "cell_b", "cell_c", "cell_alpha", "cell_beta", "cell_gamma", "size_X", "size_Y", "size_Z", "abundance", "crystal_compositions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        proteinId: typing.Union[MetaOapg.properties.proteinId, decimal.Decimal, int, ],
        crystalId: typing.Union[MetaOapg.properties.crystalId, decimal.Decimal, int, ],
        Protein: typing.Union[MetaOapg.properties.Protein, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        cell_a: typing.Union[MetaOapg.properties.cell_a, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cell_b: typing.Union[MetaOapg.properties.cell_b, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cell_c: typing.Union[MetaOapg.properties.cell_c, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cell_alpha: typing.Union[MetaOapg.properties.cell_alpha, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cell_beta: typing.Union[MetaOapg.properties.cell_beta, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        cell_gamma: typing.Union[MetaOapg.properties.cell_gamma, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        size_X: typing.Union[MetaOapg.properties.size_X, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        size_Y: typing.Union[MetaOapg.properties.size_Y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        size_Z: typing.Union[MetaOapg.properties.size_Z, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        abundance: typing.Union[MetaOapg.properties.abundance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        crystal_compositions: typing.Union[MetaOapg.properties.crystal_compositions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SampleCrystal':
        return super().__new__(
            cls,
            *args,
            proteinId=proteinId,
            crystalId=crystalId,
            Protein=Protein,
            cell_a=cell_a,
            cell_b=cell_b,
            cell_c=cell_c,
            cell_alpha=cell_alpha,
            cell_beta=cell_beta,
            cell_gamma=cell_gamma,
            size_X=size_X,
            size_Y=size_Y,
            size_Z=size_Z,
            abundance=abundance,
            crystal_compositions=crystal_compositions,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.composition import Composition
from ispyb_client.model.sample_protein import SampleProtein
