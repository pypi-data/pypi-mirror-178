# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class EventResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "eventId",
            "eventTypeId",
            "offset",
            "EventType",
            "eventChainId",
        }
        
        class properties:
            eventId = schemas.IntSchema
            eventChainId = schemas.IntSchema
            eventTypeId = schemas.IntSchema
            offset = schemas.NumberSchema
        
            @staticmethod
            def EventType() -> typing.Type['PydanticMainEventType']:
                return PydanticMainEventType
            componentId = schemas.IntSchema
            name = schemas.StrSchema
            duration = schemas.NumberSchema
            period = schemas.NumberSchema
            repetition = schemas.NumberSchema
            __annotations__ = {
                "eventId": eventId,
                "eventChainId": eventChainId,
                "eventTypeId": eventTypeId,
                "offset": offset,
                "EventType": EventType,
                "componentId": componentId,
                "name": name,
                "duration": duration,
                "period": period,
                "repetition": repetition,
            }
    
    eventId: MetaOapg.properties.eventId
    eventTypeId: MetaOapg.properties.eventTypeId
    offset: MetaOapg.properties.offset
    EventType: 'PydanticMainEventType'
    eventChainId: MetaOapg.properties.eventChainId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventId"]) -> MetaOapg.properties.eventId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventChainId"]) -> MetaOapg.properties.eventChainId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventTypeId"]) -> MetaOapg.properties.eventTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offset"]) -> MetaOapg.properties.offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EventType"]) -> 'PydanticMainEventType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["componentId"]) -> MetaOapg.properties.componentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repetition"]) -> MetaOapg.properties.repetition: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["eventId", "eventChainId", "eventTypeId", "offset", "EventType", "componentId", "name", "duration", "period", "repetition", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventId"]) -> MetaOapg.properties.eventId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventChainId"]) -> MetaOapg.properties.eventChainId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventTypeId"]) -> MetaOapg.properties.eventTypeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offset"]) -> MetaOapg.properties.offset: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EventType"]) -> 'PydanticMainEventType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["componentId"]) -> typing.Union[MetaOapg.properties.componentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period"]) -> typing.Union[MetaOapg.properties.period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repetition"]) -> typing.Union[MetaOapg.properties.repetition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["eventId", "eventChainId", "eventTypeId", "offset", "EventType", "componentId", "name", "duration", "period", "repetition", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        eventId: typing.Union[MetaOapg.properties.eventId, decimal.Decimal, int, ],
        eventTypeId: typing.Union[MetaOapg.properties.eventTypeId, decimal.Decimal, int, ],
        offset: typing.Union[MetaOapg.properties.offset, decimal.Decimal, int, float, ],
        EventType: 'PydanticMainEventType',
        eventChainId: typing.Union[MetaOapg.properties.eventChainId, decimal.Decimal, int, ],
        componentId: typing.Union[MetaOapg.properties.componentId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        period: typing.Union[MetaOapg.properties.period, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        repetition: typing.Union[MetaOapg.properties.repetition, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventResponse':
        return super().__new__(
            cls,
            *args,
            eventId=eventId,
            eventTypeId=eventTypeId,
            offset=offset,
            EventType=EventType,
            eventChainId=eventChainId,
            componentId=componentId,
            name=name,
            duration=duration,
            period=period,
            repetition=repetition,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.pydantic_main_event_type import PydanticMainEventType
