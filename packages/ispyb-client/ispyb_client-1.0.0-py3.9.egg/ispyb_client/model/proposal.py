# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Proposal(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "proposal",
            "proposalCode",
            "proposalNumber",
            "_metadata",
            "proposalId",
        }
        
        class properties:
            proposalCode = schemas.StrSchema
            proposalNumber = schemas.StrSchema
            proposal = schemas.StrSchema
        
            @staticmethod
            def _metadata() -> typing.Type['ProposalMetaData']:
                return ProposalMetaData
            proposalId = schemas.IntSchema
            title = schemas.StrSchema
            
            
            class state(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            ProposalState,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "proposalCode": proposalCode,
                "proposalNumber": proposalNumber,
                "proposal": proposal,
                "_metadata": _metadata,
                "proposalId": proposalId,
                "title": title,
                "state": state,
            }
    
    proposal: MetaOapg.properties.proposal
    proposalCode: MetaOapg.properties.proposalCode
    proposalNumber: MetaOapg.properties.proposalNumber
    _metadata: 'ProposalMetaData'
    proposalId: MetaOapg.properties.proposalId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposalCode"]) -> MetaOapg.properties.proposalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposalNumber"]) -> MetaOapg.properties.proposalNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposal"]) -> MetaOapg.properties.proposal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_metadata"]) -> 'ProposalMetaData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposalId"]) -> MetaOapg.properties.proposalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["proposalCode", "proposalNumber", "proposal", "_metadata", "proposalId", "title", "state", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposalCode"]) -> MetaOapg.properties.proposalCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposalNumber"]) -> MetaOapg.properties.proposalNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposal"]) -> MetaOapg.properties.proposal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_metadata"]) -> 'ProposalMetaData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposalId"]) -> MetaOapg.properties.proposalId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["proposalCode", "proposalNumber", "proposal", "_metadata", "proposalId", "title", "state", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        proposal: typing.Union[MetaOapg.properties.proposal, str, ],
        proposalCode: typing.Union[MetaOapg.properties.proposalCode, str, ],
        proposalNumber: typing.Union[MetaOapg.properties.proposalNumber, str, ],
        _metadata: 'ProposalMetaData',
        proposalId: typing.Union[MetaOapg.properties.proposalId, decimal.Decimal, int, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Proposal':
        return super().__new__(
            cls,
            *args,
            proposal=proposal,
            proposalCode=proposalCode,
            proposalNumber=proposalNumber,
            _metadata=_metadata,
            proposalId=proposalId,
            title=title,
            state=state,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.proposal_meta_data import ProposalMetaData
from ispyb_client.model.proposal_state import ProposalState
