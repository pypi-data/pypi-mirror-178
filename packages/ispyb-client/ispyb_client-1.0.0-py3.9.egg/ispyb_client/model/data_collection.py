# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class DataCollection(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dataCollectionId",
            "DataCollectionGroup",
            "_metadata",
        }
        
        class properties:
            dataCollectionId = schemas.IntSchema
        
            @staticmethod
            def DataCollectionGroup() -> typing.Type['DataCollectionGroup']:
                return DataCollectionGroup
        
            @staticmethod
            def _metadata() -> typing.Type['DataCollectionMetaData']:
                return DataCollectionMetaData
            runStatus = schemas.StrSchema
            imageDirectory = schemas.StrSchema
            fileTemplate = schemas.StrSchema
            imageContainerSubPath = schemas.StrSchema
            numberOfImages = schemas.IntSchema
            wavelength = schemas.NumberSchema
            exposureTime = schemas.NumberSchema
            flux = schemas.NumberSchema
            xBeam = schemas.NumberSchema
            yBeam = schemas.NumberSchema
            beamSizeAtSampleX = schemas.NumberSchema
            beamSizeAtSampleY = schemas.NumberSchema
            transmission = schemas.NumberSchema
            resolution = schemas.NumberSchema
            detectorDistance = schemas.NumberSchema
            axisStart = schemas.NumberSchema
            axisEnd = schemas.NumberSchema
            axisRange = schemas.NumberSchema
            rotationAxis = schemas.StrSchema
            overlap = schemas.NumberSchema
            phiStart = schemas.NumberSchema
            kappaStart = schemas.NumberSchema
            omegaStart = schemas.NumberSchema
            chiStart = schemas.NumberSchema
            xBeamPix = schemas.NumberSchema
            yBeamPix = schemas.NumberSchema
            undulatorGap1 = schemas.NumberSchema
            undulatorGap2 = schemas.NumberSchema
            undulatorGap3 = schemas.NumberSchema
            beamShape = schemas.StrSchema
            polarisation = schemas.NumberSchema
            imagePrefix = schemas.StrSchema
            magnification = schemas.IntSchema
            binning = schemas.IntSchema
            particleDiameter = schemas.NumberSchema
            defocusStepSize = schemas.NumberSchema
            amountAstigmatism = schemas.NumberSchema
            voltage = schemas.NumberSchema
            objAperture = schemas.NumberSchema
            
            
            class GridInfo(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GridInfo']:
                        return GridInfo
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['GridInfo'], typing.List['GridInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'GridInfo':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GridInfo':
                    return super().__getitem__(i)
        
            @staticmethod
            def SSXDataCollection() -> typing.Type['SSXDataCollection']:
                return SSXDataCollection
        
            @staticmethod
            def Detector() -> typing.Type['Detector']:
                return Detector
            __annotations__ = {
                "dataCollectionId": dataCollectionId,
                "DataCollectionGroup": DataCollectionGroup,
                "_metadata": _metadata,
                "runStatus": runStatus,
                "imageDirectory": imageDirectory,
                "fileTemplate": fileTemplate,
                "imageContainerSubPath": imageContainerSubPath,
                "numberOfImages": numberOfImages,
                "wavelength": wavelength,
                "exposureTime": exposureTime,
                "flux": flux,
                "xBeam": xBeam,
                "yBeam": yBeam,
                "beamSizeAtSampleX": beamSizeAtSampleX,
                "beamSizeAtSampleY": beamSizeAtSampleY,
                "transmission": transmission,
                "resolution": resolution,
                "detectorDistance": detectorDistance,
                "axisStart": axisStart,
                "axisEnd": axisEnd,
                "axisRange": axisRange,
                "rotationAxis": rotationAxis,
                "overlap": overlap,
                "phiStart": phiStart,
                "kappaStart": kappaStart,
                "omegaStart": omegaStart,
                "chiStart": chiStart,
                "xBeamPix": xBeamPix,
                "yBeamPix": yBeamPix,
                "undulatorGap1": undulatorGap1,
                "undulatorGap2": undulatorGap2,
                "undulatorGap3": undulatorGap3,
                "beamShape": beamShape,
                "polarisation": polarisation,
                "imagePrefix": imagePrefix,
                "magnification": magnification,
                "binning": binning,
                "particleDiameter": particleDiameter,
                "defocusStepSize": defocusStepSize,
                "amountAstigmatism": amountAstigmatism,
                "voltage": voltage,
                "objAperture": objAperture,
                "GridInfo": GridInfo,
                "SSXDataCollection": SSXDataCollection,
                "Detector": Detector,
            }
    
    dataCollectionId: MetaOapg.properties.dataCollectionId
    DataCollectionGroup: 'DataCollectionGroup'
    _metadata: 'DataCollectionMetaData'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DataCollectionGroup"]) -> 'DataCollectionGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_metadata"]) -> 'DataCollectionMetaData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runStatus"]) -> MetaOapg.properties.runStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imageDirectory"]) -> MetaOapg.properties.imageDirectory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileTemplate"]) -> MetaOapg.properties.fileTemplate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imageContainerSubPath"]) -> MetaOapg.properties.imageContainerSubPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfImages"]) -> MetaOapg.properties.numberOfImages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wavelength"]) -> MetaOapg.properties.wavelength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exposureTime"]) -> MetaOapg.properties.exposureTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flux"]) -> MetaOapg.properties.flux: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xBeam"]) -> MetaOapg.properties.xBeam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yBeam"]) -> MetaOapg.properties.yBeam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamSizeAtSampleX"]) -> MetaOapg.properties.beamSizeAtSampleX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamSizeAtSampleY"]) -> MetaOapg.properties.beamSizeAtSampleY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transmission"]) -> MetaOapg.properties.transmission: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolution"]) -> MetaOapg.properties.resolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorDistance"]) -> MetaOapg.properties.detectorDistance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["axisStart"]) -> MetaOapg.properties.axisStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["axisEnd"]) -> MetaOapg.properties.axisEnd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["axisRange"]) -> MetaOapg.properties.axisRange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rotationAxis"]) -> MetaOapg.properties.rotationAxis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overlap"]) -> MetaOapg.properties.overlap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phiStart"]) -> MetaOapg.properties.phiStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kappaStart"]) -> MetaOapg.properties.kappaStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["omegaStart"]) -> MetaOapg.properties.omegaStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chiStart"]) -> MetaOapg.properties.chiStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xBeamPix"]) -> MetaOapg.properties.xBeamPix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yBeamPix"]) -> MetaOapg.properties.yBeamPix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["undulatorGap1"]) -> MetaOapg.properties.undulatorGap1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["undulatorGap2"]) -> MetaOapg.properties.undulatorGap2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["undulatorGap3"]) -> MetaOapg.properties.undulatorGap3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamShape"]) -> MetaOapg.properties.beamShape: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["polarisation"]) -> MetaOapg.properties.polarisation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imagePrefix"]) -> MetaOapg.properties.imagePrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["magnification"]) -> MetaOapg.properties.magnification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["binning"]) -> MetaOapg.properties.binning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["particleDiameter"]) -> MetaOapg.properties.particleDiameter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defocusStepSize"]) -> MetaOapg.properties.defocusStepSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountAstigmatism"]) -> MetaOapg.properties.amountAstigmatism: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voltage"]) -> MetaOapg.properties.voltage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objAperture"]) -> MetaOapg.properties.objAperture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GridInfo"]) -> MetaOapg.properties.GridInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SSXDataCollection"]) -> 'SSXDataCollection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Detector"]) -> 'Detector': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataCollectionId", "DataCollectionGroup", "_metadata", "runStatus", "imageDirectory", "fileTemplate", "imageContainerSubPath", "numberOfImages", "wavelength", "exposureTime", "flux", "xBeam", "yBeam", "beamSizeAtSampleX", "beamSizeAtSampleY", "transmission", "resolution", "detectorDistance", "axisStart", "axisEnd", "axisRange", "rotationAxis", "overlap", "phiStart", "kappaStart", "omegaStart", "chiStart", "xBeamPix", "yBeamPix", "undulatorGap1", "undulatorGap2", "undulatorGap3", "beamShape", "polarisation", "imagePrefix", "magnification", "binning", "particleDiameter", "defocusStepSize", "amountAstigmatism", "voltage", "objAperture", "GridInfo", "SSXDataCollection", "Detector", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DataCollectionGroup"]) -> 'DataCollectionGroup': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_metadata"]) -> 'DataCollectionMetaData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runStatus"]) -> typing.Union[MetaOapg.properties.runStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imageDirectory"]) -> typing.Union[MetaOapg.properties.imageDirectory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileTemplate"]) -> typing.Union[MetaOapg.properties.fileTemplate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imageContainerSubPath"]) -> typing.Union[MetaOapg.properties.imageContainerSubPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfImages"]) -> typing.Union[MetaOapg.properties.numberOfImages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wavelength"]) -> typing.Union[MetaOapg.properties.wavelength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exposureTime"]) -> typing.Union[MetaOapg.properties.exposureTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flux"]) -> typing.Union[MetaOapg.properties.flux, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xBeam"]) -> typing.Union[MetaOapg.properties.xBeam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yBeam"]) -> typing.Union[MetaOapg.properties.yBeam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamSizeAtSampleX"]) -> typing.Union[MetaOapg.properties.beamSizeAtSampleX, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamSizeAtSampleY"]) -> typing.Union[MetaOapg.properties.beamSizeAtSampleY, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transmission"]) -> typing.Union[MetaOapg.properties.transmission, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolution"]) -> typing.Union[MetaOapg.properties.resolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorDistance"]) -> typing.Union[MetaOapg.properties.detectorDistance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["axisStart"]) -> typing.Union[MetaOapg.properties.axisStart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["axisEnd"]) -> typing.Union[MetaOapg.properties.axisEnd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["axisRange"]) -> typing.Union[MetaOapg.properties.axisRange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rotationAxis"]) -> typing.Union[MetaOapg.properties.rotationAxis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overlap"]) -> typing.Union[MetaOapg.properties.overlap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phiStart"]) -> typing.Union[MetaOapg.properties.phiStart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kappaStart"]) -> typing.Union[MetaOapg.properties.kappaStart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["omegaStart"]) -> typing.Union[MetaOapg.properties.omegaStart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chiStart"]) -> typing.Union[MetaOapg.properties.chiStart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xBeamPix"]) -> typing.Union[MetaOapg.properties.xBeamPix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yBeamPix"]) -> typing.Union[MetaOapg.properties.yBeamPix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["undulatorGap1"]) -> typing.Union[MetaOapg.properties.undulatorGap1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["undulatorGap2"]) -> typing.Union[MetaOapg.properties.undulatorGap2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["undulatorGap3"]) -> typing.Union[MetaOapg.properties.undulatorGap3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamShape"]) -> typing.Union[MetaOapg.properties.beamShape, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["polarisation"]) -> typing.Union[MetaOapg.properties.polarisation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imagePrefix"]) -> typing.Union[MetaOapg.properties.imagePrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["magnification"]) -> typing.Union[MetaOapg.properties.magnification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["binning"]) -> typing.Union[MetaOapg.properties.binning, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["particleDiameter"]) -> typing.Union[MetaOapg.properties.particleDiameter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defocusStepSize"]) -> typing.Union[MetaOapg.properties.defocusStepSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountAstigmatism"]) -> typing.Union[MetaOapg.properties.amountAstigmatism, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voltage"]) -> typing.Union[MetaOapg.properties.voltage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objAperture"]) -> typing.Union[MetaOapg.properties.objAperture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GridInfo"]) -> typing.Union[MetaOapg.properties.GridInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SSXDataCollection"]) -> typing.Union['SSXDataCollection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Detector"]) -> typing.Union['Detector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataCollectionId", "DataCollectionGroup", "_metadata", "runStatus", "imageDirectory", "fileTemplate", "imageContainerSubPath", "numberOfImages", "wavelength", "exposureTime", "flux", "xBeam", "yBeam", "beamSizeAtSampleX", "beamSizeAtSampleY", "transmission", "resolution", "detectorDistance", "axisStart", "axisEnd", "axisRange", "rotationAxis", "overlap", "phiStart", "kappaStart", "omegaStart", "chiStart", "xBeamPix", "yBeamPix", "undulatorGap1", "undulatorGap2", "undulatorGap3", "beamShape", "polarisation", "imagePrefix", "magnification", "binning", "particleDiameter", "defocusStepSize", "amountAstigmatism", "voltage", "objAperture", "GridInfo", "SSXDataCollection", "Detector", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataCollectionId: typing.Union[MetaOapg.properties.dataCollectionId, decimal.Decimal, int, ],
        DataCollectionGroup: 'DataCollectionGroup',
        _metadata: 'DataCollectionMetaData',
        runStatus: typing.Union[MetaOapg.properties.runStatus, str, schemas.Unset] = schemas.unset,
        imageDirectory: typing.Union[MetaOapg.properties.imageDirectory, str, schemas.Unset] = schemas.unset,
        fileTemplate: typing.Union[MetaOapg.properties.fileTemplate, str, schemas.Unset] = schemas.unset,
        imageContainerSubPath: typing.Union[MetaOapg.properties.imageContainerSubPath, str, schemas.Unset] = schemas.unset,
        numberOfImages: typing.Union[MetaOapg.properties.numberOfImages, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wavelength: typing.Union[MetaOapg.properties.wavelength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        exposureTime: typing.Union[MetaOapg.properties.exposureTime, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        flux: typing.Union[MetaOapg.properties.flux, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        xBeam: typing.Union[MetaOapg.properties.xBeam, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yBeam: typing.Union[MetaOapg.properties.yBeam, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        beamSizeAtSampleX: typing.Union[MetaOapg.properties.beamSizeAtSampleX, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        beamSizeAtSampleY: typing.Union[MetaOapg.properties.beamSizeAtSampleY, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        transmission: typing.Union[MetaOapg.properties.transmission, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        resolution: typing.Union[MetaOapg.properties.resolution, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        detectorDistance: typing.Union[MetaOapg.properties.detectorDistance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        axisStart: typing.Union[MetaOapg.properties.axisStart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        axisEnd: typing.Union[MetaOapg.properties.axisEnd, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        axisRange: typing.Union[MetaOapg.properties.axisRange, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rotationAxis: typing.Union[MetaOapg.properties.rotationAxis, str, schemas.Unset] = schemas.unset,
        overlap: typing.Union[MetaOapg.properties.overlap, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        phiStart: typing.Union[MetaOapg.properties.phiStart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        kappaStart: typing.Union[MetaOapg.properties.kappaStart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        omegaStart: typing.Union[MetaOapg.properties.omegaStart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        chiStart: typing.Union[MetaOapg.properties.chiStart, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        xBeamPix: typing.Union[MetaOapg.properties.xBeamPix, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yBeamPix: typing.Union[MetaOapg.properties.yBeamPix, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        undulatorGap1: typing.Union[MetaOapg.properties.undulatorGap1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        undulatorGap2: typing.Union[MetaOapg.properties.undulatorGap2, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        undulatorGap3: typing.Union[MetaOapg.properties.undulatorGap3, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        beamShape: typing.Union[MetaOapg.properties.beamShape, str, schemas.Unset] = schemas.unset,
        polarisation: typing.Union[MetaOapg.properties.polarisation, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        imagePrefix: typing.Union[MetaOapg.properties.imagePrefix, str, schemas.Unset] = schemas.unset,
        magnification: typing.Union[MetaOapg.properties.magnification, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        binning: typing.Union[MetaOapg.properties.binning, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        particleDiameter: typing.Union[MetaOapg.properties.particleDiameter, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        defocusStepSize: typing.Union[MetaOapg.properties.defocusStepSize, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountAstigmatism: typing.Union[MetaOapg.properties.amountAstigmatism, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        voltage: typing.Union[MetaOapg.properties.voltage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        objAperture: typing.Union[MetaOapg.properties.objAperture, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        GridInfo: typing.Union[MetaOapg.properties.GridInfo, list, tuple, schemas.Unset] = schemas.unset,
        SSXDataCollection: typing.Union['SSXDataCollection', schemas.Unset] = schemas.unset,
        Detector: typing.Union['Detector', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataCollection':
        return super().__new__(
            cls,
            *args,
            dataCollectionId=dataCollectionId,
            DataCollectionGroup=DataCollectionGroup,
            _metadata=_metadata,
            runStatus=runStatus,
            imageDirectory=imageDirectory,
            fileTemplate=fileTemplate,
            imageContainerSubPath=imageContainerSubPath,
            numberOfImages=numberOfImages,
            wavelength=wavelength,
            exposureTime=exposureTime,
            flux=flux,
            xBeam=xBeam,
            yBeam=yBeam,
            beamSizeAtSampleX=beamSizeAtSampleX,
            beamSizeAtSampleY=beamSizeAtSampleY,
            transmission=transmission,
            resolution=resolution,
            detectorDistance=detectorDistance,
            axisStart=axisStart,
            axisEnd=axisEnd,
            axisRange=axisRange,
            rotationAxis=rotationAxis,
            overlap=overlap,
            phiStart=phiStart,
            kappaStart=kappaStart,
            omegaStart=omegaStart,
            chiStart=chiStart,
            xBeamPix=xBeamPix,
            yBeamPix=yBeamPix,
            undulatorGap1=undulatorGap1,
            undulatorGap2=undulatorGap2,
            undulatorGap3=undulatorGap3,
            beamShape=beamShape,
            polarisation=polarisation,
            imagePrefix=imagePrefix,
            magnification=magnification,
            binning=binning,
            particleDiameter=particleDiameter,
            defocusStepSize=defocusStepSize,
            amountAstigmatism=amountAstigmatism,
            voltage=voltage,
            objAperture=objAperture,
            GridInfo=GridInfo,
            SSXDataCollection=SSXDataCollection,
            Detector=Detector,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.data_collection_group import DataCollectionGroup
from ispyb_client.model.data_collection_meta_data import DataCollectionMetaData
from ispyb_client.model.detector import Detector
from ispyb_client.model.grid_info import GridInfo
from ispyb_client.model.ssx_data_collection import SSXDataCollection
