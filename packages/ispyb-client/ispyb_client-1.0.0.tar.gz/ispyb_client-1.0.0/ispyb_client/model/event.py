# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Event(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "proposal",
            "Item",
            "count",
            "id",
            "sessionId",
            "type",
        }
        
        class properties:
            id = schemas.IntSchema
            type = schemas.StrSchema
            count = schemas.IntSchema
            sessionId = schemas.IntSchema
            proposal = schemas.StrSchema
            
            
            class Item(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            DataCollection,
                            RobotAction,
                            XFEFluorescenceSpectrum,
                            EnergyScan,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Item':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            startTime = schemas.DateTimeSchema
            endTime = schemas.DateTimeSchema
            duration = schemas.NumberSchema
            session = schemas.StrSchema
            blSample = schemas.StrSchema
            blSampleId = schemas.IntSchema
            attachments = schemas.IntSchema
            __annotations__ = {
                "id": id,
                "type": type,
                "count": count,
                "sessionId": sessionId,
                "proposal": proposal,
                "Item": Item,
                "startTime": startTime,
                "endTime": endTime,
                "duration": duration,
                "session": session,
                "blSample": blSample,
                "blSampleId": blSampleId,
                "attachments": attachments,
            }
    
    proposal: MetaOapg.properties.proposal
    Item: MetaOapg.properties.Item
    count: MetaOapg.properties.count
    id: MetaOapg.properties.id
    sessionId: MetaOapg.properties.sessionId
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposal"]) -> MetaOapg.properties.proposal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Item"]) -> MetaOapg.properties.Item: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endTime"]) -> MetaOapg.properties.endTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session"]) -> MetaOapg.properties.session: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blSample"]) -> MetaOapg.properties.blSample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blSampleId"]) -> MetaOapg.properties.blSampleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachments"]) -> MetaOapg.properties.attachments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "count", "sessionId", "proposal", "Item", "startTime", "endTime", "duration", "session", "blSample", "blSampleId", "attachments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposal"]) -> MetaOapg.properties.proposal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Item"]) -> MetaOapg.properties.Item: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> typing.Union[MetaOapg.properties.startTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endTime"]) -> typing.Union[MetaOapg.properties.endTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session"]) -> typing.Union[MetaOapg.properties.session, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blSample"]) -> typing.Union[MetaOapg.properties.blSample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blSampleId"]) -> typing.Union[MetaOapg.properties.blSampleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachments"]) -> typing.Union[MetaOapg.properties.attachments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "count", "sessionId", "proposal", "Item", "startTime", "endTime", "duration", "session", "blSample", "blSampleId", "attachments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        proposal: typing.Union[MetaOapg.properties.proposal, str, ],
        Item: typing.Union[MetaOapg.properties.Item, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        sessionId: typing.Union[MetaOapg.properties.sessionId, decimal.Decimal, int, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        startTime: typing.Union[MetaOapg.properties.startTime, str, datetime, schemas.Unset] = schemas.unset,
        endTime: typing.Union[MetaOapg.properties.endTime, str, datetime, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        session: typing.Union[MetaOapg.properties.session, str, schemas.Unset] = schemas.unset,
        blSample: typing.Union[MetaOapg.properties.blSample, str, schemas.Unset] = schemas.unset,
        blSampleId: typing.Union[MetaOapg.properties.blSampleId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attachments: typing.Union[MetaOapg.properties.attachments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Event':
        return super().__new__(
            cls,
            *args,
            proposal=proposal,
            Item=Item,
            count=count,
            id=id,
            sessionId=sessionId,
            type=type,
            startTime=startTime,
            endTime=endTime,
            duration=duration,
            session=session,
            blSample=blSample,
            blSampleId=blSampleId,
            attachments=attachments,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.data_collection import DataCollection
from ispyb_client.model.energy_scan import EnergyScan
from ispyb_client.model.robot_action import RobotAction
from ispyb_client.model.xfe_fluorescence_spectrum import XFEFluorescenceSpectrum
