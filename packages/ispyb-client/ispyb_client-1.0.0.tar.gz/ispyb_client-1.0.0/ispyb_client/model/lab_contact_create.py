# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class LabContactCreate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "cardName",
            "Person",
            "proposalId",
        }
        
        class properties:
            proposalId = schemas.IntSchema
            cardName = schemas.StrSchema
            
            
            class Person(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            PersonCreate,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Person':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            defaultCourrierCompany = schemas.AnyTypeSchema
            courierAccount = schemas.AnyTypeSchema
            billingReference = schemas.AnyTypeSchema
            dewarAvgCustomsValue = schemas.IntSchema
            dewarAvgTransportValue = schemas.IntSchema
            __annotations__ = {
                "proposalId": proposalId,
                "cardName": cardName,
                "Person": Person,
                "defaultCourrierCompany": defaultCourrierCompany,
                "courierAccount": courierAccount,
                "billingReference": billingReference,
                "dewarAvgCustomsValue": dewarAvgCustomsValue,
                "dewarAvgTransportValue": dewarAvgTransportValue,
            }
    
    cardName: MetaOapg.properties.cardName
    Person: MetaOapg.properties.Person
    proposalId: MetaOapg.properties.proposalId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposalId"]) -> MetaOapg.properties.proposalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardName"]) -> MetaOapg.properties.cardName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Person"]) -> MetaOapg.properties.Person: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultCourrierCompany"]) -> MetaOapg.properties.defaultCourrierCompany: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courierAccount"]) -> MetaOapg.properties.courierAccount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingReference"]) -> MetaOapg.properties.billingReference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dewarAvgCustomsValue"]) -> MetaOapg.properties.dewarAvgCustomsValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dewarAvgTransportValue"]) -> MetaOapg.properties.dewarAvgTransportValue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["proposalId", "cardName", "Person", "defaultCourrierCompany", "courierAccount", "billingReference", "dewarAvgCustomsValue", "dewarAvgTransportValue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposalId"]) -> MetaOapg.properties.proposalId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardName"]) -> MetaOapg.properties.cardName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Person"]) -> MetaOapg.properties.Person: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultCourrierCompany"]) -> typing.Union[MetaOapg.properties.defaultCourrierCompany, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courierAccount"]) -> typing.Union[MetaOapg.properties.courierAccount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingReference"]) -> typing.Union[MetaOapg.properties.billingReference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dewarAvgCustomsValue"]) -> typing.Union[MetaOapg.properties.dewarAvgCustomsValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dewarAvgTransportValue"]) -> typing.Union[MetaOapg.properties.dewarAvgTransportValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["proposalId", "cardName", "Person", "defaultCourrierCompany", "courierAccount", "billingReference", "dewarAvgCustomsValue", "dewarAvgTransportValue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cardName: typing.Union[MetaOapg.properties.cardName, str, ],
        Person: typing.Union[MetaOapg.properties.Person, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        proposalId: typing.Union[MetaOapg.properties.proposalId, decimal.Decimal, int, ],
        defaultCourrierCompany: typing.Union[MetaOapg.properties.defaultCourrierCompany, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        courierAccount: typing.Union[MetaOapg.properties.courierAccount, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        billingReference: typing.Union[MetaOapg.properties.billingReference, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        dewarAvgCustomsValue: typing.Union[MetaOapg.properties.dewarAvgCustomsValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dewarAvgTransportValue: typing.Union[MetaOapg.properties.dewarAvgTransportValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LabContactCreate':
        return super().__new__(
            cls,
            *args,
            cardName=cardName,
            Person=Person,
            proposalId=proposalId,
            defaultCourrierCompany=defaultCourrierCompany,
            courierAccount=courierAccount,
            billingReference=billingReference,
            dewarAvgCustomsValue=dewarAvgCustomsValue,
            dewarAvgTransportValue=dewarAvgTransportValue,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.person_create import PersonCreate
