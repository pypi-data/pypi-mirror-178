# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class GridInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "gridInfoId",
        }
        
        class properties:
            gridInfoId = schemas.IntSchema
            xOffset = schemas.NumberSchema
            yOffset = schemas.NumberSchema
            dx_mm = schemas.NumberSchema
            dy_mm = schemas.NumberSchema
            steps_x = schemas.NumberSchema
            steps_y = schemas.NumberSchema
            meshAngle = schemas.NumberSchema
            orientation = schemas.StrSchema
            pixelsPerMicronX = schemas.NumberSchema
            pixelsPerMicronY = schemas.NumberSchema
            snapshot_offsetXPixel = schemas.NumberSchema
            snapshot_offsetYPixel = schemas.NumberSchema
            snaked = schemas.BoolSchema
            __annotations__ = {
                "gridInfoId": gridInfoId,
                "xOffset": xOffset,
                "yOffset": yOffset,
                "dx_mm": dx_mm,
                "dy_mm": dy_mm,
                "steps_x": steps_x,
                "steps_y": steps_y,
                "meshAngle": meshAngle,
                "orientation": orientation,
                "pixelsPerMicronX": pixelsPerMicronX,
                "pixelsPerMicronY": pixelsPerMicronY,
                "snapshot_offsetXPixel": snapshot_offsetXPixel,
                "snapshot_offsetYPixel": snapshot_offsetYPixel,
                "snaked": snaked,
            }
    
    gridInfoId: MetaOapg.properties.gridInfoId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gridInfoId"]) -> MetaOapg.properties.gridInfoId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xOffset"]) -> MetaOapg.properties.xOffset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yOffset"]) -> MetaOapg.properties.yOffset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dx_mm"]) -> MetaOapg.properties.dx_mm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dy_mm"]) -> MetaOapg.properties.dy_mm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["steps_x"]) -> MetaOapg.properties.steps_x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["steps_y"]) -> MetaOapg.properties.steps_y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meshAngle"]) -> MetaOapg.properties.meshAngle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orientation"]) -> MetaOapg.properties.orientation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pixelsPerMicronX"]) -> MetaOapg.properties.pixelsPerMicronX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pixelsPerMicronY"]) -> MetaOapg.properties.pixelsPerMicronY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshot_offsetXPixel"]) -> MetaOapg.properties.snapshot_offsetXPixel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snapshot_offsetYPixel"]) -> MetaOapg.properties.snapshot_offsetYPixel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snaked"]) -> MetaOapg.properties.snaked: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gridInfoId", "xOffset", "yOffset", "dx_mm", "dy_mm", "steps_x", "steps_y", "meshAngle", "orientation", "pixelsPerMicronX", "pixelsPerMicronY", "snapshot_offsetXPixel", "snapshot_offsetYPixel", "snaked", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gridInfoId"]) -> MetaOapg.properties.gridInfoId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xOffset"]) -> typing.Union[MetaOapg.properties.xOffset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yOffset"]) -> typing.Union[MetaOapg.properties.yOffset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dx_mm"]) -> typing.Union[MetaOapg.properties.dx_mm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dy_mm"]) -> typing.Union[MetaOapg.properties.dy_mm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["steps_x"]) -> typing.Union[MetaOapg.properties.steps_x, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["steps_y"]) -> typing.Union[MetaOapg.properties.steps_y, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meshAngle"]) -> typing.Union[MetaOapg.properties.meshAngle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orientation"]) -> typing.Union[MetaOapg.properties.orientation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pixelsPerMicronX"]) -> typing.Union[MetaOapg.properties.pixelsPerMicronX, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pixelsPerMicronY"]) -> typing.Union[MetaOapg.properties.pixelsPerMicronY, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshot_offsetXPixel"]) -> typing.Union[MetaOapg.properties.snapshot_offsetXPixel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snapshot_offsetYPixel"]) -> typing.Union[MetaOapg.properties.snapshot_offsetYPixel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snaked"]) -> typing.Union[MetaOapg.properties.snaked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gridInfoId", "xOffset", "yOffset", "dx_mm", "dy_mm", "steps_x", "steps_y", "meshAngle", "orientation", "pixelsPerMicronX", "pixelsPerMicronY", "snapshot_offsetXPixel", "snapshot_offsetYPixel", "snaked", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        gridInfoId: typing.Union[MetaOapg.properties.gridInfoId, decimal.Decimal, int, ],
        xOffset: typing.Union[MetaOapg.properties.xOffset, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yOffset: typing.Union[MetaOapg.properties.yOffset, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dx_mm: typing.Union[MetaOapg.properties.dx_mm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dy_mm: typing.Union[MetaOapg.properties.dy_mm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        steps_x: typing.Union[MetaOapg.properties.steps_x, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        steps_y: typing.Union[MetaOapg.properties.steps_y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        meshAngle: typing.Union[MetaOapg.properties.meshAngle, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        orientation: typing.Union[MetaOapg.properties.orientation, str, schemas.Unset] = schemas.unset,
        pixelsPerMicronX: typing.Union[MetaOapg.properties.pixelsPerMicronX, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pixelsPerMicronY: typing.Union[MetaOapg.properties.pixelsPerMicronY, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        snapshot_offsetXPixel: typing.Union[MetaOapg.properties.snapshot_offsetXPixel, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        snapshot_offsetYPixel: typing.Union[MetaOapg.properties.snapshot_offsetYPixel, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        snaked: typing.Union[MetaOapg.properties.snaked, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GridInfo':
        return super().__new__(
            cls,
            *args,
            gridInfoId=gridInfoId,
            xOffset=xOffset,
            yOffset=yOffset,
            dx_mm=dx_mm,
            dy_mm=dy_mm,
            steps_x=steps_x,
            steps_y=steps_y,
            meshAngle=meshAngle,
            orientation=orientation,
            pixelsPerMicronX=pixelsPerMicronX,
            pixelsPerMicronY=pixelsPerMicronY,
            snapshot_offsetXPixel=snapshot_offsetXPixel,
            snapshot_offsetYPixel=snapshot_offsetYPixel,
            snaked=snaked,
            _configuration=_configuration,
            **kwargs,
        )
