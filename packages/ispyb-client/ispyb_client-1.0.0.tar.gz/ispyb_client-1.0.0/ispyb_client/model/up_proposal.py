# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class UPProposal(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "proposalCode",
            "persons",
            "proposalNumber",
        }
        
        class properties:
            proposalCode = schemas.StrSchema
            proposalNumber = schemas.StrSchema
            
            
            class persons(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    
                    @staticmethod
                    def items() -> typing.Type['PersonProposalLaboratory']:
                        return PersonProposalLaboratory
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PersonProposalLaboratory'], typing.List['PersonProposalLaboratory']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'persons':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PersonProposalLaboratory':
                    return super().__getitem__(i)
            title = schemas.StrSchema
            proposalType = schemas.StrSchema
            externalId = schemas.IntSchema
            state = schemas.StrSchema
            
            
            class labcontacts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UPLabContact']:
                        return UPLabContact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UPLabContact'], typing.List['UPLabContact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labcontacts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UPLabContact':
                    return super().__getitem__(i)
            __annotations__ = {
                "proposalCode": proposalCode,
                "proposalNumber": proposalNumber,
                "persons": persons,
                "title": title,
                "proposalType": proposalType,
                "externalId": externalId,
                "state": state,
                "labcontacts": labcontacts,
            }
    
    proposalCode: MetaOapg.properties.proposalCode
    persons: MetaOapg.properties.persons
    proposalNumber: MetaOapg.properties.proposalNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposalCode"]) -> MetaOapg.properties.proposalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposalNumber"]) -> MetaOapg.properties.proposalNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persons"]) -> MetaOapg.properties.persons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposalType"]) -> MetaOapg.properties.proposalType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalId"]) -> MetaOapg.properties.externalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labcontacts"]) -> MetaOapg.properties.labcontacts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["proposalCode", "proposalNumber", "persons", "title", "proposalType", "externalId", "state", "labcontacts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposalCode"]) -> MetaOapg.properties.proposalCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposalNumber"]) -> MetaOapg.properties.proposalNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persons"]) -> MetaOapg.properties.persons: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposalType"]) -> typing.Union[MetaOapg.properties.proposalType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalId"]) -> typing.Union[MetaOapg.properties.externalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labcontacts"]) -> typing.Union[MetaOapg.properties.labcontacts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["proposalCode", "proposalNumber", "persons", "title", "proposalType", "externalId", "state", "labcontacts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        proposalCode: typing.Union[MetaOapg.properties.proposalCode, str, ],
        persons: typing.Union[MetaOapg.properties.persons, list, tuple, ],
        proposalNumber: typing.Union[MetaOapg.properties.proposalNumber, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        proposalType: typing.Union[MetaOapg.properties.proposalType, str, schemas.Unset] = schemas.unset,
        externalId: typing.Union[MetaOapg.properties.externalId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        labcontacts: typing.Union[MetaOapg.properties.labcontacts, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UPProposal':
        return super().__new__(
            cls,
            *args,
            proposalCode=proposalCode,
            persons=persons,
            proposalNumber=proposalNumber,
            title=title,
            proposalType=proposalType,
            externalId=externalId,
            state=state,
            labcontacts=labcontacts,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.person_proposal_laboratory import PersonProposalLaboratory
from ispyb_client.model.up_lab_contact import UPLabContact
