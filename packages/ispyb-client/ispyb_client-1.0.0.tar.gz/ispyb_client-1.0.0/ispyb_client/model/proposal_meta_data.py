# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class ProposalMetaData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "persons",
            "sessions",
            "beamLines",
        }
        
        class properties:
            persons = schemas.IntSchema
            sessions = schemas.IntSchema
            
            
            class beamLines(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'beamLines':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class uiGroups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uiGroups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "persons": persons,
                "sessions": sessions,
                "beamLines": beamLines,
                "uiGroups": uiGroups,
            }
    
    persons: MetaOapg.properties.persons
    sessions: MetaOapg.properties.sessions
    beamLines: MetaOapg.properties.beamLines
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persons"]) -> MetaOapg.properties.persons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessions"]) -> MetaOapg.properties.sessions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLines"]) -> MetaOapg.properties.beamLines: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uiGroups"]) -> MetaOapg.properties.uiGroups: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["persons", "sessions", "beamLines", "uiGroups", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persons"]) -> MetaOapg.properties.persons: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessions"]) -> MetaOapg.properties.sessions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLines"]) -> MetaOapg.properties.beamLines: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uiGroups"]) -> typing.Union[MetaOapg.properties.uiGroups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["persons", "sessions", "beamLines", "uiGroups", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        persons: typing.Union[MetaOapg.properties.persons, decimal.Decimal, int, ],
        sessions: typing.Union[MetaOapg.properties.sessions, decimal.Decimal, int, ],
        beamLines: typing.Union[MetaOapg.properties.beamLines, list, tuple, ],
        uiGroups: typing.Union[MetaOapg.properties.uiGroups, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProposalMetaData':
        return super().__new__(
            cls,
            *args,
            persons=persons,
            sessions=sessions,
            beamLines=beamLines,
            uiGroups=uiGroups,
            _configuration=_configuration,
            **kwargs,
        )
