# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SSXDataCollectionProcessingCreate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "results",
        }
        
        class properties:
            
            
            class results(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'results':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            processingCommandLine = schemas.StrSchema
            processingPrograms = schemas.StrSchema
            processingMessage = schemas.StrSchema
            processingStartTime = schemas.DateTimeSchema
            processingEndTime = schemas.DateTimeSchema
            processingEnvironment = schemas.StrSchema
            __annotations__ = {
                "results": results,
                "processingCommandLine": processingCommandLine,
                "processingPrograms": processingPrograms,
                "processingMessage": processingMessage,
                "processingStartTime": processingStartTime,
                "processingEndTime": processingEndTime,
                "processingEnvironment": processingEnvironment,
            }
    
    results: MetaOapg.properties.results
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["results"]) -> MetaOapg.properties.results: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processingCommandLine"]) -> MetaOapg.properties.processingCommandLine: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processingPrograms"]) -> MetaOapg.properties.processingPrograms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processingMessage"]) -> MetaOapg.properties.processingMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processingStartTime"]) -> MetaOapg.properties.processingStartTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processingEndTime"]) -> MetaOapg.properties.processingEndTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processingEnvironment"]) -> MetaOapg.properties.processingEnvironment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["results", "processingCommandLine", "processingPrograms", "processingMessage", "processingStartTime", "processingEndTime", "processingEnvironment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["results"]) -> MetaOapg.properties.results: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processingCommandLine"]) -> typing.Union[MetaOapg.properties.processingCommandLine, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processingPrograms"]) -> typing.Union[MetaOapg.properties.processingPrograms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processingMessage"]) -> typing.Union[MetaOapg.properties.processingMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processingStartTime"]) -> typing.Union[MetaOapg.properties.processingStartTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processingEndTime"]) -> typing.Union[MetaOapg.properties.processingEndTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processingEnvironment"]) -> typing.Union[MetaOapg.properties.processingEnvironment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["results", "processingCommandLine", "processingPrograms", "processingMessage", "processingStartTime", "processingEndTime", "processingEnvironment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        results: typing.Union[MetaOapg.properties.results, list, tuple, ],
        processingCommandLine: typing.Union[MetaOapg.properties.processingCommandLine, str, schemas.Unset] = schemas.unset,
        processingPrograms: typing.Union[MetaOapg.properties.processingPrograms, str, schemas.Unset] = schemas.unset,
        processingMessage: typing.Union[MetaOapg.properties.processingMessage, str, schemas.Unset] = schemas.unset,
        processingStartTime: typing.Union[MetaOapg.properties.processingStartTime, str, datetime, schemas.Unset] = schemas.unset,
        processingEndTime: typing.Union[MetaOapg.properties.processingEndTime, str, datetime, schemas.Unset] = schemas.unset,
        processingEnvironment: typing.Union[MetaOapg.properties.processingEnvironment, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SSXDataCollectionProcessingCreate':
        return super().__new__(
            cls,
            *args,
            results=results,
            processingCommandLine=processingCommandLine,
            processingPrograms=processingPrograms,
            processingMessage=processingMessage,
            processingStartTime=processingStartTime,
            processingEndTime=processingEndTime,
            processingEnvironment=processingEnvironment,
            _configuration=_configuration,
            **kwargs,
        )
