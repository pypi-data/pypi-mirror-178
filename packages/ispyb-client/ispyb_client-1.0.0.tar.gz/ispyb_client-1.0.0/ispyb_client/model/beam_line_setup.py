# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class BeamLineSetup(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "beamLineSetupId",
            "recordTimeStamp",
        }
        
        class properties:
            beamLineSetupId = schemas.IntSchema
            recordTimeStamp = schemas.DateTimeSchema
            synchrotronMode = schemas.StrSchema
            undulatorType1 = schemas.StrSchema
            undulatorType2 = schemas.StrSchema
            undulatorType3 = schemas.StrSchema
            focalSpotSizeAtSample = schemas.NumberSchema
            focusingOptic = schemas.StrSchema
            beamDivergenceHorizontal = schemas.NumberSchema
            beamDivergenceVertical = schemas.NumberSchema
            polarisation = schemas.NumberSchema
            monochromatorType = schemas.StrSchema
            setupDate = schemas.DateTimeSchema
            synchrotronName = schemas.StrSchema
            maxExpTimePerDataCollection = schemas.NumberSchema
            minExposureTimePerImage = schemas.NumberSchema
            goniostatMaxOscillationSpeed = schemas.NumberSchema
            goniostatMinOscillationWidth = schemas.NumberSchema
            minTransmission = schemas.NumberSchema
            CS = schemas.NumberSchema
            __annotations__ = {
                "beamLineSetupId": beamLineSetupId,
                "recordTimeStamp": recordTimeStamp,
                "synchrotronMode": synchrotronMode,
                "undulatorType1": undulatorType1,
                "undulatorType2": undulatorType2,
                "undulatorType3": undulatorType3,
                "focalSpotSizeAtSample": focalSpotSizeAtSample,
                "focusingOptic": focusingOptic,
                "beamDivergenceHorizontal": beamDivergenceHorizontal,
                "beamDivergenceVertical": beamDivergenceVertical,
                "polarisation": polarisation,
                "monochromatorType": monochromatorType,
                "setupDate": setupDate,
                "synchrotronName": synchrotronName,
                "maxExpTimePerDataCollection": maxExpTimePerDataCollection,
                "minExposureTimePerImage": minExposureTimePerImage,
                "goniostatMaxOscillationSpeed": goniostatMaxOscillationSpeed,
                "goniostatMinOscillationWidth": goniostatMinOscillationWidth,
                "minTransmission": minTransmission,
                "CS": CS,
            }
    
    beamLineSetupId: MetaOapg.properties.beamLineSetupId
    recordTimeStamp: MetaOapg.properties.recordTimeStamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLineSetupId"]) -> MetaOapg.properties.beamLineSetupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recordTimeStamp"]) -> MetaOapg.properties.recordTimeStamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["synchrotronMode"]) -> MetaOapg.properties.synchrotronMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["undulatorType1"]) -> MetaOapg.properties.undulatorType1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["undulatorType2"]) -> MetaOapg.properties.undulatorType2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["undulatorType3"]) -> MetaOapg.properties.undulatorType3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["focalSpotSizeAtSample"]) -> MetaOapg.properties.focalSpotSizeAtSample: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["focusingOptic"]) -> MetaOapg.properties.focusingOptic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamDivergenceHorizontal"]) -> MetaOapg.properties.beamDivergenceHorizontal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamDivergenceVertical"]) -> MetaOapg.properties.beamDivergenceVertical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["polarisation"]) -> MetaOapg.properties.polarisation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monochromatorType"]) -> MetaOapg.properties.monochromatorType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setupDate"]) -> MetaOapg.properties.setupDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["synchrotronName"]) -> MetaOapg.properties.synchrotronName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxExpTimePerDataCollection"]) -> MetaOapg.properties.maxExpTimePerDataCollection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minExposureTimePerImage"]) -> MetaOapg.properties.minExposureTimePerImage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goniostatMaxOscillationSpeed"]) -> MetaOapg.properties.goniostatMaxOscillationSpeed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goniostatMinOscillationWidth"]) -> MetaOapg.properties.goniostatMinOscillationWidth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minTransmission"]) -> MetaOapg.properties.minTransmission: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CS"]) -> MetaOapg.properties.CS: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["beamLineSetupId", "recordTimeStamp", "synchrotronMode", "undulatorType1", "undulatorType2", "undulatorType3", "focalSpotSizeAtSample", "focusingOptic", "beamDivergenceHorizontal", "beamDivergenceVertical", "polarisation", "monochromatorType", "setupDate", "synchrotronName", "maxExpTimePerDataCollection", "minExposureTimePerImage", "goniostatMaxOscillationSpeed", "goniostatMinOscillationWidth", "minTransmission", "CS", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLineSetupId"]) -> MetaOapg.properties.beamLineSetupId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recordTimeStamp"]) -> MetaOapg.properties.recordTimeStamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["synchrotronMode"]) -> typing.Union[MetaOapg.properties.synchrotronMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["undulatorType1"]) -> typing.Union[MetaOapg.properties.undulatorType1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["undulatorType2"]) -> typing.Union[MetaOapg.properties.undulatorType2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["undulatorType3"]) -> typing.Union[MetaOapg.properties.undulatorType3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["focalSpotSizeAtSample"]) -> typing.Union[MetaOapg.properties.focalSpotSizeAtSample, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["focusingOptic"]) -> typing.Union[MetaOapg.properties.focusingOptic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamDivergenceHorizontal"]) -> typing.Union[MetaOapg.properties.beamDivergenceHorizontal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamDivergenceVertical"]) -> typing.Union[MetaOapg.properties.beamDivergenceVertical, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["polarisation"]) -> typing.Union[MetaOapg.properties.polarisation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monochromatorType"]) -> typing.Union[MetaOapg.properties.monochromatorType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setupDate"]) -> typing.Union[MetaOapg.properties.setupDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["synchrotronName"]) -> typing.Union[MetaOapg.properties.synchrotronName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxExpTimePerDataCollection"]) -> typing.Union[MetaOapg.properties.maxExpTimePerDataCollection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minExposureTimePerImage"]) -> typing.Union[MetaOapg.properties.minExposureTimePerImage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goniostatMaxOscillationSpeed"]) -> typing.Union[MetaOapg.properties.goniostatMaxOscillationSpeed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goniostatMinOscillationWidth"]) -> typing.Union[MetaOapg.properties.goniostatMinOscillationWidth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minTransmission"]) -> typing.Union[MetaOapg.properties.minTransmission, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CS"]) -> typing.Union[MetaOapg.properties.CS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["beamLineSetupId", "recordTimeStamp", "synchrotronMode", "undulatorType1", "undulatorType2", "undulatorType3", "focalSpotSizeAtSample", "focusingOptic", "beamDivergenceHorizontal", "beamDivergenceVertical", "polarisation", "monochromatorType", "setupDate", "synchrotronName", "maxExpTimePerDataCollection", "minExposureTimePerImage", "goniostatMaxOscillationSpeed", "goniostatMinOscillationWidth", "minTransmission", "CS", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        beamLineSetupId: typing.Union[MetaOapg.properties.beamLineSetupId, decimal.Decimal, int, ],
        recordTimeStamp: typing.Union[MetaOapg.properties.recordTimeStamp, str, datetime, ],
        synchrotronMode: typing.Union[MetaOapg.properties.synchrotronMode, str, schemas.Unset] = schemas.unset,
        undulatorType1: typing.Union[MetaOapg.properties.undulatorType1, str, schemas.Unset] = schemas.unset,
        undulatorType2: typing.Union[MetaOapg.properties.undulatorType2, str, schemas.Unset] = schemas.unset,
        undulatorType3: typing.Union[MetaOapg.properties.undulatorType3, str, schemas.Unset] = schemas.unset,
        focalSpotSizeAtSample: typing.Union[MetaOapg.properties.focalSpotSizeAtSample, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        focusingOptic: typing.Union[MetaOapg.properties.focusingOptic, str, schemas.Unset] = schemas.unset,
        beamDivergenceHorizontal: typing.Union[MetaOapg.properties.beamDivergenceHorizontal, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        beamDivergenceVertical: typing.Union[MetaOapg.properties.beamDivergenceVertical, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        polarisation: typing.Union[MetaOapg.properties.polarisation, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monochromatorType: typing.Union[MetaOapg.properties.monochromatorType, str, schemas.Unset] = schemas.unset,
        setupDate: typing.Union[MetaOapg.properties.setupDate, str, datetime, schemas.Unset] = schemas.unset,
        synchrotronName: typing.Union[MetaOapg.properties.synchrotronName, str, schemas.Unset] = schemas.unset,
        maxExpTimePerDataCollection: typing.Union[MetaOapg.properties.maxExpTimePerDataCollection, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        minExposureTimePerImage: typing.Union[MetaOapg.properties.minExposureTimePerImage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        goniostatMaxOscillationSpeed: typing.Union[MetaOapg.properties.goniostatMaxOscillationSpeed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        goniostatMinOscillationWidth: typing.Union[MetaOapg.properties.goniostatMinOscillationWidth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        minTransmission: typing.Union[MetaOapg.properties.minTransmission, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        CS: typing.Union[MetaOapg.properties.CS, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BeamLineSetup':
        return super().__new__(
            cls,
            *args,
            beamLineSetupId=beamLineSetupId,
            recordTimeStamp=recordTimeStamp,
            synchrotronMode=synchrotronMode,
            undulatorType1=undulatorType1,
            undulatorType2=undulatorType2,
            undulatorType3=undulatorType3,
            focalSpotSizeAtSample=focalSpotSizeAtSample,
            focusingOptic=focusingOptic,
            beamDivergenceHorizontal=beamDivergenceHorizontal,
            beamDivergenceVertical=beamDivergenceVertical,
            polarisation=polarisation,
            monochromatorType=monochromatorType,
            setupDate=setupDate,
            synchrotronName=synchrotronName,
            maxExpTimePerDataCollection=maxExpTimePerDataCollection,
            minExposureTimePerImage=minExposureTimePerImage,
            goniostatMaxOscillationSpeed=goniostatMaxOscillationSpeed,
            goniostatMinOscillationWidth=goniostatMinOscillationWidth,
            minTransmission=minTransmission,
            CS=CS,
            _configuration=_configuration,
            **kwargs,
        )
