# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SampleImage(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "offsetX",
            "blSampleImageId",
            "micronsPerPixelX",
            "micronsPerPixelY",
            "offsetY",
            "blSampleId",
            "_metadata",
        }
        
        class properties:
            blSampleImageId = schemas.IntSchema
            blSampleId = schemas.IntSchema
            micronsPerPixelX = schemas.NumberSchema
            micronsPerPixelY = schemas.NumberSchema
            offsetX = schemas.IntSchema
            offsetY = schemas.IntSchema
        
            @staticmethod
            def _metadata() -> typing.Type['SampleImageMetaData']:
                return SampleImageMetaData
            __annotations__ = {
                "blSampleImageId": blSampleImageId,
                "blSampleId": blSampleId,
                "micronsPerPixelX": micronsPerPixelX,
                "micronsPerPixelY": micronsPerPixelY,
                "offsetX": offsetX,
                "offsetY": offsetY,
                "_metadata": _metadata,
            }
    
    offsetX: MetaOapg.properties.offsetX
    blSampleImageId: MetaOapg.properties.blSampleImageId
    micronsPerPixelX: MetaOapg.properties.micronsPerPixelX
    micronsPerPixelY: MetaOapg.properties.micronsPerPixelY
    offsetY: MetaOapg.properties.offsetY
    blSampleId: MetaOapg.properties.blSampleId
    _metadata: 'SampleImageMetaData'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blSampleImageId"]) -> MetaOapg.properties.blSampleImageId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blSampleId"]) -> MetaOapg.properties.blSampleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["micronsPerPixelX"]) -> MetaOapg.properties.micronsPerPixelX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["micronsPerPixelY"]) -> MetaOapg.properties.micronsPerPixelY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offsetX"]) -> MetaOapg.properties.offsetX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offsetY"]) -> MetaOapg.properties.offsetY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_metadata"]) -> 'SampleImageMetaData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["blSampleImageId", "blSampleId", "micronsPerPixelX", "micronsPerPixelY", "offsetX", "offsetY", "_metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blSampleImageId"]) -> MetaOapg.properties.blSampleImageId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blSampleId"]) -> MetaOapg.properties.blSampleId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["micronsPerPixelX"]) -> MetaOapg.properties.micronsPerPixelX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["micronsPerPixelY"]) -> MetaOapg.properties.micronsPerPixelY: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offsetX"]) -> MetaOapg.properties.offsetX: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offsetY"]) -> MetaOapg.properties.offsetY: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_metadata"]) -> 'SampleImageMetaData': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["blSampleImageId", "blSampleId", "micronsPerPixelX", "micronsPerPixelY", "offsetX", "offsetY", "_metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        offsetX: typing.Union[MetaOapg.properties.offsetX, decimal.Decimal, int, ],
        blSampleImageId: typing.Union[MetaOapg.properties.blSampleImageId, decimal.Decimal, int, ],
        micronsPerPixelX: typing.Union[MetaOapg.properties.micronsPerPixelX, decimal.Decimal, int, float, ],
        micronsPerPixelY: typing.Union[MetaOapg.properties.micronsPerPixelY, decimal.Decimal, int, float, ],
        offsetY: typing.Union[MetaOapg.properties.offsetY, decimal.Decimal, int, ],
        blSampleId: typing.Union[MetaOapg.properties.blSampleId, decimal.Decimal, int, ],
        _metadata: 'SampleImageMetaData',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SampleImage':
        return super().__new__(
            cls,
            *args,
            offsetX=offsetX,
            blSampleImageId=blSampleImageId,
            micronsPerPixelX=micronsPerPixelX,
            micronsPerPixelY=micronsPerPixelY,
            offsetY=offsetY,
            blSampleId=blSampleId,
            _metadata=_metadata,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.sample_image_meta_data import SampleImageMetaData
