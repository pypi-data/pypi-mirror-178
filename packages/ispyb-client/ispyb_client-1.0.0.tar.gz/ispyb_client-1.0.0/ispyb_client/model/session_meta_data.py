# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SessionMetaData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "active_soon",
            "persons",
            "sessionTypes",
            "active",
        }
        
        class properties:
            persons = schemas.IntSchema
            active = schemas.BoolSchema
            active_soon = schemas.BoolSchema
            
            
            class sessionTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sessionTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            datacollections = schemas.IntSchema
            
            
            class uiGroups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uiGroups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "persons": persons,
                "active": active,
                "active_soon": active_soon,
                "sessionTypes": sessionTypes,
                "datacollections": datacollections,
                "uiGroups": uiGroups,
            }
    
    active_soon: MetaOapg.properties.active_soon
    persons: MetaOapg.properties.persons
    sessionTypes: MetaOapg.properties.sessionTypes
    active: MetaOapg.properties.active
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persons"]) -> MetaOapg.properties.persons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active_soon"]) -> MetaOapg.properties.active_soon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionTypes"]) -> MetaOapg.properties.sessionTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datacollections"]) -> MetaOapg.properties.datacollections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uiGroups"]) -> MetaOapg.properties.uiGroups: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["persons", "active", "active_soon", "sessionTypes", "datacollections", "uiGroups", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persons"]) -> MetaOapg.properties.persons: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active_soon"]) -> MetaOapg.properties.active_soon: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionTypes"]) -> MetaOapg.properties.sessionTypes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datacollections"]) -> typing.Union[MetaOapg.properties.datacollections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uiGroups"]) -> typing.Union[MetaOapg.properties.uiGroups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["persons", "active", "active_soon", "sessionTypes", "datacollections", "uiGroups", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        active_soon: typing.Union[MetaOapg.properties.active_soon, bool, ],
        persons: typing.Union[MetaOapg.properties.persons, decimal.Decimal, int, ],
        sessionTypes: typing.Union[MetaOapg.properties.sessionTypes, list, tuple, ],
        active: typing.Union[MetaOapg.properties.active, bool, ],
        datacollections: typing.Union[MetaOapg.properties.datacollections, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uiGroups: typing.Union[MetaOapg.properties.uiGroups, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SessionMetaData':
        return super().__new__(
            cls,
            *args,
            active_soon=active_soon,
            persons=persons,
            sessionTypes=sessionTypes,
            active=active,
            datacollections=datacollections,
            uiGroups=uiGroups,
            _configuration=_configuration,
            **kwargs,
        )
