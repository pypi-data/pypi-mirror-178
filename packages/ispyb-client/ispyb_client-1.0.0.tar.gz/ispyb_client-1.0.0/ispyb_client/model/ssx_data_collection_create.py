# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SSXDataCollectionCreate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "event_chains",
            "dataCollectionGroupId",
            "startTime",
        }
        
        class properties:
            dataCollectionGroupId = schemas.IntSchema
            startTime = schemas.DateTimeSchema
            
            
            class event_chains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EventChainCreate']:
                        return EventChainCreate
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['EventChainCreate'], typing.List['EventChainCreate']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'event_chains':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'EventChainCreate':
                    return super().__getitem__(i)
            exposureTime = schemas.NumberSchema
            transmission = schemas.NumberSchema
            flux = schemas.NumberSchema
            xBeam = schemas.NumberSchema
            yBeam = schemas.NumberSchema
            wavelength = schemas.NumberSchema
            detectorDistance = schemas.NumberSchema
            beamSizeAtSampleX = schemas.NumberSchema
            beamSizeAtSampleY = schemas.NumberSchema
            averageTemperature = schemas.NumberSchema
            xtalSnapshotFullPath1 = schemas.StrSchema
            xtalSnapshotFullPath2 = schemas.StrSchema
            xtalSnapshotFullPath3 = schemas.StrSchema
            xtalSnapshotFullPath4 = schemas.StrSchema
            imagePrefix = schemas.StrSchema
            numberOfPasses = schemas.IntSchema
            numberOfImages = schemas.IntSchema
            resolution = schemas.NumberSchema
            resolutionAtCorner = schemas.NumberSchema
            flux_end = schemas.NumberSchema
            detectorId = schemas.IntSchema
            endTime = schemas.DateTimeSchema
            beamShape = schemas.StrSchema
            polarisation = schemas.NumberSchema
            undulatorGap1 = schemas.NumberSchema
            repetitionRate = schemas.NumberSchema
            energyBandwidth = schemas.NumberSchema
            monoStripe = schemas.StrSchema
            experimentName = schemas.StrSchema
            jetSize = schemas.NumberSchema
            jetSpeed = schemas.NumberSchema
            laserEnergy = schemas.NumberSchema
            chipModel = schemas.StrSchema
            chipPattern = schemas.StrSchema
            __annotations__ = {
                "dataCollectionGroupId": dataCollectionGroupId,
                "startTime": startTime,
                "event_chains": event_chains,
                "exposureTime": exposureTime,
                "transmission": transmission,
                "flux": flux,
                "xBeam": xBeam,
                "yBeam": yBeam,
                "wavelength": wavelength,
                "detectorDistance": detectorDistance,
                "beamSizeAtSampleX": beamSizeAtSampleX,
                "beamSizeAtSampleY": beamSizeAtSampleY,
                "averageTemperature": averageTemperature,
                "xtalSnapshotFullPath1": xtalSnapshotFullPath1,
                "xtalSnapshotFullPath2": xtalSnapshotFullPath2,
                "xtalSnapshotFullPath3": xtalSnapshotFullPath3,
                "xtalSnapshotFullPath4": xtalSnapshotFullPath4,
                "imagePrefix": imagePrefix,
                "numberOfPasses": numberOfPasses,
                "numberOfImages": numberOfImages,
                "resolution": resolution,
                "resolutionAtCorner": resolutionAtCorner,
                "flux_end": flux_end,
                "detectorId": detectorId,
                "endTime": endTime,
                "beamShape": beamShape,
                "polarisation": polarisation,
                "undulatorGap1": undulatorGap1,
                "repetitionRate": repetitionRate,
                "energyBandwidth": energyBandwidth,
                "monoStripe": monoStripe,
                "experimentName": experimentName,
                "jetSize": jetSize,
                "jetSpeed": jetSpeed,
                "laserEnergy": laserEnergy,
                "chipModel": chipModel,
                "chipPattern": chipPattern,
            }
    
    event_chains: MetaOapg.properties.event_chains
    dataCollectionGroupId: MetaOapg.properties.dataCollectionGroupId
    startTime: MetaOapg.properties.startTime
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataCollectionGroupId"]) -> MetaOapg.properties.dataCollectionGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_chains"]) -> MetaOapg.properties.event_chains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exposureTime"]) -> MetaOapg.properties.exposureTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transmission"]) -> MetaOapg.properties.transmission: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flux"]) -> MetaOapg.properties.flux: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xBeam"]) -> MetaOapg.properties.xBeam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yBeam"]) -> MetaOapg.properties.yBeam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wavelength"]) -> MetaOapg.properties.wavelength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorDistance"]) -> MetaOapg.properties.detectorDistance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamSizeAtSampleX"]) -> MetaOapg.properties.beamSizeAtSampleX: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamSizeAtSampleY"]) -> MetaOapg.properties.beamSizeAtSampleY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageTemperature"]) -> MetaOapg.properties.averageTemperature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xtalSnapshotFullPath1"]) -> MetaOapg.properties.xtalSnapshotFullPath1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xtalSnapshotFullPath2"]) -> MetaOapg.properties.xtalSnapshotFullPath2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xtalSnapshotFullPath3"]) -> MetaOapg.properties.xtalSnapshotFullPath3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xtalSnapshotFullPath4"]) -> MetaOapg.properties.xtalSnapshotFullPath4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imagePrefix"]) -> MetaOapg.properties.imagePrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfPasses"]) -> MetaOapg.properties.numberOfPasses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfImages"]) -> MetaOapg.properties.numberOfImages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolution"]) -> MetaOapg.properties.resolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resolutionAtCorner"]) -> MetaOapg.properties.resolutionAtCorner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flux_end"]) -> MetaOapg.properties.flux_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorId"]) -> MetaOapg.properties.detectorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endTime"]) -> MetaOapg.properties.endTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamShape"]) -> MetaOapg.properties.beamShape: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["polarisation"]) -> MetaOapg.properties.polarisation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["undulatorGap1"]) -> MetaOapg.properties.undulatorGap1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repetitionRate"]) -> MetaOapg.properties.repetitionRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energyBandwidth"]) -> MetaOapg.properties.energyBandwidth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monoStripe"]) -> MetaOapg.properties.monoStripe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["experimentName"]) -> MetaOapg.properties.experimentName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jetSize"]) -> MetaOapg.properties.jetSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jetSpeed"]) -> MetaOapg.properties.jetSpeed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["laserEnergy"]) -> MetaOapg.properties.laserEnergy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chipModel"]) -> MetaOapg.properties.chipModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chipPattern"]) -> MetaOapg.properties.chipPattern: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataCollectionGroupId", "startTime", "event_chains", "exposureTime", "transmission", "flux", "xBeam", "yBeam", "wavelength", "detectorDistance", "beamSizeAtSampleX", "beamSizeAtSampleY", "averageTemperature", "xtalSnapshotFullPath1", "xtalSnapshotFullPath2", "xtalSnapshotFullPath3", "xtalSnapshotFullPath4", "imagePrefix", "numberOfPasses", "numberOfImages", "resolution", "resolutionAtCorner", "flux_end", "detectorId", "endTime", "beamShape", "polarisation", "undulatorGap1", "repetitionRate", "energyBandwidth", "monoStripe", "experimentName", "jetSize", "jetSpeed", "laserEnergy", "chipModel", "chipPattern", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataCollectionGroupId"]) -> MetaOapg.properties.dataCollectionGroupId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_chains"]) -> MetaOapg.properties.event_chains: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exposureTime"]) -> typing.Union[MetaOapg.properties.exposureTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transmission"]) -> typing.Union[MetaOapg.properties.transmission, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flux"]) -> typing.Union[MetaOapg.properties.flux, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xBeam"]) -> typing.Union[MetaOapg.properties.xBeam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yBeam"]) -> typing.Union[MetaOapg.properties.yBeam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wavelength"]) -> typing.Union[MetaOapg.properties.wavelength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorDistance"]) -> typing.Union[MetaOapg.properties.detectorDistance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamSizeAtSampleX"]) -> typing.Union[MetaOapg.properties.beamSizeAtSampleX, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamSizeAtSampleY"]) -> typing.Union[MetaOapg.properties.beamSizeAtSampleY, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageTemperature"]) -> typing.Union[MetaOapg.properties.averageTemperature, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xtalSnapshotFullPath1"]) -> typing.Union[MetaOapg.properties.xtalSnapshotFullPath1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xtalSnapshotFullPath2"]) -> typing.Union[MetaOapg.properties.xtalSnapshotFullPath2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xtalSnapshotFullPath3"]) -> typing.Union[MetaOapg.properties.xtalSnapshotFullPath3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xtalSnapshotFullPath4"]) -> typing.Union[MetaOapg.properties.xtalSnapshotFullPath4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imagePrefix"]) -> typing.Union[MetaOapg.properties.imagePrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfPasses"]) -> typing.Union[MetaOapg.properties.numberOfPasses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfImages"]) -> typing.Union[MetaOapg.properties.numberOfImages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolution"]) -> typing.Union[MetaOapg.properties.resolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resolutionAtCorner"]) -> typing.Union[MetaOapg.properties.resolutionAtCorner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flux_end"]) -> typing.Union[MetaOapg.properties.flux_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorId"]) -> typing.Union[MetaOapg.properties.detectorId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endTime"]) -> typing.Union[MetaOapg.properties.endTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamShape"]) -> typing.Union[MetaOapg.properties.beamShape, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["polarisation"]) -> typing.Union[MetaOapg.properties.polarisation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["undulatorGap1"]) -> typing.Union[MetaOapg.properties.undulatorGap1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repetitionRate"]) -> typing.Union[MetaOapg.properties.repetitionRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energyBandwidth"]) -> typing.Union[MetaOapg.properties.energyBandwidth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monoStripe"]) -> typing.Union[MetaOapg.properties.monoStripe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["experimentName"]) -> typing.Union[MetaOapg.properties.experimentName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jetSize"]) -> typing.Union[MetaOapg.properties.jetSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jetSpeed"]) -> typing.Union[MetaOapg.properties.jetSpeed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["laserEnergy"]) -> typing.Union[MetaOapg.properties.laserEnergy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chipModel"]) -> typing.Union[MetaOapg.properties.chipModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chipPattern"]) -> typing.Union[MetaOapg.properties.chipPattern, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataCollectionGroupId", "startTime", "event_chains", "exposureTime", "transmission", "flux", "xBeam", "yBeam", "wavelength", "detectorDistance", "beamSizeAtSampleX", "beamSizeAtSampleY", "averageTemperature", "xtalSnapshotFullPath1", "xtalSnapshotFullPath2", "xtalSnapshotFullPath3", "xtalSnapshotFullPath4", "imagePrefix", "numberOfPasses", "numberOfImages", "resolution", "resolutionAtCorner", "flux_end", "detectorId", "endTime", "beamShape", "polarisation", "undulatorGap1", "repetitionRate", "energyBandwidth", "monoStripe", "experimentName", "jetSize", "jetSpeed", "laserEnergy", "chipModel", "chipPattern", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        event_chains: typing.Union[MetaOapg.properties.event_chains, list, tuple, ],
        dataCollectionGroupId: typing.Union[MetaOapg.properties.dataCollectionGroupId, decimal.Decimal, int, ],
        startTime: typing.Union[MetaOapg.properties.startTime, str, datetime, ],
        exposureTime: typing.Union[MetaOapg.properties.exposureTime, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        transmission: typing.Union[MetaOapg.properties.transmission, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        flux: typing.Union[MetaOapg.properties.flux, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        xBeam: typing.Union[MetaOapg.properties.xBeam, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yBeam: typing.Union[MetaOapg.properties.yBeam, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wavelength: typing.Union[MetaOapg.properties.wavelength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        detectorDistance: typing.Union[MetaOapg.properties.detectorDistance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        beamSizeAtSampleX: typing.Union[MetaOapg.properties.beamSizeAtSampleX, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        beamSizeAtSampleY: typing.Union[MetaOapg.properties.beamSizeAtSampleY, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        averageTemperature: typing.Union[MetaOapg.properties.averageTemperature, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        xtalSnapshotFullPath1: typing.Union[MetaOapg.properties.xtalSnapshotFullPath1, str, schemas.Unset] = schemas.unset,
        xtalSnapshotFullPath2: typing.Union[MetaOapg.properties.xtalSnapshotFullPath2, str, schemas.Unset] = schemas.unset,
        xtalSnapshotFullPath3: typing.Union[MetaOapg.properties.xtalSnapshotFullPath3, str, schemas.Unset] = schemas.unset,
        xtalSnapshotFullPath4: typing.Union[MetaOapg.properties.xtalSnapshotFullPath4, str, schemas.Unset] = schemas.unset,
        imagePrefix: typing.Union[MetaOapg.properties.imagePrefix, str, schemas.Unset] = schemas.unset,
        numberOfPasses: typing.Union[MetaOapg.properties.numberOfPasses, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        numberOfImages: typing.Union[MetaOapg.properties.numberOfImages, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        resolution: typing.Union[MetaOapg.properties.resolution, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        resolutionAtCorner: typing.Union[MetaOapg.properties.resolutionAtCorner, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        flux_end: typing.Union[MetaOapg.properties.flux_end, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        detectorId: typing.Union[MetaOapg.properties.detectorId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        endTime: typing.Union[MetaOapg.properties.endTime, str, datetime, schemas.Unset] = schemas.unset,
        beamShape: typing.Union[MetaOapg.properties.beamShape, str, schemas.Unset] = schemas.unset,
        polarisation: typing.Union[MetaOapg.properties.polarisation, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        undulatorGap1: typing.Union[MetaOapg.properties.undulatorGap1, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        repetitionRate: typing.Union[MetaOapg.properties.repetitionRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        energyBandwidth: typing.Union[MetaOapg.properties.energyBandwidth, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        monoStripe: typing.Union[MetaOapg.properties.monoStripe, str, schemas.Unset] = schemas.unset,
        experimentName: typing.Union[MetaOapg.properties.experimentName, str, schemas.Unset] = schemas.unset,
        jetSize: typing.Union[MetaOapg.properties.jetSize, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        jetSpeed: typing.Union[MetaOapg.properties.jetSpeed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        laserEnergy: typing.Union[MetaOapg.properties.laserEnergy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        chipModel: typing.Union[MetaOapg.properties.chipModel, str, schemas.Unset] = schemas.unset,
        chipPattern: typing.Union[MetaOapg.properties.chipPattern, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SSXDataCollectionCreate':
        return super().__new__(
            cls,
            *args,
            event_chains=event_chains,
            dataCollectionGroupId=dataCollectionGroupId,
            startTime=startTime,
            exposureTime=exposureTime,
            transmission=transmission,
            flux=flux,
            xBeam=xBeam,
            yBeam=yBeam,
            wavelength=wavelength,
            detectorDistance=detectorDistance,
            beamSizeAtSampleX=beamSizeAtSampleX,
            beamSizeAtSampleY=beamSizeAtSampleY,
            averageTemperature=averageTemperature,
            xtalSnapshotFullPath1=xtalSnapshotFullPath1,
            xtalSnapshotFullPath2=xtalSnapshotFullPath2,
            xtalSnapshotFullPath3=xtalSnapshotFullPath3,
            xtalSnapshotFullPath4=xtalSnapshotFullPath4,
            imagePrefix=imagePrefix,
            numberOfPasses=numberOfPasses,
            numberOfImages=numberOfImages,
            resolution=resolution,
            resolutionAtCorner=resolutionAtCorner,
            flux_end=flux_end,
            detectorId=detectorId,
            endTime=endTime,
            beamShape=beamShape,
            polarisation=polarisation,
            undulatorGap1=undulatorGap1,
            repetitionRate=repetitionRate,
            energyBandwidth=energyBandwidth,
            monoStripe=monoStripe,
            experimentName=experimentName,
            jetSize=jetSize,
            jetSpeed=jetSpeed,
            laserEnergy=laserEnergy,
            chipModel=chipModel,
            chipPattern=chipPattern,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.event_chain_create import EventChainCreate
