# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class DataCollectionGroup(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dataCollectionGroupId",
        }
        
        class properties:
            dataCollectionGroupId = schemas.IntSchema
            experimentType = schemas.StrSchema
            blSampleId = schemas.IntSchema
        
            @staticmethod
            def Workflow() -> typing.Type['Workflow']:
                return Workflow
            __annotations__ = {
                "dataCollectionGroupId": dataCollectionGroupId,
                "experimentType": experimentType,
                "blSampleId": blSampleId,
                "Workflow": Workflow,
            }
    
    dataCollectionGroupId: MetaOapg.properties.dataCollectionGroupId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataCollectionGroupId"]) -> MetaOapg.properties.dataCollectionGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["experimentType"]) -> MetaOapg.properties.experimentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blSampleId"]) -> MetaOapg.properties.blSampleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Workflow"]) -> 'Workflow': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataCollectionGroupId", "experimentType", "blSampleId", "Workflow", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataCollectionGroupId"]) -> MetaOapg.properties.dataCollectionGroupId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["experimentType"]) -> typing.Union[MetaOapg.properties.experimentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blSampleId"]) -> typing.Union[MetaOapg.properties.blSampleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Workflow"]) -> typing.Union['Workflow', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataCollectionGroupId", "experimentType", "blSampleId", "Workflow", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataCollectionGroupId: typing.Union[MetaOapg.properties.dataCollectionGroupId, decimal.Decimal, int, ],
        experimentType: typing.Union[MetaOapg.properties.experimentType, str, schemas.Unset] = schemas.unset,
        blSampleId: typing.Union[MetaOapg.properties.blSampleId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Workflow: typing.Union['Workflow', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataCollectionGroup':
        return super().__new__(
            cls,
            *args,
            dataCollectionGroupId=dataCollectionGroupId,
            experimentType=experimentType,
            blSampleId=blSampleId,
            Workflow=Workflow,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.workflow import Workflow
