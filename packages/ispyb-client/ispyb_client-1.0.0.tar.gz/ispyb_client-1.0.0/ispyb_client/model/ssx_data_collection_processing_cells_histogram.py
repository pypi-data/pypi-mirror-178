# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SSXDataCollectionProcessingCellsHistogram(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def a() -> typing.Type['Histogram']:
                return Histogram
        
            @staticmethod
            def b() -> typing.Type['Histogram']:
                return Histogram
        
            @staticmethod
            def c() -> typing.Type['Histogram']:
                return Histogram
        
            @staticmethod
            def alpha() -> typing.Type['Histogram']:
                return Histogram
        
            @staticmethod
            def beta() -> typing.Type['Histogram']:
                return Histogram
        
            @staticmethod
            def gamma() -> typing.Type['Histogram']:
                return Histogram
            __annotations__ = {
                "a": a,
                "b": b,
                "c": c,
                "alpha": alpha,
                "beta": beta,
                "gamma": gamma,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["a"]) -> 'Histogram': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["b"]) -> 'Histogram': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["c"]) -> 'Histogram': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alpha"]) -> 'Histogram': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beta"]) -> 'Histogram': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gamma"]) -> 'Histogram': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["a", "b", "c", "alpha", "beta", "gamma", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["a"]) -> typing.Union['Histogram', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["b"]) -> typing.Union['Histogram', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["c"]) -> typing.Union['Histogram', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alpha"]) -> typing.Union['Histogram', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beta"]) -> typing.Union['Histogram', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gamma"]) -> typing.Union['Histogram', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["a", "b", "c", "alpha", "beta", "gamma", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        a: typing.Union['Histogram', schemas.Unset] = schemas.unset,
        b: typing.Union['Histogram', schemas.Unset] = schemas.unset,
        c: typing.Union['Histogram', schemas.Unset] = schemas.unset,
        alpha: typing.Union['Histogram', schemas.Unset] = schemas.unset,
        beta: typing.Union['Histogram', schemas.Unset] = schemas.unset,
        gamma: typing.Union['Histogram', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SSXDataCollectionProcessingCellsHistogram':
        return super().__new__(
            cls,
            *args,
            a=a,
            b=b,
            c=c,
            alpha=alpha,
            beta=beta,
            gamma=gamma,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.histogram import Histogram
