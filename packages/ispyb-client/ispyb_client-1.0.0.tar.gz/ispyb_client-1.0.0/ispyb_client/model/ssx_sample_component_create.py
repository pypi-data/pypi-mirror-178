# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SSXSampleComponentCreate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "componentType",
        }
        
        class properties:
            
            
            class componentType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Ligand": "LIGAND",
                        "Buffer": "BUFFER",
                        "JetMaterial": "JET_MATERIAL",
                    }
                
                @schemas.classproperty
                def LIGAND(cls):
                    return cls("Ligand")
                
                @schemas.classproperty
                def BUFFER(cls):
                    return cls("Buffer")
                
                @schemas.classproperty
                def JET_MATERIAL(cls):
                    return cls("JetMaterial")
            name = schemas.StrSchema
            composition = schemas.StrSchema
            abundance = schemas.NumberSchema
            __annotations__ = {
                "componentType": componentType,
                "name": name,
                "composition": composition,
                "abundance": abundance,
            }
    
    componentType: MetaOapg.properties.componentType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["componentType"]) -> MetaOapg.properties.componentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["composition"]) -> MetaOapg.properties.composition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abundance"]) -> MetaOapg.properties.abundance: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["componentType", "name", "composition", "abundance", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["componentType"]) -> MetaOapg.properties.componentType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["composition"]) -> typing.Union[MetaOapg.properties.composition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abundance"]) -> typing.Union[MetaOapg.properties.abundance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["componentType", "name", "composition", "abundance", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        componentType: typing.Union[MetaOapg.properties.componentType, str, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        composition: typing.Union[MetaOapg.properties.composition, str, schemas.Unset] = schemas.unset,
        abundance: typing.Union[MetaOapg.properties.abundance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SSXSampleComponentCreate':
        return super().__new__(
            cls,
            *args,
            componentType=componentType,
            name=name,
            composition=composition,
            abundance=abundance,
            _configuration=_configuration,
            **kwargs,
        )
