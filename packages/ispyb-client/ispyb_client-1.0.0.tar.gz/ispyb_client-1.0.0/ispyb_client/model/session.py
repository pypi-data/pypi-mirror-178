# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Session(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "proposal",
            "endDate",
            "session",
            "sessionId",
            "_metadata",
            "beamLineName",
            "proposalId",
            "startDate",
        }
        
        class properties:
            proposalId = schemas.IntSchema
            session = schemas.StrSchema
            proposal = schemas.StrSchema
            startDate = schemas.DateTimeSchema
            endDate = schemas.DateTimeSchema
            beamLineName = schemas.StrSchema
            sessionId = schemas.IntSchema
        
            @staticmethod
            def _metadata() -> typing.Type['SessionMetaData']:
                return SessionMetaData
            visit_number = schemas.IntSchema
            beamLineOperator = schemas.StrSchema
            scheduled = schemas.BoolSchema
            __annotations__ = {
                "proposalId": proposalId,
                "session": session,
                "proposal": proposal,
                "startDate": startDate,
                "endDate": endDate,
                "beamLineName": beamLineName,
                "sessionId": sessionId,
                "_metadata": _metadata,
                "visit_number": visit_number,
                "beamLineOperator": beamLineOperator,
                "scheduled": scheduled,
            }
    
    proposal: MetaOapg.properties.proposal
    endDate: MetaOapg.properties.endDate
    session: MetaOapg.properties.session
    sessionId: MetaOapg.properties.sessionId
    _metadata: 'SessionMetaData'
    beamLineName: MetaOapg.properties.beamLineName
    proposalId: MetaOapg.properties.proposalId
    startDate: MetaOapg.properties.startDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposalId"]) -> MetaOapg.properties.proposalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session"]) -> MetaOapg.properties.session: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposal"]) -> MetaOapg.properties.proposal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLineName"]) -> MetaOapg.properties.beamLineName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_metadata"]) -> 'SessionMetaData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visit_number"]) -> MetaOapg.properties.visit_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLineOperator"]) -> MetaOapg.properties.beamLineOperator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled"]) -> MetaOapg.properties.scheduled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["proposalId", "session", "proposal", "startDate", "endDate", "beamLineName", "sessionId", "_metadata", "visit_number", "beamLineOperator", "scheduled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposalId"]) -> MetaOapg.properties.proposalId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session"]) -> MetaOapg.properties.session: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposal"]) -> MetaOapg.properties.proposal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLineName"]) -> MetaOapg.properties.beamLineName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_metadata"]) -> 'SessionMetaData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visit_number"]) -> typing.Union[MetaOapg.properties.visit_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLineOperator"]) -> typing.Union[MetaOapg.properties.beamLineOperator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled"]) -> typing.Union[MetaOapg.properties.scheduled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["proposalId", "session", "proposal", "startDate", "endDate", "beamLineName", "sessionId", "_metadata", "visit_number", "beamLineOperator", "scheduled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        proposal: typing.Union[MetaOapg.properties.proposal, str, ],
        endDate: typing.Union[MetaOapg.properties.endDate, str, datetime, ],
        session: typing.Union[MetaOapg.properties.session, str, ],
        sessionId: typing.Union[MetaOapg.properties.sessionId, decimal.Decimal, int, ],
        _metadata: 'SessionMetaData',
        beamLineName: typing.Union[MetaOapg.properties.beamLineName, str, ],
        proposalId: typing.Union[MetaOapg.properties.proposalId, decimal.Decimal, int, ],
        startDate: typing.Union[MetaOapg.properties.startDate, str, datetime, ],
        visit_number: typing.Union[MetaOapg.properties.visit_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        beamLineOperator: typing.Union[MetaOapg.properties.beamLineOperator, str, schemas.Unset] = schemas.unset,
        scheduled: typing.Union[MetaOapg.properties.scheduled, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Session':
        return super().__new__(
            cls,
            *args,
            proposal=proposal,
            endDate=endDate,
            session=session,
            sessionId=sessionId,
            _metadata=_metadata,
            beamLineName=beamLineName,
            proposalId=proposalId,
            startDate=startDate,
            visit_number=visit_number,
            beamLineOperator=beamLineOperator,
            scheduled=scheduled,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.session_meta_data import SessionMetaData
