# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Detector(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "detectorId",
        }
        
        class properties:
            detectorId = schemas.IntSchema
            detectorType = schemas.StrSchema
            detectorManufacturer = schemas.StrSchema
            detectorModel = schemas.StrSchema
            detectorPixelSizeHorizontal = schemas.NumberSchema
            detectorPixelSizeVertical = schemas.NumberSchema
            detectorSerialNumber = schemas.StrSchema
            detectorDistanceMin = schemas.NumberSchema
            detectorDistanceMax = schemas.NumberSchema
            trustedPixelValueRangeLower = schemas.NumberSchema
            trustedPixelValueRangeUpper = schemas.NumberSchema
            sensorThickness = schemas.NumberSchema
            overload = schemas.NumberSchema
            XGeoCorr = schemas.StrSchema
            YGeoCorr = schemas.StrSchema
            detectorMode = schemas.StrSchema
            detectorMaxResolution = schemas.NumberSchema
            detectorMinResolution = schemas.NumberSchema
            CS = schemas.NumberSchema
            density = schemas.NumberSchema
            composition = schemas.StrSchema
            localName = schemas.StrSchema
            __annotations__ = {
                "detectorId": detectorId,
                "detectorType": detectorType,
                "detectorManufacturer": detectorManufacturer,
                "detectorModel": detectorModel,
                "detectorPixelSizeHorizontal": detectorPixelSizeHorizontal,
                "detectorPixelSizeVertical": detectorPixelSizeVertical,
                "detectorSerialNumber": detectorSerialNumber,
                "detectorDistanceMin": detectorDistanceMin,
                "detectorDistanceMax": detectorDistanceMax,
                "trustedPixelValueRangeLower": trustedPixelValueRangeLower,
                "trustedPixelValueRangeUpper": trustedPixelValueRangeUpper,
                "sensorThickness": sensorThickness,
                "overload": overload,
                "XGeoCorr": XGeoCorr,
                "YGeoCorr": YGeoCorr,
                "detectorMode": detectorMode,
                "detectorMaxResolution": detectorMaxResolution,
                "detectorMinResolution": detectorMinResolution,
                "CS": CS,
                "density": density,
                "composition": composition,
                "localName": localName,
            }
    
    detectorId: MetaOapg.properties.detectorId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorId"]) -> MetaOapg.properties.detectorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorType"]) -> MetaOapg.properties.detectorType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorManufacturer"]) -> MetaOapg.properties.detectorManufacturer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorModel"]) -> MetaOapg.properties.detectorModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorPixelSizeHorizontal"]) -> MetaOapg.properties.detectorPixelSizeHorizontal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorPixelSizeVertical"]) -> MetaOapg.properties.detectorPixelSizeVertical: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorSerialNumber"]) -> MetaOapg.properties.detectorSerialNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorDistanceMin"]) -> MetaOapg.properties.detectorDistanceMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorDistanceMax"]) -> MetaOapg.properties.detectorDistanceMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trustedPixelValueRangeLower"]) -> MetaOapg.properties.trustedPixelValueRangeLower: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trustedPixelValueRangeUpper"]) -> MetaOapg.properties.trustedPixelValueRangeUpper: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensorThickness"]) -> MetaOapg.properties.sensorThickness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overload"]) -> MetaOapg.properties.overload: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["XGeoCorr"]) -> MetaOapg.properties.XGeoCorr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["YGeoCorr"]) -> MetaOapg.properties.YGeoCorr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorMode"]) -> MetaOapg.properties.detectorMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorMaxResolution"]) -> MetaOapg.properties.detectorMaxResolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detectorMinResolution"]) -> MetaOapg.properties.detectorMinResolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CS"]) -> MetaOapg.properties.CS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["density"]) -> MetaOapg.properties.density: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["composition"]) -> MetaOapg.properties.composition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localName"]) -> MetaOapg.properties.localName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["detectorId", "detectorType", "detectorManufacturer", "detectorModel", "detectorPixelSizeHorizontal", "detectorPixelSizeVertical", "detectorSerialNumber", "detectorDistanceMin", "detectorDistanceMax", "trustedPixelValueRangeLower", "trustedPixelValueRangeUpper", "sensorThickness", "overload", "XGeoCorr", "YGeoCorr", "detectorMode", "detectorMaxResolution", "detectorMinResolution", "CS", "density", "composition", "localName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorId"]) -> MetaOapg.properties.detectorId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorType"]) -> typing.Union[MetaOapg.properties.detectorType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorManufacturer"]) -> typing.Union[MetaOapg.properties.detectorManufacturer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorModel"]) -> typing.Union[MetaOapg.properties.detectorModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorPixelSizeHorizontal"]) -> typing.Union[MetaOapg.properties.detectorPixelSizeHorizontal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorPixelSizeVertical"]) -> typing.Union[MetaOapg.properties.detectorPixelSizeVertical, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorSerialNumber"]) -> typing.Union[MetaOapg.properties.detectorSerialNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorDistanceMin"]) -> typing.Union[MetaOapg.properties.detectorDistanceMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorDistanceMax"]) -> typing.Union[MetaOapg.properties.detectorDistanceMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trustedPixelValueRangeLower"]) -> typing.Union[MetaOapg.properties.trustedPixelValueRangeLower, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trustedPixelValueRangeUpper"]) -> typing.Union[MetaOapg.properties.trustedPixelValueRangeUpper, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensorThickness"]) -> typing.Union[MetaOapg.properties.sensorThickness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overload"]) -> typing.Union[MetaOapg.properties.overload, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["XGeoCorr"]) -> typing.Union[MetaOapg.properties.XGeoCorr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["YGeoCorr"]) -> typing.Union[MetaOapg.properties.YGeoCorr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorMode"]) -> typing.Union[MetaOapg.properties.detectorMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorMaxResolution"]) -> typing.Union[MetaOapg.properties.detectorMaxResolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detectorMinResolution"]) -> typing.Union[MetaOapg.properties.detectorMinResolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CS"]) -> typing.Union[MetaOapg.properties.CS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["density"]) -> typing.Union[MetaOapg.properties.density, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["composition"]) -> typing.Union[MetaOapg.properties.composition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localName"]) -> typing.Union[MetaOapg.properties.localName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["detectorId", "detectorType", "detectorManufacturer", "detectorModel", "detectorPixelSizeHorizontal", "detectorPixelSizeVertical", "detectorSerialNumber", "detectorDistanceMin", "detectorDistanceMax", "trustedPixelValueRangeLower", "trustedPixelValueRangeUpper", "sensorThickness", "overload", "XGeoCorr", "YGeoCorr", "detectorMode", "detectorMaxResolution", "detectorMinResolution", "CS", "density", "composition", "localName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        detectorId: typing.Union[MetaOapg.properties.detectorId, decimal.Decimal, int, ],
        detectorType: typing.Union[MetaOapg.properties.detectorType, str, schemas.Unset] = schemas.unset,
        detectorManufacturer: typing.Union[MetaOapg.properties.detectorManufacturer, str, schemas.Unset] = schemas.unset,
        detectorModel: typing.Union[MetaOapg.properties.detectorModel, str, schemas.Unset] = schemas.unset,
        detectorPixelSizeHorizontal: typing.Union[MetaOapg.properties.detectorPixelSizeHorizontal, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        detectorPixelSizeVertical: typing.Union[MetaOapg.properties.detectorPixelSizeVertical, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        detectorSerialNumber: typing.Union[MetaOapg.properties.detectorSerialNumber, str, schemas.Unset] = schemas.unset,
        detectorDistanceMin: typing.Union[MetaOapg.properties.detectorDistanceMin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        detectorDistanceMax: typing.Union[MetaOapg.properties.detectorDistanceMax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        trustedPixelValueRangeLower: typing.Union[MetaOapg.properties.trustedPixelValueRangeLower, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        trustedPixelValueRangeUpper: typing.Union[MetaOapg.properties.trustedPixelValueRangeUpper, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sensorThickness: typing.Union[MetaOapg.properties.sensorThickness, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        overload: typing.Union[MetaOapg.properties.overload, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        XGeoCorr: typing.Union[MetaOapg.properties.XGeoCorr, str, schemas.Unset] = schemas.unset,
        YGeoCorr: typing.Union[MetaOapg.properties.YGeoCorr, str, schemas.Unset] = schemas.unset,
        detectorMode: typing.Union[MetaOapg.properties.detectorMode, str, schemas.Unset] = schemas.unset,
        detectorMaxResolution: typing.Union[MetaOapg.properties.detectorMaxResolution, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        detectorMinResolution: typing.Union[MetaOapg.properties.detectorMinResolution, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        CS: typing.Union[MetaOapg.properties.CS, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        density: typing.Union[MetaOapg.properties.density, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        composition: typing.Union[MetaOapg.properties.composition, str, schemas.Unset] = schemas.unset,
        localName: typing.Union[MetaOapg.properties.localName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Detector':
        return super().__new__(
            cls,
            *args,
            detectorId=detectorId,
            detectorType=detectorType,
            detectorManufacturer=detectorManufacturer,
            detectorModel=detectorModel,
            detectorPixelSizeHorizontal=detectorPixelSizeHorizontal,
            detectorPixelSizeVertical=detectorPixelSizeVertical,
            detectorSerialNumber=detectorSerialNumber,
            detectorDistanceMin=detectorDistanceMin,
            detectorDistanceMax=detectorDistanceMax,
            trustedPixelValueRangeLower=trustedPixelValueRangeLower,
            trustedPixelValueRangeUpper=trustedPixelValueRangeUpper,
            sensorThickness=sensorThickness,
            overload=overload,
            XGeoCorr=XGeoCorr,
            YGeoCorr=YGeoCorr,
            detectorMode=detectorMode,
            detectorMaxResolution=detectorMaxResolution,
            detectorMinResolution=detectorMinResolution,
            CS=CS,
            density=density,
            composition=composition,
            localName=localName,
            _configuration=_configuration,
            **kwargs,
        )
