# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Workflow(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "workflowId",
        }
        
        class properties:
            workflowId = schemas.IntSchema
            comments = schemas.StrSchema
            status = schemas.StrSchema
            workflowTitle = schemas.StrSchema
            workflowType = schemas.StrSchema
            __annotations__ = {
                "workflowId": workflowId,
                "comments": comments,
                "status": status,
                "workflowTitle": workflowTitle,
                "workflowType": workflowType,
            }
    
    workflowId: MetaOapg.properties.workflowId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowId"]) -> MetaOapg.properties.workflowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowTitle"]) -> MetaOapg.properties.workflowTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowType"]) -> MetaOapg.properties.workflowType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["workflowId", "comments", "status", "workflowTitle", "workflowType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowId"]) -> MetaOapg.properties.workflowId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowTitle"]) -> typing.Union[MetaOapg.properties.workflowTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowType"]) -> typing.Union[MetaOapg.properties.workflowType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["workflowId", "comments", "status", "workflowTitle", "workflowType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        workflowId: typing.Union[MetaOapg.properties.workflowId, decimal.Decimal, int, ],
        comments: typing.Union[MetaOapg.properties.comments, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        workflowTitle: typing.Union[MetaOapg.properties.workflowTitle, str, schemas.Unset] = schemas.unset,
        workflowType: typing.Union[MetaOapg.properties.workflowType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Workflow':
        return super().__new__(
            cls,
            *args,
            workflowId=workflowId,
            comments=comments,
            status=status,
            workflowTitle=workflowTitle,
            workflowType=workflowType,
            _configuration=_configuration,
            **kwargs,
        )
