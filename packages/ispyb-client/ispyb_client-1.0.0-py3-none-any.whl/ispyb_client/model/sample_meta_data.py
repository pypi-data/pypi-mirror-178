# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SampleMetaData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "datacollections",
            "subsamples",
        }
        
        class properties:
            subsamples = schemas.IntSchema
            datacollections = schemas.IntSchema
            
            
            class types(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'types':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            queued = schemas.BoolSchema
            strategies = schemas.IntSchema
            autoIntegrations = schemas.IntSchema
            integratedResolution = schemas.AnyTypeSchema
            proposal = schemas.StrSchema
            __annotations__ = {
                "subsamples": subsamples,
                "datacollections": datacollections,
                "types": types,
                "queued": queued,
                "strategies": strategies,
                "autoIntegrations": autoIntegrations,
                "integratedResolution": integratedResolution,
                "proposal": proposal,
            }
    
    datacollections: MetaOapg.properties.datacollections
    subsamples: MetaOapg.properties.subsamples
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subsamples"]) -> MetaOapg.properties.subsamples: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datacollections"]) -> MetaOapg.properties.datacollections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["types"]) -> MetaOapg.properties.types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queued"]) -> MetaOapg.properties.queued: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strategies"]) -> MetaOapg.properties.strategies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoIntegrations"]) -> MetaOapg.properties.autoIntegrations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["integratedResolution"]) -> MetaOapg.properties.integratedResolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposal"]) -> MetaOapg.properties.proposal: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["subsamples", "datacollections", "types", "queued", "strategies", "autoIntegrations", "integratedResolution", "proposal", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subsamples"]) -> MetaOapg.properties.subsamples: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datacollections"]) -> MetaOapg.properties.datacollections: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["types"]) -> typing.Union[MetaOapg.properties.types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queued"]) -> typing.Union[MetaOapg.properties.queued, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strategies"]) -> typing.Union[MetaOapg.properties.strategies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoIntegrations"]) -> typing.Union[MetaOapg.properties.autoIntegrations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["integratedResolution"]) -> typing.Union[MetaOapg.properties.integratedResolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposal"]) -> typing.Union[MetaOapg.properties.proposal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subsamples", "datacollections", "types", "queued", "strategies", "autoIntegrations", "integratedResolution", "proposal", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        datacollections: typing.Union[MetaOapg.properties.datacollections, decimal.Decimal, int, ],
        subsamples: typing.Union[MetaOapg.properties.subsamples, decimal.Decimal, int, ],
        types: typing.Union[MetaOapg.properties.types, list, tuple, None, schemas.Unset] = schemas.unset,
        queued: typing.Union[MetaOapg.properties.queued, bool, schemas.Unset] = schemas.unset,
        strategies: typing.Union[MetaOapg.properties.strategies, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        autoIntegrations: typing.Union[MetaOapg.properties.autoIntegrations, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        integratedResolution: typing.Union[MetaOapg.properties.integratedResolution, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        proposal: typing.Union[MetaOapg.properties.proposal, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SampleMetaData':
        return super().__new__(
            cls,
            *args,
            datacollections=datacollections,
            subsamples=subsamples,
            types=types,
            queued=queued,
            strategies=strategies,
            autoIntegrations=autoIntegrations,
            integratedResolution=integratedResolution,
            proposal=proposal,
            _configuration=_configuration,
            **kwargs,
        )
