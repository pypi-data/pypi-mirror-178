# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Options(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    All available application options
    """


    class MetaOapg:
        
        class properties:
            motd = schemas.StrSchema
            
            
            class beamLineGroups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BeamLineGroup']:
                        return BeamLineGroup
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BeamLineGroup'], typing.List['BeamLineGroup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'beamLineGroups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BeamLineGroup':
                    return super().__getitem__(i)
            query_debug = schemas.BoolSchema
            enable_legacy_routes = schemas.BoolSchema
            enable_webservice_routes = schemas.BoolSchema
            create_person_on_missing = schemas.BoolSchema
            __annotations__ = {
                "motd": motd,
                "beamLineGroups": beamLineGroups,
                "query_debug": query_debug,
                "enable_legacy_routes": enable_legacy_routes,
                "enable_webservice_routes": enable_webservice_routes,
                "create_person_on_missing": create_person_on_missing,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motd"]) -> MetaOapg.properties.motd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLineGroups"]) -> MetaOapg.properties.beamLineGroups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["query_debug"]) -> MetaOapg.properties.query_debug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_legacy_routes"]) -> MetaOapg.properties.enable_legacy_routes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_webservice_routes"]) -> MetaOapg.properties.enable_webservice_routes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_person_on_missing"]) -> MetaOapg.properties.create_person_on_missing: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["motd", "beamLineGroups", "query_debug", "enable_legacy_routes", "enable_webservice_routes", "create_person_on_missing", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motd"]) -> typing.Union[MetaOapg.properties.motd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLineGroups"]) -> typing.Union[MetaOapg.properties.beamLineGroups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["query_debug"]) -> typing.Union[MetaOapg.properties.query_debug, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_legacy_routes"]) -> typing.Union[MetaOapg.properties.enable_legacy_routes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_webservice_routes"]) -> typing.Union[MetaOapg.properties.enable_webservice_routes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_person_on_missing"]) -> typing.Union[MetaOapg.properties.create_person_on_missing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["motd", "beamLineGroups", "query_debug", "enable_legacy_routes", "enable_webservice_routes", "create_person_on_missing", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        motd: typing.Union[MetaOapg.properties.motd, str, schemas.Unset] = schemas.unset,
        beamLineGroups: typing.Union[MetaOapg.properties.beamLineGroups, list, tuple, schemas.Unset] = schemas.unset,
        query_debug: typing.Union[MetaOapg.properties.query_debug, bool, schemas.Unset] = schemas.unset,
        enable_legacy_routes: typing.Union[MetaOapg.properties.enable_legacy_routes, bool, schemas.Unset] = schemas.unset,
        enable_webservice_routes: typing.Union[MetaOapg.properties.enable_webservice_routes, bool, schemas.Unset] = schemas.unset,
        create_person_on_missing: typing.Union[MetaOapg.properties.create_person_on_missing, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Options':
        return super().__new__(
            cls,
            *args,
            motd=motd,
            beamLineGroups=beamLineGroups,
            query_debug=query_debug,
            enable_legacy_routes=enable_legacy_routes,
            enable_webservice_routes=enable_webservice_routes,
            create_person_on_missing=create_person_on_missing,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.beam_line_group import BeamLineGroup
