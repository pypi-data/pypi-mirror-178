# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SSXDataCollectionProcessingStats(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dataCollectionId",
            "laticeType",
            "nbHits",
            "estimatedResolution",
            "nbIndexed",
        }
        
        class properties:
            nbHits = schemas.IntSchema
            nbIndexed = schemas.IntSchema
            laticeType = schemas.StrSchema
            estimatedResolution = schemas.NumberSchema
            dataCollectionId = schemas.IntSchema
            __annotations__ = {
                "nbHits": nbHits,
                "nbIndexed": nbIndexed,
                "laticeType": laticeType,
                "estimatedResolution": estimatedResolution,
                "dataCollectionId": dataCollectionId,
            }
    
    dataCollectionId: MetaOapg.properties.dataCollectionId
    laticeType: MetaOapg.properties.laticeType
    nbHits: MetaOapg.properties.nbHits
    estimatedResolution: MetaOapg.properties.estimatedResolution
    nbIndexed: MetaOapg.properties.nbIndexed
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nbHits"]) -> MetaOapg.properties.nbHits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nbIndexed"]) -> MetaOapg.properties.nbIndexed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["laticeType"]) -> MetaOapg.properties.laticeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimatedResolution"]) -> MetaOapg.properties.estimatedResolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nbHits", "nbIndexed", "laticeType", "estimatedResolution", "dataCollectionId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nbHits"]) -> MetaOapg.properties.nbHits: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nbIndexed"]) -> MetaOapg.properties.nbIndexed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["laticeType"]) -> MetaOapg.properties.laticeType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimatedResolution"]) -> MetaOapg.properties.estimatedResolution: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nbHits", "nbIndexed", "laticeType", "estimatedResolution", "dataCollectionId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataCollectionId: typing.Union[MetaOapg.properties.dataCollectionId, decimal.Decimal, int, ],
        laticeType: typing.Union[MetaOapg.properties.laticeType, str, ],
        nbHits: typing.Union[MetaOapg.properties.nbHits, decimal.Decimal, int, ],
        estimatedResolution: typing.Union[MetaOapg.properties.estimatedResolution, decimal.Decimal, int, float, ],
        nbIndexed: typing.Union[MetaOapg.properties.nbIndexed, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SSXDataCollectionProcessingStats':
        return super().__new__(
            cls,
            *args,
            dataCollectionId=dataCollectionId,
            laticeType=laticeType,
            nbHits=nbHits,
            estimatedResolution=estimatedResolution,
            nbIndexed=nbIndexed,
            _configuration=_configuration,
            **kwargs,
        )
