# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class CurrentUser(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "beamLineGroups",
            "beamLines",
            "familyName",
            "givenName",
            "Permissions",
            "personId",
        }
        
        class properties:
            givenName = schemas.StrSchema
            familyName = schemas.StrSchema
            
            
            class Permissions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Permissions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            personId = schemas.IntSchema
            
            
            class beamLineGroups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'beamLineGroups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class beamLines(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'beamLines':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "givenName": givenName,
                "familyName": familyName,
                "Permissions": Permissions,
                "personId": personId,
                "beamLineGroups": beamLineGroups,
                "beamLines": beamLines,
            }
    
    beamLineGroups: MetaOapg.properties.beamLineGroups
    beamLines: MetaOapg.properties.beamLines
    familyName: MetaOapg.properties.familyName
    givenName: MetaOapg.properties.givenName
    Permissions: MetaOapg.properties.Permissions
    personId: MetaOapg.properties.personId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["givenName"]) -> MetaOapg.properties.givenName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["familyName"]) -> MetaOapg.properties.familyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Permissions"]) -> MetaOapg.properties.Permissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLineGroups"]) -> MetaOapg.properties.beamLineGroups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLines"]) -> MetaOapg.properties.beamLines: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["givenName", "familyName", "Permissions", "personId", "beamLineGroups", "beamLines", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["givenName"]) -> MetaOapg.properties.givenName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["familyName"]) -> MetaOapg.properties.familyName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Permissions"]) -> MetaOapg.properties.Permissions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personId"]) -> MetaOapg.properties.personId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLineGroups"]) -> MetaOapg.properties.beamLineGroups: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLines"]) -> MetaOapg.properties.beamLines: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["givenName", "familyName", "Permissions", "personId", "beamLineGroups", "beamLines", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        beamLineGroups: typing.Union[MetaOapg.properties.beamLineGroups, list, tuple, ],
        beamLines: typing.Union[MetaOapg.properties.beamLines, list, tuple, ],
        familyName: typing.Union[MetaOapg.properties.familyName, str, ],
        givenName: typing.Union[MetaOapg.properties.givenName, str, ],
        Permissions: typing.Union[MetaOapg.properties.Permissions, list, tuple, ],
        personId: typing.Union[MetaOapg.properties.personId, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CurrentUser':
        return super().__new__(
            cls,
            *args,
            beamLineGroups=beamLineGroups,
            beamLines=beamLines,
            familyName=familyName,
            givenName=givenName,
            Permissions=Permissions,
            personId=personId,
            _configuration=_configuration,
            **kwargs,
        )
