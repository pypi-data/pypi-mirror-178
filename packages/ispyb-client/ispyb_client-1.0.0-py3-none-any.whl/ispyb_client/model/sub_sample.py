# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SubSample(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "blSubSampleId",
            "BLSample",
            "blSampleId",
            "_metadata",
        }
        
        class properties:
            blSampleId = schemas.IntSchema
        
            @staticmethod
            def _metadata() -> typing.Type['SubSampleMetaData']:
                return SubSampleMetaData
            blSubSampleId = schemas.IntSchema
        
            @staticmethod
            def BLSample() -> typing.Type['SubSampleSample']:
                return SubSampleSample
            type = schemas.StrSchema
            comments = schemas.AnyTypeSchema
        
            @staticmethod
            def Position1() -> typing.Type['Position']:
                return Position
        
            @staticmethod
            def Position2() -> typing.Type['Position']:
                return Position
            __annotations__ = {
                "blSampleId": blSampleId,
                "_metadata": _metadata,
                "blSubSampleId": blSubSampleId,
                "BLSample": BLSample,
                "type": type,
                "comments": comments,
                "Position1": Position1,
                "Position2": Position2,
            }
    
    blSubSampleId: MetaOapg.properties.blSubSampleId
    BLSample: 'SubSampleSample'
    blSampleId: MetaOapg.properties.blSampleId
    _metadata: 'SubSampleMetaData'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blSampleId"]) -> MetaOapg.properties.blSampleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_metadata"]) -> 'SubSampleMetaData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blSubSampleId"]) -> MetaOapg.properties.blSubSampleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BLSample"]) -> 'SubSampleSample': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Position1"]) -> 'Position': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Position2"]) -> 'Position': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["blSampleId", "_metadata", "blSubSampleId", "BLSample", "type", "comments", "Position1", "Position2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blSampleId"]) -> MetaOapg.properties.blSampleId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_metadata"]) -> 'SubSampleMetaData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blSubSampleId"]) -> MetaOapg.properties.blSubSampleId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BLSample"]) -> 'SubSampleSample': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Position1"]) -> typing.Union['Position', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Position2"]) -> typing.Union['Position', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["blSampleId", "_metadata", "blSubSampleId", "BLSample", "type", "comments", "Position1", "Position2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        blSubSampleId: typing.Union[MetaOapg.properties.blSubSampleId, decimal.Decimal, int, ],
        BLSample: 'SubSampleSample',
        blSampleId: typing.Union[MetaOapg.properties.blSampleId, decimal.Decimal, int, ],
        _metadata: 'SubSampleMetaData',
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        Position1: typing.Union['Position', schemas.Unset] = schemas.unset,
        Position2: typing.Union['Position', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubSample':
        return super().__new__(
            cls,
            *args,
            blSubSampleId=blSubSampleId,
            BLSample=BLSample,
            blSampleId=blSampleId,
            _metadata=_metadata,
            type=type,
            comments=comments,
            Position1=Position1,
            Position2=Position2,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.position import Position
from ispyb_client.model.sub_sample_meta_data import SubSampleMetaData
from ispyb_client.model.sub_sample_sample import SubSampleSample
