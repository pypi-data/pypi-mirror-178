# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SessionResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "bltimeStamp",
            "sessionId",
            "proposalId",
        }
        
        class properties:
            sessionId = schemas.IntSchema
            proposalId = schemas.IntSchema
            bltimeStamp = schemas.DateTimeSchema
            expSessionPk = schemas.IntSchema
            beamLineSetupId = schemas.IntSchema
            projectCode = schemas.StrSchema
            startDate = schemas.DateTimeSchema
            endDate = schemas.DateTimeSchema
            beamLineName = schemas.StrSchema
            scheduled = schemas.IntSchema
            nbShifts = schemas.IntSchema
            comments = schemas.StrSchema
            beamLineOperator = schemas.StrSchema
            visit_number = schemas.IntSchema
            usedFlag = schemas.IntSchema
            sessionTitle = schemas.StrSchema
            structureDeterminations = schemas.NumberSchema
            dewarTransport = schemas.NumberSchema
            databackupFrance = schemas.NumberSchema
            databackupEurope = schemas.NumberSchema
            operatorSiteNumber = schemas.StrSchema
            lastUpdate = schemas.DateTimeSchema
            protectedData = schemas.StrSchema
            externalId = schemas.BinarySchema
            nbReimbDewars = schemas.IntSchema
        
            @staticmethod
            def BeamLineSetup() -> typing.Type['BeamLineSetup']:
                return BeamLineSetup
            __annotations__ = {
                "sessionId": sessionId,
                "proposalId": proposalId,
                "bltimeStamp": bltimeStamp,
                "expSessionPk": expSessionPk,
                "beamLineSetupId": beamLineSetupId,
                "projectCode": projectCode,
                "startDate": startDate,
                "endDate": endDate,
                "beamLineName": beamLineName,
                "scheduled": scheduled,
                "nbShifts": nbShifts,
                "comments": comments,
                "beamLineOperator": beamLineOperator,
                "visit_number": visit_number,
                "usedFlag": usedFlag,
                "sessionTitle": sessionTitle,
                "structureDeterminations": structureDeterminations,
                "dewarTransport": dewarTransport,
                "databackupFrance": databackupFrance,
                "databackupEurope": databackupEurope,
                "operatorSiteNumber": operatorSiteNumber,
                "lastUpdate": lastUpdate,
                "protectedData": protectedData,
                "externalId": externalId,
                "nbReimbDewars": nbReimbDewars,
                "BeamLineSetup": BeamLineSetup,
            }
    
    bltimeStamp: MetaOapg.properties.bltimeStamp
    sessionId: MetaOapg.properties.sessionId
    proposalId: MetaOapg.properties.proposalId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposalId"]) -> MetaOapg.properties.proposalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bltimeStamp"]) -> MetaOapg.properties.bltimeStamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expSessionPk"]) -> MetaOapg.properties.expSessionPk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLineSetupId"]) -> MetaOapg.properties.beamLineSetupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectCode"]) -> MetaOapg.properties.projectCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLineName"]) -> MetaOapg.properties.beamLineName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled"]) -> MetaOapg.properties.scheduled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nbShifts"]) -> MetaOapg.properties.nbShifts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLineOperator"]) -> MetaOapg.properties.beamLineOperator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visit_number"]) -> MetaOapg.properties.visit_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usedFlag"]) -> MetaOapg.properties.usedFlag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionTitle"]) -> MetaOapg.properties.sessionTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["structureDeterminations"]) -> MetaOapg.properties.structureDeterminations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dewarTransport"]) -> MetaOapg.properties.dewarTransport: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["databackupFrance"]) -> MetaOapg.properties.databackupFrance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["databackupEurope"]) -> MetaOapg.properties.databackupEurope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operatorSiteNumber"]) -> MetaOapg.properties.operatorSiteNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdate"]) -> MetaOapg.properties.lastUpdate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protectedData"]) -> MetaOapg.properties.protectedData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalId"]) -> MetaOapg.properties.externalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nbReimbDewars"]) -> MetaOapg.properties.nbReimbDewars: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BeamLineSetup"]) -> 'BeamLineSetup': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sessionId", "proposalId", "bltimeStamp", "expSessionPk", "beamLineSetupId", "projectCode", "startDate", "endDate", "beamLineName", "scheduled", "nbShifts", "comments", "beamLineOperator", "visit_number", "usedFlag", "sessionTitle", "structureDeterminations", "dewarTransport", "databackupFrance", "databackupEurope", "operatorSiteNumber", "lastUpdate", "protectedData", "externalId", "nbReimbDewars", "BeamLineSetup", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposalId"]) -> MetaOapg.properties.proposalId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bltimeStamp"]) -> MetaOapg.properties.bltimeStamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expSessionPk"]) -> typing.Union[MetaOapg.properties.expSessionPk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLineSetupId"]) -> typing.Union[MetaOapg.properties.beamLineSetupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectCode"]) -> typing.Union[MetaOapg.properties.projectCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLineName"]) -> typing.Union[MetaOapg.properties.beamLineName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled"]) -> typing.Union[MetaOapg.properties.scheduled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nbShifts"]) -> typing.Union[MetaOapg.properties.nbShifts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLineOperator"]) -> typing.Union[MetaOapg.properties.beamLineOperator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visit_number"]) -> typing.Union[MetaOapg.properties.visit_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usedFlag"]) -> typing.Union[MetaOapg.properties.usedFlag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionTitle"]) -> typing.Union[MetaOapg.properties.sessionTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["structureDeterminations"]) -> typing.Union[MetaOapg.properties.structureDeterminations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dewarTransport"]) -> typing.Union[MetaOapg.properties.dewarTransport, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["databackupFrance"]) -> typing.Union[MetaOapg.properties.databackupFrance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["databackupEurope"]) -> typing.Union[MetaOapg.properties.databackupEurope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operatorSiteNumber"]) -> typing.Union[MetaOapg.properties.operatorSiteNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdate"]) -> typing.Union[MetaOapg.properties.lastUpdate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protectedData"]) -> typing.Union[MetaOapg.properties.protectedData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalId"]) -> typing.Union[MetaOapg.properties.externalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nbReimbDewars"]) -> typing.Union[MetaOapg.properties.nbReimbDewars, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BeamLineSetup"]) -> typing.Union['BeamLineSetup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sessionId", "proposalId", "bltimeStamp", "expSessionPk", "beamLineSetupId", "projectCode", "startDate", "endDate", "beamLineName", "scheduled", "nbShifts", "comments", "beamLineOperator", "visit_number", "usedFlag", "sessionTitle", "structureDeterminations", "dewarTransport", "databackupFrance", "databackupEurope", "operatorSiteNumber", "lastUpdate", "protectedData", "externalId", "nbReimbDewars", "BeamLineSetup", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bltimeStamp: typing.Union[MetaOapg.properties.bltimeStamp, str, datetime, ],
        sessionId: typing.Union[MetaOapg.properties.sessionId, decimal.Decimal, int, ],
        proposalId: typing.Union[MetaOapg.properties.proposalId, decimal.Decimal, int, ],
        expSessionPk: typing.Union[MetaOapg.properties.expSessionPk, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        beamLineSetupId: typing.Union[MetaOapg.properties.beamLineSetupId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        projectCode: typing.Union[MetaOapg.properties.projectCode, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, datetime, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, datetime, schemas.Unset] = schemas.unset,
        beamLineName: typing.Union[MetaOapg.properties.beamLineName, str, schemas.Unset] = schemas.unset,
        scheduled: typing.Union[MetaOapg.properties.scheduled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nbShifts: typing.Union[MetaOapg.properties.nbShifts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, str, schemas.Unset] = schemas.unset,
        beamLineOperator: typing.Union[MetaOapg.properties.beamLineOperator, str, schemas.Unset] = schemas.unset,
        visit_number: typing.Union[MetaOapg.properties.visit_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        usedFlag: typing.Union[MetaOapg.properties.usedFlag, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sessionTitle: typing.Union[MetaOapg.properties.sessionTitle, str, schemas.Unset] = schemas.unset,
        structureDeterminations: typing.Union[MetaOapg.properties.structureDeterminations, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dewarTransport: typing.Union[MetaOapg.properties.dewarTransport, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        databackupFrance: typing.Union[MetaOapg.properties.databackupFrance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        databackupEurope: typing.Union[MetaOapg.properties.databackupEurope, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        operatorSiteNumber: typing.Union[MetaOapg.properties.operatorSiteNumber, str, schemas.Unset] = schemas.unset,
        lastUpdate: typing.Union[MetaOapg.properties.lastUpdate, str, datetime, schemas.Unset] = schemas.unset,
        protectedData: typing.Union[MetaOapg.properties.protectedData, str, schemas.Unset] = schemas.unset,
        externalId: typing.Union[MetaOapg.properties.externalId, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        nbReimbDewars: typing.Union[MetaOapg.properties.nbReimbDewars, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        BeamLineSetup: typing.Union['BeamLineSetup', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SessionResponse':
        return super().__new__(
            cls,
            *args,
            bltimeStamp=bltimeStamp,
            sessionId=sessionId,
            proposalId=proposalId,
            expSessionPk=expSessionPk,
            beamLineSetupId=beamLineSetupId,
            projectCode=projectCode,
            startDate=startDate,
            endDate=endDate,
            beamLineName=beamLineName,
            scheduled=scheduled,
            nbShifts=nbShifts,
            comments=comments,
            beamLineOperator=beamLineOperator,
            visit_number=visit_number,
            usedFlag=usedFlag,
            sessionTitle=sessionTitle,
            structureDeterminations=structureDeterminations,
            dewarTransport=dewarTransport,
            databackupFrance=databackupFrance,
            databackupEurope=databackupEurope,
            operatorSiteNumber=operatorSiteNumber,
            lastUpdate=lastUpdate,
            protectedData=protectedData,
            externalId=externalId,
            nbReimbDewars=nbReimbDewars,
            BeamLineSetup=BeamLineSetup,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.beam_line_setup import BeamLineSetup
