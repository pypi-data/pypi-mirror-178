# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class PerImageAnalysis(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            dataCollectionId = schemas.IntSchema
            
            
            class imageNumber(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'imageNumber':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class totalIntegratedSignal(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.NumberSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'totalIntegratedSignal':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class goodBraggCandidates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'goodBraggCandidates':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class method2Res(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.NumberSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'method2Res':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "dataCollectionId": dataCollectionId,
                "imageNumber": imageNumber,
                "totalIntegratedSignal": totalIntegratedSignal,
                "goodBraggCandidates": goodBraggCandidates,
                "method2Res": method2Res,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imageNumber"]) -> MetaOapg.properties.imageNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalIntegratedSignal"]) -> MetaOapg.properties.totalIntegratedSignal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goodBraggCandidates"]) -> MetaOapg.properties.goodBraggCandidates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method2Res"]) -> MetaOapg.properties.method2Res: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataCollectionId", "imageNumber", "totalIntegratedSignal", "goodBraggCandidates", "method2Res", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataCollectionId"]) -> typing.Union[MetaOapg.properties.dataCollectionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imageNumber"]) -> typing.Union[MetaOapg.properties.imageNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalIntegratedSignal"]) -> typing.Union[MetaOapg.properties.totalIntegratedSignal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goodBraggCandidates"]) -> typing.Union[MetaOapg.properties.goodBraggCandidates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method2Res"]) -> typing.Union[MetaOapg.properties.method2Res, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataCollectionId", "imageNumber", "totalIntegratedSignal", "goodBraggCandidates", "method2Res", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataCollectionId: typing.Union[MetaOapg.properties.dataCollectionId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        imageNumber: typing.Union[MetaOapg.properties.imageNumber, list, tuple, schemas.Unset] = schemas.unset,
        totalIntegratedSignal: typing.Union[MetaOapg.properties.totalIntegratedSignal, list, tuple, schemas.Unset] = schemas.unset,
        goodBraggCandidates: typing.Union[MetaOapg.properties.goodBraggCandidates, list, tuple, schemas.Unset] = schemas.unset,
        method2Res: typing.Union[MetaOapg.properties.method2Res, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PerImageAnalysis':
        return super().__new__(
            cls,
            *args,
            dataCollectionId=dataCollectionId,
            imageNumber=imageNumber,
            totalIntegratedSignal=totalIntegratedSignal,
            goodBraggCandidates=goodBraggCandidates,
            method2Res=method2Res,
            _configuration=_configuration,
            **kwargs,
        )
