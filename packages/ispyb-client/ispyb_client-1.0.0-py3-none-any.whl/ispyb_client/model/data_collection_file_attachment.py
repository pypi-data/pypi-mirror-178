# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class DataCollectionFileAttachment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "dataCollectionFileAttachmentId",
            "dataCollectionId",
            "_metadata",
            "fileType",
        }
        
        class properties:
            dataCollectionFileAttachmentId = schemas.IntSchema
            dataCollectionId = schemas.IntSchema
            fileType = schemas.StrSchema
        
            @staticmethod
            def _metadata() -> typing.Type['DataCollectionFileAttachmentMetaData']:
                return DataCollectionFileAttachmentMetaData
            __annotations__ = {
                "dataCollectionFileAttachmentId": dataCollectionFileAttachmentId,
                "dataCollectionId": dataCollectionId,
                "fileType": fileType,
                "_metadata": _metadata,
            }
    
    dataCollectionFileAttachmentId: MetaOapg.properties.dataCollectionFileAttachmentId
    dataCollectionId: MetaOapg.properties.dataCollectionId
    _metadata: 'DataCollectionFileAttachmentMetaData'
    fileType: MetaOapg.properties.fileType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataCollectionFileAttachmentId"]) -> MetaOapg.properties.dataCollectionFileAttachmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileType"]) -> MetaOapg.properties.fileType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_metadata"]) -> 'DataCollectionFileAttachmentMetaData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataCollectionFileAttachmentId", "dataCollectionId", "fileType", "_metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataCollectionFileAttachmentId"]) -> MetaOapg.properties.dataCollectionFileAttachmentId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataCollectionId"]) -> MetaOapg.properties.dataCollectionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileType"]) -> MetaOapg.properties.fileType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_metadata"]) -> 'DataCollectionFileAttachmentMetaData': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataCollectionFileAttachmentId", "dataCollectionId", "fileType", "_metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        dataCollectionFileAttachmentId: typing.Union[MetaOapg.properties.dataCollectionFileAttachmentId, decimal.Decimal, int, ],
        dataCollectionId: typing.Union[MetaOapg.properties.dataCollectionId, decimal.Decimal, int, ],
        _metadata: 'DataCollectionFileAttachmentMetaData',
        fileType: typing.Union[MetaOapg.properties.fileType, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataCollectionFileAttachment':
        return super().__new__(
            cls,
            *args,
            dataCollectionFileAttachmentId=dataCollectionFileAttachmentId,
            dataCollectionId=dataCollectionId,
            _metadata=_metadata,
            fileType=fileType,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.data_collection_file_attachment_meta_data import DataCollectionFileAttachmentMetaData
