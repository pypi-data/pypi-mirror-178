# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Protein(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "proteinId",
            "acronym",
            "name",
            "proposalId",
        }
        
        class properties:
            name = schemas.StrSchema
            acronym = schemas.StrSchema
            proposalId = schemas.IntSchema
            proteinId = schemas.IntSchema
            sequence = schemas.StrSchema
            density = schemas.NumberSchema
            molecularMass = schemas.NumberSchema
            containmentLevel = schemas.StrSchema
            hazardGroup = schemas.StrSchema
            safetyLevel = schemas.StrSchema
        
            @staticmethod
            def ComponentType() -> typing.Type['PyispybCoreSchemasProteinComponentType']:
                return PyispybCoreSchemasProteinComponentType
        
            @staticmethod
            def _metadata() -> typing.Type['ProteinMetaData']:
                return ProteinMetaData
            __annotations__ = {
                "name": name,
                "acronym": acronym,
                "proposalId": proposalId,
                "proteinId": proteinId,
                "sequence": sequence,
                "density": density,
                "molecularMass": molecularMass,
                "containmentLevel": containmentLevel,
                "hazardGroup": hazardGroup,
                "safetyLevel": safetyLevel,
                "ComponentType": ComponentType,
                "_metadata": _metadata,
            }
    
    proteinId: MetaOapg.properties.proteinId
    acronym: MetaOapg.properties.acronym
    name: MetaOapg.properties.name
    proposalId: MetaOapg.properties.proposalId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acronym"]) -> MetaOapg.properties.acronym: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposalId"]) -> MetaOapg.properties.proposalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proteinId"]) -> MetaOapg.properties.proteinId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequence"]) -> MetaOapg.properties.sequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["density"]) -> MetaOapg.properties.density: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["molecularMass"]) -> MetaOapg.properties.molecularMass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containmentLevel"]) -> MetaOapg.properties.containmentLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hazardGroup"]) -> MetaOapg.properties.hazardGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["safetyLevel"]) -> MetaOapg.properties.safetyLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ComponentType"]) -> 'PyispybCoreSchemasProteinComponentType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_metadata"]) -> 'ProteinMetaData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "acronym", "proposalId", "proteinId", "sequence", "density", "molecularMass", "containmentLevel", "hazardGroup", "safetyLevel", "ComponentType", "_metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acronym"]) -> MetaOapg.properties.acronym: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposalId"]) -> MetaOapg.properties.proposalId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proteinId"]) -> MetaOapg.properties.proteinId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequence"]) -> typing.Union[MetaOapg.properties.sequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["density"]) -> typing.Union[MetaOapg.properties.density, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["molecularMass"]) -> typing.Union[MetaOapg.properties.molecularMass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containmentLevel"]) -> typing.Union[MetaOapg.properties.containmentLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hazardGroup"]) -> typing.Union[MetaOapg.properties.hazardGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["safetyLevel"]) -> typing.Union[MetaOapg.properties.safetyLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ComponentType"]) -> typing.Union['PyispybCoreSchemasProteinComponentType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_metadata"]) -> typing.Union['ProteinMetaData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "acronym", "proposalId", "proteinId", "sequence", "density", "molecularMass", "containmentLevel", "hazardGroup", "safetyLevel", "ComponentType", "_metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        proteinId: typing.Union[MetaOapg.properties.proteinId, decimal.Decimal, int, ],
        acronym: typing.Union[MetaOapg.properties.acronym, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        proposalId: typing.Union[MetaOapg.properties.proposalId, decimal.Decimal, int, ],
        sequence: typing.Union[MetaOapg.properties.sequence, str, schemas.Unset] = schemas.unset,
        density: typing.Union[MetaOapg.properties.density, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        molecularMass: typing.Union[MetaOapg.properties.molecularMass, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        containmentLevel: typing.Union[MetaOapg.properties.containmentLevel, str, schemas.Unset] = schemas.unset,
        hazardGroup: typing.Union[MetaOapg.properties.hazardGroup, str, schemas.Unset] = schemas.unset,
        safetyLevel: typing.Union[MetaOapg.properties.safetyLevel, str, schemas.Unset] = schemas.unset,
        ComponentType: typing.Union['PyispybCoreSchemasProteinComponentType', schemas.Unset] = schemas.unset,
        _metadata: typing.Union['ProteinMetaData', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Protein':
        return super().__new__(
            cls,
            *args,
            proteinId=proteinId,
            acronym=acronym,
            name=name,
            proposalId=proposalId,
            sequence=sequence,
            density=density,
            molecularMass=molecularMass,
            containmentLevel=containmentLevel,
            hazardGroup=hazardGroup,
            safetyLevel=safetyLevel,
            ComponentType=ComponentType,
            _metadata=_metadata,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.protein_meta_data import ProteinMetaData
from ispyb_client.model.pyispyb_core_schemas_protein_component_type import PyispybCoreSchemasProteinComponentType
