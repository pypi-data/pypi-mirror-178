# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class Sample(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "blSampleId",
            "name",
            "Crystal",
        }
        
        class properties:
            name = schemas.StrSchema
            blSampleId = schemas.IntSchema
            
            
            class Crystal(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            SampleCrystal,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Crystal':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            comments = schemas.AnyTypeSchema
            location = schemas.IntSchema
            containerId = schemas.IntSchema
        
            @staticmethod
            def _metadata() -> typing.Type['SampleMetaData']:
                return SampleMetaData
            
            
            class Container(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            SampleContainer,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Container':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class sample_compositions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Composition']:
                        return Composition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Composition'], typing.List['Composition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sample_compositions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Composition':
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "blSampleId": blSampleId,
                "Crystal": Crystal,
                "comments": comments,
                "location": location,
                "containerId": containerId,
                "_metadata": _metadata,
                "Container": Container,
                "sample_compositions": sample_compositions,
            }
    
    blSampleId: MetaOapg.properties.blSampleId
    name: MetaOapg.properties.name
    Crystal: MetaOapg.properties.Crystal
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blSampleId"]) -> MetaOapg.properties.blSampleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Crystal"]) -> MetaOapg.properties.Crystal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containerId"]) -> MetaOapg.properties.containerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_metadata"]) -> 'SampleMetaData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Container"]) -> MetaOapg.properties.Container: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sample_compositions"]) -> MetaOapg.properties.sample_compositions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "blSampleId", "Crystal", "comments", "location", "containerId", "_metadata", "Container", "sample_compositions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blSampleId"]) -> MetaOapg.properties.blSampleId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Crystal"]) -> MetaOapg.properties.Crystal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containerId"]) -> typing.Union[MetaOapg.properties.containerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_metadata"]) -> typing.Union['SampleMetaData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Container"]) -> typing.Union[MetaOapg.properties.Container, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sample_compositions"]) -> typing.Union[MetaOapg.properties.sample_compositions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "blSampleId", "Crystal", "comments", "location", "containerId", "_metadata", "Container", "sample_compositions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        blSampleId: typing.Union[MetaOapg.properties.blSampleId, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        Crystal: typing.Union[MetaOapg.properties.Crystal, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        comments: typing.Union[MetaOapg.properties.comments, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        containerId: typing.Union[MetaOapg.properties.containerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _metadata: typing.Union['SampleMetaData', schemas.Unset] = schemas.unset,
        Container: typing.Union[MetaOapg.properties.Container, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        sample_compositions: typing.Union[MetaOapg.properties.sample_compositions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Sample':
        return super().__new__(
            cls,
            *args,
            blSampleId=blSampleId,
            name=name,
            Crystal=Crystal,
            comments=comments,
            location=location,
            containerId=containerId,
            _metadata=_metadata,
            Container=Container,
            sample_compositions=sample_compositions,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.composition import Composition
from ispyb_client.model.sample_container import SampleContainer
from ispyb_client.model.sample_crystal import SampleCrystal
from ispyb_client.model.sample_meta_data import SampleMetaData
