# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class SSXDataCollectionGroupCreate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "startTime",
            "sessionId",
            "sample",
        }
        
        class properties:
            sessionId = schemas.IntSchema
            startTime = schemas.DateTimeSchema
        
            @staticmethod
            def sample() -> typing.Type['SSXSampleCreate']:
                return SSXSampleCreate
            endTime = schemas.DateTimeSchema
            
            
            class experimentType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SSX-Chip": "CHIP",
                        "SSX-Jet": "JET",
                    }
                
                @schemas.classproperty
                def CHIP(cls):
                    return cls("SSX-Chip")
                
                @schemas.classproperty
                def JET(cls):
                    return cls("SSX-Jet")
            comments = schemas.StrSchema
            __annotations__ = {
                "sessionId": sessionId,
                "startTime": startTime,
                "sample": sample,
                "endTime": endTime,
                "experimentType": experimentType,
                "comments": comments,
            }
    
    startTime: MetaOapg.properties.startTime
    sessionId: MetaOapg.properties.sessionId
    sample: 'SSXSampleCreate'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sample"]) -> 'SSXSampleCreate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endTime"]) -> MetaOapg.properties.endTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["experimentType"]) -> MetaOapg.properties.experimentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sessionId", "startTime", "sample", "endTime", "experimentType", "comments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sample"]) -> 'SSXSampleCreate': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endTime"]) -> typing.Union[MetaOapg.properties.endTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["experimentType"]) -> typing.Union[MetaOapg.properties.experimentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sessionId", "startTime", "sample", "endTime", "experimentType", "comments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        startTime: typing.Union[MetaOapg.properties.startTime, str, datetime, ],
        sessionId: typing.Union[MetaOapg.properties.sessionId, decimal.Decimal, int, ],
        sample: 'SSXSampleCreate',
        endTime: typing.Union[MetaOapg.properties.endTime, str, datetime, schemas.Unset] = schemas.unset,
        experimentType: typing.Union[MetaOapg.properties.experimentType, str, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SSXDataCollectionGroupCreate':
        return super().__new__(
            cls,
            *args,
            startTime=startTime,
            sessionId=sessionId,
            sample=sample,
            endTime=endTime,
            experimentType=experimentType,
            comments=comments,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.ssx_sample_create import SSXSampleCreate
