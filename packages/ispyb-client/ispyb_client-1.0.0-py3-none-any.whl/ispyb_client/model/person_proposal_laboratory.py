# coding: utf-8

"""
    py-ISPyB

    FastAPI Prototype  # noqa: E501

    The version of the OpenAPI document: 0.1alpha
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ispyb_client import schemas  # noqa: F401


class PersonProposalLaboratory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            siteId = schemas.IntSchema
            personUUID = schemas.StrSchema
            familyName = schemas.StrSchema
            givenName = schemas.StrSchema
            title = schemas.StrSchema
            emailAddress = schemas.StrSchema
            phoneNumber = schemas.StrSchema
            login = schemas.StrSchema
            passwd = schemas.StrSchema
            faxNumber = schemas.StrSchema
            externalId = schemas.IntSchema
            cache = schemas.StrSchema
        
            @staticmethod
            def laboratory() -> typing.Type['LaboratoryCreate']:
                return LaboratoryCreate
            __annotations__ = {
                "siteId": siteId,
                "personUUID": personUUID,
                "familyName": familyName,
                "givenName": givenName,
                "title": title,
                "emailAddress": emailAddress,
                "phoneNumber": phoneNumber,
                "login": login,
                "passwd": passwd,
                "faxNumber": faxNumber,
                "externalId": externalId,
                "cache": cache,
                "laboratory": laboratory,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["siteId"]) -> MetaOapg.properties.siteId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personUUID"]) -> MetaOapg.properties.personUUID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["familyName"]) -> MetaOapg.properties.familyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["givenName"]) -> MetaOapg.properties.givenName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailAddress"]) -> MetaOapg.properties.emailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["login"]) -> MetaOapg.properties.login: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passwd"]) -> MetaOapg.properties.passwd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["faxNumber"]) -> MetaOapg.properties.faxNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalId"]) -> MetaOapg.properties.externalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cache"]) -> MetaOapg.properties.cache: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["laboratory"]) -> 'LaboratoryCreate': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["siteId", "personUUID", "familyName", "givenName", "title", "emailAddress", "phoneNumber", "login", "passwd", "faxNumber", "externalId", "cache", "laboratory", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["siteId"]) -> typing.Union[MetaOapg.properties.siteId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personUUID"]) -> typing.Union[MetaOapg.properties.personUUID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["familyName"]) -> typing.Union[MetaOapg.properties.familyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["givenName"]) -> typing.Union[MetaOapg.properties.givenName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailAddress"]) -> typing.Union[MetaOapg.properties.emailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> typing.Union[MetaOapg.properties.phoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["login"]) -> typing.Union[MetaOapg.properties.login, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passwd"]) -> typing.Union[MetaOapg.properties.passwd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["faxNumber"]) -> typing.Union[MetaOapg.properties.faxNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalId"]) -> typing.Union[MetaOapg.properties.externalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cache"]) -> typing.Union[MetaOapg.properties.cache, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["laboratory"]) -> typing.Union['LaboratoryCreate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["siteId", "personUUID", "familyName", "givenName", "title", "emailAddress", "phoneNumber", "login", "passwd", "faxNumber", "externalId", "cache", "laboratory", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        siteId: typing.Union[MetaOapg.properties.siteId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        personUUID: typing.Union[MetaOapg.properties.personUUID, str, schemas.Unset] = schemas.unset,
        familyName: typing.Union[MetaOapg.properties.familyName, str, schemas.Unset] = schemas.unset,
        givenName: typing.Union[MetaOapg.properties.givenName, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        emailAddress: typing.Union[MetaOapg.properties.emailAddress, str, schemas.Unset] = schemas.unset,
        phoneNumber: typing.Union[MetaOapg.properties.phoneNumber, str, schemas.Unset] = schemas.unset,
        login: typing.Union[MetaOapg.properties.login, str, schemas.Unset] = schemas.unset,
        passwd: typing.Union[MetaOapg.properties.passwd, str, schemas.Unset] = schemas.unset,
        faxNumber: typing.Union[MetaOapg.properties.faxNumber, str, schemas.Unset] = schemas.unset,
        externalId: typing.Union[MetaOapg.properties.externalId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cache: typing.Union[MetaOapg.properties.cache, str, schemas.Unset] = schemas.unset,
        laboratory: typing.Union['LaboratoryCreate', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PersonProposalLaboratory':
        return super().__new__(
            cls,
            *args,
            siteId=siteId,
            personUUID=personUUID,
            familyName=familyName,
            givenName=givenName,
            title=title,
            emailAddress=emailAddress,
            phoneNumber=phoneNumber,
            login=login,
            passwd=passwd,
            faxNumber=faxNumber,
            externalId=externalId,
            cache=cache,
            laboratory=laboratory,
            _configuration=_configuration,
            **kwargs,
        )

from ispyb_client.model.laboratory_create import LaboratoryCreate
