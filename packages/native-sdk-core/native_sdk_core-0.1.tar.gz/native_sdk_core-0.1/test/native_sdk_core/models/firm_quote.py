# coding: utf-8

"""
    nativeSDK

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FirmQuote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maker_token': 'str',
        'taker_token': 'str',
        'maker_amount': 'float',
        'taker_amount': 'float',
        'maker': 'str',
        'taker': 'str',
        'chain_id': 'float',
        'verifying_contract': 'str',
        'tx_origin': 'str',
        'pool': 'str',
        'salt': 'float',
        'expiry': 'float',
        'signature': 'object',
        'call_data': 'str'
    }

    attribute_map = {
        'maker_token': 'makerToken',
        'taker_token': 'takerToken',
        'maker_amount': 'makerAmount',
        'taker_amount': 'takerAmount',
        'maker': 'maker',
        'taker': 'taker',
        'chain_id': 'chainId',
        'verifying_contract': 'verifyingContract',
        'tx_origin': 'txOrigin',
        'pool': 'pool',
        'salt': 'salt',
        'expiry': 'expiry',
        'signature': 'signature',
        'call_data': 'call_data'
    }

    def __init__(self, maker_token=None, taker_token=None, maker_amount=None, taker_amount=None, maker=None, taker=None, chain_id=None, verifying_contract=None, tx_origin=None, pool=None, salt=None, expiry=None, signature=None, call_data=None):  # noqa: E501
        """FirmQuote - a model defined in Swagger"""  # noqa: E501
        self._maker_token = None
        self._taker_token = None
        self._maker_amount = None
        self._taker_amount = None
        self._maker = None
        self._taker = None
        self._chain_id = None
        self._verifying_contract = None
        self._tx_origin = None
        self._pool = None
        self._salt = None
        self._expiry = None
        self._signature = None
        self._call_data = None
        self.discriminator = None
        if maker_token is not None:
            self.maker_token = maker_token
        if taker_token is not None:
            self.taker_token = taker_token
        if maker_amount is not None:
            self.maker_amount = maker_amount
        if taker_amount is not None:
            self.taker_amount = taker_amount
        if maker is not None:
            self.maker = maker
        if taker is not None:
            self.taker = taker
        if chain_id is not None:
            self.chain_id = chain_id
        if verifying_contract is not None:
            self.verifying_contract = verifying_contract
        if tx_origin is not None:
            self.tx_origin = tx_origin
        if pool is not None:
            self.pool = pool
        if salt is not None:
            self.salt = salt
        if expiry is not None:
            self.expiry = expiry
        if signature is not None:
            self.signature = signature
        if call_data is not None:
            self.call_data = call_data

    @property
    def maker_token(self):
        """Gets the maker_token of this FirmQuote.  # noqa: E501


        :return: The maker_token of this FirmQuote.  # noqa: E501
        :rtype: str
        """
        return self._maker_token

    @maker_token.setter
    def maker_token(self, maker_token):
        """Sets the maker_token of this FirmQuote.


        :param maker_token: The maker_token of this FirmQuote.  # noqa: E501
        :type: str
        """

        self._maker_token = maker_token

    @property
    def taker_token(self):
        """Gets the taker_token of this FirmQuote.  # noqa: E501


        :return: The taker_token of this FirmQuote.  # noqa: E501
        :rtype: str
        """
        return self._taker_token

    @taker_token.setter
    def taker_token(self, taker_token):
        """Sets the taker_token of this FirmQuote.


        :param taker_token: The taker_token of this FirmQuote.  # noqa: E501
        :type: str
        """

        self._taker_token = taker_token

    @property
    def maker_amount(self):
        """Gets the maker_amount of this FirmQuote.  # noqa: E501


        :return: The maker_amount of this FirmQuote.  # noqa: E501
        :rtype: float
        """
        return self._maker_amount

    @maker_amount.setter
    def maker_amount(self, maker_amount):
        """Sets the maker_amount of this FirmQuote.


        :param maker_amount: The maker_amount of this FirmQuote.  # noqa: E501
        :type: float
        """

        self._maker_amount = maker_amount

    @property
    def taker_amount(self):
        """Gets the taker_amount of this FirmQuote.  # noqa: E501


        :return: The taker_amount of this FirmQuote.  # noqa: E501
        :rtype: float
        """
        return self._taker_amount

    @taker_amount.setter
    def taker_amount(self, taker_amount):
        """Sets the taker_amount of this FirmQuote.


        :param taker_amount: The taker_amount of this FirmQuote.  # noqa: E501
        :type: float
        """

        self._taker_amount = taker_amount

    @property
    def maker(self):
        """Gets the maker of this FirmQuote.  # noqa: E501


        :return: The maker of this FirmQuote.  # noqa: E501
        :rtype: str
        """
        return self._maker

    @maker.setter
    def maker(self, maker):
        """Sets the maker of this FirmQuote.


        :param maker: The maker of this FirmQuote.  # noqa: E501
        :type: str
        """

        self._maker = maker

    @property
    def taker(self):
        """Gets the taker of this FirmQuote.  # noqa: E501


        :return: The taker of this FirmQuote.  # noqa: E501
        :rtype: str
        """
        return self._taker

    @taker.setter
    def taker(self, taker):
        """Sets the taker of this FirmQuote.


        :param taker: The taker of this FirmQuote.  # noqa: E501
        :type: str
        """

        self._taker = taker

    @property
    def chain_id(self):
        """Gets the chain_id of this FirmQuote.  # noqa: E501


        :return: The chain_id of this FirmQuote.  # noqa: E501
        :rtype: float
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this FirmQuote.


        :param chain_id: The chain_id of this FirmQuote.  # noqa: E501
        :type: float
        """

        self._chain_id = chain_id

    @property
    def verifying_contract(self):
        """Gets the verifying_contract of this FirmQuote.  # noqa: E501


        :return: The verifying_contract of this FirmQuote.  # noqa: E501
        :rtype: str
        """
        return self._verifying_contract

    @verifying_contract.setter
    def verifying_contract(self, verifying_contract):
        """Sets the verifying_contract of this FirmQuote.


        :param verifying_contract: The verifying_contract of this FirmQuote.  # noqa: E501
        :type: str
        """

        self._verifying_contract = verifying_contract

    @property
    def tx_origin(self):
        """Gets the tx_origin of this FirmQuote.  # noqa: E501


        :return: The tx_origin of this FirmQuote.  # noqa: E501
        :rtype: str
        """
        return self._tx_origin

    @tx_origin.setter
    def tx_origin(self, tx_origin):
        """Sets the tx_origin of this FirmQuote.


        :param tx_origin: The tx_origin of this FirmQuote.  # noqa: E501
        :type: str
        """

        self._tx_origin = tx_origin

    @property
    def pool(self):
        """Gets the pool of this FirmQuote.  # noqa: E501


        :return: The pool of this FirmQuote.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this FirmQuote.


        :param pool: The pool of this FirmQuote.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def salt(self):
        """Gets the salt of this FirmQuote.  # noqa: E501


        :return: The salt of this FirmQuote.  # noqa: E501
        :rtype: float
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this FirmQuote.


        :param salt: The salt of this FirmQuote.  # noqa: E501
        :type: float
        """

        self._salt = salt

    @property
    def expiry(self):
        """Gets the expiry of this FirmQuote.  # noqa: E501


        :return: The expiry of this FirmQuote.  # noqa: E501
        :rtype: float
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this FirmQuote.


        :param expiry: The expiry of this FirmQuote.  # noqa: E501
        :type: float
        """

        self._expiry = expiry

    @property
    def signature(self):
        """Gets the signature of this FirmQuote.  # noqa: E501


        :return: The signature of this FirmQuote.  # noqa: E501
        :rtype: object
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this FirmQuote.


        :param signature: The signature of this FirmQuote.  # noqa: E501
        :type: object
        """

        self._signature = signature

    @property
    def call_data(self):
        """Gets the call_data of this FirmQuote.  # noqa: E501


        :return: The call_data of this FirmQuote.  # noqa: E501
        :rtype: str
        """
        return self._call_data

    @call_data.setter
    def call_data(self, call_data):
        """Sets the call_data of this FirmQuote.


        :param call_data: The call_data of this FirmQuote.  # noqa: E501
        :type: str
        """

        self._call_data = call_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirmQuote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirmQuote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
