import streamlit as st
from heimdall.gjallarhorn.streamlit.utils.constants import HEIMDALL_LOGO, UW_LOGO
from heimdall.gjallarhorn.streamlit.utils.meta import (
    drift_statistics,
    performance_statistics,
)


def home_page(selected_model, heimdall_results, redis_server=None):
    title_block_1, title_block_2, title_block_3 = st.columns([1, 7, 1])
    title_block_1.image(
        image=HEIMDALL_LOGO,
        width=80,
    )
    title_block_2.markdown(
        f'<h1 style="color:#4c138a;font-size:48px;">UW Model Repository</h1>',
        unsafe_allow_html=True,
    )
    title_block_3.image(
        image=UW_LOGO,
        width=120,
    )

    for model in heimdall_results:
        model_results = heimdall_results.get(model)

        if "drift" in model_results:
            drift_results = model_results.get("drift")

            if "features" in drift_results:
                model_features = drift_results.get("features")
                no_features = len(model_features)
                _, feature_drift = drift_statistics(model_features)
            else:
                no_features = 1
                feature_drift = 0

            if "target" in drift_results:
                model_target = drift_results.get("target")
                no_targets = len(model_target)
                _, target_drift = drift_statistics(model_target)
            else:
                no_targets = 1
                target_drift = 0

            if "prediction" in drift_results:
                model_prediction = drift_results.get("prediction")
                no_predictions = len(model_prediction)
                _, prediction_drift = drift_statistics(model_prediction)
            else:
                no_predictions = 1
                prediction_drift = 0
        else:
            no_features = 1
            feature_drift = 0
            no_targets = 1
            target_drift = 0
            no_predictions = 1
            prediction_drift = 0

        if "performance" in model_results:
            performance_results = model_results.get("performance")
            initial_test_name = list(performance_results.keys())[0]
            initial_test = performance_results.get(initial_test_name)
            prod_score = initial_test.get("prod_metric")
            eval_score = initial_test.get("eval_metric")

            (
                _,
                tests_used_for_testing,
                tests_failed,
                percent_tests_failed,
            ) = performance_statistics(performance_results)

        else:
            prod_score = 0
            eval_score = 0
            tests_failed = 0
            percent_tests_failed = 0
            tests_used_for_testing = 1
            initial_test_name = ""

        pc_features_drifted = feature_drift / no_features
        pc_target_drifted = target_drift / no_targets
        pc_predictions_drifted = prediction_drift / no_predictions
        pc_metrics_drifted = tests_failed / tests_used_for_testing

        st.subheader(f"{model}")

        col_1, col_2, col_3, col_4, col_5, col_6 = st.columns(6)

        ## This doesn't write anything in the site
        ## However removes the arrow generated by streamlit
        ## All we want here is to display some extra info
        st.write(
            """
            <style>
            [data-testid="stMetricDelta"] svg {
                display: none;
            }
            </style>
            """,
            unsafe_allow_html=True,
        )

        col_1.metric(
            label="Prod. performance",
            value=f"{prod_score:.1f}",
            delta=initial_test_name,
            delta_color="off",
        )
        col_2.metric(
            label="Valid. performance",
            value=f"{eval_score:.1f}",
            delta=initial_test_name,
            delta_color="off",
        )
        col_3.metric(
            label="Metrics drifted",
            value=f"{pc_metrics_drifted:.1%}",
            delta=f"{tests_failed}/{tests_used_for_testing}",
            delta_color="off",
        )
        col_4.metric(
            label="Features drifted",
            value=f"{pc_features_drifted:.1%}",
            delta=f"{feature_drift}/{no_features}",
            delta_color="off",
        )
        col_5.metric(
            label="Targets drifted",
            value=f"{pc_target_drifted:.1%}",
            delta=f"{target_drift}/{no_targets}",
            delta_color="off",
        )
        col_6.metric(
            label="Predictions drifted",
            value=f"{pc_predictions_drifted:.1%}",
            delta=f"{prediction_drift}/{no_predictions}",
            delta_color="off",
        )
