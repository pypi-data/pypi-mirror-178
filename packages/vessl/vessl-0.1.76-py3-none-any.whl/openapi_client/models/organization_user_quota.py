# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrganizationUserQuota(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'limit': 'float',
        'quota_slug': 'str',
        'rule_from': 'str',
        'type': 'str',
        'usage': 'float',
        'username': 'str'
    }

    attribute_map = {
        'action': 'action',
        'limit': 'limit',
        'quota_slug': 'quota_slug',
        'rule_from': 'rule_from',
        'type': 'type',
        'usage': 'usage',
        'username': 'username'
    }

    def __init__(self, action=None, limit=None, quota_slug=None, rule_from=None, type=None, usage=None, username=None, local_vars_configuration=None):  # noqa: E501
        """OrganizationUserQuota - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._action = None
        self._limit = None
        self._quota_slug = None
        self._rule_from = None
        self._type = None
        self._usage = None
        self._username = None
        self.discriminator = None

        self.action = action
        self.limit = limit
        if quota_slug is not None:
            self.quota_slug = quota_slug
        if rule_from is not None:
            self.rule_from = rule_from
        self.type = type
        self.usage = usage
        self.username = username

    @property
    def action(self):
        """Gets the action of this OrganizationUserQuota.  # noqa: E501


        :return: The action of this OrganizationUserQuota.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this OrganizationUserQuota.


        :param action: The action of this OrganizationUserQuota.  # noqa: E501
        :type action: str
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def limit(self):
        """Gets the limit of this OrganizationUserQuota.  # noqa: E501


        :return: The limit of this OrganizationUserQuota.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this OrganizationUserQuota.


        :param limit: The limit of this OrganizationUserQuota.  # noqa: E501
        :type limit: float
        """
        if self.local_vars_configuration.client_side_validation and limit is None:  # noqa: E501
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def quota_slug(self):
        """Gets the quota_slug of this OrganizationUserQuota.  # noqa: E501


        :return: The quota_slug of this OrganizationUserQuota.  # noqa: E501
        :rtype: str
        """
        return self._quota_slug

    @quota_slug.setter
    def quota_slug(self, quota_slug):
        """Sets the quota_slug of this OrganizationUserQuota.


        :param quota_slug: The quota_slug of this OrganizationUserQuota.  # noqa: E501
        :type quota_slug: str
        """

        self._quota_slug = quota_slug

    @property
    def rule_from(self):
        """Gets the rule_from of this OrganizationUserQuota.  # noqa: E501


        :return: The rule_from of this OrganizationUserQuota.  # noqa: E501
        :rtype: str
        """
        return self._rule_from

    @rule_from.setter
    def rule_from(self, rule_from):
        """Sets the rule_from of this OrganizationUserQuota.


        :param rule_from: The rule_from of this OrganizationUserQuota.  # noqa: E501
        :type rule_from: str
        """

        self._rule_from = rule_from

    @property
    def type(self):
        """Gets the type of this OrganizationUserQuota.  # noqa: E501


        :return: The type of this OrganizationUserQuota.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganizationUserQuota.


        :param type: The type of this OrganizationUserQuota.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def usage(self):
        """Gets the usage of this OrganizationUserQuota.  # noqa: E501


        :return: The usage of this OrganizationUserQuota.  # noqa: E501
        :rtype: float
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this OrganizationUserQuota.


        :param usage: The usage of this OrganizationUserQuota.  # noqa: E501
        :type usage: float
        """
        if self.local_vars_configuration.client_side_validation and usage is None:  # noqa: E501
            raise ValueError("Invalid value for `usage`, must not be `None`")  # noqa: E501

        self._usage = usage

    @property
    def username(self):
        """Gets the username of this OrganizationUserQuota.  # noqa: E501


        :return: The username of this OrganizationUserQuota.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OrganizationUserQuota.


        :param username: The username of this OrganizationUserQuota.  # noqa: E501
        :type username: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationUserQuota):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationUserQuota):
            return True

        return self.to_dict() != other.to_dict()
