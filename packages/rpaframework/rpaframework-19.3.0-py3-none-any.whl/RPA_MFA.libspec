<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.MFA" type="LIBRARY" format="REST" scope="GLOBAL" generated="2022-11-28T16:00:28Z" specversion="4" source="./RPA/MFA.py" lineno="31">
<version/>
<doc>*RPA.MFA* is a library for generating one-time passwords (OTP).

Added on **rpaframework** version: 16.0.0

Based on the `pyotp &lt;https://pypi.org/project/pyotp/&gt;`_ package.

In the below example the **mfa** secret we are reading from the Robocorp
Vault is the passcode generated by the Authenticator service. The passcode
value is stored into the Vault with key **otpsecret**.

Passcode is typically a long string (16-32 characters), which is provided
in a form of QR image, but it can be obtained by requesting access to a string.

Note that same code can be used to add a mobile phone as a authentication
device at the same as the same code is added into the Vault.

**Robot framework example usage:**

.. code-block:: robotframework

    *** Settings ***
    Library     RPA.Robocorp.Vault
    Library     RPA.MFA


    *** Tasks ***
    Generate time based code
        ${secrets}=    Get Secret   mfa
        ${code}=    Get Time Based OTP    ${secrets}[otpsecret]


**Python example usage**

.. code-block:: python

    from RPA.Robocorp.Vault import Vault
    from RPA.MFA import MFA


    def main():
        secrets = Vault().get_secret("mfa")
        code = MFA().get_time_based_otp(secrets["otpsecret"])</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="79">
<arguments repr="vault_name: str | None = None, vault_key: str | None = None, mode: OTPMode | None = TIME">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="vault_name: str | None = None">
<name>vault_name</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="vault_key: str | None = None">
<name>vault_key</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="mode: OTPMode | None = TIME">
<name>mode</name>
<type typedoc="OTPMode">OTPMode</type>
<type typedoc="None">None</type>
<default>TIME</default>
</arg>
</arguments>
<doc>Initialize self.  See help(type(self)) for accurate signature.</doc>
<shortdoc>Initialize self.  See help(type(self)) for accurate signature.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Get Counter Based Otp" lineno="137">
<arguments repr="counter: int, otp_passcode: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="counter: int">
<name>counter</name>
<type typedoc="integer">int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="otp_passcode: str | None = None">
<name>otp_passcode</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Get `counter` based one time password using separately set
passcode or by parameter `otp_passcode`. The counter index is
given by the `counter` parameter.

:param counter: the index of the counter
:param otp_passcode: the passcode provided by the Authenticator</doc>
<shortdoc>Get `counter` based one time password using separately set passcode or by parameter `otp_passcode`. The counter index is given by the `counter` parameter.</shortdoc>
</kw>
<kw name="Get Time Based Otp" lineno="124">
<arguments repr="otp_passcode: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="otp_passcode: str | None = None">
<name>otp_passcode</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Get `time` based one time password using separately set
passcode or by parameter `otp_passcode`.

:param otp_passcode: the passcode provided by the Authenticator</doc>
<shortdoc>Get `time` based one time password using separately set passcode or by parameter `otp_passcode`.</shortdoc>
</kw>
<kw name="Set Counter Based Otp" lineno="116">
<arguments repr="otp_passcode: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="otp_passcode: str">
<name>otp_passcode</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Set `counter` based OTP with passcode.

:param otp_passcode: the passcode provided by the Authenticator</doc>
<shortdoc>Set `counter` based OTP with passcode.</shortdoc>
</kw>
<kw name="Set Time Based Otp" lineno="108">
<arguments repr="otp_passcode: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="otp_passcode: str">
<name>otp_passcode</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Set `time` based OTP with passcode.

:param otp_passcode: the passcode provided by the Authenticator</doc>
<shortdoc>Set `time` based OTP with passcode.</shortdoc>
</kw>
<kw name="Use Mfa Secret From Vault" lineno="92">
<arguments repr="vault_name: str, vault_key: str, mode: OTPMode = TIME">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="vault_name: str">
<name>vault_name</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="vault_key: str">
<name>vault_key</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="mode: OTPMode = TIME">
<name>mode</name>
<type typedoc="OTPMode">OTPMode</type>
<default>TIME</default>
</arg>
</arguments>
<doc>Set `time` or `counter` based OTP with passcode stored in
the Robocorp Vault named with `vault_name` under key of `vault_key`.

:param vault_name: name of the vault storing the passcode
:param vault_key: name of the vault key storing the passcode value</doc>
<shortdoc>Set `time` or `counter` based OTP with passcode stored in the Robocorp Vault named with `vault_name` under key of `vault_key`.</shortdoc>
</kw>
</keywords>
<datatypes>
<enums>
<enum name="OTPMode">
<doc>Enumeration for type of TOP to use</doc>
<members>
<member name="TIME" value="TIME"/>
<member name="COUNTER" value="COUNTER"/>
</members>
</enum>
</enums>
</datatypes>
<typedocs>
<type name="integer" type="Standard">
<doc>Conversion is done using Python's [https://docs.python.org/library/functions.html#int|int]
built-in function. Floating point
numbers are accepted only if they can be represented as integers exactly.
For example, ``1.0`` is accepted and ``1.1`` is not.

Starting from RF 4.1, it is possible to use hexadecimal, octal and binary
numbers by prefixing values with ``0x``, ``0o`` and ``0b``, respectively.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``42``, ``-1``, ``0b1010``, ``10 000 000``, ``0xBAD_C0FFEE``
</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>Get Counter Based Otp</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Get Counter Based Otp</usage>
<usage>Get Time Based Otp</usage>
</usages>
</type>
<type name="OTPMode" type="Enum">
<doc>Enumeration for type of TOP to use</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Use Mfa Secret From Vault</usage>
</usages>
<members>
<member name="TIME" value="TIME"/>
<member name="COUNTER" value="COUNTER"/>
</members>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Get Counter Based Otp</usage>
<usage>Get Time Based Otp</usage>
<usage>Set Counter Based Otp</usage>
<usage>Set Time Based Otp</usage>
<usage>Use Mfa Secret From Vault</usage>
</usages>
</type>
</typedocs>
</keywordspec>
