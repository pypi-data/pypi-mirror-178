# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GRT
else:
    import _GRT

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GRT.delete_SwigPyIterator

    def value(self):
        return _GRT.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GRT.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GRT.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GRT.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GRT.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GRT.SwigPyIterator_copy(self)

    def next(self):
        return _GRT.SwigPyIterator_next(self)

    def __next__(self):
        return _GRT.SwigPyIterator___next__(self)

    def previous(self):
        return _GRT.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GRT.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GRT.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GRT.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GRT.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GRT.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GRT.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GRT.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GRT:
_GRT.SwigPyIterator_swigregister(SwigPyIterator)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GRT.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GRT.IntVector___nonzero__(self)

    def __bool__(self):
        return _GRT.IntVector___bool__(self)

    def __len__(self):
        return _GRT.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _GRT.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GRT.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GRT.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GRT.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GRT.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GRT.IntVector___setitem__(self, *args)

    def pop(self):
        return _GRT.IntVector_pop(self)

    def append(self, x):
        return _GRT.IntVector_append(self, x)

    def empty(self):
        return _GRT.IntVector_empty(self)

    def size(self):
        return _GRT.IntVector_size(self)

    def swap(self, v):
        return _GRT.IntVector_swap(self, v)

    def begin(self):
        return _GRT.IntVector_begin(self)

    def end(self):
        return _GRT.IntVector_end(self)

    def rbegin(self):
        return _GRT.IntVector_rbegin(self)

    def rend(self):
        return _GRT.IntVector_rend(self)

    def clear(self):
        return _GRT.IntVector_clear(self)

    def get_allocator(self):
        return _GRT.IntVector_get_allocator(self)

    def pop_back(self):
        return _GRT.IntVector_pop_back(self)

    def erase(self, *args):
        return _GRT.IntVector_erase(self, *args)

    def __init__(self, *args):
        _GRT.IntVector_swiginit(self, _GRT.new_IntVector(*args))

    def push_back(self, x):
        return _GRT.IntVector_push_back(self, x)

    def front(self):
        return _GRT.IntVector_front(self)

    def back(self):
        return _GRT.IntVector_back(self)

    def assign(self, n, x):
        return _GRT.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _GRT.IntVector_resize(self, *args)

    def insert(self, *args):
        return _GRT.IntVector_insert(self, *args)

    def reserve(self, n):
        return _GRT.IntVector_reserve(self, n)

    def capacity(self):
        return _GRT.IntVector_capacity(self)
    __swig_destroy__ = _GRT.delete_IntVector

# Register IntVector in _GRT:
_GRT.IntVector_swigregister(IntVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GRT.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GRT.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _GRT.DoubleVector___bool__(self)

    def __len__(self):
        return _GRT.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _GRT.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GRT.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GRT.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GRT.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GRT.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GRT.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _GRT.DoubleVector_pop(self)

    def append(self, x):
        return _GRT.DoubleVector_append(self, x)

    def empty(self):
        return _GRT.DoubleVector_empty(self)

    def size(self):
        return _GRT.DoubleVector_size(self)

    def swap(self, v):
        return _GRT.DoubleVector_swap(self, v)

    def begin(self):
        return _GRT.DoubleVector_begin(self)

    def end(self):
        return _GRT.DoubleVector_end(self)

    def rbegin(self):
        return _GRT.DoubleVector_rbegin(self)

    def rend(self):
        return _GRT.DoubleVector_rend(self)

    def clear(self):
        return _GRT.DoubleVector_clear(self)

    def get_allocator(self):
        return _GRT.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _GRT.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _GRT.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _GRT.DoubleVector_swiginit(self, _GRT.new_DoubleVector(*args))

    def push_back(self, x):
        return _GRT.DoubleVector_push_back(self, x)

    def front(self):
        return _GRT.DoubleVector_front(self)

    def back(self):
        return _GRT.DoubleVector_back(self)

    def assign(self, n, x):
        return _GRT.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _GRT.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _GRT.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _GRT.DoubleVector_reserve(self, n)

    def capacity(self):
        return _GRT.DoubleVector_capacity(self)
    __swig_destroy__ = _GRT.delete_DoubleVector

# Register DoubleVector in _GRT:
_GRT.DoubleVector_swigregister(DoubleVector)
class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GRT.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GRT.FloatVector___nonzero__(self)

    def __bool__(self):
        return _GRT.FloatVector___bool__(self)

    def __len__(self):
        return _GRT.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _GRT.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GRT.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GRT.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GRT.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GRT.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GRT.FloatVector___setitem__(self, *args)

    def pop(self):
        return _GRT.FloatVector_pop(self)

    def append(self, x):
        return _GRT.FloatVector_append(self, x)

    def empty(self):
        return _GRT.FloatVector_empty(self)

    def size(self):
        return _GRT.FloatVector_size(self)

    def swap(self, v):
        return _GRT.FloatVector_swap(self, v)

    def begin(self):
        return _GRT.FloatVector_begin(self)

    def end(self):
        return _GRT.FloatVector_end(self)

    def rbegin(self):
        return _GRT.FloatVector_rbegin(self)

    def rend(self):
        return _GRT.FloatVector_rend(self)

    def clear(self):
        return _GRT.FloatVector_clear(self)

    def get_allocator(self):
        return _GRT.FloatVector_get_allocator(self)

    def pop_back(self):
        return _GRT.FloatVector_pop_back(self)

    def erase(self, *args):
        return _GRT.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _GRT.FloatVector_swiginit(self, _GRT.new_FloatVector(*args))

    def push_back(self, x):
        return _GRT.FloatVector_push_back(self, x)

    def front(self):
        return _GRT.FloatVector_front(self)

    def back(self):
        return _GRT.FloatVector_back(self)

    def assign(self, n, x):
        return _GRT.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _GRT.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _GRT.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _GRT.FloatVector_reserve(self, n)

    def capacity(self):
        return _GRT.FloatVector_capacity(self)
    __swig_destroy__ = _GRT.delete_FloatVector

# Register FloatVector in _GRT:
_GRT.FloatVector_swigregister(FloatVector)
PI = _GRT.PI
TWO_PI = _GRT.TWO_PI
ONE_OVER_TWO_PI = _GRT.ONE_OVER_TWO_PI
SQRT_TWO_PI = _GRT.SQRT_TWO_PI

def grt_sqr(x):
    return _GRT.grt_sqr(x)

def grt_sqrt(x):
    return _GRT.grt_sqrt(x)

def grt_antilog(x):
    return _GRT.grt_antilog(x)

def grt_exp(x):
    return _GRT.grt_exp(x)

def grt_log(x):
    return _GRT.grt_log(x)

def grt_sigmoid(x):
    return _GRT.grt_sigmoid(x)
GRT_DEFAULT_NULL_CLASS_LABEL = _GRT.GRT_DEFAULT_NULL_CLASS_LABEL
GRT_SAFE_CHECKING = _GRT.GRT_SAFE_CHECKING
GRT_VERSION_MAJOR = _GRT.GRT_VERSION_MAJOR
GRT_VERSION_MINOR = _GRT.GRT_VERSION_MINOR
GRT_VERSION_PATCH = _GRT.GRT_VERSION_PATCH
GRT_VERSION = _GRT.GRT_VERSION
GRT_REVISION = _GRT.GRT_REVISION
class Util(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.Util_swiginit(self, _GRT.new_Util())
    __swig_destroy__ = _GRT.delete_Util

    @staticmethod
    def getCxx11Enabled():
        return _GRT.Util_getCxx11Enabled()

    @staticmethod
    def sleep(numMilliseconds):
        return _GRT.Util_sleep(numMilliseconds)

    @staticmethod
    def timeAsString(includeDate=True):
        return _GRT.Util_timeAsString(includeDate)

    @staticmethod
    def intToString(*args):
        return _GRT.Util_intToString(*args)

    @staticmethod
    def toString(*args):
        return _GRT.Util_toString(*args)

    @staticmethod
    def stringToInt(s):
        return _GRT.Util_stringToInt(s)

    @staticmethod
    def stringToDouble(s):
        return _GRT.Util_stringToDouble(s)

    @staticmethod
    def stringToFloat(s):
        return _GRT.Util_stringToFloat(s)

    @staticmethod
    def stringToBool(s):
        return _GRT.Util_stringToBool(s)

    @staticmethod
    def stringEndsWith(str, ending):
        return _GRT.Util_stringEndsWith(str, ending)

    @staticmethod
    def sum(x):
        return _GRT.Util_sum(x)

    @staticmethod
    def dotProduct(a, b):
        return _GRT.Util_dotProduct(a, b)

    @staticmethod
    def euclideanDistance(a, b):
        return _GRT.Util_euclideanDistance(a, b)

    @staticmethod
    def squaredEuclideanDistance(a, b):
        return _GRT.Util_squaredEuclideanDistance(a, b)

    @staticmethod
    def manhattanDistance(a, b):
        return _GRT.Util_manhattanDistance(a, b)

    @staticmethod
    def cosineDistance(a, b):
        return _GRT.Util_cosineDistance(a, b)

    @staticmethod
    def scale(*args):
        return _GRT.Util_scale(*args)

    @staticmethod
    def normalize(x):
        return _GRT.Util_normalize(x)

    @staticmethod
    def limit(*args):
        return _GRT.Util_limit(*args)

    @staticmethod
    def getMinIndex(x):
        return _GRT.Util_getMinIndex(x)

    @staticmethod
    def getMaxIndex(x):
        return _GRT.Util_getMaxIndex(x)

    @staticmethod
    def getMin(*args):
        return _GRT.Util_getMin(*args)

    @staticmethod
    def getMax(*args):
        return _GRT.Util_getMax(*args)

    @staticmethod
    def getOS():
        return _GRT.Util_getOS()

    @staticmethod
    def cartToPolar(x, y, r, theta):
        return _GRT.Util_cartToPolar(x, y, r, theta)

    @staticmethod
    def polarToCart(r, theta, x, y):
        return _GRT.Util_polarToCart(r, theta, x, y)

    @staticmethod
    def parseDirectory(directoryPath, type, filenames):
        return _GRT.Util_parseDirectory(directoryPath, type, filenames)
    OS_UNKNOWN = _GRT.Util_OS_UNKNOWN
    OS_OSX = _GRT.Util_OS_OSX
    OS_LINUX = _GRT.Util_OS_LINUX
    OS_WINDOWS = _GRT.Util_OS_WINDOWS

# Register Util in _GRT:
_GRT.Util_swigregister(Util)
class GRTBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.GRTBase_swiginit(self, _GRT.new_GRTBase(*args))
    __swig_destroy__ = _GRT.delete_GRTBase

    def copyGRTBaseVariables(self, GRTBase):
        return _GRT.GRTBase_copyGRTBaseVariables(self, GRTBase)

    def getClassType(self):
        return _GRT.GRTBase_getClassType(self)

    def getId(self):
        return _GRT.GRTBase_getId(self)

    def getLastWarningMessage(self):
        return _GRT.GRTBase_getLastWarningMessage(self)

    def getLastErrorMessage(self):
        return _GRT.GRTBase_getLastErrorMessage(self)

    def getLastInfoMessage(self):
        return _GRT.GRTBase_getLastInfoMessage(self)

    def setInfoLoggingEnabled(self, loggingEnabled):
        return _GRT.GRTBase_setInfoLoggingEnabled(self, loggingEnabled)

    def setWarningLoggingEnabled(self, loggingEnabled):
        return _GRT.GRTBase_setWarningLoggingEnabled(self, loggingEnabled)

    def setErrorLoggingEnabled(self, loggingEnabled):
        return _GRT.GRTBase_setErrorLoggingEnabled(self, loggingEnabled)

    def setDebugLoggingEnabled(self, loggingEnabled):
        return _GRT.GRTBase_setDebugLoggingEnabled(self, loggingEnabled)

    @staticmethod
    def getGRTVersion(returnRevision=True):
        return _GRT.GRTBase_getGRTVersion(returnRevision)

    @staticmethod
    def getGRTRevison():
        return _GRT.GRTBase_getGRTRevison()

    def getGRTBasePointer(self, *args):
        return _GRT.GRTBase_getGRTBasePointer(self, *args)

    def scale(self, x, minSource, maxSource, minTarget, maxTarget, constrain=False):
        return _GRT.GRTBase_scale(self, x, minSource, maxSource, minTarget, maxTarget, constrain)

    def SQR(self, x):
        return _GRT.GRTBase_SQR(self, x)

# Register GRTBase in _GRT:
_GRT.GRTBase_swigregister(GRTBase)
class UINTVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GRT.UINTVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GRT.UINTVector___nonzero__(self)

    def __bool__(self):
        return _GRT.UINTVector___bool__(self)

    def __len__(self):
        return _GRT.UINTVector___len__(self)

    def __getslice__(self, i, j):
        return _GRT.UINTVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GRT.UINTVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GRT.UINTVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GRT.UINTVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GRT.UINTVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GRT.UINTVector___setitem__(self, *args)

    def pop(self):
        return _GRT.UINTVector_pop(self)

    def append(self, x):
        return _GRT.UINTVector_append(self, x)

    def empty(self):
        return _GRT.UINTVector_empty(self)

    def size(self):
        return _GRT.UINTVector_size(self)

    def swap(self, v):
        return _GRT.UINTVector_swap(self, v)

    def begin(self):
        return _GRT.UINTVector_begin(self)

    def end(self):
        return _GRT.UINTVector_end(self)

    def rbegin(self):
        return _GRT.UINTVector_rbegin(self)

    def rend(self):
        return _GRT.UINTVector_rend(self)

    def clear(self):
        return _GRT.UINTVector_clear(self)

    def get_allocator(self):
        return _GRT.UINTVector_get_allocator(self)

    def pop_back(self):
        return _GRT.UINTVector_pop_back(self)

    def erase(self, *args):
        return _GRT.UINTVector_erase(self, *args)

    def __init__(self, *args):
        _GRT.UINTVector_swiginit(self, _GRT.new_UINTVector(*args))

    def push_back(self, x):
        return _GRT.UINTVector_push_back(self, x)

    def front(self):
        return _GRT.UINTVector_front(self)

    def back(self):
        return _GRT.UINTVector_back(self)

    def assign(self, n, x):
        return _GRT.UINTVector_assign(self, n, x)

    def resize(self, *args):
        return _GRT.UINTVector_resize(self, *args)

    def insert(self, *args):
        return _GRT.UINTVector_insert(self, *args)

    def reserve(self, n):
        return _GRT.UINTVector_reserve(self, n)

    def capacity(self):
        return _GRT.UINTVector_capacity(self)
    __swig_destroy__ = _GRT.delete_UINTVector

# Register UINTVector in _GRT:
_GRT.UINTVector_swigregister(UINTVector)
class VectorTUINT(UINTVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.VectorTUINT_swiginit(self, _GRT.new_VectorTUINT(*args))
    __swig_destroy__ = _GRT.delete_VectorTUINT

    def resize(self, *args):
        return _GRT.VectorTUINT_resize(self, *args)

    def copy(self, rhs):
        return _GRT.VectorTUINT_copy(self, rhs)

    def fill(self, value):
        return _GRT.VectorTUINT_fill(self, value)

    def setAll(self, value):
        return _GRT.VectorTUINT_setAll(self, value)

    def getSize(self):
        return _GRT.VectorTUINT_getSize(self)

    def getData(self, *args):
        return _GRT.VectorTUINT_getData(self, *args)

# Register VectorTUINT in _GRT:
_GRT.VectorTUINT_swigregister(VectorTUINT)
class VectorTFloat(DoubleVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.VectorTFloat_swiginit(self, _GRT.new_VectorTFloat(*args))
    __swig_destroy__ = _GRT.delete_VectorTFloat

    def resize(self, *args):
        return _GRT.VectorTFloat_resize(self, *args)

    def copy(self, rhs):
        return _GRT.VectorTFloat_copy(self, rhs)

    def fill(self, value):
        return _GRT.VectorTFloat_fill(self, value)

    def setAll(self, value):
        return _GRT.VectorTFloat_setAll(self, value)

    def getSize(self):
        return _GRT.VectorTFloat_getSize(self)

    def getData(self, *args):
        return _GRT.VectorTFloat_getData(self, *args)

# Register VectorTFloat in _GRT:
_GRT.VectorTFloat_swigregister(VectorTFloat)
class VectorTVectorFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.VectorTVectorFloat_swiginit(self, _GRT.new_VectorTVectorFloat(*args))
    __swig_destroy__ = _GRT.delete_VectorTVectorFloat

    def resize(self, *args):
        return _GRT.VectorTVectorFloat_resize(self, *args)

    def copy(self, rhs):
        return _GRT.VectorTVectorFloat_copy(self, rhs)

    def fill(self, value):
        return _GRT.VectorTVectorFloat_fill(self, value)

    def setAll(self, value):
        return _GRT.VectorTVectorFloat_setAll(self, value)

    def getSize(self):
        return _GRT.VectorTVectorFloat_getSize(self)

    def getData(self, *args):
        return _GRT.VectorTVectorFloat_getData(self, *args)

# Register VectorTVectorFloat in _GRT:
_GRT.VectorTVectorFloat_swigregister(VectorTVectorFloat)
class VectorFloat(VectorTFloat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.VectorFloat_swiginit(self, _GRT.new_VectorFloat(*args))
    __swig_destroy__ = _GRT.delete_VectorFloat

    def save(self, filename):
        return _GRT.VectorFloat_save(self, filename)

    def load(self, *args):
        return _GRT.VectorFloat_load(self, *args)

    def _print(self, *args):
        return _GRT.VectorFloat__print(self, *args)

    def scale(self, *args):
        return _GRT.VectorFloat_scale(self, *args)

    def getMinValue(self):
        return _GRT.VectorFloat_getMinValue(self)

    def getMaxValue(self):
        return _GRT.VectorFloat_getMaxValue(self)

    def getMean(self):
        return _GRT.VectorFloat_getMean(self)

    def getStdDev(self):
        return _GRT.VectorFloat_getStdDev(self)

    def getMinMax(self):
        return _GRT.VectorFloat_getMinMax(self)

# Register VectorFloat in _GRT:
_GRT.VectorFloat_swigregister(VectorFloat)
class MatrixTFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.MatrixTFloat_swiginit(self, _GRT.new_MatrixTFloat(*args))
    __swig_destroy__ = _GRT.delete_MatrixTFloat

    def getRowVector(self, r):
        return _GRT.MatrixTFloat_getRowVector(self, r)

    def getColVector(self, c):
        return _GRT.MatrixTFloat_getColVector(self, c)

    def getConcatenatedVector(self, concatByRow=True):
        return _GRT.MatrixTFloat_getConcatenatedVector(self, concatByRow)

    def resize(self, *args):
        return _GRT.MatrixTFloat_resize(self, *args)

    def copy(self, rhs):
        return _GRT.MatrixTFloat_copy(self, rhs)

    def setAllValues(self, value):
        return _GRT.MatrixTFloat_setAllValues(self, value)

    def setAll(self, value):
        return _GRT.MatrixTFloat_setAll(self, value)

    def setRowVector(self, row, rowIndex):
        return _GRT.MatrixTFloat_setRowVector(self, row, rowIndex)

    def setColVector(self, column, colIndex):
        return _GRT.MatrixTFloat_setColVector(self, column, colIndex)

    def push_back(self, sample):
        return _GRT.MatrixTFloat_push_back(self, sample)

    def reserve(self, capacity):
        return _GRT.MatrixTFloat_reserve(self, capacity)

    def clear(self):
        return _GRT.MatrixTFloat_clear(self)

    def getNumRows(self):
        return _GRT.MatrixTFloat_getNumRows(self)

    def getNumCols(self):
        return _GRT.MatrixTFloat_getNumCols(self)

    def getCapacity(self):
        return _GRT.MatrixTFloat_getCapacity(self)

    def getSize(self):
        return _GRT.MatrixTFloat_getSize(self)

    def getDataPointer(self):
        return _GRT.MatrixTFloat_getDataPointer(self)

    def getData(self):
        return _GRT.MatrixTFloat_getData(self)

# Register MatrixTFloat in _GRT:
_GRT.MatrixTFloat_swigregister(MatrixTFloat)
class MatrixFloat(MatrixTFloat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.MatrixFloat_swiginit(self, _GRT.new_MatrixFloat(*args))
    __swig_destroy__ = _GRT.delete_MatrixFloat

    def getRow(self, r):
        return _GRT.MatrixFloat_getRow(self, r)

    def getCol(self, c):
        return _GRT.MatrixFloat_getCol(self, c)

    def save(self, filename):
        return _GRT.MatrixFloat_save(self, filename)

    def load(self, *args):
        return _GRT.MatrixFloat_load(self, *args)

    def saveToCSVFile(self, filename):
        return _GRT.MatrixFloat_saveToCSVFile(self, filename)

    def loadFromCSVFile(self, *args):
        return _GRT.MatrixFloat_loadFromCSVFile(self, *args)

    def _print(self, *args):
        return _GRT.MatrixFloat__print(self, *args)

    def transpose(self):
        return _GRT.MatrixFloat_transpose(self)

    def scale(self, *args):
        return _GRT.MatrixFloat_scale(self, *args)

    def znorm(self, alpha=0.001):
        return _GRT.MatrixFloat_znorm(self, alpha)

    def multiple(self, *args):
        return _GRT.MatrixFloat_multiple(self, *args)

    def add(self, *args):
        return _GRT.MatrixFloat_add(self, *args)

    def subtract(self, *args):
        return _GRT.MatrixFloat_subtract(self, *args)

    def getMinValue(self):
        return _GRT.MatrixFloat_getMinValue(self)

    def getMaxValue(self):
        return _GRT.MatrixFloat_getMaxValue(self)

    def getMean(self):
        return _GRT.MatrixFloat_getMean(self)

    def getStdDev(self):
        return _GRT.MatrixFloat_getStdDev(self)

    def getCovarianceMatrix(self):
        return _GRT.MatrixFloat_getCovarianceMatrix(self)

    def getRanges(self):
        return _GRT.MatrixFloat_getRanges(self)

    def getTrace(self):
        return _GRT.MatrixFloat_getTrace(self)

# Register MatrixFloat in _GRT:
_GRT.MatrixFloat_swigregister(MatrixFloat)
class ClassificationData(GRTBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ClassificationData_swiginit(self, _GRT.new_ClassificationData(*args))
    __swig_destroy__ = _GRT.delete_ClassificationData

    def clear(self):
        return _GRT.ClassificationData_clear(self)

    def setNumDimensions(self, numDimensions):
        return _GRT.ClassificationData_setNumDimensions(self, numDimensions)

    def setDatasetName(self, datasetName):
        return _GRT.ClassificationData_setDatasetName(self, datasetName)

    def setInfoText(self, infoText):
        return _GRT.ClassificationData_setInfoText(self, infoText)

    def setClassNameForCorrespondingClassLabel(self, className, classLabel):
        return _GRT.ClassificationData_setClassNameForCorrespondingClassLabel(self, className, classLabel)

    def setAllowNullGestureClass(self, allowNullGestureClass):
        return _GRT.ClassificationData_setAllowNullGestureClass(self, allowNullGestureClass)

    def addSample(self, classLabel, sample):
        return _GRT.ClassificationData_addSample(self, classLabel, sample)

    def removeSample(self, index):
        return _GRT.ClassificationData_removeSample(self, index)

    def removeLastSample(self):
        return _GRT.ClassificationData_removeLastSample(self)

    def reserve(self, M):
        return _GRT.ClassificationData_reserve(self, M)

    def addClass(self, *args):
        return _GRT.ClassificationData_addClass(self, *args)

    def removeClass(self, classLabel):
        return _GRT.ClassificationData_removeClass(self, classLabel)

    def eraseAllSamplesWithClassLabel(self, classLabel):
        return _GRT.ClassificationData_eraseAllSamplesWithClassLabel(self, classLabel)

    def relabelAllSamplesWithClassLabel(self, oldClassLabel, newClassLabel):
        return _GRT.ClassificationData_relabelAllSamplesWithClassLabel(self, oldClassLabel, newClassLabel)

    def setExternalRanges(self, externalRanges, useExternalRanges=False):
        return _GRT.ClassificationData_setExternalRanges(self, externalRanges, useExternalRanges)

    def enableExternalRangeScaling(self, useExternalRanges):
        return _GRT.ClassificationData_enableExternalRangeScaling(self, useExternalRanges)

    def scale(self, *args):
        return _GRT.ClassificationData_scale(self, *args)

    def save(self, filename):
        return _GRT.ClassificationData_save(self, filename)

    def load(self, filename):
        return _GRT.ClassificationData_load(self, filename)

    def saveDatasetToFile(self, filename):
        return _GRT.ClassificationData_saveDatasetToFile(self, filename)

    def loadDatasetFromFile(self, filename):
        return _GRT.ClassificationData_loadDatasetFromFile(self, filename)

    def saveDatasetToCSVFile(self, filename):
        return _GRT.ClassificationData_saveDatasetToCSVFile(self, filename)

    def loadDatasetFromCSVFile(self, filename, classLabelColumnIndex=0):
        return _GRT.ClassificationData_loadDatasetFromCSVFile(self, filename, classLabelColumnIndex)

    def printStats(self):
        return _GRT.ClassificationData_printStats(self)

    def sortClassLabels(self):
        return _GRT.ClassificationData_sortClassLabels(self)

    def merge(self, data):
        return _GRT.ClassificationData_merge(self, data)

    def partition(self, partitionPercentage, useStratifiedSampling=False):
        return _GRT.ClassificationData_partition(self, partitionPercentage, useStratifiedSampling)

    def split(self, splitPercentage, useStratifiedSampling=False):
        return _GRT.ClassificationData_split(self, splitPercentage, useStratifiedSampling)

    def spiltDataIntoKFolds(self, K, useStratifiedSampling=False):
        return _GRT.ClassificationData_spiltDataIntoKFolds(self, K, useStratifiedSampling)

    def getTrainingFoldData(self, foldIndex):
        return _GRT.ClassificationData_getTrainingFoldData(self, foldIndex)

    def getTestFoldData(self, foldIndex):
        return _GRT.ClassificationData_getTestFoldData(self, foldIndex)

    def getClassData(self, classLabel):
        return _GRT.ClassificationData_getClassData(self, classLabel)

    def getBootstrappedDataset(self, numSamples=0, balanceDataset=False):
        return _GRT.ClassificationData_getBootstrappedDataset(self, numSamples, balanceDataset)

    def reformatAsRegressionData(self):
        return _GRT.ClassificationData_reformatAsRegressionData(self)

    def reformatAsUnlabelledData(self):
        return _GRT.ClassificationData_reformatAsUnlabelledData(self)

    def getDatasetName(self):
        return _GRT.ClassificationData_getDatasetName(self)

    def getInfoText(self):
        return _GRT.ClassificationData_getInfoText(self)

    def getStatsAsString(self):
        return _GRT.ClassificationData_getStatsAsString(self)

    def getNumDimensions(self):
        return _GRT.ClassificationData_getNumDimensions(self)

    def getNumSamples(self):
        return _GRT.ClassificationData_getNumSamples(self)

    def getNumClasses(self):
        return _GRT.ClassificationData_getNumClasses(self)

    def getMinimumClassLabel(self):
        return _GRT.ClassificationData_getMinimumClassLabel(self)

    def getMaximumClassLabel(self):
        return _GRT.ClassificationData_getMaximumClassLabel(self)

    def getClassLabelIndexValue(self, classLabel):
        return _GRT.ClassificationData_getClassLabelIndexValue(self, classLabel)

    def getClassNameForCorrespondingClassLabel(self, classLabel):
        return _GRT.ClassificationData_getClassNameForCorrespondingClassLabel(self, classLabel)

    def getRanges(self):
        return _GRT.ClassificationData_getRanges(self)

    def getClassLabels(self):
        return _GRT.ClassificationData_getClassLabels(self)

    def getNumSamplesPerClass(self):
        return _GRT.ClassificationData_getNumSamplesPerClass(self)

    def getClassTracker(self):
        return _GRT.ClassificationData_getClassTracker(self)

    def getClassHistogramData(self, classLabel, numBins):
        return _GRT.ClassificationData_getClassHistogramData(self, classLabel, numBins)

    def getHistogramData(self, numBins):
        return _GRT.ClassificationData_getHistogramData(self, numBins)

    def getClassificationData(self):
        return _GRT.ClassificationData_getClassificationData(self)

    def getClassProbabilities(self, *args):
        return _GRT.ClassificationData_getClassProbabilities(self, *args)

    def getMean(self):
        return _GRT.ClassificationData_getMean(self)

    def getStdDev(self):
        return _GRT.ClassificationData_getStdDev(self)

    def getClassMean(self):
        return _GRT.ClassificationData_getClassMean(self)

    def getClassStdDev(self):
        return _GRT.ClassificationData_getClassStdDev(self)

    def getCovarianceMatrix(self):
        return _GRT.ClassificationData_getCovarianceMatrix(self)

    def getClassDataIndexes(self, classLabel):
        return _GRT.ClassificationData_getClassDataIndexes(self, classLabel)

    def getDataAsMatrixDouble(self):
        return _GRT.ClassificationData_getDataAsMatrixDouble(self)

    def getDataAsMatrixFloat(self):
        return _GRT.ClassificationData_getDataAsMatrixFloat(self)

    @staticmethod
    def generateGaussDataset(*args):
        return _GRT.ClassificationData_generateGaussDataset(*args)

    @staticmethod
    def generateGaussLinearDataset(numSamples=10000, numClasses=10, numDimensions=3, range=10, sigma=1):
        return _GRT.ClassificationData_generateGaussLinearDataset(numSamples, numClasses, numDimensions, range, sigma)

    def get(self, i):
        return _GRT.ClassificationData_get(self, i)

# Register ClassificationData in _GRT:
_GRT.ClassificationData_swigregister(ClassificationData)
class ClassificationSample(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ClassificationSample_swiginit(self, _GRT.new_ClassificationSample(*args))
    __swig_destroy__ = _GRT.delete_ClassificationSample

    def clear(self):
        return _GRT.ClassificationSample_clear(self)

    def getNumDimensions(self):
        return _GRT.ClassificationSample_getNumDimensions(self)

    def getClassLabel(self):
        return _GRT.ClassificationSample_getClassLabel(self)

    def getSample(self, *args):
        return _GRT.ClassificationSample_getSample(self, *args)

    def set(self, classLabel, sample):
        return _GRT.ClassificationSample_set(self, classLabel, sample)

    def setClassLabel(self, classLabel):
        return _GRT.ClassificationSample_setClassLabel(self, classLabel)

    def setSample(self, sample):
        return _GRT.ClassificationSample_setSample(self, sample)

# Register ClassificationSample in _GRT:
_GRT.ClassificationSample_swigregister(ClassificationSample)
class TimeSeriesClassificationData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.TimeSeriesClassificationData_swiginit(self, _GRT.new_TimeSeriesClassificationData(*args))
    __swig_destroy__ = _GRT.delete_TimeSeriesClassificationData

    def clear(self):
        return _GRT.TimeSeriesClassificationData_clear(self)

    def setNumDimensions(self, numDimensions):
        return _GRT.TimeSeriesClassificationData_setNumDimensions(self, numDimensions)

    def setDatasetName(self, datasetName):
        return _GRT.TimeSeriesClassificationData_setDatasetName(self, datasetName)

    def setInfoText(self, infoText):
        return _GRT.TimeSeriesClassificationData_setInfoText(self, infoText)

    def setClassNameForCorrespondingClassLabel(self, className, classLabel):
        return _GRT.TimeSeriesClassificationData_setClassNameForCorrespondingClassLabel(self, className, classLabel)

    def setAllowNullGestureClass(self, allowNullGestureClass):
        return _GRT.TimeSeriesClassificationData_setAllowNullGestureClass(self, allowNullGestureClass)

    def addSample(self, classLabel, trainingSample):
        return _GRT.TimeSeriesClassificationData_addSample(self, classLabel, trainingSample)

    def removeLastSample(self):
        return _GRT.TimeSeriesClassificationData_removeLastSample(self)

    def eraseAllSamplesWithClassLabel(self, classLabel):
        return _GRT.TimeSeriesClassificationData_eraseAllSamplesWithClassLabel(self, classLabel)

    def relabelAllSamplesWithClassLabel(self, oldClassLabel, newClassLabel):
        return _GRT.TimeSeriesClassificationData_relabelAllSamplesWithClassLabel(self, oldClassLabel, newClassLabel)

    def setExternalRanges(self, externalRanges, useExternalRanges=False):
        return _GRT.TimeSeriesClassificationData_setExternalRanges(self, externalRanges, useExternalRanges)

    def enableExternalRangeScaling(self, useExternalRanges):
        return _GRT.TimeSeriesClassificationData_enableExternalRangeScaling(self, useExternalRanges)

    def scale(self, *args):
        return _GRT.TimeSeriesClassificationData_scale(self, *args)

    def save(self, filename):
        return _GRT.TimeSeriesClassificationData_save(self, filename)

    def load(self, filename):
        return _GRT.TimeSeriesClassificationData_load(self, filename)

    def saveDatasetToFile(self, filename):
        return _GRT.TimeSeriesClassificationData_saveDatasetToFile(self, filename)

    def loadDatasetFromFile(self, filename):
        return _GRT.TimeSeriesClassificationData_loadDatasetFromFile(self, filename)

    def saveDatasetToCSVFile(self, filename):
        return _GRT.TimeSeriesClassificationData_saveDatasetToCSVFile(self, filename)

    def loadDatasetFromCSVFile(self, filename):
        return _GRT.TimeSeriesClassificationData_loadDatasetFromCSVFile(self, filename)

    def printStats(self):
        return _GRT.TimeSeriesClassificationData_printStats(self)

    def getStatsAsString(self):
        return _GRT.TimeSeriesClassificationData_getStatsAsString(self)

    def partition(self, partitionPercentage, useStratifiedSampling=False):
        return _GRT.TimeSeriesClassificationData_partition(self, partitionPercentage, useStratifiedSampling)

    def split(self, partitionPercentage, useStratifiedSampling=False):
        return _GRT.TimeSeriesClassificationData_split(self, partitionPercentage, useStratifiedSampling)

    def merge(self, labelledData):
        return _GRT.TimeSeriesClassificationData_merge(self, labelledData)

    def spiltDataIntoKFolds(self, K, useStratifiedSampling=False):
        return _GRT.TimeSeriesClassificationData_spiltDataIntoKFolds(self, K, useStratifiedSampling)

    def getTrainingFoldData(self, foldIndex):
        return _GRT.TimeSeriesClassificationData_getTrainingFoldData(self, foldIndex)

    def getTestFoldData(self, foldIndex):
        return _GRT.TimeSeriesClassificationData_getTestFoldData(self, foldIndex)

    def getClassData(self, classLabel):
        return _GRT.TimeSeriesClassificationData_getClassData(self, classLabel)

    def reformatAsUnlabelledData(self):
        return _GRT.TimeSeriesClassificationData_reformatAsUnlabelledData(self)

    def getDatasetName(self):
        return _GRT.TimeSeriesClassificationData_getDatasetName(self)

    def getInfoText(self):
        return _GRT.TimeSeriesClassificationData_getInfoText(self)

    def getNumDimensions(self):
        return _GRT.TimeSeriesClassificationData_getNumDimensions(self)

    def getNumSamples(self):
        return _GRT.TimeSeriesClassificationData_getNumSamples(self)

    def getNumClasses(self):
        return _GRT.TimeSeriesClassificationData_getNumClasses(self)

    def getMinimumClassLabel(self):
        return _GRT.TimeSeriesClassificationData_getMinimumClassLabel(self)

    def getMaximumClassLabel(self):
        return _GRT.TimeSeriesClassificationData_getMaximumClassLabel(self)

    def getClassLabelIndexValue(self, classLabel):
        return _GRT.TimeSeriesClassificationData_getClassLabelIndexValue(self, classLabel)

    def getClassNameForCorrespondingClassLabel(self, classLabel):
        return _GRT.TimeSeriesClassificationData_getClassNameForCorrespondingClassLabel(self, classLabel)

    def getRanges(self):
        return _GRT.TimeSeriesClassificationData_getRanges(self)

    def getClassTracker(self):
        return _GRT.TimeSeriesClassificationData_getClassTracker(self)

    def getClassificationData(self):
        return _GRT.TimeSeriesClassificationData_getClassificationData(self)

    def getDataAsMatrixFloat(self):
        return _GRT.TimeSeriesClassificationData_getDataAsMatrixFloat(self)

    def get(self, i):
        return _GRT.TimeSeriesClassificationData_get(self, i)

# Register TimeSeriesClassificationData in _GRT:
_GRT.TimeSeriesClassificationData_swigregister(TimeSeriesClassificationData)
class TimeSeriesClassificationSample(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.TimeSeriesClassificationSample_swiginit(self, _GRT.new_TimeSeriesClassificationSample(*args))
    __swig_destroy__ = _GRT.delete_TimeSeriesClassificationSample

    def clear(self):
        return _GRT.TimeSeriesClassificationSample_clear(self)

    def addSample(self, classLabel, sample):
        return _GRT.TimeSeriesClassificationSample_addSample(self, classLabel, sample)

    def setTrainingSample(self, classLabel, data):
        return _GRT.TimeSeriesClassificationSample_setTrainingSample(self, classLabel, data)

    def getLength(self):
        return _GRT.TimeSeriesClassificationSample_getLength(self)

    def getNumDimensions(self):
        return _GRT.TimeSeriesClassificationSample_getNumDimensions(self)

    def getClassLabel(self):
        return _GRT.TimeSeriesClassificationSample_getClassLabel(self)

    def getData(self, *args):
        return _GRT.TimeSeriesClassificationSample_getData(self, *args)

# Register TimeSeriesClassificationSample in _GRT:
_GRT.TimeSeriesClassificationSample_swigregister(TimeSeriesClassificationSample)
class ClassificationDataStream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ClassificationDataStream_swiginit(self, _GRT.new_ClassificationDataStream(*args))
    __swig_destroy__ = _GRT.delete_ClassificationDataStream

    def clear(self):
        return _GRT.ClassificationDataStream_clear(self)

    def setNumDimensions(self, numDimensions):
        return _GRT.ClassificationDataStream_setNumDimensions(self, numDimensions)

    def setDatasetName(self, datasetName):
        return _GRT.ClassificationDataStream_setDatasetName(self, datasetName)

    def setInfoText(self, infoText):
        return _GRT.ClassificationDataStream_setInfoText(self, infoText)

    def setClassNameForCorrespondingClassLabel(self, className, classLabel):
        return _GRT.ClassificationDataStream_setClassNameForCorrespondingClassLabel(self, className, classLabel)

    def addSample(self, *args):
        return _GRT.ClassificationDataStream_addSample(self, *args)

    def removeLastSample(self):
        return _GRT.ClassificationDataStream_removeLastSample(self)

    def eraseAllSamplesWithClassLabel(self, classLabel):
        return _GRT.ClassificationDataStream_eraseAllSamplesWithClassLabel(self, classLabel)

    def relabelAllSamplesWithClassLabel(self, oldClassLabel, newClassLabel):
        return _GRT.ClassificationDataStream_relabelAllSamplesWithClassLabel(self, oldClassLabel, newClassLabel)

    def setExternalRanges(self, externalRanges, useExternalRanges=False):
        return _GRT.ClassificationDataStream_setExternalRanges(self, externalRanges, useExternalRanges)

    def enableExternalRangeScaling(self, useExternalRanges):
        return _GRT.ClassificationDataStream_enableExternalRangeScaling(self, useExternalRanges)

    def scale(self, *args):
        return _GRT.ClassificationDataStream_scale(self, *args)

    def resetPlaybackIndex(self, playbackIndex):
        return _GRT.ClassificationDataStream_resetPlaybackIndex(self, playbackIndex)

    def getNextSample(self):
        return _GRT.ClassificationDataStream_getNextSample(self)

    def getAllTrainingExamplesWithClassLabel(self, classLabel):
        return _GRT.ClassificationDataStream_getAllTrainingExamplesWithClassLabel(self, classLabel)

    def save(self, filename):
        return _GRT.ClassificationDataStream_save(self, filename)

    def load(self, filename):
        return _GRT.ClassificationDataStream_load(self, filename)

    def saveDatasetToFile(self, filename):
        return _GRT.ClassificationDataStream_saveDatasetToFile(self, filename)

    def saveDatasetToCSVFile(self, filename):
        return _GRT.ClassificationDataStream_saveDatasetToCSVFile(self, filename)

    def loadDatasetFromFile(self, filename):
        return _GRT.ClassificationDataStream_loadDatasetFromFile(self, filename)

    def loadDatasetFromCSVFile(self, filename, classLabelColumnIndex=0):
        return _GRT.ClassificationDataStream_loadDatasetFromCSVFile(self, filename, classLabelColumnIndex)

    def printStats(self):
        return _GRT.ClassificationDataStream_printStats(self)

    def getDatasetName(self):
        return _GRT.ClassificationDataStream_getDatasetName(self)

    def getInfoText(self):
        return _GRT.ClassificationDataStream_getInfoText(self)

    def getNumDimensions(self):
        return _GRT.ClassificationDataStream_getNumDimensions(self)

    def getNumSamples(self):
        return _GRT.ClassificationDataStream_getNumSamples(self)

    def getNumClasses(self):
        return _GRT.ClassificationDataStream_getNumClasses(self)

    def getMinimumClassLabel(self):
        return _GRT.ClassificationDataStream_getMinimumClassLabel(self)

    def getMaximumClassLabel(self):
        return _GRT.ClassificationDataStream_getMaximumClassLabel(self)

    def getClassLabelIndexValue(self, classLabel):
        return _GRT.ClassificationDataStream_getClassLabelIndexValue(self, classLabel)

    def getClassNameForCorrespondingClassLabel(self, classLabel):
        return _GRT.ClassificationDataStream_getClassNameForCorrespondingClassLabel(self, classLabel)

    def getRanges(self):
        return _GRT.ClassificationDataStream_getRanges(self)

    def getClassTracker(self):
        return _GRT.ClassificationDataStream_getClassTracker(self)

    def getTimeSeriesPositionTracker(self):
        return _GRT.ClassificationDataStream_getTimeSeriesPositionTracker(self)

    def getClassificationSamples(self):
        return _GRT.ClassificationDataStream_getClassificationSamples(self)

    def getSubset(self, startIndex, endIndex):
        return _GRT.ClassificationDataStream_getSubset(self, startIndex, endIndex)

    def getTimeSeriesClassificationData(self, includeNullGestures=False):
        return _GRT.ClassificationDataStream_getTimeSeriesClassificationData(self, includeNullGestures)

    def getClassificationData(self, includeNullGestures=False):
        return _GRT.ClassificationDataStream_getClassificationData(self, includeNullGestures)

    def getTimeSeriesData(self, trackerInfo):
        return _GRT.ClassificationDataStream_getTimeSeriesData(self, trackerInfo)

    def getDataAsMatrixFloat(self):
        return _GRT.ClassificationDataStream_getDataAsMatrixFloat(self)

    def getClassLabels(self):
        return _GRT.ClassificationDataStream_getClassLabels(self)

# Register ClassificationDataStream in _GRT:
_GRT.ClassificationDataStream_swigregister(ClassificationDataStream)
class UnlabelledData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.UnlabelledData_swiginit(self, _GRT.new_UnlabelledData(*args))
    __swig_destroy__ = _GRT.delete_UnlabelledData

    def clear(self):
        return _GRT.UnlabelledData_clear(self)

    def setNumDimensions(self, numDimensions):
        return _GRT.UnlabelledData_setNumDimensions(self, numDimensions)

    def setDatasetName(self, datasetName):
        return _GRT.UnlabelledData_setDatasetName(self, datasetName)

    def setInfoText(self, infoText):
        return _GRT.UnlabelledData_setInfoText(self, infoText)

    def addSample(self, sample):
        return _GRT.UnlabelledData_addSample(self, sample)

    def removeLastSample(self):
        return _GRT.UnlabelledData_removeLastSample(self)

    def reserve(self, N):
        return _GRT.UnlabelledData_reserve(self, N)

    def setExternalRanges(self, externalRanges, useExternalRanges=False):
        return _GRT.UnlabelledData_setExternalRanges(self, externalRanges, useExternalRanges)

    def enableExternalRangeScaling(self, useExternalRanges):
        return _GRT.UnlabelledData_enableExternalRangeScaling(self, useExternalRanges)

    def scale(self, *args):
        return _GRT.UnlabelledData_scale(self, *args)

    def save(self, filename):
        return _GRT.UnlabelledData_save(self, filename)

    def load(self, filename):
        return _GRT.UnlabelledData_load(self, filename)

    def saveDatasetToFile(self, filename):
        return _GRT.UnlabelledData_saveDatasetToFile(self, filename)

    def loadDatasetFromFile(self, filename):
        return _GRT.UnlabelledData_loadDatasetFromFile(self, filename)

    def saveDatasetToCSVFile(self, filename):
        return _GRT.UnlabelledData_saveDatasetToCSVFile(self, filename)

    def loadDatasetFromCSVFile(self, filename):
        return _GRT.UnlabelledData_loadDatasetFromCSVFile(self, filename)

    def partition(self, partitionPercentage):
        return _GRT.UnlabelledData_partition(self, partitionPercentage)

    def split(self, partitionPercentage):
        return _GRT.UnlabelledData_split(self, partitionPercentage)

    def merge(self, unlabelledData):
        return _GRT.UnlabelledData_merge(self, unlabelledData)

    def spiltDataIntoKFolds(self, K):
        return _GRT.UnlabelledData_spiltDataIntoKFolds(self, K)

    def getTrainingFoldData(self, foldIndex):
        return _GRT.UnlabelledData_getTrainingFoldData(self, foldIndex)

    def getTestFoldData(self, foldIndex):
        return _GRT.UnlabelledData_getTestFoldData(self, foldIndex)

    def getDatasetName(self):
        return _GRT.UnlabelledData_getDatasetName(self)

    def getInfoText(self):
        return _GRT.UnlabelledData_getInfoText(self)

    def getStatsAsString(self):
        return _GRT.UnlabelledData_getStatsAsString(self)

    def getNumDimensions(self):
        return _GRT.UnlabelledData_getNumDimensions(self)

    def getNumSamples(self):
        return _GRT.UnlabelledData_getNumSamples(self)

    def getRanges(self):
        return _GRT.UnlabelledData_getRanges(self)

    def getData(self):
        return _GRT.UnlabelledData_getData(self)

    def getDataAsMatrixDouble(self):
        return _GRT.UnlabelledData_getDataAsMatrixDouble(self)

    def getDataAsMatrixFloat(self):
        return _GRT.UnlabelledData_getDataAsMatrixFloat(self)

# Register UnlabelledData in _GRT:
_GRT.UnlabelledData_swigregister(UnlabelledData)
DEFAULT_NULL_LIKELIHOOD_VALUE = _GRT.DEFAULT_NULL_LIKELIHOOD_VALUE
DEFAULT_NULL_DISTANCE_VALUE = _GRT.DEFAULT_NULL_DISTANCE_VALUE
class TrainingResultsObserverManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.TrainingResultsObserverManager_swiginit(self, _GRT.new_TrainingResultsObserverManager())
    __swig_destroy__ = _GRT.delete_TrainingResultsObserverManager

# Register TrainingResultsObserverManager in _GRT:
_GRT.TrainingResultsObserverManager_swigregister(TrainingResultsObserverManager)
class TestResultsObserverManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.TestResultsObserverManager_swiginit(self, _GRT.new_TestResultsObserverManager())
    __swig_destroy__ = _GRT.delete_TestResultsObserverManager

# Register TestResultsObserverManager in _GRT:
_GRT.TestResultsObserverManager_swigregister(TestResultsObserverManager)
class MLBase(GRTBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BASE_TYPE_NOT_SET = _GRT.MLBase_BASE_TYPE_NOT_SET
    CLASSIFIER = _GRT.MLBase_CLASSIFIER
    REGRESSIFIER = _GRT.MLBase_REGRESSIFIER
    CLUSTERER = _GRT.MLBase_CLUSTERER
    PRE_PROCSSING = _GRT.MLBase_PRE_PROCSSING
    POST_PROCESSING = _GRT.MLBase_POST_PROCESSING
    FEATURE_EXTRACTION = _GRT.MLBase_FEATURE_EXTRACTION
    CONTEXT = _GRT.MLBase_CONTEXT

    def __init__(self, *args):
        _GRT.MLBase_swiginit(self, _GRT.new_MLBase(*args))
    __swig_destroy__ = _GRT.delete_MLBase

    def copyMLBaseVariables(self, mlBase):
        return _GRT.MLBase_copyMLBaseVariables(self, mlBase)

    def train(self, *args):
        return _GRT.MLBase_train(self, *args)

    def train_(self, *args):
        return _GRT.MLBase_train_(self, *args)

    def predict(self, *args):
        return _GRT.MLBase_predict(self, *args)

    def predict_(self, *args):
        return _GRT.MLBase_predict_(self, *args)

    def map(self, inputVector):
        return _GRT.MLBase_map(self, inputVector)

    def map_(self, inputVector):
        return _GRT.MLBase_map_(self, inputVector)

    def reset(self):
        return _GRT.MLBase_reset(self)

    def clear(self):
        return _GRT.MLBase_clear(self)

    def _print(self):
        return _GRT.MLBase__print(self)

    def save(self, *args):
        return _GRT.MLBase_save(self, *args)

    def load(self, *args):
        return _GRT.MLBase_load(self, *args)

    def saveModelToFile(self, *args):
        return _GRT.MLBase_saveModelToFile(self, *args)

    def loadModelFromFile(self, *args):
        return _GRT.MLBase_loadModelFromFile(self, *args)

    def getModel(self, stream):
        return _GRT.MLBase_getModel(self, stream)

    def getModelAsString(self):
        return _GRT.MLBase_getModelAsString(self)

    def getInputType(self):
        return _GRT.MLBase_getInputType(self)

    def getOutputType(self):
        return _GRT.MLBase_getOutputType(self)

    def getType(self):
        return _GRT.MLBase_getType(self)

    def getNumInputFeatures(self):
        return _GRT.MLBase_getNumInputFeatures(self)

    def getNumInputDimensions(self):
        return _GRT.MLBase_getNumInputDimensions(self)

    def getNumOutputDimensions(self):
        return _GRT.MLBase_getNumOutputDimensions(self)

    def getMinNumEpochs(self):
        return _GRT.MLBase_getMinNumEpochs(self)

    def getMaxNumEpochs(self):
        return _GRT.MLBase_getMaxNumEpochs(self)

    def getBatchSize(self):
        return _GRT.MLBase_getBatchSize(self)

    def getNumRestarts(self):
        return _GRT.MLBase_getNumRestarts(self)

    def getValidationSetSize(self):
        return _GRT.MLBase_getValidationSetSize(self)

    def getNumTrainingIterationsToConverge(self):
        return _GRT.MLBase_getNumTrainingIterationsToConverge(self)

    def getMinChange(self):
        return _GRT.MLBase_getMinChange(self)

    def getLearningRate(self):
        return _GRT.MLBase_getLearningRate(self)

    def getRMSTrainingError(self):
        return _GRT.MLBase_getRMSTrainingError(self)

    def getRootMeanSquaredTrainingError(self):
        return _GRT.MLBase_getRootMeanSquaredTrainingError(self)

    def getTotalSquaredTrainingError(self):
        return _GRT.MLBase_getTotalSquaredTrainingError(self)

    def getRMSValidationError(self):
        return _GRT.MLBase_getRMSValidationError(self)

    def getValidationSetAccuracy(self):
        return _GRT.MLBase_getValidationSetAccuracy(self)

    def getValidationSetPrecision(self):
        return _GRT.MLBase_getValidationSetPrecision(self)

    def getValidationSetRecall(self):
        return _GRT.MLBase_getValidationSetRecall(self)

    def getUseValidationSet(self):
        return _GRT.MLBase_getUseValidationSet(self)

    def getRandomiseTrainingOrder(self):
        return _GRT.MLBase_getRandomiseTrainingOrder(self)

    def getTrained(self):
        return _GRT.MLBase_getTrained(self)

    def getModelTrained(self):
        return _GRT.MLBase_getModelTrained(self)

    def getConverged(self):
        return _GRT.MLBase_getConverged(self)

    def getScalingEnabled(self):
        return _GRT.MLBase_getScalingEnabled(self)

    def getIsBaseTypeClassifier(self):
        return _GRT.MLBase_getIsBaseTypeClassifier(self)

    def getIsBaseTypeRegressifier(self):
        return _GRT.MLBase_getIsBaseTypeRegressifier(self)

    def getIsBaseTypeClusterer(self):
        return _GRT.MLBase_getIsBaseTypeClusterer(self)

    def getTrainingLoggingEnabled(self):
        return _GRT.MLBase_getTrainingLoggingEnabled(self)

    def getTestingLoggingEnabled(self):
        return _GRT.MLBase_getTestingLoggingEnabled(self)

    def enableScaling(self, useScaling):
        return _GRT.MLBase_enableScaling(self, useScaling)

    def setMaxNumEpochs(self, maxNumEpochs):
        return _GRT.MLBase_setMaxNumEpochs(self, maxNumEpochs)

    def setBatchSize(self, batchSize):
        return _GRT.MLBase_setBatchSize(self, batchSize)

    def setMinNumEpochs(self, minNumEpochs):
        return _GRT.MLBase_setMinNumEpochs(self, minNumEpochs)

    def setNumRestarts(self, numRestarts):
        return _GRT.MLBase_setNumRestarts(self, numRestarts)

    def setMinChange(self, minChange):
        return _GRT.MLBase_setMinChange(self, minChange)

    def setLearningRate(self, learningRate):
        return _GRT.MLBase_setLearningRate(self, learningRate)

    def setUseValidationSet(self, useValidationSet):
        return _GRT.MLBase_setUseValidationSet(self, useValidationSet)

    def setValidationSetSize(self, validationSetSize):
        return _GRT.MLBase_setValidationSetSize(self, validationSetSize)

    def setRandomiseTrainingOrder(self, randomiseTrainingOrder):
        return _GRT.MLBase_setRandomiseTrainingOrder(self, randomiseTrainingOrder)

    def setTrainingLoggingEnabled(self, loggingEnabled):
        return _GRT.MLBase_setTrainingLoggingEnabled(self, loggingEnabled)

    def setTestingLoggingEnabled(self, loggingEnabled):
        return _GRT.MLBase_setTestingLoggingEnabled(self, loggingEnabled)

    def registerTrainingResultsObserver(self, observer):
        return _GRT.MLBase_registerTrainingResultsObserver(self, observer)

    def registerTestResultsObserver(self, observer):
        return _GRT.MLBase_registerTestResultsObserver(self, observer)

    def removeTrainingResultsObserver(self, observer):
        return _GRT.MLBase_removeTrainingResultsObserver(self, observer)

    def removeTestResultsObserver(self, observer):
        return _GRT.MLBase_removeTestResultsObserver(self, observer)

    def removeAllTrainingObservers(self):
        return _GRT.MLBase_removeAllTrainingObservers(self)

    def removeAllTestObservers(self):
        return _GRT.MLBase_removeAllTestObservers(self)

    def notifyTrainingResultsObservers(self, data):
        return _GRT.MLBase_notifyTrainingResultsObservers(self, data)

    def notifyTestResultsObservers(self, data):
        return _GRT.MLBase_notifyTestResultsObservers(self, data)

    def getMLBasePointer(self, *args):
        return _GRT.MLBase_getMLBasePointer(self, *args)

    def getTrainingResults(self):
        return _GRT.MLBase_getTrainingResults(self)

# Register MLBase in _GRT:
_GRT.MLBase_swigregister(MLBase)
class Classifier(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STANDARD_CLASSIFIER_MODE = _GRT.Classifier_STANDARD_CLASSIFIER_MODE
    TIMESERIES_CLASSIFIER_MODE = _GRT.Classifier_TIMESERIES_CLASSIFIER_MODE

    def __init__(self, *args):
        _GRT.Classifier_swiginit(self, _GRT.new_Classifier(*args))
    __swig_destroy__ = _GRT.delete_Classifier

    def deepCopyFrom(self, classifier):
        return _GRT.Classifier_deepCopyFrom(self, classifier)

    def copyBaseVariables(self, classifier):
        return _GRT.Classifier_copyBaseVariables(self, classifier)

    def reset(self):
        return _GRT.Classifier_reset(self)

    def clear(self):
        return _GRT.Classifier_clear(self)

    def computeAccuracy(self, data, accuracy):
        return _GRT.Classifier_computeAccuracy(self, data, accuracy)

    def getClassifierType(self):
        return _GRT.Classifier_getClassifierType(self)

    def getSupportsNullRejection(self):
        return _GRT.Classifier_getSupportsNullRejection(self)

    def getNullRejectionEnabled(self):
        return _GRT.Classifier_getNullRejectionEnabled(self)

    def getNullRejectionCoeff(self):
        return _GRT.Classifier_getNullRejectionCoeff(self)

    def getMaximumLikelihood(self):
        return _GRT.Classifier_getMaximumLikelihood(self)

    def getBestDistance(self):
        return _GRT.Classifier_getBestDistance(self)

    def getPhase(self):
        return _GRT.Classifier_getPhase(self)

    def getTrainingSetAccuracy(self):
        return _GRT.Classifier_getTrainingSetAccuracy(self)

    def getNumClasses(self):
        return _GRT.Classifier_getNumClasses(self)

    def getClassLabelIndexValue(self, classLabel):
        return _GRT.Classifier_getClassLabelIndexValue(self, classLabel)

    def getPredictedClassLabel(self):
        return _GRT.Classifier_getPredictedClassLabel(self)

    def getClassLikelihoods(self):
        return _GRT.Classifier_getClassLikelihoods(self)

    def getClassDistances(self):
        return _GRT.Classifier_getClassDistances(self)

    def getNullRejectionThresholds(self):
        return _GRT.Classifier_getNullRejectionThresholds(self)

    def getClassLabels(self):
        return _GRT.Classifier_getClassLabels(self)

    def getRanges(self):
        return _GRT.Classifier_getRanges(self)

    def enableNullRejection(self, useNullRejection):
        return _GRT.Classifier_enableNullRejection(self, useNullRejection)

    def setNullRejectionCoeff(self, nullRejectionCoeff):
        return _GRT.Classifier_setNullRejectionCoeff(self, nullRejectionCoeff)

    def setNullRejectionThresholds(self, newRejectionThresholds):
        return _GRT.Classifier_setNullRejectionThresholds(self, newRejectionThresholds)

    def recomputeNullRejectionThresholds(self):
        return _GRT.Classifier_recomputeNullRejectionThresholds(self)

    def getTimeseriesCompatible(self):
        return _GRT.Classifier_getTimeseriesCompatible(self)

    def create(self, *args):
        return _GRT.Classifier_create(self, *args)

    def createNewInstance(self):
        return _GRT.Classifier_createNewInstance(self)

    @staticmethod
    def createInstanceFromString(id):
        return _GRT.Classifier_createInstanceFromString(id)

    def deepCopy(self):
        return _GRT.Classifier_deepCopy(self)

    def getClassifierPointer(self):
        return _GRT.Classifier_getClassifierPointer(self)

    def getBaseClassifier(self):
        return _GRT.Classifier_getBaseClassifier(self)

    @staticmethod
    def getRegisteredClassifiers():
        return _GRT.Classifier_getRegisteredClassifiers()

# Register Classifier in _GRT:
_GRT.Classifier_swigregister(Classifier)
class PostProcessing(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.PostProcessing_swiginit(self, _GRT.new_PostProcessing(*args))
    __swig_destroy__ = _GRT.delete_PostProcessing

    def deepCopyFrom(self, postProcessing):
        return _GRT.PostProcessing_deepCopyFrom(self, postProcessing)

    def copyBaseVariables(self, postProcessingModule):
        return _GRT.PostProcessing_copyBaseVariables(self, postProcessingModule)

    def process(self, inputVector):
        return _GRT.PostProcessing_process(self, inputVector)

    def getPostProcessingInputMode(self):
        return _GRT.PostProcessing_getPostProcessingInputMode(self)

    def getPostProcessingOutputMode(self):
        return _GRT.PostProcessing_getPostProcessingOutputMode(self)

    def getInitialized(self):
        return _GRT.PostProcessing_getInitialized(self)

    def getIsPostProcessingInputModePredictedClassLabel(self):
        return _GRT.PostProcessing_getIsPostProcessingInputModePredictedClassLabel(self)

    def getIsPostProcessingInputModeClassLikelihoods(self):
        return _GRT.PostProcessing_getIsPostProcessingInputModeClassLikelihoods(self)

    def getIsPostProcessingOutputModePredictedClassLabel(self):
        return _GRT.PostProcessing_getIsPostProcessingOutputModePredictedClassLabel(self)

    def getIsPostProcessingOutputModeClassLikelihoods(self):
        return _GRT.PostProcessing_getIsPostProcessingOutputModeClassLikelihoods(self)

    def getProcessedData(self):
        return _GRT.PostProcessing_getProcessedData(self)

    def create(self, *args):
        return _GRT.PostProcessing_create(self, *args)
    INPUT_MODE_NOT_SET = _GRT.PostProcessing_INPUT_MODE_NOT_SET
    INPUT_MODE_PREDICTED_CLASS_LABEL = _GRT.PostProcessing_INPUT_MODE_PREDICTED_CLASS_LABEL
    INPUT_MODE_CLASS_LIKELIHOODS = _GRT.PostProcessing_INPUT_MODE_CLASS_LIKELIHOODS
    OUTPUT_MODE_NOT_SET = _GRT.PostProcessing_OUTPUT_MODE_NOT_SET
    OUTPUT_MODE_PREDICTED_CLASS_LABEL = _GRT.PostProcessing_OUTPUT_MODE_PREDICTED_CLASS_LABEL
    OUTPUT_MODE_CLASS_LIKELIHOODS = _GRT.PostProcessing_OUTPUT_MODE_CLASS_LIKELIHOODS

    def createNewInstance(self):
        return _GRT.PostProcessing_createNewInstance(self)

    @staticmethod
    def createInstanceFromString(id):
        return _GRT.PostProcessing_createInstanceFromString(id)

    def getPostProcessingType(self):
        return _GRT.PostProcessing_getPostProcessingType(self)

# Register PostProcessing in _GRT:
_GRT.PostProcessing_swigregister(PostProcessing)
class Clusterer(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.Clusterer_swiginit(self, _GRT.new_Clusterer(*args))
    __swig_destroy__ = _GRT.delete_Clusterer

    def deepCopyFrom(self, clusterer):
        return _GRT.Clusterer_deepCopyFrom(self, clusterer)

    def copyBaseVariables(self, clusterer):
        return _GRT.Clusterer_copyBaseVariables(self, clusterer)

    def train_(self, *args):
        return _GRT.Clusterer_train_(self, *args)

    def reset(self):
        return _GRT.Clusterer_reset(self)

    def clear(self):
        return _GRT.Clusterer_clear(self)

    def getNumClusters(self):
        return _GRT.Clusterer_getNumClusters(self)

    def getPredictedClusterLabel(self):
        return _GRT.Clusterer_getPredictedClusterLabel(self)

    def getMaximumLikelihood(self):
        return _GRT.Clusterer_getMaximumLikelihood(self)

    def getBestDistance(self):
        return _GRT.Clusterer_getBestDistance(self)

    def getClusterLikelihoods(self):
        return _GRT.Clusterer_getClusterLikelihoods(self)

    def getClusterDistances(self):
        return _GRT.Clusterer_getClusterDistances(self)

    def getClusterLabels(self):
        return _GRT.Clusterer_getClusterLabels(self)

    def getClustererType(self):
        return _GRT.Clusterer_getClustererType(self)

    def setNumClusters(self, numClusters):
        return _GRT.Clusterer_setNumClusters(self, numClusters)

    def create(self, *args):
        return _GRT.Clusterer_create(self, *args)

    def createNewInstance(self):
        return _GRT.Clusterer_createNewInstance(self)

    @staticmethod
    def createInstanceFromString(id):
        return _GRT.Clusterer_createInstanceFromString(id)

    def deepCopy(self):
        return _GRT.Clusterer_deepCopy(self)

    def getBaseClusterer(self):
        return _GRT.Clusterer_getBaseClusterer(self)

    @staticmethod
    def getRegisteredClusterers():
        return _GRT.Clusterer_getRegisteredClusterers()

    def train(self, *args):
        return _GRT.Clusterer_train(self, *args)

# Register Clusterer in _GRT:
_GRT.Clusterer_swigregister(Clusterer)
class FeatureExtraction(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.FeatureExtraction_swiginit(self, _GRT.new_FeatureExtraction(*args))
    __swig_destroy__ = _GRT.delete_FeatureExtraction

    def deepCopyFrom(self, rhs):
        return _GRT.FeatureExtraction_deepCopyFrom(self, rhs)

    def copyBaseVariables(self, featureExtractionModule):
        return _GRT.FeatureExtraction_copyBaseVariables(self, featureExtractionModule)

    def predict(self, *args):
        return _GRT.FeatureExtraction_predict(self, *args)

    def computeFeatures(self, *args):
        return _GRT.FeatureExtraction_computeFeatures(self, *args)

    def clear(self):
        return _GRT.FeatureExtraction_clear(self)

    def getInitialized(self):
        return _GRT.FeatureExtraction_getInitialized(self)

    def getFeatureDataReady(self):
        return _GRT.FeatureExtraction_getFeatureDataReady(self)

    def getIsTrainable(self):
        return _GRT.FeatureExtraction_getIsTrainable(self)

    def getFeatureVector(self):
        return _GRT.FeatureExtraction_getFeatureVector(self)

    def getFeatureMatrix(self):
        return _GRT.FeatureExtraction_getFeatureMatrix(self)

    def create(self, *args):
        return _GRT.FeatureExtraction_create(self, *args)

    def save(self, *args):
        return _GRT.FeatureExtraction_save(self, *args)

    def load(self, *args):
        return _GRT.FeatureExtraction_load(self, *args)

    def createNewInstance(self):
        return _GRT.FeatureExtraction_createNewInstance(self)

    @staticmethod
    def createInstanceFromString(id):
        return _GRT.FeatureExtraction_createInstanceFromString(id)

    def getFeatureExtractionType(self):
        return _GRT.FeatureExtraction_getFeatureExtractionType(self)

# Register FeatureExtraction in _GRT:
_GRT.FeatureExtraction_swigregister(FeatureExtraction)
class PreProcessing(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.PreProcessing_swiginit(self, _GRT.new_PreProcessing(*args))
    __swig_destroy__ = _GRT.delete_PreProcessing

    def deepCopyFrom(self, rhs):
        return _GRT.PreProcessing_deepCopyFrom(self, rhs)

    def copyBaseVariables(self, preProcessingModule):
        return _GRT.PreProcessing_copyBaseVariables(self, preProcessingModule)

    def process(self, inputVector):
        return _GRT.PreProcessing_process(self, inputVector)

    def reset(self):
        return _GRT.PreProcessing_reset(self)

    def clear(self):
        return _GRT.PreProcessing_clear(self)

    def getInitialized(self):
        return _GRT.PreProcessing_getInitialized(self)

    def getProcessedData(self):
        return _GRT.PreProcessing_getProcessedData(self)

    def create(self, *args):
        return _GRT.PreProcessing_create(self, *args)

    def createNewInstance(self):
        return _GRT.PreProcessing_createNewInstance(self)

    @staticmethod
    def createInstanceFromString(id):
        return _GRT.PreProcessing_createInstanceFromString(id)

    def getPreProcessingType(self):
        return _GRT.PreProcessing_getPreProcessingType(self)

# Register PreProcessing in _GRT:
_GRT.PreProcessing_swigregister(PreProcessing)
class Regressifier(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.Regressifier_swiginit(self, _GRT.new_Regressifier(*args))
    __swig_destroy__ = _GRT.delete_Regressifier

    def deepCopyFrom(self, regressifier):
        return _GRT.Regressifier_deepCopyFrom(self, regressifier)

    def copyBaseVariables(self, regressifier):
        return _GRT.Regressifier_copyBaseVariables(self, regressifier)

    def reset(self):
        return _GRT.Regressifier_reset(self)

    def clear(self):
        return _GRT.Regressifier_clear(self)

    def getRegressionData(self):
        return _GRT.Regressifier_getRegressionData(self)

    def getInputRanges(self):
        return _GRT.Regressifier_getInputRanges(self)

    def getOutputRanges(self):
        return _GRT.Regressifier_getOutputRanges(self)

    def deepCopy(self):
        return _GRT.Regressifier_deepCopy(self)

    def getBaseRegressifier(self):
        return _GRT.Regressifier_getBaseRegressifier(self)

    @staticmethod
    def getRegisteredRegressifiers():
        return _GRT.Regressifier_getRegisteredRegressifiers()

    def create(self, *args):
        return _GRT.Regressifier_create(self, *args)

    def createNewInstance(self):
        return _GRT.Regressifier_createNewInstance(self)

    @staticmethod
    def createInstanceFromString(id):
        return _GRT.Regressifier_createInstanceFromString(id)

    def getRegressifierType(self):
        return _GRT.Regressifier_getRegressifierType(self)

# Register Regressifier in _GRT:
_GRT.Regressifier_swigregister(Regressifier)
INSERT_AT_END_INDEX = _GRT.INSERT_AT_END_INDEX
class GestureRecognitionPipeline(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    START_OF_PIPELINE = _GRT.GestureRecognitionPipeline_START_OF_PIPELINE
    AFTER_PREPROCESSING = _GRT.GestureRecognitionPipeline_AFTER_PREPROCESSING
    AFTER_FEATURE_EXTRACTION = _GRT.GestureRecognitionPipeline_AFTER_FEATURE_EXTRACTION
    AFTER_CLASSIFIER = _GRT.GestureRecognitionPipeline_AFTER_CLASSIFIER
    END_OF_PIPELINE = _GRT.GestureRecognitionPipeline_END_OF_PIPELINE
    NUM_CONTEXT_LEVELS = _GRT.GestureRecognitionPipeline_NUM_CONTEXT_LEVELS

    def __init__(self, *args):
        _GRT.GestureRecognitionPipeline_swiginit(self, _GRT.new_GestureRecognitionPipeline(*args))
    __swig_destroy__ = _GRT.delete_GestureRecognitionPipeline

    def __lshift__(self, *args):
        return _GRT.GestureRecognitionPipeline___lshift__(self, *args)

    def test(self, *args):
        return _GRT.GestureRecognitionPipeline_test(self, *args)

    def predict_(self, *args):
        return _GRT.GestureRecognitionPipeline_predict_(self, *args)

    def map_(self, inputVector):
        return _GRT.GestureRecognitionPipeline_map_(self, inputVector)

    def reset(self):
        return _GRT.GestureRecognitionPipeline_reset(self)

    def clear(self):
        return _GRT.GestureRecognitionPipeline_clear(self)

    def clearModel(self):
        return _GRT.GestureRecognitionPipeline_clearModel(self)

    def save(self, filename):
        return _GRT.GestureRecognitionPipeline_save(self, filename)

    def savePipelineToFile(self, filename):
        return _GRT.GestureRecognitionPipeline_savePipelineToFile(self, filename)

    def load(self, filename):
        return _GRT.GestureRecognitionPipeline_load(self, filename)

    def loadPipelineFromFile(self, filename):
        return _GRT.GestureRecognitionPipeline_loadPipelineFromFile(self, filename)

    def preProcessData(self, inputVector, computeFeatures=True):
        return _GRT.GestureRecognitionPipeline_preProcessData(self, inputVector, computeFeatures)

    def getIsInitialized(self):
        return _GRT.GestureRecognitionPipeline_getIsInitialized(self)

    def getIsPreProcessingSet(self):
        return _GRT.GestureRecognitionPipeline_getIsPreProcessingSet(self)

    def getIsFeatureExtractionSet(self):
        return _GRT.GestureRecognitionPipeline_getIsFeatureExtractionSet(self)

    def getIsClassifierSet(self):
        return _GRT.GestureRecognitionPipeline_getIsClassifierSet(self)

    def getIsRegressifierSet(self):
        return _GRT.GestureRecognitionPipeline_getIsRegressifierSet(self)

    def getIsClustererSet(self):
        return _GRT.GestureRecognitionPipeline_getIsClustererSet(self)

    def getIsPostProcessingSet(self):
        return _GRT.GestureRecognitionPipeline_getIsPostProcessingSet(self)

    def getIsContextSet(self):
        return _GRT.GestureRecognitionPipeline_getIsContextSet(self)

    def getIsPipelineModeSet(self):
        return _GRT.GestureRecognitionPipeline_getIsPipelineModeSet(self)

    def getIsPipelineInClassificationMode(self):
        return _GRT.GestureRecognitionPipeline_getIsPipelineInClassificationMode(self)

    def getIsPipelineInRegressionMode(self):
        return _GRT.GestureRecognitionPipeline_getIsPipelineInRegressionMode(self)

    def getInputVectorDimensionsSize(self):
        return _GRT.GestureRecognitionPipeline_getInputVectorDimensionsSize(self)

    def getOutputVectorDimensionsSize(self):
        return _GRT.GestureRecognitionPipeline_getOutputVectorDimensionsSize(self)

    def getNumClassesInModel(self):
        return _GRT.GestureRecognitionPipeline_getNumClassesInModel(self)

    def getNumClasses(self):
        return _GRT.GestureRecognitionPipeline_getNumClasses(self)

    def getNumPreProcessingModules(self):
        return _GRT.GestureRecognitionPipeline_getNumPreProcessingModules(self)

    def getNumFeatureExtractionModules(self):
        return _GRT.GestureRecognitionPipeline_getNumFeatureExtractionModules(self)

    def getNumPostProcessingModules(self):
        return _GRT.GestureRecognitionPipeline_getNumPostProcessingModules(self)

    def getPredictionModuleIndexPosition(self):
        return _GRT.GestureRecognitionPipeline_getPredictionModuleIndexPosition(self)

    def getPredictedClassLabel(self):
        return _GRT.GestureRecognitionPipeline_getPredictedClassLabel(self)

    def getUnProcessedPredictedClassLabel(self):
        return _GRT.GestureRecognitionPipeline_getUnProcessedPredictedClassLabel(self)

    def getNumTrainingSamples(self):
        return _GRT.GestureRecognitionPipeline_getNumTrainingSamples(self)

    def getNumTestSamples(self):
        return _GRT.GestureRecognitionPipeline_getNumTestSamples(self)

    def getMaximumLikelihood(self):
        return _GRT.GestureRecognitionPipeline_getMaximumLikelihood(self)

    def getPhase(self):
        return _GRT.GestureRecognitionPipeline_getPhase(self)

    def getTrainingSetAccuracy(self):
        return _GRT.GestureRecognitionPipeline_getTrainingSetAccuracy(self)

    def getCrossValidationAccuracy(self):
        return _GRT.GestureRecognitionPipeline_getCrossValidationAccuracy(self)

    def getTestAccuracy(self):
        return _GRT.GestureRecognitionPipeline_getTestAccuracy(self)

    def getTestRMSError(self):
        return _GRT.GestureRecognitionPipeline_getTestRMSError(self)

    def getTestSSError(self):
        return _GRT.GestureRecognitionPipeline_getTestSSError(self)

    def getTestRejectionPrecision(self):
        return _GRT.GestureRecognitionPipeline_getTestRejectionPrecision(self)

    def getTestRejectionRecall(self):
        return _GRT.GestureRecognitionPipeline_getTestRejectionRecall(self)

    def getTestTime(self):
        return _GRT.GestureRecognitionPipeline_getTestTime(self)

    def getTrainingTime(self):
        return _GRT.GestureRecognitionPipeline_getTrainingTime(self)

    def getTrainingRMSError(self):
        return _GRT.GestureRecognitionPipeline_getTrainingRMSError(self)

    def getTrainingSSError(self):
        return _GRT.GestureRecognitionPipeline_getTrainingSSError(self)

    def getTestConfusionMatrix(self):
        return _GRT.GestureRecognitionPipeline_getTestConfusionMatrix(self)

    def getTrainingResults(self):
        return _GRT.GestureRecognitionPipeline_getTrainingResults(self)

    def getTestResults(self):
        return _GRT.GestureRecognitionPipeline_getTestResults(self)

    def getTestPrecision(self, *args):
        return _GRT.GestureRecognitionPipeline_getTestPrecision(self, *args)

    def getTestRecall(self, *args):
        return _GRT.GestureRecognitionPipeline_getTestRecall(self, *args)

    def getTestFMeasure(self, *args):
        return _GRT.GestureRecognitionPipeline_getTestFMeasure(self, *args)

    def getClassLikelihoods(self):
        return _GRT.GestureRecognitionPipeline_getClassLikelihoods(self)

    def getClassDistances(self):
        return _GRT.GestureRecognitionPipeline_getClassDistances(self)

    def getNullRejectionThresholds(self):
        return _GRT.GestureRecognitionPipeline_getNullRejectionThresholds(self)

    def getRegressionData(self):
        return _GRT.GestureRecognitionPipeline_getRegressionData(self)

    def getUnProcessedRegressionData(self):
        return _GRT.GestureRecognitionPipeline_getUnProcessedRegressionData(self)

    def getPreProcessedData(self, *args):
        return _GRT.GestureRecognitionPipeline_getPreProcessedData(self, *args)

    def getFeatureExtractionData(self, *args):
        return _GRT.GestureRecognitionPipeline_getFeatureExtractionData(self, *args)

    def getClassLabels(self):
        return _GRT.GestureRecognitionPipeline_getClassLabels(self)

    def getTestInstanceResults(self):
        return _GRT.GestureRecognitionPipeline_getTestInstanceResults(self)

    def getCrossValidationResults(self):
        return _GRT.GestureRecognitionPipeline_getCrossValidationResults(self)

    def getPreProcessingModule(self, moduleIndex):
        return _GRT.GestureRecognitionPipeline_getPreProcessingModule(self, moduleIndex)

    def getFeatureExtractionModule(self, moduleIndex):
        return _GRT.GestureRecognitionPipeline_getFeatureExtractionModule(self, moduleIndex)

    def getClassifier(self):
        return _GRT.GestureRecognitionPipeline_getClassifier(self)

    def getRegressifier(self):
        return _GRT.GestureRecognitionPipeline_getRegressifier(self)

    def getClusterer(self):
        return _GRT.GestureRecognitionPipeline_getClusterer(self)

    def getPostProcessingModule(self, moduleIndex):
        return _GRT.GestureRecognitionPipeline_getPostProcessingModule(self, moduleIndex)

    def getContextModule(self, contextLevel, moduleIndex):
        return _GRT.GestureRecognitionPipeline_getContextModule(self, contextLevel, moduleIndex)

    def getModelAsString(self):
        return _GRT.GestureRecognitionPipeline_getModelAsString(self)

    def getPipelineModeAsString(self):
        return _GRT.GestureRecognitionPipeline_getPipelineModeAsString(self)

    def getInfo(self):
        return _GRT.GestureRecognitionPipeline_getInfo(self)

    def getPipelineModeFromString(self, pipelineMode):
        return _GRT.GestureRecognitionPipeline_getPipelineModeFromString(self, pipelineMode)

    def addPreProcessingModule(self, preProcessingModule, insertIndex=99999):
        return _GRT.GestureRecognitionPipeline_addPreProcessingModule(self, preProcessingModule, insertIndex)

    def setPreProcessingModule(self, preProcessingModule):
        return _GRT.GestureRecognitionPipeline_setPreProcessingModule(self, preProcessingModule)

    def addFeatureExtractionModule(self, featureExtractionModule, insertIndex=99999):
        return _GRT.GestureRecognitionPipeline_addFeatureExtractionModule(self, featureExtractionModule, insertIndex)

    def setFeatureExtractionModule(self, featureExtractionModule):
        return _GRT.GestureRecognitionPipeline_setFeatureExtractionModule(self, featureExtractionModule)

    def setClassifier(self, classifier):
        return _GRT.GestureRecognitionPipeline_setClassifier(self, classifier)

    def setRegressifier(self, regressifier):
        return _GRT.GestureRecognitionPipeline_setRegressifier(self, regressifier)

    def setClusterer(self, clusterer):
        return _GRT.GestureRecognitionPipeline_setClusterer(self, clusterer)

    def addPostProcessingModule(self, postProcessingModule, insertIndex=99999):
        return _GRT.GestureRecognitionPipeline_addPostProcessingModule(self, postProcessingModule, insertIndex)

    def setPostProcessingModule(self, postProcessingModule):
        return _GRT.GestureRecognitionPipeline_setPostProcessingModule(self, postProcessingModule)

    def addContextModule(self, contextModule, contextLevel, insertIndex=99999):
        return _GRT.GestureRecognitionPipeline_addContextModule(self, contextModule, contextLevel, insertIndex)

    def updateContextModule(self, value, contextLevel=0, moduleIndex=0):
        return _GRT.GestureRecognitionPipeline_updateContextModule(self, value, contextLevel, moduleIndex)

    def removeAllPreProcessingModules(self):
        return _GRT.GestureRecognitionPipeline_removeAllPreProcessingModules(self)

    def removePreProcessingModule(self, moduleIndex):
        return _GRT.GestureRecognitionPipeline_removePreProcessingModule(self, moduleIndex)

    def removeAllFeatureExtractionModules(self):
        return _GRT.GestureRecognitionPipeline_removeAllFeatureExtractionModules(self)

    def removeFeatureExtractionModule(self, moduleIndex):
        return _GRT.GestureRecognitionPipeline_removeFeatureExtractionModule(self, moduleIndex)

    def removeClassifier(self):
        return _GRT.GestureRecognitionPipeline_removeClassifier(self)

    def removeRegressifier(self):
        return _GRT.GestureRecognitionPipeline_removeRegressifier(self)

    def removeClusterer(self):
        return _GRT.GestureRecognitionPipeline_removeClusterer(self)

    def removeAllPostProcessingModules(self):
        return _GRT.GestureRecognitionPipeline_removeAllPostProcessingModules(self)

    def removePostProcessingModule(self, moduleIndex):
        return _GRT.GestureRecognitionPipeline_removePostProcessingModule(self, moduleIndex)

    def removeAllContextModules(self):
        return _GRT.GestureRecognitionPipeline_removeAllContextModules(self)

    def removeContextModule(self, contextLevel, moduleIndex):
        return _GRT.GestureRecognitionPipeline_removeContextModule(self, contextLevel, moduleIndex)

    def clearAll(self):
        return _GRT.GestureRecognitionPipeline_clearAll(self)

    def clearTestResults(self):
        return _GRT.GestureRecognitionPipeline_clearTestResults(self)

    def setInfo(self, info):
        return _GRT.GestureRecognitionPipeline_setInfo(self, info)

    def train(self, *args):
        return _GRT.GestureRecognitionPipeline_train(self, *args)

    def train_(self, *args):
        return _GRT.GestureRecognitionPipeline_train_(self, *args)

    def predict(self, *args):
        return _GRT.GestureRecognitionPipeline_predict(self, *args)

# Register GestureRecognitionPipeline in _GRT:
_GRT.GestureRecognitionPipeline_swigregister(GestureRecognitionPipeline)
BIG_DISTANCE = _GRT.BIG_DISTANCE
class KNN(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    EUCLIDEAN_DISTANCE = _GRT.KNN_EUCLIDEAN_DISTANCE
    COSINE_DISTANCE = _GRT.KNN_COSINE_DISTANCE
    MANHATTAN_DISTANCE = _GRT.KNN_MANHATTAN_DISTANCE

    def __init__(self, *args):
        _GRT.KNN_swiginit(self, _GRT.new_KNN(*args))
    __swig_destroy__ = _GRT.delete_KNN

    def deepCopyFrom(self, classifier):
        return _GRT.KNN_deepCopyFrom(self, classifier)

    def clear(self):
        return _GRT.KNN_clear(self)

    def recomputeNullRejectionThresholds(self):
        return _GRT.KNN_recomputeNullRejectionThresholds(self)

    def getK(self):
        return _GRT.KNN_getK(self)

    def getDistanceMethod(self):
        return _GRT.KNN_getDistanceMethod(self)

    def setK(self, K):
        return _GRT.KNN_setK(self, K)

    def setMinKSearchValue(self, minKSearchValue):
        return _GRT.KNN_setMinKSearchValue(self, minKSearchValue)

    def setMaxKSearchValue(self, maxKSearchValue):
        return _GRT.KNN_setMaxKSearchValue(self, maxKSearchValue)

    def enableBestKValueSearch(self, searchForBestKValue):
        return _GRT.KNN_enableBestKValueSearch(self, searchForBestKValue)

    def setNullRejectionCoeff(self, nullRejectionCoeff):
        return _GRT.KNN_setNullRejectionCoeff(self, nullRejectionCoeff)

    def setDistanceMethod(self, distanceMethod):
        return _GRT.KNN_setDistanceMethod(self, distanceMethod)

    @staticmethod
    def getId():
        return _GRT.KNN_getId()

    def save(self, *args):
        return _GRT.KNN_save(self, *args)

    def load(self, *args):
        return _GRT.KNN_load(self, *args)

    def train_(self, *args):
        return _GRT.KNN_train_(self, *args)

    def predict_(self, *args):
        return _GRT.KNN_predict_(self, *args)

    def predict(self, *args):
        return _GRT.KNN_predict(self, *args)

# Register KNN in _GRT:
_GRT.KNN_swigregister(KNN)
WEAK_CLASSIFIER_POSITIVE_CLASS_LABEL = _GRT.WEAK_CLASSIFIER_POSITIVE_CLASS_LABEL
WEAK_CLASSIFIER_NEGATIVE_CLASS_LABEL = _GRT.WEAK_CLASSIFIER_NEGATIVE_CLASS_LABEL
class WeakClassifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GRT.delete_WeakClassifier

    def __init__(self, *args):
        _GRT.WeakClassifier_swiginit(self, _GRT.new_WeakClassifier(*args))

    def copyBaseVariables(self, weakClassifer):
        return _GRT.WeakClassifier_copyBaseVariables(self, weakClassifer)

    def deepCopyFrom(self, weakClassifer):
        return _GRT.WeakClassifier_deepCopyFrom(self, weakClassifer)

    def train(self, trainingData, weights):
        return _GRT.WeakClassifier_train(self, trainingData, weights)

    def predict(self, x):
        return _GRT.WeakClassifier_predict(self, x)

    def saveModelToFile(self, file):
        return _GRT.WeakClassifier_saveModelToFile(self, file)

    def loadModelFromFile(self, file):
        return _GRT.WeakClassifier_loadModelFromFile(self, file)

    def _print(self):
        return _GRT.WeakClassifier__print(self)

    def getPositiveClassLabel(self):
        return _GRT.WeakClassifier_getPositiveClassLabel(self)

    def getNegativeClassLabel(self):
        return _GRT.WeakClassifier_getNegativeClassLabel(self)

    def getWeakClassifierType(self):
        return _GRT.WeakClassifier_getWeakClassifierType(self)

    def getTrained(self):
        return _GRT.WeakClassifier_getTrained(self)

    def getNumInputDimensions(self):
        return _GRT.WeakClassifier_getNumInputDimensions(self)

    def getTrainingLoggingEnabled(self):
        return _GRT.WeakClassifier_getTrainingLoggingEnabled(self)

    def setTrainingLoggingEnabled(self, enabled):
        return _GRT.WeakClassifier_setTrainingLoggingEnabled(self, enabled)

    @staticmethod
    def createInstanceFromString(weakClassifierType):
        return _GRT.WeakClassifier_createInstanceFromString(weakClassifierType)

    def createNewInstance(self):
        return _GRT.WeakClassifier_createNewInstance(self)

# Register WeakClassifier in _GRT:
_GRT.WeakClassifier_swigregister(WeakClassifier)
class DecisionStump(WeakClassifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GRT.delete_DecisionStump

    def __init__(self, *args):
        _GRT.DecisionStump_swiginit(self, _GRT.new_DecisionStump(*args))

    def deepCopyFrom(self, weakClassifer):
        return _GRT.DecisionStump_deepCopyFrom(self, weakClassifer)

    def train(self, trainingData, weights):
        return _GRT.DecisionStump_train(self, trainingData, weights)

    def predict(self, x):
        return _GRT.DecisionStump_predict(self, x)

    def saveModelToFile(self, file):
        return _GRT.DecisionStump_saveModelToFile(self, file)

    def loadModelFromFile(self, file):
        return _GRT.DecisionStump_loadModelFromFile(self, file)

    def _print(self):
        return _GRT.DecisionStump__print(self)

    def getDecisionFeatureIndex(self):
        return _GRT.DecisionStump_getDecisionFeatureIndex(self)

    def getDirection(self):
        return _GRT.DecisionStump_getDirection(self)

    def getNumRandomSplits(self):
        return _GRT.DecisionStump_getNumRandomSplits(self)

    def getDecisionValue(self):
        return _GRT.DecisionStump_getDecisionValue(self)

# Register DecisionStump in _GRT:
_GRT.DecisionStump_swigregister(DecisionStump)
class RadialBasisFunction(WeakClassifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GRT.delete_RadialBasisFunction

    def __init__(self, *args):
        _GRT.RadialBasisFunction_swiginit(self, _GRT.new_RadialBasisFunction(*args))

    def deepCopyFrom(self, weakClassifer):
        return _GRT.RadialBasisFunction_deepCopyFrom(self, weakClassifer)

    def train(self, trainingData, weights):
        return _GRT.RadialBasisFunction_train(self, trainingData, weights)

    def predict(self, x):
        return _GRT.RadialBasisFunction_predict(self, x)

    def saveModelToFile(self, file):
        return _GRT.RadialBasisFunction_saveModelToFile(self, file)

    def loadModelFromFile(self, file):
        return _GRT.RadialBasisFunction_loadModelFromFile(self, file)

    def _print(self):
        return _GRT.RadialBasisFunction__print(self)

    def getNumSteps(self):
        return _GRT.RadialBasisFunction_getNumSteps(self)

    def getPositiveClassificationThreshold(self):
        return _GRT.RadialBasisFunction_getPositiveClassificationThreshold(self)

    def getAlpha(self):
        return _GRT.RadialBasisFunction_getAlpha(self)

    def getMinAlphaSearchRange(self):
        return _GRT.RadialBasisFunction_getMinAlphaSearchRange(self)

    def getMaxAlphaSearchRange(self):
        return _GRT.RadialBasisFunction_getMaxAlphaSearchRange(self)

    def getRBFCentre(self):
        return _GRT.RadialBasisFunction_getRBFCentre(self)

# Register RadialBasisFunction in _GRT:
_GRT.RadialBasisFunction_swigregister(RadialBasisFunction)
class AdaBoost(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MAX_POSITIVE_VALUE = _GRT.AdaBoost_MAX_POSITIVE_VALUE
    MAX_VALUE = _GRT.AdaBoost_MAX_VALUE

    def __init__(self, *args):
        _GRT.AdaBoost_swiginit(self, _GRT.new_AdaBoost(*args))
    __swig_destroy__ = _GRT.delete_AdaBoost

    def deepCopyFrom(self, classifier):
        return _GRT.AdaBoost_deepCopyFrom(self, classifier)

    def clear(self):
        return _GRT.AdaBoost_clear(self)

    def recomputeNullRejectionThresholds(self):
        return _GRT.AdaBoost_recomputeNullRejectionThresholds(self)

    def setNullRejectionCoeff(self, nullRejectionCoeff):
        return _GRT.AdaBoost_setNullRejectionCoeff(self, nullRejectionCoeff)

    def setWeakClassifier(self, weakClassifer):
        return _GRT.AdaBoost_setWeakClassifier(self, weakClassifer)

    def addWeakClassifier(self, weakClassifer):
        return _GRT.AdaBoost_addWeakClassifier(self, weakClassifer)

    def clearWeakClassifiers(self):
        return _GRT.AdaBoost_clearWeakClassifiers(self)

    def setNumBoostingIterations(self, numBoostingIterations):
        return _GRT.AdaBoost_setNumBoostingIterations(self, numBoostingIterations)

    def setPredictionMethod(self, predictionMethod):
        return _GRT.AdaBoost_setPredictionMethod(self, predictionMethod)

    def printModel(self):
        return _GRT.AdaBoost_printModel(self)

    def getModels(self):
        return _GRT.AdaBoost_getModels(self)

    @staticmethod
    def getId():
        return _GRT.AdaBoost_getId()

    def save(self, *args):
        return _GRT.AdaBoost_save(self, *args)

    def load(self, *args):
        return _GRT.AdaBoost_load(self, *args)

    def train(self, *args):
        return _GRT.AdaBoost_train(self, *args)

    def train_(self, *args):
        return _GRT.AdaBoost_train_(self, *args)

    def predict(self, *args):
        return _GRT.AdaBoost_predict(self, *args)

    def predict_(self, *args):
        return _GRT.AdaBoost_predict_(self, *args)

# Register AdaBoost in _GRT:
_GRT.AdaBoost_swigregister(AdaBoost)
class ANBC_Model(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.ANBC_Model_swiginit(self, _GRT.new_ANBC_Model())
    __swig_destroy__ = _GRT.delete_ANBC_Model

    def train(self, classLabel, trainingData, weightsVector):
        return _GRT.ANBC_Model_train(self, classLabel, trainingData, weightsVector)

    def predict(self, x):
        return _GRT.ANBC_Model_predict(self, x)

    def predictUnnormed(self, x):
        return _GRT.ANBC_Model_predictUnnormed(self, x)

    def gauss(self, x, mu, sigma):
        return _GRT.ANBC_Model_gauss(self, x, mu, sigma)

    def unnormedGauss(self, x, mu, sigma):
        return _GRT.ANBC_Model_unnormedGauss(self, x, mu, sigma)

    def recomputeThresholdValue(self, gamma):
        return _GRT.ANBC_Model_recomputeThresholdValue(self, gamma)
    N = property(_GRT.ANBC_Model_N_get, _GRT.ANBC_Model_N_set)
    classLabel = property(_GRT.ANBC_Model_classLabel_get, _GRT.ANBC_Model_classLabel_set)
    threshold = property(_GRT.ANBC_Model_threshold_get, _GRT.ANBC_Model_threshold_set)
    gamma = property(_GRT.ANBC_Model_gamma_get, _GRT.ANBC_Model_gamma_set)
    trainingMu = property(_GRT.ANBC_Model_trainingMu_get, _GRT.ANBC_Model_trainingMu_set)
    trainingSigma = property(_GRT.ANBC_Model_trainingSigma_get, _GRT.ANBC_Model_trainingSigma_set)
    mu = property(_GRT.ANBC_Model_mu_get, _GRT.ANBC_Model_mu_set)
    sigma = property(_GRT.ANBC_Model_sigma_get, _GRT.ANBC_Model_sigma_set)
    weights = property(_GRT.ANBC_Model_weights_get, _GRT.ANBC_Model_weights_set)

# Register ANBC_Model in _GRT:
_GRT.ANBC_Model_swigregister(ANBC_Model)
MIN_SCALE_VALUE = _GRT.MIN_SCALE_VALUE
MAX_SCALE_VALUE = _GRT.MAX_SCALE_VALUE
class ANBC(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ANBC_swiginit(self, _GRT.new_ANBC(*args))
    __swig_destroy__ = _GRT.delete_ANBC

    def deepCopyFrom(self, classifier):
        return _GRT.ANBC_deepCopyFrom(self, classifier)

    def reset(self):
        return _GRT.ANBC_reset(self)

    def clear(self):
        return _GRT.ANBC_clear(self)

    def recomputeNullRejectionThresholds(self):
        return _GRT.ANBC_recomputeNullRejectionThresholds(self)

    def getNullRejectionThresholds(self):
        return _GRT.ANBC_getNullRejectionThresholds(self)

    def getModels(self):
        return _GRT.ANBC_getModels(self)

    def setNullRejectionCoeff(self, nullRejectionCoeff):
        return _GRT.ANBC_setNullRejectionCoeff(self, nullRejectionCoeff)

    def setWeights(self, weightsData):
        return _GRT.ANBC_setWeights(self, weightsData)

    def clearWeights(self):
        return _GRT.ANBC_clearWeights(self)

    @staticmethod
    def getId():
        return _GRT.ANBC_getId()

    def save(self, *args):
        return _GRT.ANBC_save(self, *args)

    def load(self, *args):
        return _GRT.ANBC_load(self, *args)

    def train_(self, *args):
        return _GRT.ANBC_train_(self, *args)

    def predict_(self, *args):
        return _GRT.ANBC_predict_(self, *args)

# Register ANBC in _GRT:
_GRT.ANBC_swigregister(ANBC)
class BAG(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.BAG_swiginit(self, _GRT.new_BAG(*args))
    __swig_destroy__ = _GRT.delete_BAG

    def deepCopyFrom(self, classifier):
        return _GRT.BAG_deepCopyFrom(self, classifier)

    def reset(self):
        return _GRT.BAG_reset(self)

    def clear(self):
        return _GRT.BAG_clear(self)

    def getEnsembleSize(self):
        return _GRT.BAG_getEnsembleSize(self)

    def getEnsembleWeights(self):
        return _GRT.BAG_getEnsembleWeights(self)

    def getEnsemble(self):
        return _GRT.BAG_getEnsemble(self)

    def addClassifierToEnsemble(self, classifier, weight=1):
        return _GRT.BAG_addClassifierToEnsemble(self, classifier, weight)

    def clearEnsemble(self):
        return _GRT.BAG_clearEnsemble(self)

    def setWeights(self, weights):
        return _GRT.BAG_setWeights(self, weights)

    @staticmethod
    def getId():
        return _GRT.BAG_getId()

    def save(self, *args):
        return _GRT.BAG_save(self, *args)

    def load(self, *args):
        return _GRT.BAG_load(self, *args)

    def train_(self, *args):
        return _GRT.BAG_train_(self, *args)

    def predict_(self, *args):
        return _GRT.BAG_predict_(self, *args)

# Register BAG in _GRT:
_GRT.BAG_swigregister(BAG)
class Node(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.Node_swiginit(self, _GRT.new_Node(*args))
    __swig_destroy__ = _GRT.delete_Node

    def computeFeatureWeights(self, weights):
        return _GRT.Node_computeFeatureWeights(self, weights)

    def computeLeafNodeWeights(self, weights):
        return _GRT.Node_computeLeafNodeWeights(self, weights)

    def clear(self):
        return _GRT.Node_clear(self)

    def _print(self):
        return _GRT.Node__print(self)

    def getModel(self, stream):
        return _GRT.Node_getModel(self, stream)

    def deepCopy(self):
        return _GRT.Node_deepCopy(self)

    def getNodeType(self):
        return _GRT.Node_getNodeType(self)

    def getDepth(self):
        return _GRT.Node_getDepth(self)

    def getNodeID(self):
        return _GRT.Node_getNodeID(self)

    def getPredictedNodeID(self):
        return _GRT.Node_getPredictedNodeID(self)

    def getMaxDepth(self):
        return _GRT.Node_getMaxDepth(self)

    def getIsLeafNode(self):
        return _GRT.Node_getIsLeafNode(self)

    def getHasParent(self):
        return _GRT.Node_getHasParent(self)

    def getHasLeftChild(self):
        return _GRT.Node_getHasLeftChild(self)

    def getHasRightChild(self):
        return _GRT.Node_getHasRightChild(self)

    def getParent(self):
        return _GRT.Node_getParent(self)

    def getLeftChild(self):
        return _GRT.Node_getLeftChild(self)

    def getRightChild(self):
        return _GRT.Node_getRightChild(self)

    def initNode(self, parent, depth, nodeID, isLeafNode=False):
        return _GRT.Node_initNode(self, parent, depth, nodeID, isLeafNode)

    def setParent(self, parent):
        return _GRT.Node_setParent(self, parent)

    def setLeftChild(self, leftChild):
        return _GRT.Node_setLeftChild(self, leftChild)

    def setRightChild(self, rightChild):
        return _GRT.Node_setRightChild(self, rightChild)

    def setDepth(self, depth):
        return _GRT.Node_setDepth(self, depth)

    def setNodeID(self, nodeID):
        return _GRT.Node_setNodeID(self, nodeID)

    def setIsLeafNode(self, isLeafNode):
        return _GRT.Node_setIsLeafNode(self, isLeafNode)

    @staticmethod
    def createInstanceFromString(nodeType):
        return _GRT.Node_createInstanceFromString(nodeType)

    def createNewInstance(self):
        return _GRT.Node_createNewInstance(self)

    def save(self, *args):
        return _GRT.Node_save(self, *args)

    def load(self, *args):
        return _GRT.Node_load(self, *args)

    def predict(self, *args):
        return _GRT.Node_predict(self, *args)

    def predict_(self, *args):
        return _GRT.Node_predict_(self, *args)

# Register Node in _GRT:
_GRT.Node_swigregister(Node)
class Tree(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BEST_ITERATIVE_SPILT = _GRT.Tree_BEST_ITERATIVE_SPILT
    BEST_RANDOM_SPLIT = _GRT.Tree_BEST_RANDOM_SPLIT
    NUM_TRAINING_MODES = _GRT.Tree_NUM_TRAINING_MODES

    def __init__(self, *args):
        _GRT.Tree_swiginit(self, _GRT.new_Tree(*args))
    __swig_destroy__ = _GRT.delete_Tree

    def clear(self):
        return _GRT.Tree_clear(self)

    def _print(self):
        return _GRT.Tree__print(self)

    def getModel(self, stream):
        return _GRT.Tree_getModel(self, stream)

    def deepCopyTree(self):
        return _GRT.Tree_deepCopyTree(self)

    def getTree(self):
        return _GRT.Tree_getTree(self)

    def getTrainingMode(self):
        return _GRT.Tree_getTrainingMode(self)

    def getNumSplittingSteps(self):
        return _GRT.Tree_getNumSplittingSteps(self)

    def getMinNumSamplesPerNode(self):
        return _GRT.Tree_getMinNumSamplesPerNode(self)

    def getMaxDepth(self):
        return _GRT.Tree_getMaxDepth(self)

    def getPredictedNodeID(self):
        return _GRT.Tree_getPredictedNodeID(self)

    def getRemoveFeaturesAtEachSpilt(self):
        return _GRT.Tree_getRemoveFeaturesAtEachSpilt(self)

    def setTrainingMode(self, trainingMode):
        return _GRT.Tree_setTrainingMode(self, trainingMode)

    def setNumSplittingSteps(self, numSplittingSteps):
        return _GRT.Tree_setNumSplittingSteps(self, numSplittingSteps)

    def setMinNumSamplesPerNode(self, minNumSamplesPerNode):
        return _GRT.Tree_setMinNumSamplesPerNode(self, minNumSamplesPerNode)

    def setMaxDepth(self, maxDepth):
        return _GRT.Tree_setMaxDepth(self, maxDepth)

    def setRemoveFeaturesAtEachSpilt(self, removeFeaturesAtEachSpilt):
        return _GRT.Tree_setRemoveFeaturesAtEachSpilt(self, removeFeaturesAtEachSpilt)

# Register Tree in _GRT:
_GRT.Tree_swigregister(Tree)
class DecisionTreeNode(Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.DecisionTreeNode_swiginit(self, _GRT.new_DecisionTreeNode(*args))
    __swig_destroy__ = _GRT.delete_DecisionTreeNode

    def computeBestSplit(self, trainingMode, numSplittingSteps, trainingData, features, classLabels, featureIndex, minError):
        return _GRT.DecisionTreeNode_computeBestSplit(self, trainingMode, numSplittingSteps, trainingData, features, classLabels, featureIndex, minError)

    def clear(self):
        return _GRT.DecisionTreeNode_clear(self)

    def getModel(self, stream):
        return _GRT.DecisionTreeNode_getModel(self, stream)

    def deepCopy(self):
        return _GRT.DecisionTreeNode_deepCopy(self)

    def getNodeSize(self):
        return _GRT.DecisionTreeNode_getNodeSize(self)

    def getNumClasses(self):
        return _GRT.DecisionTreeNode_getNumClasses(self)

    def getClassProbabilities(self):
        return _GRT.DecisionTreeNode_getClassProbabilities(self)

    def setLeafNode(self, nodeSize, classProbabilities):
        return _GRT.DecisionTreeNode_setLeafNode(self, nodeSize, classProbabilities)

    def setNodeSize(self, nodeSize):
        return _GRT.DecisionTreeNode_setNodeSize(self, nodeSize)

    def setClassProbabilities(self, classProbabilities):
        return _GRT.DecisionTreeNode_setClassProbabilities(self, classProbabilities)

    @staticmethod
    def getClassLabelIndexValue(classLabel, classLabels):
        return _GRT.DecisionTreeNode_getClassLabelIndexValue(classLabel, classLabels)

    def predict(self, *args):
        return _GRT.DecisionTreeNode_predict(self, *args)

    def predict_(self, *args):
        return _GRT.DecisionTreeNode_predict_(self, *args)

# Register DecisionTreeNode in _GRT:
_GRT.DecisionTreeNode_swigregister(DecisionTreeNode)
class DecisionTreeThresholdNode(DecisionTreeNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.DecisionTreeThresholdNode_swiginit(self, _GRT.new_DecisionTreeThresholdNode())
    __swig_destroy__ = _GRT.delete_DecisionTreeThresholdNode

    def clear(self):
        return _GRT.DecisionTreeThresholdNode_clear(self)

    def _print(self):
        return _GRT.DecisionTreeThresholdNode__print(self)

    def getModel(self, stream):
        return _GRT.DecisionTreeThresholdNode_getModel(self, stream)

    def deepCopy(self):
        return _GRT.DecisionTreeThresholdNode_deepCopy(self)

    def getFeatureIndex(self):
        return _GRT.DecisionTreeThresholdNode_getFeatureIndex(self)

    def getThreshold(self):
        return _GRT.DecisionTreeThresholdNode_getThreshold(self)

    def set(self, nodeSize, featureIndex, threshold, classProbabilities):
        return _GRT.DecisionTreeThresholdNode_set(self, nodeSize, featureIndex, threshold, classProbabilities)

    def predict_(self, *args):
        return _GRT.DecisionTreeThresholdNode_predict_(self, *args)

# Register DecisionTreeThresholdNode in _GRT:
_GRT.DecisionTreeThresholdNode_swigregister(DecisionTreeThresholdNode)
class DecisionTreeTripleFeatureNode(DecisionTreeNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.DecisionTreeTripleFeatureNode_swiginit(self, _GRT.new_DecisionTreeTripleFeatureNode())
    __swig_destroy__ = _GRT.delete_DecisionTreeTripleFeatureNode

    def clear(self):
        return _GRT.DecisionTreeTripleFeatureNode_clear(self)

    def _print(self):
        return _GRT.DecisionTreeTripleFeatureNode__print(self)

    def getModel(self, stream):
        return _GRT.DecisionTreeTripleFeatureNode_getModel(self, stream)

    def deepCopy(self):
        return _GRT.DecisionTreeTripleFeatureNode_deepCopy(self)

    def getFeatureIndexA(self):
        return _GRT.DecisionTreeTripleFeatureNode_getFeatureIndexA(self)

    def getFeatureIndexB(self):
        return _GRT.DecisionTreeTripleFeatureNode_getFeatureIndexB(self)

    def getFeatureIndexC(self):
        return _GRT.DecisionTreeTripleFeatureNode_getFeatureIndexC(self)

    def set(self, nodeSize, featureIndexA, featureIndexB, featureIndexC, classProbabilities):
        return _GRT.DecisionTreeTripleFeatureNode_set(self, nodeSize, featureIndexA, featureIndexB, featureIndexC, classProbabilities)

    def predict_(self, *args):
        return _GRT.DecisionTreeTripleFeatureNode_predict_(self, *args)

# Register DecisionTreeTripleFeatureNode in _GRT:
_GRT.DecisionTreeTripleFeatureNode_swigregister(DecisionTreeTripleFeatureNode)
class DecisionTreeClusterNode(DecisionTreeNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.DecisionTreeClusterNode_swiginit(self, _GRT.new_DecisionTreeClusterNode())
    __swig_destroy__ = _GRT.delete_DecisionTreeClusterNode

    def clear(self):
        return _GRT.DecisionTreeClusterNode_clear(self)

    def _print(self):
        return _GRT.DecisionTreeClusterNode__print(self)

    def computeFeatureWeights(self, weights):
        return _GRT.DecisionTreeClusterNode_computeFeatureWeights(self, weights)

    def computeLeafNodeWeights(self, weights):
        return _GRT.DecisionTreeClusterNode_computeLeafNodeWeights(self, weights)

    def getModel(self, stream):
        return _GRT.DecisionTreeClusterNode_getModel(self, stream)

    def deepCopy(self):
        return _GRT.DecisionTreeClusterNode_deepCopy(self)

    def getFeatureIndex(self):
        return _GRT.DecisionTreeClusterNode_getFeatureIndex(self)

    def getThreshold(self):
        return _GRT.DecisionTreeClusterNode_getThreshold(self)

    def set(self, nodeSize, featureIndex, threshold, classProbabilities):
        return _GRT.DecisionTreeClusterNode_set(self, nodeSize, featureIndex, threshold, classProbabilities)

    def predict_(self, *args):
        return _GRT.DecisionTreeClusterNode_predict_(self, *args)

# Register DecisionTreeClusterNode in _GRT:
_GRT.DecisionTreeClusterNode_swigregister(DecisionTreeClusterNode)
class DecisionTree(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.DecisionTree_swiginit(self, _GRT.new_DecisionTree(*args))
    __swig_destroy__ = _GRT.delete_DecisionTree

    def deepCopyFrom(self, classifier):
        return _GRT.DecisionTree_deepCopyFrom(self, classifier)

    def clear(self):
        return _GRT.DecisionTree_clear(self)

    def recomputeNullRejectionThresholds(self):
        return _GRT.DecisionTree_recomputeNullRejectionThresholds(self)

    def getModel(self, stream):
        return _GRT.DecisionTree_getModel(self, stream)

    def deepCopyTree(self):
        return _GRT.DecisionTree_deepCopyTree(self)

    def deepCopyDecisionTreeNode(self):
        return _GRT.DecisionTree_deepCopyDecisionTreeNode(self)

    def getTree(self):
        return _GRT.DecisionTree_getTree(self)

    def getTrainingMode(self):
        return _GRT.DecisionTree_getTrainingMode(self)

    def getNumSplittingSteps(self):
        return _GRT.DecisionTree_getNumSplittingSteps(self)

    def getMinNumSamplesPerNode(self):
        return _GRT.DecisionTree_getMinNumSamplesPerNode(self)

    def getMaxDepth(self):
        return _GRT.DecisionTree_getMaxDepth(self)

    def getPredictedNodeID(self):
        return _GRT.DecisionTree_getPredictedNodeID(self)

    def getRemoveFeaturesAtEachSplit(self):
        return _GRT.DecisionTree_getRemoveFeaturesAtEachSplit(self)

    def setTrainingMode(self, trainingMode):
        return _GRT.DecisionTree_setTrainingMode(self, trainingMode)

    def setNumSplittingSteps(self, numSplittingSteps):
        return _GRT.DecisionTree_setNumSplittingSteps(self, numSplittingSteps)

    def setMinNumSamplesPerNode(self, minNumSamplesPerNode):
        return _GRT.DecisionTree_setMinNumSamplesPerNode(self, minNumSamplesPerNode)

    def setMaxDepth(self, maxDepth):
        return _GRT.DecisionTree_setMaxDepth(self, maxDepth)

    def setRemoveFeaturesAtEachSplit(self, removeFeaturesAtEachSplit):
        return _GRT.DecisionTree_setRemoveFeaturesAtEachSplit(self, removeFeaturesAtEachSplit)

    def setRemoveFeaturesAtEachSpilt(self, removeFeaturesAtEachSpilt):
        return _GRT.DecisionTree_setRemoveFeaturesAtEachSpilt(self, removeFeaturesAtEachSpilt)

    def setDecisionTreeNode(self, node):
        return _GRT.DecisionTree_setDecisionTreeNode(self, node)

    @staticmethod
    def getId():
        return _GRT.DecisionTree_getId()

    def save(self, *args):
        return _GRT.DecisionTree_save(self, *args)

    def load(self, *args):
        return _GRT.DecisionTree_load(self, *args)

    def train_(self, *args):
        return _GRT.DecisionTree_train_(self, *args)

    def predict_(self, *args):
        return _GRT.DecisionTree_predict_(self, *args)

# Register DecisionTree in _GRT:
_GRT.DecisionTree_swigregister(DecisionTree)
class IndexDist(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x=0, y=0, dist=0):
        _GRT.IndexDist_swiginit(self, _GRT.new_IndexDist(x, y, dist))
    __swig_destroy__ = _GRT.delete_IndexDist
    x = property(_GRT.IndexDist_x_get, _GRT.IndexDist_x_set)
    y = property(_GRT.IndexDist_y_get, _GRT.IndexDist_y_set)
    dist = property(_GRT.IndexDist_dist_get, _GRT.IndexDist_dist_set)

# Register IndexDist in _GRT:
_GRT.IndexDist_swigregister(IndexDist)
class DTWTemplate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.DTWTemplate_swiginit(self, _GRT.new_DTWTemplate())
    __swig_destroy__ = _GRT.delete_DTWTemplate
    classLabel = property(_GRT.DTWTemplate_classLabel_get, _GRT.DTWTemplate_classLabel_set)
    timeSeries = property(_GRT.DTWTemplate_timeSeries_get, _GRT.DTWTemplate_timeSeries_set)
    trainingMu = property(_GRT.DTWTemplate_trainingMu_get, _GRT.DTWTemplate_trainingMu_set)
    trainingSigma = property(_GRT.DTWTemplate_trainingSigma_get, _GRT.DTWTemplate_trainingSigma_set)
    averageTemplateLength = property(_GRT.DTWTemplate_averageTemplateLength_get, _GRT.DTWTemplate_averageTemplateLength_set)

# Register DTWTemplate in _GRT:
_GRT.DTWTemplate_swigregister(DTWTemplate)
class DTW(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ABSOLUTE_DIST = _GRT.DTW_ABSOLUTE_DIST
    EUCLIDEAN_DIST = _GRT.DTW_EUCLIDEAN_DIST
    NORM_ABSOLUTE_DIST = _GRT.DTW_NORM_ABSOLUTE_DIST
    TEMPLATE_THRESHOLDS = _GRT.DTW_TEMPLATE_THRESHOLDS
    CLASS_LIKELIHOODS = _GRT.DTW_CLASS_LIKELIHOODS
    THRESHOLDS_AND_LIKELIHOODS = _GRT.DTW_THRESHOLDS_AND_LIKELIHOODS

    def __init__(self, *args):
        _GRT.DTW_swiginit(self, _GRT.new_DTW(*args))
    __swig_destroy__ = _GRT.delete_DTW

    def deepCopyFrom(self, classifier):
        return _GRT.DTW_deepCopyFrom(self, classifier)

    def predict_(self, *args):
        return _GRT.DTW_predict_(self, *args)

    def reset(self):
        return _GRT.DTW_reset(self)

    def clear(self):
        return _GRT.DTW_clear(self)

    def recomputeNullRejectionThresholds(self):
        return _GRT.DTW_recomputeNullRejectionThresholds(self)

    def getNumTemplates(self):
        return _GRT.DTW_getNumTemplates(self)

    def setRejectionMode(self, rejectionMode):
        return _GRT.DTW_setRejectionMode(self, rejectionMode)

    def setNullRejectionThreshold(self, nullRejectionLikelihoodThreshold):
        return _GRT.DTW_setNullRejectionThreshold(self, nullRejectionLikelihoodThreshold)

    def setOffsetTimeseriesUsingFirstSample(self, offsetUsingFirstSample):
        return _GRT.DTW_setOffsetTimeseriesUsingFirstSample(self, offsetUsingFirstSample)

    def setContrainWarpingPath(self, constrain):
        return _GRT.DTW_setContrainWarpingPath(self, constrain)

    def setWarpingRadius(self, radius):
        return _GRT.DTW_setWarpingRadius(self, radius)

    def getRejectionMode(self):
        return _GRT.DTW_getRejectionMode(self)

    def enableZNormalization(self, useZNormalization, constrainZNorm=True):
        return _GRT.DTW_enableZNormalization(self, useZNormalization, constrainZNorm)

    def enableTrimTrainingData(self, trimTrainingData, trimThreshold, maximumTrimPercentage):
        return _GRT.DTW_enableTrimTrainingData(self, trimTrainingData, trimThreshold, maximumTrimPercentage)

    def getModels(self):
        return _GRT.DTW_getModels(self)

    def setModels(self, newTemplates):
        return _GRT.DTW_setModels(self, newTemplates)

    def getInputDataBuffer(self):
        return _GRT.DTW_getInputDataBuffer(self)

    def getDistanceMatrices(self):
        return _GRT.DTW_getDistanceMatrices(self)

    def getWarpingPaths(self):
        return _GRT.DTW_getWarpingPaths(self)

    @staticmethod
    def getId():
        return _GRT.DTW_getId()

    def save(self, *args):
        return _GRT.DTW_save(self, *args)

    def load(self, *args):
        return _GRT.DTW_load(self, *args)

    def train_(self, *args):
        return _GRT.DTW_train_(self, *args)

# Register DTW in _GRT:
_GRT.DTW_swigregister(DTW)
class Particle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.Particle_swiginit(self, _GRT.new_Particle(*args))
    __swig_destroy__ = _GRT.delete_Particle
    w = property(_GRT.Particle_w_get, _GRT.Particle_w_set)
    x = property(_GRT.Particle_x_get, _GRT.Particle_x_set)

# Register Particle in _GRT:
_GRT.Particle_swigregister(Particle)
class FSMParticle(Particle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.FSMParticle_swiginit(self, _GRT.new_FSMParticle(*args))
    __swig_destroy__ = _GRT.delete_FSMParticle
    currentState = property(_GRT.FSMParticle_currentState_get, _GRT.FSMParticle_currentState_set)

# Register FSMParticle in _GRT:
_GRT.FSMParticle_swigregister(FSMParticle)
class FiniteStateMachine(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.FiniteStateMachine_swiginit(self, _GRT.new_FiniteStateMachine(*args))
    __swig_destroy__ = _GRT.delete_FiniteStateMachine

    def deepCopyFrom(self, classifier):
        return _GRT.FiniteStateMachine_deepCopyFrom(self, classifier)

    def reset(self):
        return _GRT.FiniteStateMachine_reset(self)

    def clear(self):
        return _GRT.FiniteStateMachine_clear(self)

    def _print(self):
        return _GRT.FiniteStateMachine__print(self)

    def setNumParticles(self, numParticles):
        return _GRT.FiniteStateMachine_setNumParticles(self, numParticles)

    def setNumClustersPerState(self, numClustersPerState):
        return _GRT.FiniteStateMachine_setNumClustersPerState(self, numClustersPerState)

    def setStateTransitionSmoothingCoeff(self, stateTransitionSmoothingCoeff):
        return _GRT.FiniteStateMachine_setStateTransitionSmoothingCoeff(self, stateTransitionSmoothingCoeff)

    def setMeasurementNoise(self, measurementNoise):
        return _GRT.FiniteStateMachine_setMeasurementNoise(self, measurementNoise)

    @staticmethod
    def getId():
        return _GRT.FiniteStateMachine_getId()

    def save(self, *args):
        return _GRT.FiniteStateMachine_save(self, *args)

    def load(self, *args):
        return _GRT.FiniteStateMachine_load(self, *args)

    def train_(self, *args):
        return _GRT.FiniteStateMachine_train_(self, *args)

    def predict_(self, *args):
        return _GRT.FiniteStateMachine_predict_(self, *args)

# Register FiniteStateMachine in _GRT:
_GRT.FiniteStateMachine_swigregister(FiniteStateMachine)
class GuassModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.GuassModel_swiginit(self, _GRT.new_GuassModel())
    __swig_destroy__ = _GRT.delete_GuassModel

    def printModelValues(self):
        return _GRT.GuassModel_printModelValues(self)
    det = property(_GRT.GuassModel_det_get, _GRT.GuassModel_det_set)
    mu = property(_GRT.GuassModel_mu_get, _GRT.GuassModel_mu_set)
    sigma = property(_GRT.GuassModel_sigma_get, _GRT.GuassModel_sigma_set)
    invSigma = property(_GRT.GuassModel_invSigma_get, _GRT.GuassModel_invSigma_set)

# Register GuassModel in _GRT:
_GRT.GuassModel_swigregister(GuassModel)
class MixtureModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.MixtureModel_swiginit(self, _GRT.new_MixtureModel())
    __swig_destroy__ = _GRT.delete_MixtureModel

    def computeMixtureLikelihood(self, x):
        return _GRT.MixtureModel_computeMixtureLikelihood(self, x)

    def resize(self, K):
        return _GRT.MixtureModel_resize(self, K)

    def recomputeNullRejectionThreshold(self, gamma):
        return _GRT.MixtureModel_recomputeNullRejectionThreshold(self, gamma)

    def recomputeNormalizationFactor(self):
        return _GRT.MixtureModel_recomputeNormalizationFactor(self)

    def printModelValues(self):
        return _GRT.MixtureModel_printModelValues(self)

    def getK(self):
        return _GRT.MixtureModel_getK(self)

    def getClassLabel(self):
        return _GRT.MixtureModel_getClassLabel(self)

    def getTrainingMu(self):
        return _GRT.MixtureModel_getTrainingMu(self)

    def getTrainingSigma(self):
        return _GRT.MixtureModel_getTrainingSigma(self)

    def getNullRejectionThreshold(self):
        return _GRT.MixtureModel_getNullRejectionThreshold(self)

    def getNormalizationFactor(self):
        return _GRT.MixtureModel_getNormalizationFactor(self)

    def setClassLabel(self, classLabel):
        return _GRT.MixtureModel_setClassLabel(self, classLabel)

    def setNormalizationFactor(self, normFactor):
        return _GRT.MixtureModel_setNormalizationFactor(self, normFactor)

    def setTrainingMuAndSigma(self, trainingMu, trainingSigma):
        return _GRT.MixtureModel_setTrainingMuAndSigma(self, trainingMu, trainingSigma)

    def setNullRejectionThreshold(self, nullRejectionThreshold):
        return _GRT.MixtureModel_setNullRejectionThreshold(self, nullRejectionThreshold)

# Register MixtureModel in _GRT:
_GRT.MixtureModel_swigregister(MixtureModel)
GMM_MIN_SCALE_VALUE = _GRT.GMM_MIN_SCALE_VALUE
GMM_MAX_SCALE_VALUE = _GRT.GMM_MAX_SCALE_VALUE
class GMM(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.GMM_swiginit(self, _GRT.new_GMM(*args))
    __swig_destroy__ = _GRT.delete_GMM

    def deepCopyFrom(self, classifier):
        return _GRT.GMM_deepCopyFrom(self, classifier)

    def clear(self):
        return _GRT.GMM_clear(self)

    def recomputeNullRejectionThresholds(self):
        return _GRT.GMM_recomputeNullRejectionThresholds(self)

    def getNumMixtureModels(self):
        return _GRT.GMM_getNumMixtureModels(self)

    def getModels(self):
        return _GRT.GMM_getModels(self)

    def setNumMixtureModels(self, K):
        return _GRT.GMM_setNumMixtureModels(self, K)

    def setMaxIter(self, maxIter):
        return _GRT.GMM_setMaxIter(self, maxIter)

    @staticmethod
    def getId():
        return _GRT.GMM_getId()

    def save(self, *args):
        return _GRT.GMM_save(self, *args)

    def load(self, *args):
        return _GRT.GMM_load(self, *args)

    def train_(self, *args):
        return _GRT.GMM_train_(self, *args)

    def predict_(self, *args):
        return _GRT.GMM_predict_(self, *args)

# Register GMM in _GRT:
_GRT.GMM_swigregister(GMM)
HMM_ERGODIC = _GRT.HMM_ERGODIC
HMM_LEFTRIGHT = _GRT.HMM_LEFTRIGHT
HMM_DISCRETE = _GRT.HMM_DISCRETE
HMM_CONTINUOUS = _GRT.HMM_CONTINUOUS
class ContinuousHiddenMarkovModel(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ContinuousHiddenMarkovModel_swiginit(self, _GRT.new_ContinuousHiddenMarkovModel(*args))
    __swig_destroy__ = _GRT.delete_ContinuousHiddenMarkovModel

    def predict_(self, *args):
        return _GRT.ContinuousHiddenMarkovModel_predict_(self, *args)

    def reset(self):
        return _GRT.ContinuousHiddenMarkovModel_reset(self)

    def clear(self):
        return _GRT.ContinuousHiddenMarkovModel_clear(self)

    def _print(self):
        return _GRT.ContinuousHiddenMarkovModel__print(self)

    def getNumStates(self):
        return _GRT.ContinuousHiddenMarkovModel_getNumStates(self)

    def getClassLabel(self):
        return _GRT.ContinuousHiddenMarkovModel_getClassLabel(self)

    def getLoglikelihood(self):
        return _GRT.ContinuousHiddenMarkovModel_getLoglikelihood(self)

    def getPhase(self):
        return _GRT.ContinuousHiddenMarkovModel_getPhase(self)

    def getEstimatedStates(self):
        return _GRT.ContinuousHiddenMarkovModel_getEstimatedStates(self)

    def getAlpha(self):
        return _GRT.ContinuousHiddenMarkovModel_getAlpha(self)

    def setDownsampleFactor(self, downsampleFactor):
        return _GRT.ContinuousHiddenMarkovModel_setDownsampleFactor(self, downsampleFactor)

    def setModelType(self, modelType):
        return _GRT.ContinuousHiddenMarkovModel_setModelType(self, modelType)

    def setDelta(self, delta):
        return _GRT.ContinuousHiddenMarkovModel_setDelta(self, delta)

    def setSigma(self, sigma):
        return _GRT.ContinuousHiddenMarkovModel_setSigma(self, sigma)

    def setAutoEstimateSigma(self, autoEstimateSigma):
        return _GRT.ContinuousHiddenMarkovModel_setAutoEstimateSigma(self, autoEstimateSigma)

    def save(self, *args):
        return _GRT.ContinuousHiddenMarkovModel_save(self, *args)

    def load(self, *args):
        return _GRT.ContinuousHiddenMarkovModel_load(self, *args)

    def train_(self, *args):
        return _GRT.ContinuousHiddenMarkovModel_train_(self, *args)

# Register ContinuousHiddenMarkovModel in _GRT:
_GRT.ContinuousHiddenMarkovModel_swigregister(ContinuousHiddenMarkovModel)
class HMMTrainingObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.HMMTrainingObject_swiginit(self, _GRT.new_HMMTrainingObject())
    __swig_destroy__ = _GRT.delete_HMMTrainingObject
    alpha = property(_GRT.HMMTrainingObject_alpha_get, _GRT.HMMTrainingObject_alpha_set)
    beta = property(_GRT.HMMTrainingObject_beta_get, _GRT.HMMTrainingObject_beta_set)
    c = property(_GRT.HMMTrainingObject_c_get, _GRT.HMMTrainingObject_c_set)
    pk = property(_GRT.HMMTrainingObject_pk_get, _GRT.HMMTrainingObject_pk_set)

# Register HMMTrainingObject in _GRT:
_GRT.HMMTrainingObject_swigregister(HMMTrainingObject)
class DiscreteHiddenMarkovModel(MLBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.DiscreteHiddenMarkovModel_swiginit(self, _GRT.new_DiscreteHiddenMarkovModel(*args))
    __swig_destroy__ = _GRT.delete_DiscreteHiddenMarkovModel

    def resetModel(self, numStates, numSymbols, modelType, delta):
        return _GRT.DiscreteHiddenMarkovModel_resetModel(self, numStates, numSymbols, modelType, delta)

    def reset(self):
        return _GRT.DiscreteHiddenMarkovModel_reset(self)

    def randomizeMatrices(self, numStates, numSymbols):
        return _GRT.DiscreteHiddenMarkovModel_randomizeMatrices(self, numStates, numSymbols)

    def predictLogLikelihood(self, obs):
        return _GRT.DiscreteHiddenMarkovModel_predictLogLikelihood(self, obs)

    def forwardBackward(self, trainingObject, obs):
        return _GRT.DiscreteHiddenMarkovModel_forwardBackward(self, trainingObject, obs)

    def _print(self):
        return _GRT.DiscreteHiddenMarkovModel__print(self)

    def getTrainingIterationLog(self):
        return _GRT.DiscreteHiddenMarkovModel_getTrainingIterationLog(self)

    def save(self, *args):
        return _GRT.DiscreteHiddenMarkovModel_save(self, *args)

    def load(self, *args):
        return _GRT.DiscreteHiddenMarkovModel_load(self, *args)

    def train(self, *args):
        return _GRT.DiscreteHiddenMarkovModel_train(self, *args)

    def train_(self, *args):
        return _GRT.DiscreteHiddenMarkovModel_train_(self, *args)

    def predict_(self, *args):
        return _GRT.DiscreteHiddenMarkovModel_predict_(self, *args)

    def predict(self, *args):
        return _GRT.DiscreteHiddenMarkovModel_predict(self, *args)

# Register DiscreteHiddenMarkovModel in _GRT:
_GRT.DiscreteHiddenMarkovModel_swigregister(DiscreteHiddenMarkovModel)
class HMM(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.HMM_swiginit(self, _GRT.new_HMM(*args))
    __swig_destroy__ = _GRT.delete_HMM

    def deepCopyFrom(self, classifier):
        return _GRT.HMM_deepCopyFrom(self, classifier)

    def predict_(self, *args):
        return _GRT.HMM_predict_(self, *args)

    def reset(self):
        return _GRT.HMM_reset(self)

    def clear(self):
        return _GRT.HMM_clear(self)

    def _print(self):
        return _GRT.HMM__print(self)

    def getHMMType(self):
        return _GRT.HMM_getHMMType(self)

    def getModelType(self):
        return _GRT.HMM_getModelType(self)

    def getDelta(self):
        return _GRT.HMM_getDelta(self)

    def getNumStates(self):
        return _GRT.HMM_getNumStates(self)

    def getNumSymbols(self):
        return _GRT.HMM_getNumSymbols(self)

    def getNumRandomTrainingIterations(self):
        return _GRT.HMM_getNumRandomTrainingIterations(self)

    def getDiscreteModels(self):
        return _GRT.HMM_getDiscreteModels(self)

    def getContinuousModels(self):
        return _GRT.HMM_getContinuousModels(self)

    def setHMMType(self, hmmType):
        return _GRT.HMM_setHMMType(self, hmmType)

    def setModelType(self, modelType):
        return _GRT.HMM_setModelType(self, modelType)

    def setDelta(self, delta):
        return _GRT.HMM_setDelta(self, delta)

    def setDownsampleFactor(self, downsampleFactor):
        return _GRT.HMM_setDownsampleFactor(self, downsampleFactor)

    def setCommitteeSize(self, committeeSize):
        return _GRT.HMM_setCommitteeSize(self, committeeSize)

    def setNumStates(self, numStates):
        return _GRT.HMM_setNumStates(self, numStates)

    def setNumSymbols(self, numStates):
        return _GRT.HMM_setNumSymbols(self, numStates)

    def setNumRandomTrainingIterations(self, numRandomTrainingIterations):
        return _GRT.HMM_setNumRandomTrainingIterations(self, numRandomTrainingIterations)

    def setSigma(self, sigma):
        return _GRT.HMM_setSigma(self, sigma)

    def setAutoEstimateSigma(self, autoEstimateSigma):
        return _GRT.HMM_setAutoEstimateSigma(self, autoEstimateSigma)

    @staticmethod
    def getId():
        return _GRT.HMM_getId()

    def save(self, *args):
        return _GRT.HMM_save(self, *args)

    def load(self, *args):
        return _GRT.HMM_load(self, *args)

    def train(self, *args):
        return _GRT.HMM_train(self, *args)

    def train_(self, *args):
        return _GRT.HMM_train_(self, *args)

# Register HMM in _GRT:
_GRT.HMM_swigregister(HMM)
class MinDistModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.MinDistModel_swiginit(self, _GRT.new_MinDistModel(*args))
    __swig_destroy__ = _GRT.delete_MinDistModel

    def train(self, classLabel, trainingData, numClusters, minChange, maxNumEpochs):
        return _GRT.MinDistModel_train(self, classLabel, trainingData, numClusters, minChange, maxNumEpochs)

    def predict(self, observation):
        return _GRT.MinDistModel_predict(self, observation)

    def recomputeThresholdValue(self):
        return _GRT.MinDistModel_recomputeThresholdValue(self)

    def getClassLabel(self):
        return _GRT.MinDistModel_getClassLabel(self)

    def getNumFeatures(self):
        return _GRT.MinDistModel_getNumFeatures(self)

    def getNumClusters(self):
        return _GRT.MinDistModel_getNumClusters(self)

    def getRejectionThreshold(self):
        return _GRT.MinDistModel_getRejectionThreshold(self)

    def getGamma(self):
        return _GRT.MinDistModel_getGamma(self)

    def getTrainingMu(self):
        return _GRT.MinDistModel_getTrainingMu(self)

    def getTrainingSigma(self):
        return _GRT.MinDistModel_getTrainingSigma(self)

    def getClusters(self):
        return _GRT.MinDistModel_getClusters(self)

    def setClassLabel(self, classLabel):
        return _GRT.MinDistModel_setClassLabel(self, classLabel)

    def setClusters(self, clusters):
        return _GRT.MinDistModel_setClusters(self, clusters)

    def setGamma(self, gamma):
        return _GRT.MinDistModel_setGamma(self, gamma)

    def setRejectionThreshold(self, rejectionThreshold):
        return _GRT.MinDistModel_setRejectionThreshold(self, rejectionThreshold)

    def setTrainingSigma(self, trainingSigma):
        return _GRT.MinDistModel_setTrainingSigma(self, trainingSigma)

    def setTrainingMu(self, trainingMu):
        return _GRT.MinDistModel_setTrainingMu(self, trainingMu)

    def setTrainingLoggingEnabled(self, enabled):
        return _GRT.MinDistModel_setTrainingLoggingEnabled(self, enabled)

# Register MinDistModel in _GRT:
_GRT.MinDistModel_swigregister(MinDistModel)
class MinDist(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.MinDist_swiginit(self, _GRT.new_MinDist(*args))
    __swig_destroy__ = _GRT.delete_MinDist

    def deepCopyFrom(self, classifier):
        return _GRT.MinDist_deepCopyFrom(self, classifier)

    def clear(self):
        return _GRT.MinDist_clear(self)

    def recomputeNullRejectionThresholds(self):
        return _GRT.MinDist_recomputeNullRejectionThresholds(self)

    def getNumClusters(self):
        return _GRT.MinDist_getNumClusters(self)

    def getModels(self):
        return _GRT.MinDist_getModels(self)

    def setNullRejectionCoeff(self, nullRejectionCoeff):
        return _GRT.MinDist_setNullRejectionCoeff(self, nullRejectionCoeff)

    def setNumClusters(self, numClusters):
        return _GRT.MinDist_setNumClusters(self, numClusters)

    @staticmethod
    def getId():
        return _GRT.MinDist_getId()

    def save(self, *args):
        return _GRT.MinDist_save(self, *args)

    def load(self, *args):
        return _GRT.MinDist_load(self, *args)

    def train_(self, *args):
        return _GRT.MinDist_train_(self, *args)

    def predict_(self, *args):
        return _GRT.MinDist_predict_(self, *args)

# Register MinDist in _GRT:
_GRT.MinDist_swigregister(MinDist)
class ParticleClassifierGestureTemplate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.ParticleClassifierGestureTemplate_swiginit(self, _GRT.new_ParticleClassifierGestureTemplate())
    __swig_destroy__ = _GRT.delete_ParticleClassifierGestureTemplate

    def getLength(self):
        return _GRT.ParticleClassifierGestureTemplate_getLength(self)
    classLabel = property(_GRT.ParticleClassifierGestureTemplate_classLabel_get, _GRT.ParticleClassifierGestureTemplate_classLabel_set)
    timeseries = property(_GRT.ParticleClassifierGestureTemplate_timeseries_get, _GRT.ParticleClassifierGestureTemplate_timeseries_set)

# Register ParticleClassifierGestureTemplate in _GRT:
_GRT.ParticleClassifierGestureTemplate_swigregister(ParticleClassifierGestureTemplate)
class ParticleClassifierParticleFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.ParticleClassifierParticleFilter_swiginit(self, _GRT.new_ParticleClassifierParticleFilter())
    __swig_destroy__ = _GRT.delete_ParticleClassifierParticleFilter

    def preFilterUpdate(self, data):
        return _GRT.ParticleClassifierParticleFilter_preFilterUpdate(self, data)

    def postFilterUpdate(self, data):
        return _GRT.ParticleClassifierParticleFilter_postFilterUpdate(self, data)

    def predict(self, p):
        return _GRT.ParticleClassifierParticleFilter_predict(self, p)

    def update(self, p, data):
        return _GRT.ParticleClassifierParticleFilter_update(self, p, data)

    def clear(self):
        return _GRT.ParticleClassifierParticleFilter_clear(self)

    def train(self, numParticles, trainingData, sensorNoise, transitionSigma, phaseSigma, velocitySigma):
        return _GRT.ParticleClassifierParticleFilter_train(self, numParticles, trainingData, sensorNoise, transitionSigma, phaseSigma, velocitySigma)
    numInputDimensions = property(_GRT.ParticleClassifierParticleFilter_numInputDimensions_get, _GRT.ParticleClassifierParticleFilter_numInputDimensions_set)
    numTemplates = property(_GRT.ParticleClassifierParticleFilter_numTemplates_get, _GRT.ParticleClassifierParticleFilter_numTemplates_set)
    numClasses = property(_GRT.ParticleClassifierParticleFilter_numClasses_get, _GRT.ParticleClassifierParticleFilter_numClasses_set)
    resampleCounter = property(_GRT.ParticleClassifierParticleFilter_resampleCounter_get, _GRT.ParticleClassifierParticleFilter_resampleCounter_set)
    gestureTemplates = property(_GRT.ParticleClassifierParticleFilter_gestureTemplates_get, _GRT.ParticleClassifierParticleFilter_gestureTemplates_set)

# Register ParticleClassifierParticleFilter in _GRT:
_GRT.ParticleClassifierParticleFilter_swigregister(ParticleClassifierParticleFilter)
class ParticleClassifier(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ParticleClassifier_swiginit(self, _GRT.new_ParticleClassifier(*args))
    __swig_destroy__ = _GRT.delete_ParticleClassifier

    def deepCopyFrom(self, classifier):
        return _GRT.ParticleClassifier_deepCopyFrom(self, classifier)

    def save(self, file):
        return _GRT.ParticleClassifier_save(self, file)

    def load(self, file):
        return _GRT.ParticleClassifier_load(self, file)

    def clear(self):
        return _GRT.ParticleClassifier_clear(self)

    def reset(self):
        return _GRT.ParticleClassifier_reset(self)

    @staticmethod
    def getId():
        return _GRT.ParticleClassifier_getId()

    def getGestureTemplates(self):
        return _GRT.ParticleClassifier_getGestureTemplates(self)

    def getParticleFilter(self):
        return _GRT.ParticleClassifier_getParticleFilter(self)

    def getStateEstimation(self):
        return _GRT.ParticleClassifier_getStateEstimation(self)

    def getPhase(self):
        return _GRT.ParticleClassifier_getPhase(self)

    def getVelocity(self):
        return _GRT.ParticleClassifier_getVelocity(self)

    def setNumParticles(self, numParticles):
        return _GRT.ParticleClassifier_setNumParticles(self, numParticles)

    def setSensorNoise(self, sensorNoise):
        return _GRT.ParticleClassifier_setSensorNoise(self, sensorNoise)

    def setTransitionSigma(self, transitionSigma):
        return _GRT.ParticleClassifier_setTransitionSigma(self, transitionSigma)

    def setPhaseSigma(self, phaseSigma):
        return _GRT.ParticleClassifier_setPhaseSigma(self, phaseSigma)

    def setVelocitySigma(self, velocitySigma):
        return _GRT.ParticleClassifier_setVelocitySigma(self, velocitySigma)

    def predict_(self, *args):
        return _GRT.ParticleClassifier_predict_(self, *args)

    def train_(self, *args):
        return _GRT.ParticleClassifier_train_(self, *args)

# Register ParticleClassifier in _GRT:
_GRT.ParticleClassifier_swigregister(ParticleClassifier)
class RandomForests(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.RandomForests_swiginit(self, _GRT.new_RandomForests(*args))
    __swig_destroy__ = _GRT.delete_RandomForests

    def deepCopyFrom(self, classifier):
        return _GRT.RandomForests_deepCopyFrom(self, classifier)

    def train_(self, trainingData):
        return _GRT.RandomForests_train_(self, trainingData)

    def predict_(self, inputVector):
        return _GRT.RandomForests_predict_(self, inputVector)

    def clear(self):
        return _GRT.RandomForests_clear(self)

    def _print(self):
        return _GRT.RandomForests__print(self)

    def combineModels(self, forest):
        return _GRT.RandomForests_combineModels(self, forest)

    def getForestSize(self):
        return _GRT.RandomForests_getForestSize(self)

    def getNumRandomSplits(self):
        return _GRT.RandomForests_getNumRandomSplits(self)

    def getMinNumSamplesPerNode(self):
        return _GRT.RandomForests_getMinNumSamplesPerNode(self)

    def getMaxDepth(self):
        return _GRT.RandomForests_getMaxDepth(self)

    def getTrainingMode(self):
        return _GRT.RandomForests_getTrainingMode(self)

    def getForest(self):
        return _GRT.RandomForests_getForest(self)

    def getRemoveFeaturesAtEachSplit(self):
        return _GRT.RandomForests_getRemoveFeaturesAtEachSplit(self)

    def getBootstrappedDatasetWeight(self):
        return _GRT.RandomForests_getBootstrappedDatasetWeight(self)

    def getTree(self, index):
        return _GRT.RandomForests_getTree(self, index)

    def deepCopyDecisionTreeNode(self):
        return _GRT.RandomForests_deepCopyDecisionTreeNode(self)

    def getFeatureWeights(self, normWeights=True):
        return _GRT.RandomForests_getFeatureWeights(self, normWeights)

    def getLeafNodeFeatureWeights(self, normWeights=True):
        return _GRT.RandomForests_getLeafNodeFeatureWeights(self, normWeights)

    def setForestSize(self, forestSize):
        return _GRT.RandomForests_setForestSize(self, forestSize)

    def setNumRandomSplits(self, numSplittingSteps):
        return _GRT.RandomForests_setNumRandomSplits(self, numSplittingSteps)

    def setMinNumSamplesPerNode(self, minNumSamplesPerNode):
        return _GRT.RandomForests_setMinNumSamplesPerNode(self, minNumSamplesPerNode)

    def setMaxDepth(self, maxDepth):
        return _GRT.RandomForests_setMaxDepth(self, maxDepth)

    def setRemoveFeaturesAtEachSplit(self, removeFeaturesAtEachSplit):
        return _GRT.RandomForests_setRemoveFeaturesAtEachSplit(self, removeFeaturesAtEachSplit)

    def setRemoveFeaturesAtEachSpilt(self, removeFeaturesAtEachSpilt):
        return _GRT.RandomForests_setRemoveFeaturesAtEachSpilt(self, removeFeaturesAtEachSpilt)

    def setTrainingMode(self, trainingMode):
        return _GRT.RandomForests_setTrainingMode(self, trainingMode)

    def setDecisionTreeNode(self, node):
        return _GRT.RandomForests_setDecisionTreeNode(self, node)

    def setBootstrappedDatasetWeight(self, bootstrappedDatasetWeight):
        return _GRT.RandomForests_setBootstrappedDatasetWeight(self, bootstrappedDatasetWeight)

    @staticmethod
    def getId():
        return _GRT.RandomForests_getId()

    def save(self, *args):
        return _GRT.RandomForests_save(self, *args)

    def load(self, *args):
        return _GRT.RandomForests_load(self, *args)

# Register RandomForests in _GRT:
_GRT.RandomForests_swigregister(RandomForests)
class SoftmaxModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.SoftmaxModel_swiginit(self, _GRT.new_SoftmaxModel())
    __swig_destroy__ = _GRT.delete_SoftmaxModel

    def init(self, classLabel, N):
        return _GRT.SoftmaxModel_init(self, classLabel, N)

    def compute(self, x):
        return _GRT.SoftmaxModel_compute(self, x)
    classLabel = property(_GRT.SoftmaxModel_classLabel_get, _GRT.SoftmaxModel_classLabel_set)
    N = property(_GRT.SoftmaxModel_N_get, _GRT.SoftmaxModel_N_set)
    w = property(_GRT.SoftmaxModel_w_get, _GRT.SoftmaxModel_w_set)
    w0 = property(_GRT.SoftmaxModel_w0_get, _GRT.SoftmaxModel_w0_set)

# Register SoftmaxModel in _GRT:
_GRT.SoftmaxModel_swigregister(SoftmaxModel)
class Softmax(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.Softmax_swiginit(self, _GRT.new_Softmax(*args))
    __swig_destroy__ = _GRT.delete_Softmax

    def deepCopyFrom(self, classifier):
        return _GRT.Softmax_deepCopyFrom(self, classifier)

    def train_(self, trainingData):
        return _GRT.Softmax_train_(self, trainingData)

    def predict_(self, inputVector):
        return _GRT.Softmax_predict_(self, inputVector)

    def clear(self):
        return _GRT.Softmax_clear(self)

    def getModels(self):
        return _GRT.Softmax_getModels(self)

    @staticmethod
    def getId():
        return _GRT.Softmax_getId()

    def save(self, *args):
        return _GRT.Softmax_save(self, *args)

    def load(self, *args):
        return _GRT.Softmax_load(self, *args)

# Register Softmax in _GRT:
_GRT.Softmax_swigregister(Softmax)
SVM_MIN_SCALE_RANGE = _GRT.SVM_MIN_SCALE_RANGE
SVM_MAX_SCALE_RANGE = _GRT.SVM_MAX_SCALE_RANGE
class SVM(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    C_SVC = _GRT.SVM_C_SVC
    NU_SVC = _GRT.SVM_NU_SVC
    ONE_CLASS = _GRT.SVM_ONE_CLASS
    EPSILON_SVR = _GRT.SVM_EPSILON_SVR
    NU_SVR = _GRT.SVM_NU_SVR
    NUM_SVM_TYPES = _GRT.SVM_NUM_SVM_TYPES
    LINEAR_KERNEL = _GRT.SVM_LINEAR_KERNEL
    POLY_KERNEL = _GRT.SVM_POLY_KERNEL
    RBF_KERNEL = _GRT.SVM_RBF_KERNEL
    SIGMOID_KERNEL = _GRT.SVM_SIGMOID_KERNEL
    PRECOMPUTED_KERNEL = _GRT.SVM_PRECOMPUTED_KERNEL
    NUM_KERNEL_TYPES = _GRT.SVM_NUM_KERNEL_TYPES

    def __init__(self, *args):
        _GRT.SVM_swiginit(self, _GRT.new_SVM(*args))
    __swig_destroy__ = _GRT.delete_SVM

    def deepCopyFrom(self, classifier):
        return _GRT.SVM_deepCopyFrom(self, classifier)

    def clear(self):
        return _GRT.SVM_clear(self)

    def init(self, kernelType, svmType, useScaling, useNullRejection, useAutoGamma, gamma, degree, coef0, nu, C, useCrossValidation, kFoldValue):
        return _GRT.SVM_init(self, kernelType, svmType, useScaling, useNullRejection, useAutoGamma, gamma, degree, coef0, nu, C, useCrossValidation, kFoldValue)

    def initDefaultSVMSettings(self):
        return _GRT.SVM_initDefaultSVMSettings(self)

    def getIsCrossValidationTrainingEnabled(self):
        return _GRT.SVM_getIsCrossValidationTrainingEnabled(self)

    def getIsAutoGammaEnabled(self):
        return _GRT.SVM_getIsAutoGammaEnabled(self)

    def getSVMType(self):
        return _GRT.SVM_getSVMType(self)

    def getKernelType(self):
        return _GRT.SVM_getKernelType(self)

    def getDegree(self):
        return _GRT.SVM_getDegree(self)

    def getNumClasses(self):
        return _GRT.SVM_getNumClasses(self)

    def getGamma(self):
        return _GRT.SVM_getGamma(self)

    def getNu(self):
        return _GRT.SVM_getNu(self)

    def getCoef0(self):
        return _GRT.SVM_getCoef0(self)

    def getC(self):
        return _GRT.SVM_getC(self)

    def getKFoldCrossValidationValue(self):
        return _GRT.SVM_getKFoldCrossValidationValue(self)

    def getCrossValidationResult(self):
        return _GRT.SVM_getCrossValidationResult(self)

    def getLIBSVMModel(self):
        return _GRT.SVM_getLIBSVMModel(self)

    def setSVMType(self, svmType):
        return _GRT.SVM_setSVMType(self, svmType)

    def setKernelType(self, kernelType):
        return _GRT.SVM_setKernelType(self, kernelType)

    def setGamma(self, gamma):
        return _GRT.SVM_setGamma(self, gamma)

    def setDegree(self, degree):
        return _GRT.SVM_setDegree(self, degree)

    def setNu(self, nu):
        return _GRT.SVM_setNu(self, nu)

    def setCoef0(self, coef0):
        return _GRT.SVM_setCoef0(self, coef0)

    def setC(self, C):
        return _GRT.SVM_setC(self, C)

    def setKFoldCrossValidationValue(self, kFoldValue):
        return _GRT.SVM_setKFoldCrossValidationValue(self, kFoldValue)

    def enableAutoGamma(self, useAutoGamma):
        return _GRT.SVM_enableAutoGamma(self, useAutoGamma)

    def enableCrossValidationTraining(self, useCrossValidation):
        return _GRT.SVM_enableCrossValidationTraining(self, useCrossValidation)

    @staticmethod
    def getId():
        return _GRT.SVM_getId()

    def save(self, *args):
        return _GRT.SVM_save(self, *args)

    def load(self, *args):
        return _GRT.SVM_load(self, *args)

    def train_(self, *args):
        return _GRT.SVM_train_(self, *args)

    def predict_(self, *args):
        return _GRT.SVM_predict_(self, *args)

# Register SVM in _GRT:
_GRT.SVM_swigregister(SVM)
class SwipeDetector(Classifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    POSITIVE_SWIPE = _GRT.SwipeDetector_POSITIVE_SWIPE
    NEGATIVE_SWIPE = _GRT.SwipeDetector_NEGATIVE_SWIPE

    def __init__(self, *args):
        _GRT.SwipeDetector_swiginit(self, _GRT.new_SwipeDetector(*args))
    __swig_destroy__ = _GRT.delete_SwipeDetector

    def deepCopyFrom(self, classifier):
        return _GRT.SwipeDetector_deepCopyFrom(self, classifier)

    def init(self, numInputDimensions):
        return _GRT.SwipeDetector_init(self, numInputDimensions)

    def clear(self):
        return _GRT.SwipeDetector_clear(self)

    def reset(self):
        return _GRT.SwipeDetector_reset(self)

    def getSwipeDetected(self):
        return _GRT.SwipeDetector_getSwipeDetected(self)

    def getSwipeValue(self):
        return _GRT.SwipeDetector_getSwipeValue(self)

    def getSwipeThreshold(self):
        return _GRT.SwipeDetector_getSwipeThreshold(self)

    def getHysteresisThreshold(self):
        return _GRT.SwipeDetector_getHysteresisThreshold(self)

    def getMovementVelocity(self):
        return _GRT.SwipeDetector_getMovementVelocity(self)

    def getMovementThreshold(self):
        return _GRT.SwipeDetector_getMovementThreshold(self)

    def getContextValue(self):
        return _GRT.SwipeDetector_getContextValue(self)

    def getSwipeIntegrationCoeff(self):
        return _GRT.SwipeDetector_getSwipeIntegrationCoeff(self)

    def setContext(self, context):
        return _GRT.SwipeDetector_setContext(self, context)

    def setSwipeIndex(self, swipeIndex):
        return _GRT.SwipeDetector_setSwipeIndex(self, swipeIndex)

    def setSwipeDirection(self, swipeDirection):
        return _GRT.SwipeDetector_setSwipeDirection(self, swipeDirection)

    def setSwipeThreshold(self, swipeThreshold):
        return _GRT.SwipeDetector_setSwipeThreshold(self, swipeThreshold)

    def setHysteresisThreshold(self, hysteresisThreshold):
        return _GRT.SwipeDetector_setHysteresisThreshold(self, hysteresisThreshold)

    def setMovementThreshold(self, movementThreshold):
        return _GRT.SwipeDetector_setMovementThreshold(self, movementThreshold)

    def setSwipeIntegrationCoeff(self, swipeIntegrationCoeff):
        return _GRT.SwipeDetector_setSwipeIntegrationCoeff(self, swipeIntegrationCoeff)

    @staticmethod
    def getId():
        return _GRT.SwipeDetector_getId()

    def save(self, *args):
        return _GRT.SwipeDetector_save(self, *args)

    def load(self, *args):
        return _GRT.SwipeDetector_load(self, *args)

    def train_(self, *args):
        return _GRT.SwipeDetector_train_(self, *args)

    def predict_(self, *args):
        return _GRT.SwipeDetector_predict_(self, *args)

# Register SwipeDetector in _GRT:
_GRT.SwipeDetector_swigregister(SwipeDetector)
class ClusterTreeNode(Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.ClusterTreeNode_swiginit(self, _GRT.new_ClusterTreeNode())
    __swig_destroy__ = _GRT.delete_ClusterTreeNode

    def predict_(self, *args):
        return _GRT.ClusterTreeNode_predict_(self, *args)

    def clear(self):
        return _GRT.ClusterTreeNode_clear(self)

    def _print(self):
        return _GRT.ClusterTreeNode__print(self)

    def deepCopy(self):
        return _GRT.ClusterTreeNode_deepCopy(self)

    def deepCopyTree(self):
        return _GRT.ClusterTreeNode_deepCopyTree(self)

    def getNodeSize(self):
        return _GRT.ClusterTreeNode_getNodeSize(self)

    def getFeatureIndex(self):
        return _GRT.ClusterTreeNode_getFeatureIndex(self)

    def getThreshold(self):
        return _GRT.ClusterTreeNode_getThreshold(self)

    def getClusterLabel(self):
        return _GRT.ClusterTreeNode_getClusterLabel(self)

    def set(self, nodeSize, featureIndex, threshold, clusterLabel):
        return _GRT.ClusterTreeNode_set(self, nodeSize, featureIndex, threshold, clusterLabel)

# Register ClusterTreeNode in _GRT:
_GRT.ClusterTreeNode_swigregister(ClusterTreeNode)
class ClusterTree(Clusterer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ClusterTree_swiginit(self, _GRT.new_ClusterTree(*args))
    __swig_destroy__ = _GRT.delete_ClusterTree

    def deepCopyFrom(self, cluster):
        return _GRT.ClusterTree_deepCopyFrom(self, cluster)

    def train_(self, trainingData):
        return _GRT.ClusterTree_train_(self, trainingData)

    def predict_(self, inputVector):
        return _GRT.ClusterTree_predict_(self, inputVector)

    def clear(self):
        return _GRT.ClusterTree_clear(self)

    def _print(self):
        return _GRT.ClusterTree__print(self)

    def save(self, file):
        return _GRT.ClusterTree_save(self, file)

    def load(self, file):
        return _GRT.ClusterTree_load(self, file)

    def deepCopyTree(self):
        return _GRT.ClusterTree_deepCopyTree(self)

    def getTree(self):
        return _GRT.ClusterTree_getTree(self)

    def getPredictedClusterLabel(self):
        return _GRT.ClusterTree_getPredictedClusterLabel(self)

    def getMinRMSErrorPerNode(self):
        return _GRT.ClusterTree_getMinRMSErrorPerNode(self)

    def getTrainingMode(self):
        return _GRT.ClusterTree_getTrainingMode(self)

    def getNumSplittingSteps(self):
        return _GRT.ClusterTree_getNumSplittingSteps(self)

    def getMinNumSamplesPerNode(self):
        return _GRT.ClusterTree_getMinNumSamplesPerNode(self)

    def getMaxDepth(self):
        return _GRT.ClusterTree_getMaxDepth(self)

    def getPredictedNodeID(self):
        return _GRT.ClusterTree_getPredictedNodeID(self)

    def getRemoveFeaturesAtEachSplit(self):
        return _GRT.ClusterTree_getRemoveFeaturesAtEachSplit(self)

    def setTrainingMode(self, trainingMode):
        return _GRT.ClusterTree_setTrainingMode(self, trainingMode)

    def setNumSplittingSteps(self, numSplittingSteps):
        return _GRT.ClusterTree_setNumSplittingSteps(self, numSplittingSteps)

    def setMinNumSamplesPerNode(self, minNumSamplesPerNode):
        return _GRT.ClusterTree_setMinNumSamplesPerNode(self, minNumSamplesPerNode)

    def setMaxDepth(self, maxDepth):
        return _GRT.ClusterTree_setMaxDepth(self, maxDepth)

    def setRemoveFeaturesAtEachSplit(self, removeFeaturesAtEachSplit):
        return _GRT.ClusterTree_setRemoveFeaturesAtEachSplit(self, removeFeaturesAtEachSplit)

    def setMinRMSErrorPerNode(self, minRMSErrorPerNode):
        return _GRT.ClusterTree_setMinRMSErrorPerNode(self, minRMSErrorPerNode)

    def saveModelToFile(self, *args):
        return _GRT.ClusterTree_saveModelToFile(self, *args)

    def loadModelFromFile(self, *args):
        return _GRT.ClusterTree_loadModelFromFile(self, *args)

    def train(self, *args):
        return _GRT.ClusterTree_train(self, *args)

    def predict(self, *args):
        return _GRT.ClusterTree_predict(self, *args)

    @staticmethod
    def getId():
        return _GRT.ClusterTree_getId()

# Register ClusterTree in _GRT:
_GRT.ClusterTree_swigregister(ClusterTree)
class GaussianMixtureModels(Clusterer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.GaussianMixtureModels_swiginit(self, _GRT.new_GaussianMixtureModels(*args))
    __swig_destroy__ = _GRT.delete_GaussianMixtureModels

    def deepCopyFrom(self, clusterer):
        return _GRT.GaussianMixtureModels_deepCopyFrom(self, clusterer)

    def reset(self):
        return _GRT.GaussianMixtureModels_reset(self)

    def clear(self):
        return _GRT.GaussianMixtureModels_clear(self)

    def train_(self, *args):
        return _GRT.GaussianMixtureModels_train_(self, *args)

    def predict_(self, inputVector):
        return _GRT.GaussianMixtureModels_predict_(self, inputVector)

    def save(self, file):
        return _GRT.GaussianMixtureModels_save(self, file)

    def load(self, file):
        return _GRT.GaussianMixtureModels_load(self, file)

    def getMu(self):
        return _GRT.GaussianMixtureModels_getMu(self)

    def getSigma(self, *args):
        return _GRT.GaussianMixtureModels_getSigma(self, *args)

    @staticmethod
    def getId():
        return _GRT.GaussianMixtureModels_getId()

    def setNumRestarts(self, numRestarts):
        return _GRT.GaussianMixtureModels_setNumRestarts(self, numRestarts)

    def saveModelToFile(self, *args):
        return _GRT.GaussianMixtureModels_saveModelToFile(self, *args)

    def loadModelFromFile(self, *args):
        return _GRT.GaussianMixtureModels_loadModelFromFile(self, *args)

# Register GaussianMixtureModels in _GRT:
_GRT.GaussianMixtureModels_swigregister(GaussianMixtureModels)
class ClusterInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ClusterInfo_swiginit(self, _GRT.new_ClusterInfo(*args))
    __swig_destroy__ = _GRT.delete_ClusterInfo

    def addSampleToCluster(self, i):
        return _GRT.ClusterInfo_addSampleToCluster(self, i)

    def getUniqueClusterID(self):
        return _GRT.ClusterInfo_getUniqueClusterID(self)

    def getNumSamplesInCluster(self):
        return _GRT.ClusterInfo_getNumSamplesInCluster(self)

    def getClusterVariance(self):
        return _GRT.ClusterInfo_getClusterVariance(self)
    uniqueClusterID = property(_GRT.ClusterInfo_uniqueClusterID_get, _GRT.ClusterInfo_uniqueClusterID_set)
    clusterVariance = property(_GRT.ClusterInfo_clusterVariance_get, _GRT.ClusterInfo_clusterVariance_set)
    indexs = property(_GRT.ClusterInfo_indexs_get, _GRT.ClusterInfo_indexs_set)

# Register ClusterInfo in _GRT:
_GRT.ClusterInfo_swigregister(ClusterInfo)
class ClusterLevel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ClusterLevel_swiginit(self, _GRT.new_ClusterLevel(*args))
    __swig_destroy__ = _GRT.delete_ClusterLevel

    def getLevel(self):
        return _GRT.ClusterLevel_getLevel(self)

    def getNumClusters(self):
        return _GRT.ClusterLevel_getNumClusters(self)
    level = property(_GRT.ClusterLevel_level_get, _GRT.ClusterLevel_level_set)
    clusters = property(_GRT.ClusterLevel_clusters_get, _GRT.ClusterLevel_clusters_set)

# Register ClusterLevel in _GRT:
_GRT.ClusterLevel_swigregister(ClusterLevel)
class HierarchicalClustering(Clusterer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.HierarchicalClustering_swiginit(self, _GRT.new_HierarchicalClustering(*args))
    __swig_destroy__ = _GRT.delete_HierarchicalClustering

    def deepCopyFrom(self, clusterer):
        return _GRT.HierarchicalClustering_deepCopyFrom(self, clusterer)

    def reset(self):
        return _GRT.HierarchicalClustering_reset(self)

    def clear(self):
        return _GRT.HierarchicalClustering_clear(self)

    def train_(self, *args):
        return _GRT.HierarchicalClustering_train_(self, *args)

    def save(self, file):
        return _GRT.HierarchicalClustering_save(self, file)

    def load(self, file):
        return _GRT.HierarchicalClustering_load(self, file)

    def printModel(self):
        return _GRT.HierarchicalClustering_printModel(self)

    def getClusters(self):
        return _GRT.HierarchicalClustering_getClusters(self)

    def saveModelToFile(self, *args):
        return _GRT.HierarchicalClustering_saveModelToFile(self, *args)

    def loadModelFromFile(self, *args):
        return _GRT.HierarchicalClustering_loadModelFromFile(self, *args)

    @staticmethod
    def getId():
        return _GRT.HierarchicalClustering_getId()

# Register HierarchicalClustering in _GRT:
_GRT.HierarchicalClustering_swigregister(HierarchicalClustering)
class KMeans(Clusterer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.KMeans_swiginit(self, _GRT.new_KMeans(*args))
    __swig_destroy__ = _GRT.delete_KMeans

    def deepCopyFrom(self, clusterer):
        return _GRT.KMeans_deepCopyFrom(self, clusterer)

    def reset(self):
        return _GRT.KMeans_reset(self)

    def clear(self):
        return _GRT.KMeans_clear(self)

    def trainModel(self, data):
        return _GRT.KMeans_trainModel(self, data)

    def save(self, file):
        return _GRT.KMeans_save(self, file)

    def load(self, file):
        return _GRT.KMeans_load(self, file)

    def getTheta(self):
        return _GRT.KMeans_getTheta(self)

    def getModelTrained(self):
        return _GRT.KMeans_getModelTrained(self)

    def getTrainingThetaLog(self):
        return _GRT.KMeans_getTrainingThetaLog(self)

    def getClusters(self):
        return _GRT.KMeans_getClusters(self)

    def getClassLabelsVector(self):
        return _GRT.KMeans_getClassLabelsVector(self)

    def getClassCountVector(self):
        return _GRT.KMeans_getClassCountVector(self)

    def setComputeTheta(self, computeTheta):
        return _GRT.KMeans_setComputeTheta(self, computeTheta)

    def setClusters(self, clusters):
        return _GRT.KMeans_setClusters(self, clusters)

    def saveModelToFile(self, *args):
        return _GRT.KMeans_saveModelToFile(self, *args)

    def loadModelFromFile(self, *args):
        return _GRT.KMeans_loadModelFromFile(self, *args)

    def train(self, *args):
        return _GRT.KMeans_train(self, *args)

    def train_(self, *args):
        return _GRT.KMeans_train_(self, *args)

    def predict(self, *args):
        return _GRT.KMeans_predict(self, *args)

    def predict_(self, *args):
        return _GRT.KMeans_predict_(self, *args)

    @staticmethod
    def getId():
        return _GRT.KMeans_getId()

# Register KMeans in _GRT:
_GRT.KMeans_swigregister(KMeans)
class GaussNeuron(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.GaussNeuron_swiginit(self, _GRT.new_GaussNeuron())
    __swig_destroy__ = _GRT.delete_GaussNeuron

    def init(self, numInputs, sigma=2.0, minWeightRange=-1.0, maxWeightRange=1.0):
        return _GRT.GaussNeuron_init(self, numInputs, sigma, minWeightRange, maxWeightRange)

    def clear(self):
        return _GRT.GaussNeuron_clear(self)

    def getInitialized(self):
        return _GRT.GaussNeuron_getInitialized(self)

    def getWeightDistance(self, x):
        return _GRT.GaussNeuron_getWeightDistance(self, x)

    def getSquaredWeightDistance(self, x):
        return _GRT.GaussNeuron_getSquaredWeightDistance(self, x)

    def fire(self, x):
        return _GRT.GaussNeuron_fire(self, x)

    def save(self, file):
        return _GRT.GaussNeuron_save(self, file)

    def load(self, file):
        return _GRT.GaussNeuron_load(self, file)
    numInputs = property(_GRT.GaussNeuron_numInputs_get, _GRT.GaussNeuron_numInputs_set)
    weights = property(_GRT.GaussNeuron_weights_get, _GRT.GaussNeuron_weights_set)
    sigma = property(_GRT.GaussNeuron_sigma_get, _GRT.GaussNeuron_sigma_set)
    initialized = property(_GRT.GaussNeuron_initialized_get, _GRT.GaussNeuron_initialized_set)

# Register GaussNeuron in _GRT:
_GRT.GaussNeuron_swigregister(GaussNeuron)
class SelfOrganizingMap(Clusterer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RANDOM_NETWORK = _GRT.SelfOrganizingMap_RANDOM_NETWORK

    def __init__(self, *args):
        _GRT.SelfOrganizingMap_swiginit(self, _GRT.new_SelfOrganizingMap(*args))
    __swig_destroy__ = _GRT.delete_SelfOrganizingMap

    def deepCopyFrom(self, clusterer):
        return _GRT.SelfOrganizingMap_deepCopyFrom(self, clusterer)

    def reset(self):
        return _GRT.SelfOrganizingMap_reset(self)

    def clear(self):
        return _GRT.SelfOrganizingMap_clear(self)

    def train_(self, *args):
        return _GRT.SelfOrganizingMap_train_(self, *args)

    def map_(self, x):
        return _GRT.SelfOrganizingMap_map_(self, x)

    def validateNetworkTypology(self, networkTypology):
        return _GRT.SelfOrganizingMap_validateNetworkTypology(self, networkTypology)

    def getNetworkSize(self):
        return _GRT.SelfOrganizingMap_getNetworkSize(self)

    def getAlphaStart(self):
        return _GRT.SelfOrganizingMap_getAlphaStart(self)

    def getAlphaEnd(self):
        return _GRT.SelfOrganizingMap_getAlphaEnd(self)

    def getMappedData(self):
        return _GRT.SelfOrganizingMap_getMappedData(self)

    def getNeurons(self):
        return _GRT.SelfOrganizingMap_getNeurons(self)

    def getNeuronsRef(self):
        return _GRT.SelfOrganizingMap_getNeuronsRef(self)

    def getWeightsMatrix(self):
        return _GRT.SelfOrganizingMap_getWeightsMatrix(self)

    def setNetworkSize(self, networkSize):
        return _GRT.SelfOrganizingMap_setNetworkSize(self, networkSize)

    def setNetworkTypology(self, networkTypology):
        return _GRT.SelfOrganizingMap_setNetworkTypology(self, networkTypology)

    def setAlphaStart(self, alphaStart):
        return _GRT.SelfOrganizingMap_setAlphaStart(self, alphaStart)

    def setAlphaEnd(self, alphaEnd):
        return _GRT.SelfOrganizingMap_setAlphaEnd(self, alphaEnd)

    def setSigmaWeight(self, sigmaWeight):
        return _GRT.SelfOrganizingMap_setSigmaWeight(self, sigmaWeight)

    def save(self, *args):
        return _GRT.SelfOrganizingMap_save(self, *args)

    def load(self, *args):
        return _GRT.SelfOrganizingMap_load(self, *args)

    @staticmethod
    def getId():
        return _GRT.SelfOrganizingMap_getId()

# Register SelfOrganizingMap in _GRT:
_GRT.SelfOrganizingMap_swigregister(SelfOrganizingMap)
class KMeansQuantizer(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.KMeansQuantizer_swiginit(self, _GRT.new_KMeansQuantizer(*args))
    __swig_destroy__ = _GRT.delete_KMeansQuantizer

    def deepCopyFrom(self, featureExtraction):
        return _GRT.KMeansQuantizer_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.KMeansQuantizer_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.KMeansQuantizer_reset(self)

    def clear(self):
        return _GRT.KMeansQuantizer_clear(self)

    def quantize(self, *args):
        return _GRT.KMeansQuantizer_quantize(self, *args)

    def getQuantizerTrained(self):
        return _GRT.KMeansQuantizer_getQuantizerTrained(self)

    def getNumClusters(self):
        return _GRT.KMeansQuantizer_getNumClusters(self)

    def getQuantizedValue(self):
        return _GRT.KMeansQuantizer_getQuantizedValue(self)

    def getQuantizationDistances(self):
        return _GRT.KMeansQuantizer_getQuantizationDistances(self)

    def getQuantizationModel(self):
        return _GRT.KMeansQuantizer_getQuantizationModel(self)

    def setNumClusters(self, numClusters):
        return _GRT.KMeansQuantizer_setNumClusters(self, numClusters)

    def save(self, *args):
        return _GRT.KMeansQuantizer_save(self, *args)

    def load(self, *args):
        return _GRT.KMeansQuantizer_load(self, *args)

    def train_(self, *args):
        return _GRT.KMeansQuantizer_train_(self, *args)

    def predict_(self, *args):
        return _GRT.KMeansQuantizer_predict_(self, *args)

    @staticmethod
    def getId():
        return _GRT.KMeansQuantizer_getId()

# Register KMeansQuantizer in _GRT:
_GRT.KMeansQuantizer_swigregister(KMeansQuantizer)
class FastFourierTransform(GRTBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RECTANGULAR_WINDOW = _GRT.FastFourierTransform_RECTANGULAR_WINDOW
    BARTLETT_WINDOW = _GRT.FastFourierTransform_BARTLETT_WINDOW
    HAMMING_WINDOW = _GRT.FastFourierTransform_HAMMING_WINDOW
    HANNING_WINDOW = _GRT.FastFourierTransform_HANNING_WINDOW

    def __init__(self, *args):
        _GRT.FastFourierTransform_swiginit(self, _GRT.new_FastFourierTransform(*args))
    __swig_destroy__ = _GRT.delete_FastFourierTransform

    def init(self, *args):
        return _GRT.FastFourierTransform_init(self, *args)

    def computeFFT(self, data):
        return _GRT.FastFourierTransform_computeFFT(self, data)

    def getMagnitudeData(self):
        return _GRT.FastFourierTransform_getMagnitudeData(self)

    def getPhaseData(self):
        return _GRT.FastFourierTransform_getPhaseData(self)

    def getPowerData(self):
        return _GRT.FastFourierTransform_getPowerData(self)

    def getAveragePower(self):
        return _GRT.FastFourierTransform_getAveragePower(self)

    def getMagnitudeDataPtr(self):
        return _GRT.FastFourierTransform_getMagnitudeDataPtr(self)

    def getPhaseDataPtr(self):
        return _GRT.FastFourierTransform_getPhaseDataPtr(self)

    def getPowerDataPtr(self):
        return _GRT.FastFourierTransform_getPowerDataPtr(self)

    def getFFTSize(self):
        return _GRT.FastFourierTransform_getFFTSize(self)

# Register FastFourierTransform in _GRT:
_GRT.FastFourierTransform_swigregister(FastFourierTransform)
class FFT(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RECTANGULAR_WINDOW = _GRT.FFT_RECTANGULAR_WINDOW
    BARTLETT_WINDOW = _GRT.FFT_BARTLETT_WINDOW
    HAMMING_WINDOW = _GRT.FFT_HAMMING_WINDOW
    HANNING_WINDOW = _GRT.FFT_HANNING_WINDOW

    def __init__(self, *args):
        _GRT.FFT_swiginit(self, _GRT.new_FFT(*args))
    __swig_destroy__ = _GRT.delete_FFT

    def deepCopyFrom(self, featureExtraction):
        return _GRT.FFT_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, *args):
        return _GRT.FFT_computeFeatures(self, *args)

    def clear(self):
        return _GRT.FFT_clear(self)

    def reset(self):
        return _GRT.FFT_reset(self)

    def init(self, *args):
        return _GRT.FFT_init(self, *args)

    def update(self, *args):
        return _GRT.FFT_update(self, *args)

    def getHopSize(self):
        return _GRT.FFT_getHopSize(self)

    def getDataBufferSize(self):
        return _GRT.FFT_getDataBufferSize(self)

    def getFFTWindowSize(self):
        return _GRT.FFT_getFFTWindowSize(self)

    def getFFTWindowFunction(self):
        return _GRT.FFT_getFFTWindowFunction(self)

    def getHopCounter(self):
        return _GRT.FFT_getHopCounter(self)

    def getComputeMagnitude(self):
        return _GRT.FFT_getComputeMagnitude(self)

    def getComputePhase(self):
        return _GRT.FFT_getComputePhase(self)

    def getFFTResults(self):
        return _GRT.FFT_getFFTResults(self)

    def getFFTResultsPtr(self, *args):
        return _GRT.FFT_getFFTResultsPtr(self, *args)

    def getFrequencyBins(self, sampleRate):
        return _GRT.FFT_getFrequencyBins(self, sampleRate)

    def setHopSize(self, hopSize):
        return _GRT.FFT_setHopSize(self, hopSize)

    def setFFTWindowSize(self, fftWindowSize):
        return _GRT.FFT_setFFTWindowSize(self, fftWindowSize)

    def setFFTWindowFunction(self, fftWindowFunction):
        return _GRT.FFT_setFFTWindowFunction(self, fftWindowFunction)

    def setComputeMagnitude(self, computeMagnitude):
        return _GRT.FFT_setComputeMagnitude(self, computeMagnitude)

    def setComputePhase(self, computePhase):
        return _GRT.FFT_setComputePhase(self, computePhase)

    def save(self, *args):
        return _GRT.FFT_save(self, *args)

    def load(self, *args):
        return _GRT.FFT_load(self, *args)

    @staticmethod
    def getId():
        return _GRT.FFT_getId()

# Register FFT in _GRT:
_GRT.FFT_swigregister(FFT)
class STDVectorOfFastFourierTransform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GRT.STDVectorOfFastFourierTransform_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GRT.STDVectorOfFastFourierTransform___nonzero__(self)

    def __bool__(self):
        return _GRT.STDVectorOfFastFourierTransform___bool__(self)

    def __len__(self):
        return _GRT.STDVectorOfFastFourierTransform___len__(self)

    def __getslice__(self, i, j):
        return _GRT.STDVectorOfFastFourierTransform___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GRT.STDVectorOfFastFourierTransform___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GRT.STDVectorOfFastFourierTransform___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GRT.STDVectorOfFastFourierTransform___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GRT.STDVectorOfFastFourierTransform___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GRT.STDVectorOfFastFourierTransform___setitem__(self, *args)

    def pop(self):
        return _GRT.STDVectorOfFastFourierTransform_pop(self)

    def append(self, x):
        return _GRT.STDVectorOfFastFourierTransform_append(self, x)

    def empty(self):
        return _GRT.STDVectorOfFastFourierTransform_empty(self)

    def size(self):
        return _GRT.STDVectorOfFastFourierTransform_size(self)

    def swap(self, v):
        return _GRT.STDVectorOfFastFourierTransform_swap(self, v)

    def begin(self):
        return _GRT.STDVectorOfFastFourierTransform_begin(self)

    def end(self):
        return _GRT.STDVectorOfFastFourierTransform_end(self)

    def rbegin(self):
        return _GRT.STDVectorOfFastFourierTransform_rbegin(self)

    def rend(self):
        return _GRT.STDVectorOfFastFourierTransform_rend(self)

    def clear(self):
        return _GRT.STDVectorOfFastFourierTransform_clear(self)

    def get_allocator(self):
        return _GRT.STDVectorOfFastFourierTransform_get_allocator(self)

    def pop_back(self):
        return _GRT.STDVectorOfFastFourierTransform_pop_back(self)

    def erase(self, *args):
        return _GRT.STDVectorOfFastFourierTransform_erase(self, *args)

    def __init__(self, *args):
        _GRT.STDVectorOfFastFourierTransform_swiginit(self, _GRT.new_STDVectorOfFastFourierTransform(*args))

    def push_back(self, x):
        return _GRT.STDVectorOfFastFourierTransform_push_back(self, x)

    def front(self):
        return _GRT.STDVectorOfFastFourierTransform_front(self)

    def back(self):
        return _GRT.STDVectorOfFastFourierTransform_back(self)

    def assign(self, n, x):
        return _GRT.STDVectorOfFastFourierTransform_assign(self, n, x)

    def resize(self, *args):
        return _GRT.STDVectorOfFastFourierTransform_resize(self, *args)

    def insert(self, *args):
        return _GRT.STDVectorOfFastFourierTransform_insert(self, *args)

    def reserve(self, n):
        return _GRT.STDVectorOfFastFourierTransform_reserve(self, n)

    def capacity(self):
        return _GRT.STDVectorOfFastFourierTransform_capacity(self)
    __swig_destroy__ = _GRT.delete_STDVectorOfFastFourierTransform

# Register STDVectorOfFastFourierTransform in _GRT:
_GRT.STDVectorOfFastFourierTransform_swigregister(STDVectorOfFastFourierTransform)
class GRTVectorOfFastFourierTransform(STDVectorOfFastFourierTransform):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.GRTVectorOfFastFourierTransform_swiginit(self, _GRT.new_GRTVectorOfFastFourierTransform(*args))
    __swig_destroy__ = _GRT.delete_GRTVectorOfFastFourierTransform

    def resize(self, *args):
        return _GRT.GRTVectorOfFastFourierTransform_resize(self, *args)

    def copy(self, rhs):
        return _GRT.GRTVectorOfFastFourierTransform_copy(self, rhs)

    def fill(self, value):
        return _GRT.GRTVectorOfFastFourierTransform_fill(self, value)

    def setAll(self, value):
        return _GRT.GRTVectorOfFastFourierTransform_setAll(self, value)

    def getSize(self):
        return _GRT.GRTVectorOfFastFourierTransform_getSize(self)

    def getData(self, *args):
        return _GRT.GRTVectorOfFastFourierTransform_getData(self, *args)

# Register GRTVectorOfFastFourierTransform in _GRT:
_GRT.GRTVectorOfFastFourierTransform_swigregister(GRTVectorOfFastFourierTransform)
class FFTFeatures(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.FFTFeatures_swiginit(self, _GRT.new_FFTFeatures(*args))
    __swig_destroy__ = _GRT.delete_FFTFeatures

    def deepCopyFrom(self, featureExtraction):
        return _GRT.FFTFeatures_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.FFTFeatures_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.FFTFeatures_reset(self)

    def init(self, fftWindowSize, numChannelsInFFTSignal, computeMaxFreqFeature, computeMaxFreqSpectrumRatio, computeCentroidFeature, computeTopNFreqFeatures, N):
        return _GRT.FFTFeatures_init(self, fftWindowSize, numChannelsInFFTSignal, computeMaxFreqFeature, computeMaxFreqSpectrumRatio, computeCentroidFeature, computeTopNFreqFeatures, N)

    def save(self, *args):
        return _GRT.FFTFeatures_save(self, *args)

    def load(self, *args):
        return _GRT.FFTFeatures_load(self, *args)

    @staticmethod
    def getId():
        return _GRT.FFTFeatures_getId()

# Register FFTFeatures in _GRT:
_GRT.FFTFeatures_swigregister(FFTFeatures)
class EnvelopeExtractor(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.EnvelopeExtractor_swiginit(self, _GRT.new_EnvelopeExtractor(*args))
    __swig_destroy__ = _GRT.delete_EnvelopeExtractor

    def deepCopyFrom(self, featureExtraction):
        return _GRT.EnvelopeExtractor_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.EnvelopeExtractor_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.EnvelopeExtractor_reset(self)

    def init(self, bufferSize=100, numDimensions=1):
        return _GRT.EnvelopeExtractor_init(self, bufferSize, numDimensions)

    def save(self, *args):
        return _GRT.EnvelopeExtractor_save(self, *args)

    def load(self, *args):
        return _GRT.EnvelopeExtractor_load(self, *args)

    @staticmethod
    def getId():
        return _GRT.EnvelopeExtractor_getId()

# Register EnvelopeExtractor in _GRT:
_GRT.EnvelopeExtractor_swigregister(EnvelopeExtractor)
class KMeansFeatures(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.KMeansFeatures_swiginit(self, _GRT.new_KMeansFeatures(*args))
    __swig_destroy__ = _GRT.delete_KMeansFeatures

    def deepCopyFrom(self, featureExtraction):
        return _GRT.KMeansFeatures_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.KMeansFeatures_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.KMeansFeatures_reset(self)

    def init(self, numClustersPerLayer):
        return _GRT.KMeansFeatures_init(self, numClustersPerLayer)

    def projectDataThroughLayer(self, input, output, layer):
        return _GRT.KMeansFeatures_projectDataThroughLayer(self, input, output, layer)

    def getNumLayers(self):
        return _GRT.KMeansFeatures_getNumLayers(self)

    def getLayerSize(self, layerIndex):
        return _GRT.KMeansFeatures_getLayerSize(self, layerIndex)

    def getClusters(self):
        return _GRT.KMeansFeatures_getClusters(self)

    def save(self, *args):
        return _GRT.KMeansFeatures_save(self, *args)

    def load(self, *args):
        return _GRT.KMeansFeatures_load(self, *args)

    def train(self, *args):
        return _GRT.KMeansFeatures_train(self, *args)

    def train_(self, *args):
        return _GRT.KMeansFeatures_train_(self, *args)

    def predict(self, *args):
        return _GRT.KMeansFeatures_predict(self, *args)

    def predict_(self, *args):
        return _GRT.KMeansFeatures_predict_(self, *args)

    @staticmethod
    def getId():
        return _GRT.KMeansFeatures_getId()

# Register KMeansFeatures in _GRT:
_GRT.KMeansFeatures_swigregister(KMeansFeatures)
class MovementIndex(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.MovementIndex_swiginit(self, _GRT.new_MovementIndex(*args))
    __swig_destroy__ = _GRT.delete_MovementIndex

    def deepCopyFrom(self, featureExtraction):
        return _GRT.MovementIndex_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.MovementIndex_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.MovementIndex_reset(self)

    def init(self, bufferLength, numDimensions):
        return _GRT.MovementIndex_init(self, bufferLength, numDimensions)

    def update(self, *args):
        return _GRT.MovementIndex_update(self, *args)

    def getData(self):
        return _GRT.MovementIndex_getData(self)

    def save(self, *args):
        return _GRT.MovementIndex_save(self, *args)

    def load(self, *args):
        return _GRT.MovementIndex_load(self, *args)

    def train(self, *args):
        return _GRT.MovementIndex_train(self, *args)

    def train_(self, *args):
        return _GRT.MovementIndex_train_(self, *args)

    def predict(self, *args):
        return _GRT.MovementIndex_predict(self, *args)

    def predict_(self, *args):
        return _GRT.MovementIndex_predict_(self, *args)

    @staticmethod
    def getId():
        return _GRT.MovementIndex_getId()

# Register MovementIndex in _GRT:
_GRT.MovementIndex_swigregister(MovementIndex)
class AngleMagnitude(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.AngleMagnitude_swiginit(self, _GRT.new_AngleMagnitude())
    angle = property(_GRT.AngleMagnitude_angle_get, _GRT.AngleMagnitude_angle_set)
    magnitude = property(_GRT.AngleMagnitude_magnitude_get, _GRT.AngleMagnitude_magnitude_set)
    __swig_destroy__ = _GRT.delete_AngleMagnitude

# Register AngleMagnitude in _GRT:
_GRT.AngleMagnitude_swigregister(AngleMagnitude)
class MovementTrajectoryFeatures(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CENTROID_VALUE = _GRT.MovementTrajectoryFeatures_CENTROID_VALUE
    NORMALIZED_CENTROID_VALUE = _GRT.MovementTrajectoryFeatures_NORMALIZED_CENTROID_VALUE
    CENTROID_DERIVATIVE = _GRT.MovementTrajectoryFeatures_CENTROID_DERIVATIVE
    CENTROID_ANGLE_2D = _GRT.MovementTrajectoryFeatures_CENTROID_ANGLE_2D

    def __init__(self, *args):
        _GRT.MovementTrajectoryFeatures_swiginit(self, _GRT.new_MovementTrajectoryFeatures(*args))
    __swig_destroy__ = _GRT.delete_MovementTrajectoryFeatures

    def deepCopyFrom(self, featureExtraction):
        return _GRT.MovementTrajectoryFeatures_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.MovementTrajectoryFeatures_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.MovementTrajectoryFeatures_reset(self)

    def init(self, trajectoryLength, numCentroids, featureMode, numHistogramBins, numDimensions, useTrajStartAndEndValues, useWeightedMagnitudeValues):
        return _GRT.MovementTrajectoryFeatures_init(self, trajectoryLength, numCentroids, featureMode, numHistogramBins, numDimensions, useTrajStartAndEndValues, useWeightedMagnitudeValues)

    def update(self, *args):
        return _GRT.MovementTrajectoryFeatures_update(self, *args)

    def getTrajectoryData(self):
        return _GRT.MovementTrajectoryFeatures_getTrajectoryData(self)

    def getCentroids(self):
        return _GRT.MovementTrajectoryFeatures_getCentroids(self)

    def getFeatureMode(self):
        return _GRT.MovementTrajectoryFeatures_getFeatureMode(self)

    def save(self, *args):
        return _GRT.MovementTrajectoryFeatures_save(self, *args)

    def load(self, *args):
        return _GRT.MovementTrajectoryFeatures_load(self, *args)

    def train(self, *args):
        return _GRT.MovementTrajectoryFeatures_train(self, *args)

    def train_(self, *args):
        return _GRT.MovementTrajectoryFeatures_train_(self, *args)

    def predict(self, *args):
        return _GRT.MovementTrajectoryFeatures_predict(self, *args)

    def predict_(self, *args):
        return _GRT.MovementTrajectoryFeatures_predict_(self, *args)

    @staticmethod
    def getId():
        return _GRT.MovementTrajectoryFeatures_getId()

# Register MovementTrajectoryFeatures in _GRT:
_GRT.MovementTrajectoryFeatures_swigregister(MovementTrajectoryFeatures)
class ZeroCrossingCounter(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NUM_ZERO_CROSSINGS_COUNTED = _GRT.ZeroCrossingCounter_NUM_ZERO_CROSSINGS_COUNTED
    ZERO_CROSSING_MAGNITUDE = _GRT.ZeroCrossingCounter_ZERO_CROSSING_MAGNITUDE
    TOTAL_NUM_ZERO_CROSSING_FEATURES = _GRT.ZeroCrossingCounter_TOTAL_NUM_ZERO_CROSSING_FEATURES
    INDEPENDANT_FEATURE_MODE = _GRT.ZeroCrossingCounter_INDEPENDANT_FEATURE_MODE
    COMBINED_FEATURE_MODE = _GRT.ZeroCrossingCounter_COMBINED_FEATURE_MODE

    def __init__(self, *args):
        _GRT.ZeroCrossingCounter_swiginit(self, _GRT.new_ZeroCrossingCounter(*args))
    __swig_destroy__ = _GRT.delete_ZeroCrossingCounter

    def deepCopyFrom(self, featureExtraction):
        return _GRT.ZeroCrossingCounter_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.ZeroCrossingCounter_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.ZeroCrossingCounter_reset(self)

    def init(self, searchWindowSize, deadZoneThreshold, numDimensions, featureMode):
        return _GRT.ZeroCrossingCounter_init(self, searchWindowSize, deadZoneThreshold, numDimensions, featureMode)

    def update(self, *args):
        return _GRT.ZeroCrossingCounter_update(self, *args)

    def setSearchWindowSize(self, searchWindowSize):
        return _GRT.ZeroCrossingCounter_setSearchWindowSize(self, searchWindowSize)

    def setFeatureMode(self, featureMode):
        return _GRT.ZeroCrossingCounter_setFeatureMode(self, featureMode)

    def setDeadZoneThreshold(self, deadZoneThreshold):
        return _GRT.ZeroCrossingCounter_setDeadZoneThreshold(self, deadZoneThreshold)

    def getSearchWindowSize(self):
        return _GRT.ZeroCrossingCounter_getSearchWindowSize(self)

    def getNumFeatures(self):
        return _GRT.ZeroCrossingCounter_getNumFeatures(self)

    def getFeatureMode(self):
        return _GRT.ZeroCrossingCounter_getFeatureMode(self)

    def getDeadZoneThreshold(self):
        return _GRT.ZeroCrossingCounter_getDeadZoneThreshold(self)

    def getDataBuffer(self):
        return _GRT.ZeroCrossingCounter_getDataBuffer(self)

    def save(self, *args):
        return _GRT.ZeroCrossingCounter_save(self, *args)

    def load(self, *args):
        return _GRT.ZeroCrossingCounter_load(self, *args)

    def train(self, *args):
        return _GRT.ZeroCrossingCounter_train(self, *args)

    def train_(self, *args):
        return _GRT.ZeroCrossingCounter_train_(self, *args)

    def predict(self, *args):
        return _GRT.ZeroCrossingCounter_predict(self, *args)

    def predict_(self, *args):
        return _GRT.ZeroCrossingCounter_predict_(self, *args)

    @staticmethod
    def getId():
        return _GRT.ZeroCrossingCounter_getId()

# Register ZeroCrossingCounter in _GRT:
_GRT.ZeroCrossingCounter_swigregister(ZeroCrossingCounter)
class PCA(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.PCA_swiginit(self, _GRT.new_PCA(*args))
    __swig_destroy__ = _GRT.delete_PCA

    def deepCopyFrom(self, featureExtraction):
        return _GRT.PCA_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, *args):
        return _GRT.PCA_computeFeatures(self, *args)

    def reset(self):
        return _GRT.PCA_reset(self)

    def train_(self, *args):
        return _GRT.PCA_train_(self, *args)

    def init(self, numDimensions, numPrincipalComponents):
        return _GRT.PCA_init(self, numDimensions, numPrincipalComponents)

    def getPCA(self):
        return _GRT.PCA_getPCA(self)

    @staticmethod
    def getId():
        return _GRT.PCA_getId()

    def save(self, *args):
        return _GRT.PCA_save(self, *args)

    def load(self, *args):
        return _GRT.PCA_load(self, *args)

# Register PCA in _GRT:
_GRT.PCA_swigregister(PCA)
class RBMQuantizer(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.RBMQuantizer_swiginit(self, _GRT.new_RBMQuantizer(*args))
    __swig_destroy__ = _GRT.delete_RBMQuantizer

    def deepCopyFrom(self, featureExtraction):
        return _GRT.RBMQuantizer_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.RBMQuantizer_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.RBMQuantizer_reset(self)

    def clear(self):
        return _GRT.RBMQuantizer_clear(self)

    def quantize(self, *args):
        return _GRT.RBMQuantizer_quantize(self, *args)

    def getQuantizerTrained(self):
        return _GRT.RBMQuantizer_getQuantizerTrained(self)

    def getNumClusters(self):
        return _GRT.RBMQuantizer_getNumClusters(self)

    def getQuantizedValue(self):
        return _GRT.RBMQuantizer_getQuantizedValue(self)

    def getQuantizationDistances(self):
        return _GRT.RBMQuantizer_getQuantizationDistances(self)

    def getBernoulliRBM(self):
        return _GRT.RBMQuantizer_getBernoulliRBM(self)

    def setNumClusters(self, numClusters):
        return _GRT.RBMQuantizer_setNumClusters(self, numClusters)

    def save(self, *args):
        return _GRT.RBMQuantizer_save(self, *args)

    def load(self, *args):
        return _GRT.RBMQuantizer_load(self, *args)

    def train(self, *args):
        return _GRT.RBMQuantizer_train(self, *args)

    def train_(self, *args):
        return _GRT.RBMQuantizer_train_(self, *args)

    def predict(self, *args):
        return _GRT.RBMQuantizer_predict(self, *args)

    def predict_(self, *args):
        return _GRT.RBMQuantizer_predict_(self, *args)

    @staticmethod
    def getId():
        return _GRT.RBMQuantizer_getId()

# Register RBMQuantizer in _GRT:
_GRT.RBMQuantizer_swigregister(RBMQuantizer)
class SOMQuantizer(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.SOMQuantizer_swiginit(self, _GRT.new_SOMQuantizer(*args))
    __swig_destroy__ = _GRT.delete_SOMQuantizer

    def deepCopyFrom(self, featureExtraction):
        return _GRT.SOMQuantizer_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.SOMQuantizer_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.SOMQuantizer_reset(self)

    def clear(self):
        return _GRT.SOMQuantizer_clear(self)

    def quantize(self, *args):
        return _GRT.SOMQuantizer_quantize(self, *args)

    def getQuantizerTrained(self):
        return _GRT.SOMQuantizer_getQuantizerTrained(self)

    def getNumClusters(self):
        return _GRT.SOMQuantizer_getNumClusters(self)

    def getQuantizedValue(self):
        return _GRT.SOMQuantizer_getQuantizedValue(self)

    def getQuantizationDistances(self):
        return _GRT.SOMQuantizer_getQuantizationDistances(self)

    def getSelfOrganizingMap(self):
        return _GRT.SOMQuantizer_getSelfOrganizingMap(self)

    def setNumClusters(self, numClusters):
        return _GRT.SOMQuantizer_setNumClusters(self, numClusters)

    def save(self, *args):
        return _GRT.SOMQuantizer_save(self, *args)

    def load(self, *args):
        return _GRT.SOMQuantizer_load(self, *args)

    def train(self, *args):
        return _GRT.SOMQuantizer_train(self, *args)

    def train_(self, *args):
        return _GRT.SOMQuantizer_train_(self, *args)

    def predict(self, *args):
        return _GRT.SOMQuantizer_predict(self, *args)

    def predict_(self, *args):
        return _GRT.SOMQuantizer_predict_(self, *args)

    @staticmethod
    def getId():
        return _GRT.SOMQuantizer_getId()

# Register SOMQuantizer in _GRT:
_GRT.SOMQuantizer_swigregister(SOMQuantizer)
class TimeDomainFeatures(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.TimeDomainFeatures_swiginit(self, _GRT.new_TimeDomainFeatures(*args))
    __swig_destroy__ = _GRT.delete_TimeDomainFeatures

    def deepCopyFrom(self, featureExtraction):
        return _GRT.TimeDomainFeatures_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.TimeDomainFeatures_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.TimeDomainFeatures_reset(self)

    def init(self, bufferLength, numFrames, numDimensions, offsetInput, useMean, useStdDev, useEuclideanNorm, useRMS):
        return _GRT.TimeDomainFeatures_init(self, bufferLength, numFrames, numDimensions, offsetInput, useMean, useStdDev, useEuclideanNorm, useRMS)

    def update(self, *args):
        return _GRT.TimeDomainFeatures_update(self, *args)

    def getBufferData(self):
        return _GRT.TimeDomainFeatures_getBufferData(self)

    def save(self, *args):
        return _GRT.TimeDomainFeatures_save(self, *args)

    def load(self, *args):
        return _GRT.TimeDomainFeatures_load(self, *args)

    def train(self, *args):
        return _GRT.TimeDomainFeatures_train(self, *args)

    def train_(self, *args):
        return _GRT.TimeDomainFeatures_train_(self, *args)

    def predict(self, *args):
        return _GRT.TimeDomainFeatures_predict(self, *args)

    def predict_(self, *args):
        return _GRT.TimeDomainFeatures_predict_(self, *args)

    @staticmethod
    def getId():
        return _GRT.TimeDomainFeatures_getId()

# Register TimeDomainFeatures in _GRT:
_GRT.TimeDomainFeatures_swigregister(TimeDomainFeatures)
class TimeseriesBuffer(FeatureExtraction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.TimeseriesBuffer_swiginit(self, _GRT.new_TimeseriesBuffer(*args))
    __swig_destroy__ = _GRT.delete_TimeseriesBuffer

    def deepCopyFrom(self, featureExtraction):
        return _GRT.TimeseriesBuffer_deepCopyFrom(self, featureExtraction)

    def computeFeatures(self, inputVector):
        return _GRT.TimeseriesBuffer_computeFeatures(self, inputVector)

    def reset(self):
        return _GRT.TimeseriesBuffer_reset(self)

    def init(self, bufferSize, numDimensions):
        return _GRT.TimeseriesBuffer_init(self, bufferSize, numDimensions)

    def update(self, *args):
        return _GRT.TimeseriesBuffer_update(self, *args)

    def setBufferSize(self, bufferSize):
        return _GRT.TimeseriesBuffer_setBufferSize(self, bufferSize)

    def getBufferSize(self):
        return _GRT.TimeseriesBuffer_getBufferSize(self)

    def getDataBuffer(self):
        return _GRT.TimeseriesBuffer_getDataBuffer(self)

    def save(self, *args):
        return _GRT.TimeseriesBuffer_save(self, *args)

    def load(self, *args):
        return _GRT.TimeseriesBuffer_load(self, *args)

    def train(self, *args):
        return _GRT.TimeseriesBuffer_train(self, *args)

    def train_(self, *args):
        return _GRT.TimeseriesBuffer_train_(self, *args)

    def predict(self, *args):
        return _GRT.TimeseriesBuffer_predict(self, *args)

    def predict_(self, *args):
        return _GRT.TimeseriesBuffer_predict_(self, *args)

    @staticmethod
    def getId():
        return _GRT.TimeseriesBuffer_getId()

# Register TimeseriesBuffer in _GRT:
_GRT.TimeseriesBuffer_swigregister(TimeseriesBuffer)
class ClassLabelChangeFilter(PostProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ClassLabelChangeFilter_swiginit(self, _GRT.new_ClassLabelChangeFilter(*args))
    __swig_destroy__ = _GRT.delete_ClassLabelChangeFilter

    def deepCopyFrom(self, postProcessing):
        return _GRT.ClassLabelChangeFilter_deepCopyFrom(self, postProcessing)

    def process(self, inputVector):
        return _GRT.ClassLabelChangeFilter_process(self, inputVector)

    def reset(self):
        return _GRT.ClassLabelChangeFilter_reset(self)

    def init(self):
        return _GRT.ClassLabelChangeFilter_init(self)

    def filter(self, predictedClassLabel):
        return _GRT.ClassLabelChangeFilter_filter(self, predictedClassLabel)

    def getFilteredClassLabel(self):
        return _GRT.ClassLabelChangeFilter_getFilteredClassLabel(self)

    def getChange(self):
        return _GRT.ClassLabelChangeFilter_getChange(self)

    @staticmethod
    def getId():
        return _GRT.ClassLabelChangeFilter_getId()

    def save(self, *args):
        return _GRT.ClassLabelChangeFilter_save(self, *args)

    def load(self, *args):
        return _GRT.ClassLabelChangeFilter_load(self, *args)

# Register ClassLabelChangeFilter in _GRT:
_GRT.ClassLabelChangeFilter_swigregister(ClassLabelChangeFilter)
class ClassLabelFilter(PostProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ClassLabelFilter_swiginit(self, _GRT.new_ClassLabelFilter(*args))
    __swig_destroy__ = _GRT.delete_ClassLabelFilter

    def deepCopyFrom(self, postProcessing):
        return _GRT.ClassLabelFilter_deepCopyFrom(self, postProcessing)

    def process(self, inputVector):
        return _GRT.ClassLabelFilter_process(self, inputVector)

    def reset(self):
        return _GRT.ClassLabelFilter_reset(self)

    def init(self, minimumCount, bufferSize):
        return _GRT.ClassLabelFilter_init(self, minimumCount, bufferSize)

    def filter(self, predictedClassLabel):
        return _GRT.ClassLabelFilter_filter(self, predictedClassLabel)

    def getFilteredClassLabel(self):
        return _GRT.ClassLabelFilter_getFilteredClassLabel(self)

    def setMinimumCount(self, minimumCount):
        return _GRT.ClassLabelFilter_setMinimumCount(self, minimumCount)

    def setBufferSize(self, bufferSize):
        return _GRT.ClassLabelFilter_setBufferSize(self, bufferSize)

    @staticmethod
    def getId():
        return _GRT.ClassLabelFilter_getId()

    def save(self, *args):
        return _GRT.ClassLabelFilter_save(self, *args)

    def load(self, *args):
        return _GRT.ClassLabelFilter_load(self, *args)

# Register ClassLabelFilter in _GRT:
_GRT.ClassLabelFilter_swigregister(ClassLabelFilter)
class ClassLabelAndTimer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.ClassLabelAndTimer_swiginit(self, _GRT.new_ClassLabelAndTimer(*args))

    def set(self, classLabel, timeoutDuration):
        return _GRT.ClassLabelAndTimer_set(self, classLabel, timeoutDuration)

    def getClassLabel(self):
        return _GRT.ClassLabelAndTimer_getClassLabel(self)

    def timerReached(self):
        return _GRT.ClassLabelAndTimer_timerReached(self)

    def getRemainingTime(self):
        return _GRT.ClassLabelAndTimer_getRemainingTime(self)
    __swig_destroy__ = _GRT.delete_ClassLabelAndTimer

# Register ClassLabelAndTimer in _GRT:
_GRT.ClassLabelAndTimer_swigregister(ClassLabelAndTimer)
class ClassLabelTimeoutFilter(PostProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ALL_CLASS_LABELS = _GRT.ClassLabelTimeoutFilter_ALL_CLASS_LABELS
    INDEPENDENT_CLASS_LABELS = _GRT.ClassLabelTimeoutFilter_INDEPENDENT_CLASS_LABELS

    def __init__(self, *args):
        _GRT.ClassLabelTimeoutFilter_swiginit(self, _GRT.new_ClassLabelTimeoutFilter(*args))
    __swig_destroy__ = _GRT.delete_ClassLabelTimeoutFilter

    def deepCopyFrom(self, postProcessing):
        return _GRT.ClassLabelTimeoutFilter_deepCopyFrom(self, postProcessing)

    def process(self, inputVector):
        return _GRT.ClassLabelTimeoutFilter_process(self, inputVector)

    def reset(self):
        return _GRT.ClassLabelTimeoutFilter_reset(self)

    def init(self, *args):
        return _GRT.ClassLabelTimeoutFilter_init(self, *args)

    def filter(self, predictedClassLabel):
        return _GRT.ClassLabelTimeoutFilter_filter(self, predictedClassLabel)

    def getFilteredClassLabel(self):
        return _GRT.ClassLabelTimeoutFilter_getFilteredClassLabel(self)

    def isTimeoutActive(self):
        return _GRT.ClassLabelTimeoutFilter_isTimeoutActive(self)

    def setTimeoutDuration(self, timeoutDuration):
        return _GRT.ClassLabelTimeoutFilter_setTimeoutDuration(self, timeoutDuration)

    def setFilterMode(self, filterMode):
        return _GRT.ClassLabelTimeoutFilter_setFilterMode(self, filterMode)

    @staticmethod
    def getId():
        return _GRT.ClassLabelTimeoutFilter_getId()

    def save(self, *args):
        return _GRT.ClassLabelTimeoutFilter_save(self, *args)

    def load(self, *args):
        return _GRT.ClassLabelTimeoutFilter_load(self, *args)

# Register ClassLabelTimeoutFilter in _GRT:
_GRT.ClassLabelTimeoutFilter_swigregister(ClassLabelTimeoutFilter)
class DeadZone(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.DeadZone_swiginit(self, _GRT.new_DeadZone(*args))
    __swig_destroy__ = _GRT.delete_DeadZone

    def deepCopyFrom(self, preProcessing):
        return _GRT.DeadZone_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.DeadZone_process(self, inputVector)

    def reset(self):
        return _GRT.DeadZone_reset(self)

    def init(self, lowerLimit, upperLimit, numDimensions):
        return _GRT.DeadZone_init(self, lowerLimit, upperLimit, numDimensions)

    def filter(self, *args):
        return _GRT.DeadZone_filter(self, *args)

    def getLowerLimit(self):
        return _GRT.DeadZone_getLowerLimit(self)

    def getUpperLimit(self):
        return _GRT.DeadZone_getUpperLimit(self)

    def setLowerLimit(self, lowerLimit):
        return _GRT.DeadZone_setLowerLimit(self, lowerLimit)

    def setUpperLimit(self, upperLimit):
        return _GRT.DeadZone_setUpperLimit(self, upperLimit)

    @staticmethod
    def getId():
        return _GRT.DeadZone_getId()

    def save(self, *args):
        return _GRT.DeadZone_save(self, *args)

    def load(self, *args):
        return _GRT.DeadZone_load(self, *args)

# Register DeadZone in _GRT:
_GRT.DeadZone_swigregister(DeadZone)
class Derivative(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FIRST_DERIVATIVE = _GRT.Derivative_FIRST_DERIVATIVE
    SECOND_DERIVATIVE = _GRT.Derivative_SECOND_DERIVATIVE

    def __init__(self, *args):
        _GRT.Derivative_swiginit(self, _GRT.new_Derivative(*args))
    __swig_destroy__ = _GRT.delete_Derivative

    def deepCopyFrom(self, preProcessing):
        return _GRT.Derivative_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.Derivative_process(self, inputVector)

    def reset(self):
        return _GRT.Derivative_reset(self)

    def init(self, derivativeOrder, delta, numDimensions, filterData, filterSize):
        return _GRT.Derivative_init(self, derivativeOrder, delta, numDimensions, filterData, filterSize)

    def computeDerivative(self, *args):
        return _GRT.Derivative_computeDerivative(self, *args)

    def setDerivativeOrder(self, derivativeOrder):
        return _GRT.Derivative_setDerivativeOrder(self, derivativeOrder)

    def setFilterSize(self, filterSize):
        return _GRT.Derivative_setFilterSize(self, filterSize)

    def setDelta(self, delta):
        return _GRT.Derivative_setDelta(self, delta)

    def enableFiltering(self, filterData):
        return _GRT.Derivative_enableFiltering(self, filterData)

    def getFilterSize(self):
        return _GRT.Derivative_getFilterSize(self)

    def getDerivative(self, *args):
        return _GRT.Derivative_getDerivative(self, *args)

    def getDerivatives(self, *args):
        return _GRT.Derivative_getDerivatives(self, *args)

    @staticmethod
    def getId():
        return _GRT.Derivative_getId()

    def save(self, *args):
        return _GRT.Derivative_save(self, *args)

    def load(self, *args):
        return _GRT.Derivative_load(self, *args)

    def train(self, *args):
        return _GRT.Derivative_train(self, *args)

    def train_(self, *args):
        return _GRT.Derivative_train_(self, *args)

    def predict(self, *args):
        return _GRT.Derivative_predict(self, *args)

    def predict_(self, *args):
        return _GRT.Derivative_predict_(self, *args)

# Register Derivative in _GRT:
_GRT.Derivative_swigregister(Derivative)
class DoubleMovingAverageFilter(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.DoubleMovingAverageFilter_swiginit(self, _GRT.new_DoubleMovingAverageFilter(*args))
    __swig_destroy__ = _GRT.delete_DoubleMovingAverageFilter

    def deepCopyFrom(self, preProcessing):
        return _GRT.DoubleMovingAverageFilter_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.DoubleMovingAverageFilter_process(self, inputVector)

    def reset(self):
        return _GRT.DoubleMovingAverageFilter_reset(self)

    def init(self, filterSize, numDimensions):
        return _GRT.DoubleMovingAverageFilter_init(self, filterSize, numDimensions)

    def filter(self, *args):
        return _GRT.DoubleMovingAverageFilter_filter(self, *args)

    def getFilteredData(self):
        return _GRT.DoubleMovingAverageFilter_getFilteredData(self)

    @staticmethod
    def getId():
        return _GRT.DoubleMovingAverageFilter_getId()

    def save(self, *args):
        return _GRT.DoubleMovingAverageFilter_save(self, *args)

    def load(self, *args):
        return _GRT.DoubleMovingAverageFilter_load(self, *args)

# Register DoubleMovingAverageFilter in _GRT:
_GRT.DoubleMovingAverageFilter_swigregister(DoubleMovingAverageFilter)
class FIRFilter(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LPF = _GRT.FIRFilter_LPF
    HPF = _GRT.FIRFilter_HPF
    BPF = _GRT.FIRFilter_BPF

    def __init__(self, *args):
        _GRT.FIRFilter_swiginit(self, _GRT.new_FIRFilter(*args))
    __swig_destroy__ = _GRT.delete_FIRFilter

    def deepCopyFrom(self, preProcessing):
        return _GRT.FIRFilter_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.FIRFilter_process(self, inputVector)

    def reset(self):
        return _GRT.FIRFilter_reset(self)

    def clear(self):
        return _GRT.FIRFilter_clear(self)

    def buildFilter(self):
        return _GRT.FIRFilter_buildFilter(self)

    def filter(self, *args):
        return _GRT.FIRFilter_filter(self, *args)

    def getFilterType(self):
        return _GRT.FIRFilter_getFilterType(self)

    def getNumTaps(self):
        return _GRT.FIRFilter_getNumTaps(self)

    def getSampleRate(self):
        return _GRT.FIRFilter_getSampleRate(self)

    def getCutoffFrequency(self):
        return _GRT.FIRFilter_getCutoffFrequency(self)

    def getCutoffFrequencyLower(self):
        return _GRT.FIRFilter_getCutoffFrequencyLower(self)

    def getCutoffFrequencyUpper(self):
        return _GRT.FIRFilter_getCutoffFrequencyUpper(self)

    def getGain(self):
        return _GRT.FIRFilter_getGain(self)

    def getInputBuffer(self):
        return _GRT.FIRFilter_getInputBuffer(self)

    def getFilterCoefficents(self):
        return _GRT.FIRFilter_getFilterCoefficents(self)

    def setFilterType(self, filterType):
        return _GRT.FIRFilter_setFilterType(self, filterType)

    def setNumTaps(self, numTaps):
        return _GRT.FIRFilter_setNumTaps(self, numTaps)

    def setSampleRate(self, sampleRate):
        return _GRT.FIRFilter_setSampleRate(self, sampleRate)

    def setCutoffFrequency(self, *args):
        return _GRT.FIRFilter_setCutoffFrequency(self, *args)

    def setGain(self, gain):
        return _GRT.FIRFilter_setGain(self, gain)

    @staticmethod
    def getId():
        return _GRT.FIRFilter_getId()

    def save(self, *args):
        return _GRT.FIRFilter_save(self, *args)

    def load(self, *args):
        return _GRT.FIRFilter_load(self, *args)

# Register FIRFilter in _GRT:
_GRT.FIRFilter_swigregister(FIRFilter)
class HighPassFilter(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.HighPassFilter_swiginit(self, _GRT.new_HighPassFilter(*args))
    __swig_destroy__ = _GRT.delete_HighPassFilter

    def deepCopyFrom(self, preProcessing):
        return _GRT.HighPassFilter_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.HighPassFilter_process(self, inputVector)

    def reset(self):
        return _GRT.HighPassFilter_reset(self)

    def init(self, filterFactor, gain, numDimensions):
        return _GRT.HighPassFilter_init(self, filterFactor, gain, numDimensions)

    def filter(self, *args):
        return _GRT.HighPassFilter_filter(self, *args)

    def setGain(self, gain):
        return _GRT.HighPassFilter_setGain(self, gain)

    def setFilterFactor(self, filterFactor):
        return _GRT.HighPassFilter_setFilterFactor(self, filterFactor)

    def setCutoffFrequency(self, cutoffFrequency, delta):
        return _GRT.HighPassFilter_setCutoffFrequency(self, cutoffFrequency, delta)

    def getFilterFactor(self):
        return _GRT.HighPassFilter_getFilterFactor(self)

    def getGain(self):
        return _GRT.HighPassFilter_getGain(self)

    def getFilteredValues(self):
        return _GRT.HighPassFilter_getFilteredValues(self)

    @staticmethod
    def getId():
        return _GRT.HighPassFilter_getId()

    def save(self, *args):
        return _GRT.HighPassFilter_save(self, *args)

    def load(self, *args):
        return _GRT.HighPassFilter_load(self, *args)

# Register HighPassFilter in _GRT:
_GRT.HighPassFilter_swigregister(HighPassFilter)
class LeakyIntegrator(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.LeakyIntegrator_swiginit(self, _GRT.new_LeakyIntegrator(*args))
    __swig_destroy__ = _GRT.delete_LeakyIntegrator

    def deepCopyFrom(self, preProcessing):
        return _GRT.LeakyIntegrator_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.LeakyIntegrator_process(self, inputVector)

    def reset(self):
        return _GRT.LeakyIntegrator_reset(self)

    def init(self, leakRate, numDimensions):
        return _GRT.LeakyIntegrator_init(self, leakRate, numDimensions)

    def update(self, *args):
        return _GRT.LeakyIntegrator_update(self, *args)

    def setLeakRate(self, leakRate):
        return _GRT.LeakyIntegrator_setLeakRate(self, leakRate)

    def getLeakRate(self):
        return _GRT.LeakyIntegrator_getLeakRate(self)

    @staticmethod
    def getId():
        return _GRT.LeakyIntegrator_getId()

    def save(self, *args):
        return _GRT.LeakyIntegrator_save(self, *args)

    def load(self, *args):
        return _GRT.LeakyIntegrator_load(self, *args)

# Register LeakyIntegrator in _GRT:
_GRT.LeakyIntegrator_swigregister(LeakyIntegrator)
class LowPassFilter(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.LowPassFilter_swiginit(self, _GRT.new_LowPassFilter(*args))
    __swig_destroy__ = _GRT.delete_LowPassFilter

    def deepCopyFrom(self, preProcessing):
        return _GRT.LowPassFilter_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.LowPassFilter_process(self, inputVector)

    def reset(self):
        return _GRT.LowPassFilter_reset(self)

    def init(self, filterFactor, gain, numDimensions):
        return _GRT.LowPassFilter_init(self, filterFactor, gain, numDimensions)

    def filter(self, *args):
        return _GRT.LowPassFilter_filter(self, *args)

    def setGain(self, gain):
        return _GRT.LowPassFilter_setGain(self, gain)

    def setFilterFactor(self, filterFactor):
        return _GRT.LowPassFilter_setFilterFactor(self, filterFactor)

    def setCutoffFrequency(self, cutoffFrequency, delta):
        return _GRT.LowPassFilter_setCutoffFrequency(self, cutoffFrequency, delta)

    def getFilterFactor(self):
        return _GRT.LowPassFilter_getFilterFactor(self)

    def getGain(self):
        return _GRT.LowPassFilter_getGain(self)

    def getFilteredValues(self):
        return _GRT.LowPassFilter_getFilteredValues(self)

    @staticmethod
    def getId():
        return _GRT.LowPassFilter_getId()

    def save(self, *args):
        return _GRT.LowPassFilter_save(self, *args)

    def load(self, *args):
        return _GRT.LowPassFilter_load(self, *args)

# Register LowPassFilter in _GRT:
_GRT.LowPassFilter_swigregister(LowPassFilter)
class MedianFilter(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.MedianFilter_swiginit(self, _GRT.new_MedianFilter(*args))
    __swig_destroy__ = _GRT.delete_MedianFilter

    def deepCopyFrom(self, preProcessing):
        return _GRT.MedianFilter_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.MedianFilter_process(self, inputVector)

    def reset(self):
        return _GRT.MedianFilter_reset(self)

    def init(self, filterSize, numDimensions):
        return _GRT.MedianFilter_init(self, filterSize, numDimensions)

    def filter(self, *args):
        return _GRT.MedianFilter_filter(self, *args)

    def getFilterSize(self):
        return _GRT.MedianFilter_getFilterSize(self)

    def getFilteredData(self):
        return _GRT.MedianFilter_getFilteredData(self)

    def getDataBuffer(self):
        return _GRT.MedianFilter_getDataBuffer(self)

    @staticmethod
    def getId():
        return _GRT.MedianFilter_getId()

    def save(self, *args):
        return _GRT.MedianFilter_save(self, *args)

    def load(self, *args):
        return _GRT.MedianFilter_load(self, *args)

# Register MedianFilter in _GRT:
_GRT.MedianFilter_swigregister(MedianFilter)
class MovingAverageFilter(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.MovingAverageFilter_swiginit(self, _GRT.new_MovingAverageFilter(*args))
    __swig_destroy__ = _GRT.delete_MovingAverageFilter

    def deepCopyFrom(self, preProcessing):
        return _GRT.MovingAverageFilter_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.MovingAverageFilter_process(self, inputVector)

    def reset(self):
        return _GRT.MovingAverageFilter_reset(self)

    def init(self, filterSize, numDimensions):
        return _GRT.MovingAverageFilter_init(self, filterSize, numDimensions)

    def filter(self, *args):
        return _GRT.MovingAverageFilter_filter(self, *args)

    def getFilterSize(self):
        return _GRT.MovingAverageFilter_getFilterSize(self)

    def getFilteredData(self):
        return _GRT.MovingAverageFilter_getFilteredData(self)

    @staticmethod
    def getId():
        return _GRT.MovingAverageFilter_getId()

    def save(self, *args):
        return _GRT.MovingAverageFilter_save(self, *args)

    def load(self, *args):
        return _GRT.MovingAverageFilter_load(self, *args)

# Register MovingAverageFilter in _GRT:
_GRT.MovingAverageFilter_swigregister(MovingAverageFilter)
class RMSFilter(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.RMSFilter_swiginit(self, _GRT.new_RMSFilter(*args))
    __swig_destroy__ = _GRT.delete_RMSFilter

    def deepCopyFrom(self, preProcessing):
        return _GRT.RMSFilter_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.RMSFilter_process(self, inputVector)

    def reset(self):
        return _GRT.RMSFilter_reset(self)

    def init(self, filterSize, numDimensions):
        return _GRT.RMSFilter_init(self, filterSize, numDimensions)

    def filter(self, *args):
        return _GRT.RMSFilter_filter(self, *args)

    def getFilterSize(self):
        return _GRT.RMSFilter_getFilterSize(self)

    def getFilteredData(self):
        return _GRT.RMSFilter_getFilteredData(self)

    @staticmethod
    def getId():
        return _GRT.RMSFilter_getId()

    def save(self, *args):
        return _GRT.RMSFilter_save(self, *args)

    def load(self, *args):
        return _GRT.RMSFilter_load(self, *args)

# Register RMSFilter in _GRT:
_GRT.RMSFilter_swigregister(RMSFilter)
class SavitzkyGolayFilter(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.SavitzkyGolayFilter_swiginit(self, _GRT.new_SavitzkyGolayFilter(*args))
    __swig_destroy__ = _GRT.delete_SavitzkyGolayFilter

    def deepCopyFrom(self, preProcessing):
        return _GRT.SavitzkyGolayFilter_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.SavitzkyGolayFilter_process(self, inputVector)

    def reset(self):
        return _GRT.SavitzkyGolayFilter_reset(self)

    def init(self, numLeftHandPoints, numRightHandPoints, derivativeOrder, smoothingPolynomialOrder, numDimensions):
        return _GRT.SavitzkyGolayFilter_init(self, numLeftHandPoints, numRightHandPoints, derivativeOrder, smoothingPolynomialOrder, numDimensions)

    def filter(self, *args):
        return _GRT.SavitzkyGolayFilter_filter(self, *args)

    def getFilteredData(self):
        return _GRT.SavitzkyGolayFilter_getFilteredData(self)

    @staticmethod
    def getId():
        return _GRT.SavitzkyGolayFilter_getId()

    def save(self, *args):
        return _GRT.SavitzkyGolayFilter_save(self, *args)

    def load(self, *args):
        return _GRT.SavitzkyGolayFilter_load(self, *args)

# Register SavitzkyGolayFilter in _GRT:
_GRT.SavitzkyGolayFilter_swigregister(SavitzkyGolayFilter)
class WeightedAverageFilter(PreProcessing):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.WeightedAverageFilter_swiginit(self, _GRT.new_WeightedAverageFilter(*args))
    __swig_destroy__ = _GRT.delete_WeightedAverageFilter

    def deepCopyFrom(self, preProcessing):
        return _GRT.WeightedAverageFilter_deepCopyFrom(self, preProcessing)

    def process(self, inputVector):
        return _GRT.WeightedAverageFilter_process(self, inputVector)

    def reset(self):
        return _GRT.WeightedAverageFilter_reset(self)

    def init(self, filterSize, numDimensions):
        return _GRT.WeightedAverageFilter_init(self, filterSize, numDimensions)

    def filter(self, *args):
        return _GRT.WeightedAverageFilter_filter(self, *args)

    def getFilterSize(self):
        return _GRT.WeightedAverageFilter_getFilterSize(self)

    def getFilteredData(self):
        return _GRT.WeightedAverageFilter_getFilteredData(self)

    @staticmethod
    def getId():
        return _GRT.WeightedAverageFilter_getId()

    def save(self, *args):
        return _GRT.WeightedAverageFilter_save(self, *args)

    def load(self, *args):
        return _GRT.WeightedAverageFilter_load(self, *args)

# Register WeightedAverageFilter in _GRT:
_GRT.WeightedAverageFilter_swigregister(WeightedAverageFilter)
class RegressionSample(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.RegressionSample_swiginit(self, _GRT.new_RegressionSample(*args))
    __swig_destroy__ = _GRT.delete_RegressionSample

    @staticmethod
    def sortByInputVectorAscending(a, b):
        return _GRT.RegressionSample_sortByInputVectorAscending(a, b)

    @staticmethod
    def sortByInputVectorDescending(a, b):
        return _GRT.RegressionSample_sortByInputVectorDescending(a, b)

    def clear(self):
        return _GRT.RegressionSample_clear(self)

    def set(self, inputVector, targetVector):
        return _GRT.RegressionSample_set(self, inputVector, targetVector)

    def getNumInputDimensions(self):
        return _GRT.RegressionSample_getNumInputDimensions(self)

    def getNumTargetDimensions(self):
        return _GRT.RegressionSample_getNumTargetDimensions(self)

    def getInputVectorValue(self, index):
        return _GRT.RegressionSample_getInputVectorValue(self, index)

    def getTargetVectorValue(self, index):
        return _GRT.RegressionSample_getTargetVectorValue(self, index)

    def getInputVector(self):
        return _GRT.RegressionSample_getInputVector(self)

    def getTargetVector(self):
        return _GRT.RegressionSample_getTargetVector(self)

# Register RegressionSample in _GRT:
_GRT.RegressionSample_swigregister(RegressionSample)
class RegressionData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.RegressionData_swiginit(self, _GRT.new_RegressionData(*args))
    __swig_destroy__ = _GRT.delete_RegressionData

    def clear(self):
        return _GRT.RegressionData_clear(self)

    def setInputAndTargetDimensions(self, numInputDimensions, numTargetDimensions):
        return _GRT.RegressionData_setInputAndTargetDimensions(self, numInputDimensions, numTargetDimensions)

    def setDatasetName(self, datasetName):
        return _GRT.RegressionData_setDatasetName(self, datasetName)

    def setInfoText(self, infoText):
        return _GRT.RegressionData_setInfoText(self, infoText)

    def addSample(self, inputVector, targetVector):
        return _GRT.RegressionData_addSample(self, inputVector, targetVector)

    def removeLastSample(self):
        return _GRT.RegressionData_removeLastSample(self)

    def reserve(self, N):
        return _GRT.RegressionData_reserve(self, N)

    def setExternalRanges(self, externalInputRanges, externalTargetRanges, useExternalRanges):
        return _GRT.RegressionData_setExternalRanges(self, externalInputRanges, externalTargetRanges, useExternalRanges)

    def enableExternalRangeScaling(self, useExternalRanges):
        return _GRT.RegressionData_enableExternalRangeScaling(self, useExternalRanges)

    def scale(self, *args):
        return _GRT.RegressionData_scale(self, *args)

    def save(self, filename):
        return _GRT.RegressionData_save(self, filename)

    def load(self, filename):
        return _GRT.RegressionData_load(self, filename)

    def saveDatasetToFile(self, filename):
        return _GRT.RegressionData_saveDatasetToFile(self, filename)

    def loadDatasetFromFile(self, filename):
        return _GRT.RegressionData_loadDatasetFromFile(self, filename)

    def saveDatasetToCSVFile(self, filename):
        return _GRT.RegressionData_saveDatasetToCSVFile(self, filename)

    def loadDatasetFromCSVFile(self, filename, numInputDimensions, numTargetDimensions):
        return _GRT.RegressionData_loadDatasetFromCSVFile(self, filename, numInputDimensions, numTargetDimensions)

    def printStats(self):
        return _GRT.RegressionData_printStats(self)

    def merge(self, regressionData):
        return _GRT.RegressionData_merge(self, regressionData)

    def partition(self, trainingSizePercentage):
        return _GRT.RegressionData_partition(self, trainingSizePercentage)

    def split(self, trainingSizePercentage):
        return _GRT.RegressionData_split(self, trainingSizePercentage)

    def spiltDataIntoKFolds(self, K):
        return _GRT.RegressionData_spiltDataIntoKFolds(self, K)

    def getTrainingFoldData(self, foldIndex):
        return _GRT.RegressionData_getTrainingFoldData(self, foldIndex)

    def getTestFoldData(self, foldIndex):
        return _GRT.RegressionData_getTestFoldData(self, foldIndex)

    def removeDuplicateSamples(self):
        return _GRT.RegressionData_removeDuplicateSamples(self)

    def getDatasetName(self):
        return _GRT.RegressionData_getDatasetName(self)

    def getInfoText(self):
        return _GRT.RegressionData_getInfoText(self)

    def getStatsAsString(self):
        return _GRT.RegressionData_getStatsAsString(self)

    def getNumInputDimensions(self):
        return _GRT.RegressionData_getNumInputDimensions(self)

    def getNumTargetDimensions(self):
        return _GRT.RegressionData_getNumTargetDimensions(self)

    def getNumSamples(self):
        return _GRT.RegressionData_getNumSamples(self)

    def getInputRanges(self):
        return _GRT.RegressionData_getInputRanges(self)

    def getTargetRanges(self):
        return _GRT.RegressionData_getTargetRanges(self)

    def getData(self):
        return _GRT.RegressionData_getData(self)

    def get(self, i):
        return _GRT.RegressionData_get(self, i)

# Register RegressionData in _GRT:
_GRT.RegressionData_swigregister(RegressionData)
class Neuron(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LINEAR = _GRT.Neuron_LINEAR
    SIGMOID = _GRT.Neuron_SIGMOID
    BIPOLAR_SIGMOID = _GRT.Neuron_BIPOLAR_SIGMOID
    TANH = _GRT.Neuron_TANH
    NUMBER_OF_ACTIVATION_FUNCTIONS = _GRT.Neuron_NUMBER_OF_ACTIVATION_FUNCTIONS

    def __init__(self, *args):
        _GRT.Neuron_swiginit(self, _GRT.new_Neuron(*args))
    __swig_destroy__ = _GRT.delete_Neuron

    def init(self, numInputs, actvationFunction, random, minWeightRange=-0.1, maxWeightRange=0.1, minBiasRange=-0.1, maxBiasRange=0.1):
        return _GRT.Neuron_init(self, numInputs, actvationFunction, random, minWeightRange, maxWeightRange, minBiasRange, maxBiasRange)

    def clear(self):
        return _GRT.Neuron_clear(self)

    def fire(self, x):
        return _GRT.Neuron_fire(self, x)

    def getDerivative(self, y):
        return _GRT.Neuron_getDerivative(self, y)

    @staticmethod
    def validateActivationFunction(activationFunction):
        return _GRT.Neuron_validateActivationFunction(activationFunction)
    gamma = property(_GRT.Neuron_gamma_get, _GRT.Neuron_gamma_set)
    bias = property(_GRT.Neuron_bias_get, _GRT.Neuron_bias_set)
    previousBiasUpdate = property(_GRT.Neuron_previousBiasUpdate_get, _GRT.Neuron_previousBiasUpdate_set)
    weights = property(_GRT.Neuron_weights_get, _GRT.Neuron_weights_set)
    previousUpdate = property(_GRT.Neuron_previousUpdate_get, _GRT.Neuron_previousUpdate_set)
    numInputs = property(_GRT.Neuron_numInputs_get, _GRT.Neuron_numInputs_set)
    activationFunction = property(_GRT.Neuron_activationFunction_get, _GRT.Neuron_activationFunction_set)

# Register Neuron in _GRT:
_GRT.Neuron_swigregister(Neuron)
class MLP(Regressifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ONLINE_GRADIENT_DESCENT = _GRT.MLP_ONLINE_GRADIENT_DESCENT

    def __init__(self, *args):
        _GRT.MLP_swiginit(self, _GRT.new_MLP(*args))
    __swig_destroy__ = _GRT.delete_MLP

    def deepCopyFrom(self, regressifier):
        return _GRT.MLP_deepCopyFrom(self, regressifier)

    def clear(self):
        return _GRT.MLP_clear(self)

    def _print(self):
        return _GRT.MLP__print(self)

    def getNumClasses(self):
        return _GRT.MLP_getNumClasses(self)

    def init(self, *args):
        return _GRT.MLP_init(self, *args)

    def printNetwork(self):
        return _GRT.MLP_printNetwork(self)

    def checkForNAN(self):
        return _GRT.MLP_checkForNAN(self)

    def activationFunctionToString(self, activationFunction):
        return _GRT.MLP_activationFunctionToString(self, activationFunction)

    def activationFunctionFromString(self, activationName):
        return _GRT.MLP_activationFunctionFromString(self, activationName)

    def validateActivationFunction(self, avactivationFunction):
        return _GRT.MLP_validateActivationFunction(self, avactivationFunction)

    def getNumInputNeurons(self):
        return _GRT.MLP_getNumInputNeurons(self)

    def getNumHiddenNeurons(self):
        return _GRT.MLP_getNumHiddenNeurons(self)

    def getNumOutputNeurons(self):
        return _GRT.MLP_getNumOutputNeurons(self)

    def getNumRandomTrainingIterations(self):
        return _GRT.MLP_getNumRandomTrainingIterations(self)

    def getInputLayerActivationFunction(self):
        return _GRT.MLP_getInputLayerActivationFunction(self)

    def getHiddenLayerActivationFunction(self):
        return _GRT.MLP_getHiddenLayerActivationFunction(self)

    def getOutputLayerActivationFunction(self):
        return _GRT.MLP_getOutputLayerActivationFunction(self)

    def getTrainingRate(self):
        return _GRT.MLP_getTrainingRate(self)

    def getMomentum(self):
        return _GRT.MLP_getMomentum(self)

    def getGamma(self):
        return _GRT.MLP_getGamma(self)

    def getTrainingError(self):
        return _GRT.MLP_getTrainingError(self)

    def getClassificationModeActive(self):
        return _GRT.MLP_getClassificationModeActive(self)

    def getRegressionModeActive(self):
        return _GRT.MLP_getRegressionModeActive(self)

    def getInputLayer(self):
        return _GRT.MLP_getInputLayer(self)

    def getHiddenLayer(self):
        return _GRT.MLP_getHiddenLayer(self)

    def getOutputLayer(self):
        return _GRT.MLP_getOutputLayer(self)

    def getTrainingLog(self):
        return _GRT.MLP_getTrainingLog(self)

    def getNullRejectionEnabled(self):
        return _GRT.MLP_getNullRejectionEnabled(self)

    def getNullRejectionCoeff(self):
        return _GRT.MLP_getNullRejectionCoeff(self)

    def getNullRejectionThreshold(self):
        return _GRT.MLP_getNullRejectionThreshold(self)

    def getMaximumLikelihood(self):
        return _GRT.MLP_getMaximumLikelihood(self)

    def getClassLikelihoods(self):
        return _GRT.MLP_getClassLikelihoods(self)

    def getClassDistances(self):
        return _GRT.MLP_getClassDistances(self)

    def getPredictedClassLabel(self):
        return _GRT.MLP_getPredictedClassLabel(self)

    def setInputLayerActivationFunction(self, activationFunction):
        return _GRT.MLP_setInputLayerActivationFunction(self, activationFunction)

    def setHiddenLayerActivationFunction(self, activationFunction):
        return _GRT.MLP_setHiddenLayerActivationFunction(self, activationFunction)

    def setOutputLayerActivationFunction(self, activationFunction):
        return _GRT.MLP_setOutputLayerActivationFunction(self, activationFunction)

    def setTrainingRate(self, trainingRate):
        return _GRT.MLP_setTrainingRate(self, trainingRate)

    def setMomentum(self, momentum):
        return _GRT.MLP_setMomentum(self, momentum)

    def setGamma(self, gamma):
        return _GRT.MLP_setGamma(self, gamma)

    def setNumRandomTrainingIterations(self, numRandomTrainingIterations):
        return _GRT.MLP_setNumRandomTrainingIterations(self, numRandomTrainingIterations)

    def setNullRejection(self, useNullRejection):
        return _GRT.MLP_setNullRejection(self, useNullRejection)

    def setNullRejectionCoeff(self, nullRejectionCoeff):
        return _GRT.MLP_setNullRejectionCoeff(self, nullRejectionCoeff)

    @staticmethod
    def getId():
        return _GRT.MLP_getId()

    def save(self, *args):
        return _GRT.MLP_save(self, *args)

    def load(self, *args):
        return _GRT.MLP_load(self, *args)

    def train(self, *args):
        return _GRT.MLP_train(self, *args)

    def train_(self, *args):
        return _GRT.MLP_train_(self, *args)

    def predict(self, *args):
        return _GRT.MLP_predict(self, *args)

    def predict_(self, *args):
        return _GRT.MLP_predict_(self, *args)

# Register MLP in _GRT:
_GRT.MLP_swigregister(MLP)
class LinearRegression(Regressifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.LinearRegression_swiginit(self, _GRT.new_LinearRegression(*args))
    __swig_destroy__ = _GRT.delete_LinearRegression

    def deepCopyFrom(self, regressifier):
        return _GRT.LinearRegression_deepCopyFrom(self, regressifier)

    def train_(self, trainingData):
        return _GRT.LinearRegression_train_(self, trainingData)

    def predict_(self, inputVector):
        return _GRT.LinearRegression_predict_(self, inputVector)

    def getMaxNumIterations(self):
        return _GRT.LinearRegression_getMaxNumIterations(self)

    def setMaxNumIterations(self, maxNumIterations):
        return _GRT.LinearRegression_setMaxNumIterations(self, maxNumIterations)

    @staticmethod
    def getId():
        return _GRT.LinearRegression_getId()

    def save(self, *args):
        return _GRT.LinearRegression_save(self, *args)

    def load(self, *args):
        return _GRT.LinearRegression_load(self, *args)

# Register LinearRegression in _GRT:
_GRT.LinearRegression_swigregister(LinearRegression)
class LogisticRegression(Regressifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.LogisticRegression_swiginit(self, _GRT.new_LogisticRegression(*args))
    __swig_destroy__ = _GRT.delete_LogisticRegression

    def deepCopyFrom(self, regressifier):
        return _GRT.LogisticRegression_deepCopyFrom(self, regressifier)

    def train_(self, trainingData):
        return _GRT.LogisticRegression_train_(self, trainingData)

    def predict_(self, inputVector):
        return _GRT.LogisticRegression_predict_(self, inputVector)

    def getMaxNumIterations(self):
        return _GRT.LogisticRegression_getMaxNumIterations(self)

    def setMaxNumIterations(self, maxNumIterations):
        return _GRT.LogisticRegression_setMaxNumIterations(self, maxNumIterations)

    @staticmethod
    def getId():
        return _GRT.LogisticRegression_getId()

    def save(self, *args):
        return _GRT.LogisticRegression_save(self, *args)

    def load(self, *args):
        return _GRT.LogisticRegression_load(self, *args)

# Register LogisticRegression in _GRT:
_GRT.LogisticRegression_swigregister(LogisticRegression)
class MultidimensionalRegression(Regressifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.MultidimensionalRegression_swiginit(self, _GRT.new_MultidimensionalRegression(*args))
    __swig_destroy__ = _GRT.delete_MultidimensionalRegression

    def deepCopyFrom(self, regressifier):
        return _GRT.MultidimensionalRegression_deepCopyFrom(self, regressifier)

    def train_(self, trainingData):
        return _GRT.MultidimensionalRegression_train_(self, trainingData)

    def predict_(self, inputVector):
        return _GRT.MultidimensionalRegression_predict_(self, inputVector)

    def getIsRegressionModuleSet(self):
        return _GRT.MultidimensionalRegression_getIsRegressionModuleSet(self)

    def getRegressifier(self):
        return _GRT.MultidimensionalRegression_getRegressifier(self)

    def setRegressionModule(self, regressifier):
        return _GRT.MultidimensionalRegression_setRegressionModule(self, regressifier)

    @staticmethod
    def getId():
        return _GRT.MultidimensionalRegression_getId()

    def save(self, *args):
        return _GRT.MultidimensionalRegression_save(self, *args)

    def load(self, *args):
        return _GRT.MultidimensionalRegression_load(self, *args)

# Register MultidimensionalRegression in _GRT:
_GRT.MultidimensionalRegression_swigregister(MultidimensionalRegression)
class RegressionTreeNode(Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GRT.RegressionTreeNode_swiginit(self, _GRT.new_RegressionTreeNode())
    __swig_destroy__ = _GRT.delete_RegressionTreeNode

    def predict_(self, *args):
        return _GRT.RegressionTreeNode_predict_(self, *args)

    def clear(self):
        return _GRT.RegressionTreeNode_clear(self)

    def _print(self):
        return _GRT.RegressionTreeNode__print(self)

    def deepCopy(self):
        return _GRT.RegressionTreeNode_deepCopy(self)

    def deepCopyTree(self):
        return _GRT.RegressionTreeNode_deepCopyTree(self)

    def set(self, nodeSize, featureIndex, threshold, regressionData):
        return _GRT.RegressionTreeNode_set(self, nodeSize, featureIndex, threshold, regressionData)

# Register RegressionTreeNode in _GRT:
_GRT.RegressionTreeNode_swigregister(RegressionTreeNode)
class RegressionTree(Regressifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GRT.RegressionTree_swiginit(self, _GRT.new_RegressionTree(*args))
    __swig_destroy__ = _GRT.delete_RegressionTree

    def deepCopyFrom(self, regressifier):
        return _GRT.RegressionTree_deepCopyFrom(self, regressifier)

    def clear(self):
        return _GRT.RegressionTree_clear(self)

    def _print(self):
        return _GRT.RegressionTree__print(self)

    def deepCopyTree(self):
        return _GRT.RegressionTree_deepCopyTree(self)

    def getTree(self):
        return _GRT.RegressionTree_getTree(self)

    def getMinRMSErrorPerNode(self):
        return _GRT.RegressionTree_getMinRMSErrorPerNode(self)

    def getTrainingMode(self):
        return _GRT.RegressionTree_getTrainingMode(self)

    def getNumSplittingSteps(self):
        return _GRT.RegressionTree_getNumSplittingSteps(self)

    def getMinNumSamplesPerNode(self):
        return _GRT.RegressionTree_getMinNumSamplesPerNode(self)

    def getMaxDepth(self):
        return _GRT.RegressionTree_getMaxDepth(self)

    def getPredictedNodeID(self):
        return _GRT.RegressionTree_getPredictedNodeID(self)

    def getRemoveFeaturesAtEachSpilt(self):
        return _GRT.RegressionTree_getRemoveFeaturesAtEachSpilt(self)

    def setTrainingMode(self, trainingMode):
        return _GRT.RegressionTree_setTrainingMode(self, trainingMode)

    def setNumSplittingSteps(self, numSplittingSteps):
        return _GRT.RegressionTree_setNumSplittingSteps(self, numSplittingSteps)

    def setMinNumSamplesPerNode(self, minNumSamplesPerNode):
        return _GRT.RegressionTree_setMinNumSamplesPerNode(self, minNumSamplesPerNode)

    def setMaxDepth(self, maxDepth):
        return _GRT.RegressionTree_setMaxDepth(self, maxDepth)

    def setRemoveFeaturesAtEachSpilt(self, removeFeaturesAtEachSpilt):
        return _GRT.RegressionTree_setRemoveFeaturesAtEachSpilt(self, removeFeaturesAtEachSpilt)

    def setMinRMSErrorPerNode(self, minRMSErrorPerNode):
        return _GRT.RegressionTree_setMinRMSErrorPerNode(self, minRMSErrorPerNode)

    @staticmethod
    def getId():
        return _GRT.RegressionTree_getId()

    def save(self, *args):
        return _GRT.RegressionTree_save(self, *args)

    def load(self, *args):
        return _GRT.RegressionTree_load(self, *args)

    def train_(self, *args):
        return _GRT.RegressionTree_train_(self, *args)

    def predict_(self, *args):
        return _GRT.RegressionTree_predict_(self, *args)

# Register RegressionTree in _GRT:
_GRT.RegressionTree_swigregister(RegressionTree)

