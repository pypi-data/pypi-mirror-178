# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from farm_ng.oak import oak_pb2 as farm__ng_dot_oak_dot_oak__pb2


class OakServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.cameraControl = channel.unary_unary(
                '/farm_ng.oak.proto.OakService/cameraControl',
                request_serializer=farm__ng_dot_oak_dot_oak__pb2.CameraControlRequest.SerializeToString,
                response_deserializer=farm__ng_dot_oak_dot_oak__pb2.CameraControlReply.FromString,
                )
        self.streamFrames = channel.unary_stream(
                '/farm_ng.oak.proto.OakService/streamFrames',
                request_serializer=farm__ng_dot_oak_dot_oak__pb2.StreamFramesRequest.SerializeToString,
                response_deserializer=farm__ng_dot_oak_dot_oak__pb2.StreamFramesReply.FromString,
                )
        self.getServiceState = channel.unary_unary(
                '/farm_ng.oak.proto.OakService/getServiceState',
                request_serializer=farm__ng_dot_oak_dot_oak__pb2.GetServiceStateRequest.SerializeToString,
                response_deserializer=farm__ng_dot_oak_dot_oak__pb2.GetServiceStateResult.FromString,
                )
        self.startService = channel.unary_unary(
                '/farm_ng.oak.proto.OakService/startService',
                request_serializer=farm__ng_dot_oak_dot_oak__pb2.StartServiceRequest.SerializeToString,
                response_deserializer=farm__ng_dot_oak_dot_oak__pb2.StartServiceResult.FromString,
                )
        self.stopService = channel.unary_unary(
                '/farm_ng.oak.proto.OakService/stopService',
                request_serializer=farm__ng_dot_oak_dot_oak__pb2.StopServiceRequest.SerializeToString,
                response_deserializer=farm__ng_dot_oak_dot_oak__pb2.StopServiceResult.FromString,
                )
        self.pauseService = channel.unary_unary(
                '/farm_ng.oak.proto.OakService/pauseService',
                request_serializer=farm__ng_dot_oak_dot_oak__pb2.PauseServiceRequest.SerializeToString,
                response_deserializer=farm__ng_dot_oak_dot_oak__pb2.PauseServiceResult.FromString,
                )
        self.getCalibration = channel.unary_unary(
                '/farm_ng.oak.proto.OakService/getCalibration',
                request_serializer=farm__ng_dot_oak_dot_oak__pb2.GetCalibrationRequest.SerializeToString,
                response_deserializer=farm__ng_dot_oak_dot_oak__pb2.GetCalibrationResult.FromString,
                )


class OakServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def cameraControl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamFrames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getServiceState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pauseService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCalibration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OakServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'cameraControl': grpc.unary_unary_rpc_method_handler(
                    servicer.cameraControl,
                    request_deserializer=farm__ng_dot_oak_dot_oak__pb2.CameraControlRequest.FromString,
                    response_serializer=farm__ng_dot_oak_dot_oak__pb2.CameraControlReply.SerializeToString,
            ),
            'streamFrames': grpc.unary_stream_rpc_method_handler(
                    servicer.streamFrames,
                    request_deserializer=farm__ng_dot_oak_dot_oak__pb2.StreamFramesRequest.FromString,
                    response_serializer=farm__ng_dot_oak_dot_oak__pb2.StreamFramesReply.SerializeToString,
            ),
            'getServiceState': grpc.unary_unary_rpc_method_handler(
                    servicer.getServiceState,
                    request_deserializer=farm__ng_dot_oak_dot_oak__pb2.GetServiceStateRequest.FromString,
                    response_serializer=farm__ng_dot_oak_dot_oak__pb2.GetServiceStateResult.SerializeToString,
            ),
            'startService': grpc.unary_unary_rpc_method_handler(
                    servicer.startService,
                    request_deserializer=farm__ng_dot_oak_dot_oak__pb2.StartServiceRequest.FromString,
                    response_serializer=farm__ng_dot_oak_dot_oak__pb2.StartServiceResult.SerializeToString,
            ),
            'stopService': grpc.unary_unary_rpc_method_handler(
                    servicer.stopService,
                    request_deserializer=farm__ng_dot_oak_dot_oak__pb2.StopServiceRequest.FromString,
                    response_serializer=farm__ng_dot_oak_dot_oak__pb2.StopServiceResult.SerializeToString,
            ),
            'pauseService': grpc.unary_unary_rpc_method_handler(
                    servicer.pauseService,
                    request_deserializer=farm__ng_dot_oak_dot_oak__pb2.PauseServiceRequest.FromString,
                    response_serializer=farm__ng_dot_oak_dot_oak__pb2.PauseServiceResult.SerializeToString,
            ),
            'getCalibration': grpc.unary_unary_rpc_method_handler(
                    servicer.getCalibration,
                    request_deserializer=farm__ng_dot_oak_dot_oak__pb2.GetCalibrationRequest.FromString,
                    response_serializer=farm__ng_dot_oak_dot_oak__pb2.GetCalibrationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'farm_ng.oak.proto.OakService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OakService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def cameraControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/farm_ng.oak.proto.OakService/cameraControl',
            farm__ng_dot_oak_dot_oak__pb2.CameraControlRequest.SerializeToString,
            farm__ng_dot_oak_dot_oak__pb2.CameraControlReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/farm_ng.oak.proto.OakService/streamFrames',
            farm__ng_dot_oak_dot_oak__pb2.StreamFramesRequest.SerializeToString,
            farm__ng_dot_oak_dot_oak__pb2.StreamFramesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getServiceState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/farm_ng.oak.proto.OakService/getServiceState',
            farm__ng_dot_oak_dot_oak__pb2.GetServiceStateRequest.SerializeToString,
            farm__ng_dot_oak_dot_oak__pb2.GetServiceStateResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/farm_ng.oak.proto.OakService/startService',
            farm__ng_dot_oak_dot_oak__pb2.StartServiceRequest.SerializeToString,
            farm__ng_dot_oak_dot_oak__pb2.StartServiceResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/farm_ng.oak.proto.OakService/stopService',
            farm__ng_dot_oak_dot_oak__pb2.StopServiceRequest.SerializeToString,
            farm__ng_dot_oak_dot_oak__pb2.StopServiceResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pauseService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/farm_ng.oak.proto.OakService/pauseService',
            farm__ng_dot_oak_dot_oak__pb2.PauseServiceRequest.SerializeToString,
            farm__ng_dot_oak_dot_oak__pb2.PauseServiceResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCalibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/farm_ng.oak.proto.OakService/getCalibration',
            farm__ng_dot_oak_dot_oak__pb2.GetCalibrationRequest.SerializeToString,
            farm__ng_dot_oak_dot_oak__pb2.GetCalibrationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
