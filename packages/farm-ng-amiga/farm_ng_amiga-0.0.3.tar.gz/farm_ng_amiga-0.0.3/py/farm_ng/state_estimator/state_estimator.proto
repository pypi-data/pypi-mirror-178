// This file generated for packaging, do not edit.
// To edit, see original source:
// /home/runner/work/farm-ng-amiga/farm-ng-amiga/protos/farm_ng/state_estimator/state_estimator.proto.
//
// Copyright (c) farm-ng, inc.
//
// Licensed under the Amiga Development Kit License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/farm-ng/amiga-dev-kit/blob/main/LICENSE
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



syntax = "proto3";

package farm_ng.state_estimator.proto;

import "sophus/linalg.proto";
import "sophus/lie.proto";

service StateEstimatorService {
  rpc robotDynamics(RobotDynamicsRequest)
      returns (stream RobotDynamicsResult) {}

    // TODO: Return control signal (request) to state estimator
    // rpc controlRobotDynamics(stream ControlRobotDynamicsRequest)
    //     returns (stream ControlRobotDynamicsResult) {}

  rpc robotCalibrationResult(RobotCalibrationRequest)
      returns (RobotCalibrationResult) {}

  rpc getServiceState(GetServiceStateRequest) returns (GetServiceStateResult) {}
  rpc startService(StartServiceRequest) returns (StartServiceResult) {}
  rpc stopService(StopServiceRequest) returns (StopServiceResult) {}
}

// TODO: Return control signal (request) to state estimator
// message ControlRobotDynamicsRequest {
//     // AmigaRpdo1 (commands sent to canbus)
// }
// message ControlRobotDynamicsResult {
//     // Pose from state estimator to controller
// }

message RobotDynamicsRequest {
    string device = 1;
}

message RobotDynamicsResult {
    // Timestamp from farm-ng-core
    // SE3d types from Sophus
    Timestamp stamp = 1;  // this contains which clock
    sophus.proto.Se3F64 odom_pose_robot = 2;
    // Rate of the robot in the robot's frame
    RobotRate robot_rate = 3;
}

message RobotRate {
    double speed = 1;
    double angular_rate = 2;
}

message RobotCalibrationRequest {
    string device = 1;
}

message RobotCalibrationResult {

    Timestamp stamp = 1;  // this contains which clock
    // poses has
    // robot -> oak0/right
    // robot -> oak1/right
    // robot -> wheel/0xA
    // robot -> wheel/0xB
    // robot -> wheel/0xC
    // robot -> wheel/0xD
    repeated NamedPose3d poses = 2;
    repeated NamedWheel wheels = 3;
}

message NamedWheel {
    // e.g. wheel/0xA
    string name = 1;
    double radius = 2;
}

////////////////////////////////////////////////
// From here down should be imported from elsewhere
// Need to understand desired protos architecture
////////////////////////////////////////////////

// Geometry/etc. protos


message NamedPose3d {
    string frame_a = 1;
    string frame_b = 2;
    sophus.proto.Se3F64 a_pose_b = 3;
}

message Timestamp {
    string clock_name = 1;
    double seconds = 2;
    string clock_type = 3;
}



// Generic service protos
enum ReplyStatus {
    OK = 0;
    FAILED = 1;
}
enum StateEstimatorServiceState {
    UNKNOWN = 0;
    STOPPED = 1;
    RUNNING = 2;
    IDLE = 3;
    UNAVAILABLE = 4;
}

message GetServiceStateRequest {
    string message = 1;
}
message GetServiceStateResult {
    string state_name = 1;
    StateEstimatorServiceState state = 2;
    ReplyStatus status = 3;
}
message StartServiceRequest {
    string message = 1;
}
message StartServiceResult {
    string message = 1;
    ReplyStatus status = 2;
}
message StopServiceRequest {
    string message = 1;
}
message StopServiceResult {
    string message = 1;
    ReplyStatus status = 2;
}
