# studio_wrapper.py

from enum import Enum
from typing import Any
import nanosurf.lib.spm.studio.wrapper as wrap

g_cmd_tree_hash = '361ad5c39094d8ef878211b0224924fa'
g_compiler_version = '1.0'

class RootTestTabel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.test.tabel'


class RootTest(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.test'
        self.tabel = RootTestTabel(self._context)

    @property
    def bool(self) -> bool:
        return bool(self._context.get('root.test.bool'))

    @bool.setter
    def bool(self, new_val:bool):
        self._context.set('root.test.bool', bool(new_val))

    @property
    def num_f(self) -> float:
        return float(self._context.get('root.test.num_f'))

    @num_f.setter
    def num_f(self, new_val:float):
        self._context.set('root.test.num_f', float(new_val))

    @property
    def str(self) -> str:
        return str(self._context.get('root.test.str'))

    @str.setter
    def str(self, new_val:str):
        self._context.set('root.test.str', str(new_val))

    def func(self, *args) -> Any:
        return self._context.call('root.test.func', *args)

    @property
    def num_i(self) -> int:
        return int(self._context.get('root.test.num_i'))

    @num_i.setter
    def num_i(self, new_val:int):
        self._context.set('root.test.num_i', int(new_val))


class RootSeqRbanaAnalyzerOneAmplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.amplitude'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.amplitude.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.amplitude.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneDeltafoffs_hi(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.deltafoffs_hi'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.deltafoffs_hi.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.deltafoffs_hi.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneControl1Distdeltaf(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.control1.distdeltaf'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.distdeltaf.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.distdeltaf.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.distdeltaf.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.distdeltaf.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.distdeltaf.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.distdeltaf.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneControl1Outputsourceid(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.control1.outputsourceid'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.outputsourceid.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.outputsourceid.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.outputsourceid.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.outputsourceid.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.outputsourceid.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.outputsourceid.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneControl1Fltr_vld(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.control1.fltr_vld'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.fltr_vld.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.fltr_vld.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.fltr_vld.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.fltr_vld.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.fltr_vld.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.fltr_vld.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneControl1Clearflag(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.control1.clearflag'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.clearflag.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.clearflag.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.clearflag.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.clearflag.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.clearflag.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.clearflag.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneControl1Filtaddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.control1.filtaddr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.filtaddr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.filtaddr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.filtaddr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.filtaddr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.filtaddr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.filtaddr.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneControl1Enabledcblock(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.control1.enabledcblock'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.enabledcblock.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.enabledcblock.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.enabledcblock.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.enabledcblock.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.enabledcblock.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.enabledcblock.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneControl1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.control1'
        self.enabledcblock = RootSeqRbanaAnalyzerOneControl1Enabledcblock(self._context)
        self.filtaddr = RootSeqRbanaAnalyzerOneControl1Filtaddr(self._context)
        self.clearflag = RootSeqRbanaAnalyzerOneControl1Clearflag(self._context)
        self.fltr_vld = RootSeqRbanaAnalyzerOneControl1Fltr_vld(self._context)
        self.outputsourceid = RootSeqRbanaAnalyzerOneControl1Outputsourceid(self._context)
        self.distdeltaf = RootSeqRbanaAnalyzerOneControl1Distdeltaf(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.control1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.control1.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneCtrlbitsAmpclearaccu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.ctrlbits.ampclearaccu'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampclearaccu.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampclearaccu.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampclearaccu.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampclearaccu.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampclearaccu.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampclearaccu.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneCtrlbitsAmpmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.ctrlbits.ampmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampmodulation.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneCtrlbitsPhasectrl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.ctrlbits.phasectrl'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.phasectrl.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.phasectrl.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.phasectrl.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.phasectrl.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.phasectrl.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.phasectrl.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneCtrlbitsAmpctrlmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.ctrlbits.ampctrlmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampctrlmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampctrlmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampctrlmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampctrlmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampctrlmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampctrlmode.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneCtrlbitsPhaseclearaccu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.ctrlbits.phaseclearaccu'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.phaseclearaccu.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.phaseclearaccu.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.phaseclearaccu.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.phaseclearaccu.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.phaseclearaccu.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.phaseclearaccu.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneCtrlbitsAmpctrlpositiveaccu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.ctrlbits.ampctrlpositiveaccu'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampctrlpositiveaccu.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampctrlpositiveaccu.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampctrlpositiveaccu.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampctrlpositiveaccu.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.ampctrlpositiveaccu.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.ampctrlpositiveaccu.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneCtrlbits(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.ctrlbits'
        self.ampctrlpositiveaccu = RootSeqRbanaAnalyzerOneCtrlbitsAmpctrlpositiveaccu(self._context)
        self.phaseclearaccu = RootSeqRbanaAnalyzerOneCtrlbitsPhaseclearaccu(self._context)
        self.ampctrlmode = RootSeqRbanaAnalyzerOneCtrlbitsAmpctrlmode(self._context)
        self.phasectrl = RootSeqRbanaAnalyzerOneCtrlbitsPhasectrl(self._context)
        self.ampmodulation = RootSeqRbanaAnalyzerOneCtrlbitsAmpmodulation(self._context)
        self.ampclearaccu = RootSeqRbanaAnalyzerOneCtrlbitsAmpclearaccu(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.ctrlbits.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.ctrlbits.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneDelaycomp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.delaycomp'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.delaycomp.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.delaycomp.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneModampkel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.modampkel'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.modampkel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.modampkel.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneKiampkelShift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kiampkel.shift'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiampkel.shift.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiampkel.shift.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiampkel.shift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiampkel.shift.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiampkel.shift.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiampkel.shift.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKiampkelShiftdirection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kiampkel.shiftdirection'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiampkel.shiftdirection.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiampkel.shiftdirection.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiampkel.shiftdirection.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiampkel.shiftdirection.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiampkel.shiftdirection.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiampkel.shiftdirection.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKiampkelFactor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kiampkel.factor'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiampkel.factor.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiampkel.factor.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiampkel.factor.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiampkel.factor.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiampkel.factor.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiampkel.factor.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKiampkel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kiampkel'
        self.factor = RootSeqRbanaAnalyzerOneKiampkelFactor(self._context)
        self.shiftdirection = RootSeqRbanaAnalyzerOneKiampkelShiftdirection(self._context)
        self.shift = RootSeqRbanaAnalyzerOneKiampkelShift(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiampkel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiampkel.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneFlag(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.flag'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.flag.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.flag.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneKpampkelShift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kpampkel.shift'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpampkel.shift.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpampkel.shift.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpampkel.shift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpampkel.shift.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpampkel.shift.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpampkel.shift.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKpampkelShiftdirection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kpampkel.shiftdirection'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpampkel.shiftdirection.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpampkel.shiftdirection.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpampkel.shiftdirection.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpampkel.shiftdirection.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpampkel.shiftdirection.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpampkel.shiftdirection.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKpampkelFactor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kpampkel.factor'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpampkel.factor.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpampkel.factor.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpampkel.factor.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpampkel.factor.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpampkel.factor.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpampkel.factor.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKpampkel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kpampkel'
        self.factor = RootSeqRbanaAnalyzerOneKpampkelFactor(self._context)
        self.shiftdirection = RootSeqRbanaAnalyzerOneKpampkelShiftdirection(self._context)
        self.shift = RootSeqRbanaAnalyzerOneKpampkelShift(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpampkel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpampkel.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneThreshold(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.threshold'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.threshold.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.threshold.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneKpphaseShift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kpphase.shift'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpphase.shift.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpphase.shift.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpphase.shift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpphase.shift.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpphase.shift.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpphase.shift.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKpphaseShiftdirection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kpphase.shiftdirection'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpphase.shiftdirection.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpphase.shiftdirection.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpphase.shiftdirection.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpphase.shiftdirection.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpphase.shiftdirection.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpphase.shiftdirection.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKpphaseFactor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kpphase.factor'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpphase.factor.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpphase.factor.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpphase.factor.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpphase.factor.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpphase.factor.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpphase.factor.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKpphase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kpphase'
        self.factor = RootSeqRbanaAnalyzerOneKpphaseFactor(self._context)
        self.shiftdirection = RootSeqRbanaAnalyzerOneKpphaseShiftdirection(self._context)
        self.shift = RootSeqRbanaAnalyzerOneKpphaseShift(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kpphase.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kpphase.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneModeAnalyzerinput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.mode.analyzerinput'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.analyzerinput.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.analyzerinput.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.analyzerinput.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.analyzerinput.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.analyzerinput.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.analyzerinput.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneModeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.mode.input'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.input.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.input.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.input.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.input.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.input.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.input.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneModePhasedetref(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.mode.phasedetref'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.phasedetref.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.phasedetref.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.phasedetref.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.phasedetref.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.phasedetref.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.phasedetref.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneModeOpmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.mode.opmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.opmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.opmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.opmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.opmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.opmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.opmode.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.mode'
        self.opmode = RootSeqRbanaAnalyzerOneModeOpmode(self._context)
        self.phasedetref = RootSeqRbanaAnalyzerOneModePhasedetref(self._context)
        self.input = RootSeqRbanaAnalyzerOneModeInput(self._context)
        self.analyzerinput = RootSeqRbanaAnalyzerOneModeAnalyzerinput(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.mode.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOnePhase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.phase'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.phase.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.phase.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneSafetipSafetip(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.safetip.safetip'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.safetip.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.safetip.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.safetip.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.safetip.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.safetip.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.safetip.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneSafetipSyncorsafetip(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.safetip.syncorsafetip'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.syncorsafetip.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.syncorsafetip.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.syncorsafetip.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.syncorsafetip.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.syncorsafetip.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.syncorsafetip.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneSafetipSafetipmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.safetip.safetipmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.safetipmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.safetipmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.safetipmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.safetipmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.safetipmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.safetipmode.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneSafetipThresholdmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.safetip.thresholdmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.thresholdmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.thresholdmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.thresholdmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.thresholdmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.thresholdmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.thresholdmode.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneSafetip(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.safetip'
        self.thresholdmode = RootSeqRbanaAnalyzerOneSafetipThresholdmode(self._context)
        self.safetipmode = RootSeqRbanaAnalyzerOneSafetipSafetipmode(self._context)
        self.syncorsafetip = RootSeqRbanaAnalyzerOneSafetipSyncorsafetip(self._context)
        self.safetip = RootSeqRbanaAnalyzerOneSafetipSafetip(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.safetip.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.safetip.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneFltrcoeff(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.fltrcoeff'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.fltrcoeff.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.fltrcoeff.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneLockrangeshift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.lockrangeshift'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.lockrangeshift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.lockrangeshift.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneSetvalampkel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.setvalampkel'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.setvalampkel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.setvalampkel.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneDeltaf(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.deltaf'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.deltaf.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.deltaf.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneY(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.y'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.y.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.y.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneX(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.x'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.x.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.x.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneDisscp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.disscp'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.disscp.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.disscp.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOnePhaseshift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.phaseshift'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.phaseshift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.phaseshift.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneDeltafoffs_lo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.deltafoffs_lo'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.deltafoffs_lo.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.deltafoffs_lo.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneCenterfreq_hi(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.centerfreq_hi'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.centerfreq_hi.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.centerfreq_hi.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneKiphaseShift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kiphase.shift'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiphase.shift.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiphase.shift.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiphase.shift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiphase.shift.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiphase.shift.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiphase.shift.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKiphaseShiftdirection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kiphase.shiftdirection'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiphase.shiftdirection.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiphase.shiftdirection.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiphase.shiftdirection.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiphase.shiftdirection.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiphase.shiftdirection.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiphase.shiftdirection.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKiphaseFactor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kiphase.factor'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiphase.factor.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiphase.factor.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiphase.factor.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiphase.factor.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiphase.factor.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiphase.factor.lsb', int(new_val))


class RootSeqRbanaAnalyzerOneKiphase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.kiphase'
        self.factor = RootSeqRbanaAnalyzerOneKiphaseFactor(self._context)
        self.shiftdirection = RootSeqRbanaAnalyzerOneKiphaseShiftdirection(self._context)
        self.shift = RootSeqRbanaAnalyzerOneKiphaseShift(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.kiphase.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.kiphase.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneSetptampkel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.setptampkel'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.setptampkel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.setptampkel.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOneCenterfreq_lo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one.centerfreq_lo'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.one.centerfreq_lo.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.one.centerfreq_lo.regaddr', int(new_val))


class RootSeqRbanaAnalyzerOne(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.one'
        self.centerfreq_lo = RootSeqRbanaAnalyzerOneCenterfreq_lo(self._context)
        self.setptampkel = RootSeqRbanaAnalyzerOneSetptampkel(self._context)
        self.kiphase = RootSeqRbanaAnalyzerOneKiphase(self._context)
        self.centerfreq_hi = RootSeqRbanaAnalyzerOneCenterfreq_hi(self._context)
        self.deltafoffs_lo = RootSeqRbanaAnalyzerOneDeltafoffs_lo(self._context)
        self.phaseshift = RootSeqRbanaAnalyzerOnePhaseshift(self._context)
        self.disscp = RootSeqRbanaAnalyzerOneDisscp(self._context)
        self.x = RootSeqRbanaAnalyzerOneX(self._context)
        self.y = RootSeqRbanaAnalyzerOneY(self._context)
        self.deltaf = RootSeqRbanaAnalyzerOneDeltaf(self._context)
        self.setvalampkel = RootSeqRbanaAnalyzerOneSetvalampkel(self._context)
        self.lockrangeshift = RootSeqRbanaAnalyzerOneLockrangeshift(self._context)
        self.fltrcoeff = RootSeqRbanaAnalyzerOneFltrcoeff(self._context)
        self.safetip = RootSeqRbanaAnalyzerOneSafetip(self._context)
        self.phase = RootSeqRbanaAnalyzerOnePhase(self._context)
        self.mode = RootSeqRbanaAnalyzerOneMode(self._context)
        self.kpphase = RootSeqRbanaAnalyzerOneKpphase(self._context)
        self.threshold = RootSeqRbanaAnalyzerOneThreshold(self._context)
        self.kpampkel = RootSeqRbanaAnalyzerOneKpampkel(self._context)
        self.flag = RootSeqRbanaAnalyzerOneFlag(self._context)
        self.kiampkel = RootSeqRbanaAnalyzerOneKiampkel(self._context)
        self.modampkel = RootSeqRbanaAnalyzerOneModampkel(self._context)
        self.delaycomp = RootSeqRbanaAnalyzerOneDelaycomp(self._context)
        self.ctrlbits = RootSeqRbanaAnalyzerOneCtrlbits(self._context)
        self.control1 = RootSeqRbanaAnalyzerOneControl1(self._context)
        self.deltafoffs_hi = RootSeqRbanaAnalyzerOneDeltafoffs_hi(self._context)
        self.amplitude = RootSeqRbanaAnalyzerOneAmplitude(self._context)


class RootSeqRbanaAnalyzerTwoAmplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.amplitude'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.amplitude.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.amplitude.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoDeltafoffs_hi(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.deltafoffs_hi'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.deltafoffs_hi.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.deltafoffs_hi.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoControl1Distdeltaf(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.control1.distdeltaf'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.distdeltaf.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.distdeltaf.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.distdeltaf.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.distdeltaf.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.distdeltaf.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.distdeltaf.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoControl1Outputsourceid(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.control1.outputsourceid'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.outputsourceid.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.outputsourceid.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.outputsourceid.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.outputsourceid.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.outputsourceid.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.outputsourceid.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoControl1Fltr_vld(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.control1.fltr_vld'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.fltr_vld.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.fltr_vld.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.fltr_vld.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.fltr_vld.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.fltr_vld.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.fltr_vld.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoControl1Clearflag(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.control1.clearflag'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.clearflag.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.clearflag.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.clearflag.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.clearflag.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.clearflag.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.clearflag.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoControl1Filtaddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.control1.filtaddr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.filtaddr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.filtaddr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.filtaddr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.filtaddr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.filtaddr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.filtaddr.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoControl1Enabledcblock(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.control1.enabledcblock'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.enabledcblock.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.enabledcblock.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.enabledcblock.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.enabledcblock.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.enabledcblock.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.enabledcblock.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoControl1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.control1'
        self.enabledcblock = RootSeqRbanaAnalyzerTwoControl1Enabledcblock(self._context)
        self.filtaddr = RootSeqRbanaAnalyzerTwoControl1Filtaddr(self._context)
        self.clearflag = RootSeqRbanaAnalyzerTwoControl1Clearflag(self._context)
        self.fltr_vld = RootSeqRbanaAnalyzerTwoControl1Fltr_vld(self._context)
        self.outputsourceid = RootSeqRbanaAnalyzerTwoControl1Outputsourceid(self._context)
        self.distdeltaf = RootSeqRbanaAnalyzerTwoControl1Distdeltaf(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.control1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.control1.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoCtrlbitsAmpclearaccu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.ctrlbits.ampclearaccu'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampclearaccu.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampclearaccu.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampclearaccu.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampclearaccu.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampclearaccu.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampclearaccu.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoCtrlbitsAmpmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.ctrlbits.ampmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampmodulation.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoCtrlbitsPhasectrl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.ctrlbits.phasectrl'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.phasectrl.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.phasectrl.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.phasectrl.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.phasectrl.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.phasectrl.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.phasectrl.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoCtrlbitsAmpctrlmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.ctrlbits.ampctrlmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampctrlmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampctrlmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampctrlmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampctrlmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampctrlmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampctrlmode.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoCtrlbitsPhaseclearaccu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.ctrlbits.phaseclearaccu'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.phaseclearaccu.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.phaseclearaccu.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.phaseclearaccu.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.phaseclearaccu.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.phaseclearaccu.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.phaseclearaccu.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoCtrlbitsAmpctrlpositiveaccu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.ctrlbits.ampctrlpositiveaccu'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampctrlpositiveaccu.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampctrlpositiveaccu.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampctrlpositiveaccu.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampctrlpositiveaccu.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.ampctrlpositiveaccu.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.ampctrlpositiveaccu.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoCtrlbits(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.ctrlbits'
        self.ampctrlpositiveaccu = RootSeqRbanaAnalyzerTwoCtrlbitsAmpctrlpositiveaccu(self._context)
        self.phaseclearaccu = RootSeqRbanaAnalyzerTwoCtrlbitsPhaseclearaccu(self._context)
        self.ampctrlmode = RootSeqRbanaAnalyzerTwoCtrlbitsAmpctrlmode(self._context)
        self.phasectrl = RootSeqRbanaAnalyzerTwoCtrlbitsPhasectrl(self._context)
        self.ampmodulation = RootSeqRbanaAnalyzerTwoCtrlbitsAmpmodulation(self._context)
        self.ampclearaccu = RootSeqRbanaAnalyzerTwoCtrlbitsAmpclearaccu(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.ctrlbits.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.ctrlbits.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoDelaycomp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.delaycomp'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.delaycomp.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.delaycomp.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoModampkel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.modampkel'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.modampkel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.modampkel.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoKiampkelShift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kiampkel.shift'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiampkel.shift.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiampkel.shift.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiampkel.shift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiampkel.shift.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiampkel.shift.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiampkel.shift.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKiampkelShiftdirection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kiampkel.shiftdirection'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiampkel.shiftdirection.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiampkel.shiftdirection.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiampkel.shiftdirection.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiampkel.shiftdirection.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiampkel.shiftdirection.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiampkel.shiftdirection.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKiampkelFactor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kiampkel.factor'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiampkel.factor.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiampkel.factor.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiampkel.factor.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiampkel.factor.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiampkel.factor.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiampkel.factor.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKiampkel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kiampkel'
        self.factor = RootSeqRbanaAnalyzerTwoKiampkelFactor(self._context)
        self.shiftdirection = RootSeqRbanaAnalyzerTwoKiampkelShiftdirection(self._context)
        self.shift = RootSeqRbanaAnalyzerTwoKiampkelShift(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiampkel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiampkel.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoFlag(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.flag'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.flag.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.flag.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoKpampkelShift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kpampkel.shift'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpampkel.shift.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpampkel.shift.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpampkel.shift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpampkel.shift.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpampkel.shift.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpampkel.shift.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKpampkelShiftdirection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kpampkel.shiftdirection'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpampkel.shiftdirection.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpampkel.shiftdirection.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpampkel.shiftdirection.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpampkel.shiftdirection.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpampkel.shiftdirection.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpampkel.shiftdirection.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKpampkelFactor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kpampkel.factor'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpampkel.factor.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpampkel.factor.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpampkel.factor.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpampkel.factor.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpampkel.factor.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpampkel.factor.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKpampkel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kpampkel'
        self.factor = RootSeqRbanaAnalyzerTwoKpampkelFactor(self._context)
        self.shiftdirection = RootSeqRbanaAnalyzerTwoKpampkelShiftdirection(self._context)
        self.shift = RootSeqRbanaAnalyzerTwoKpampkelShift(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpampkel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpampkel.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoThreshold(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.threshold'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.threshold.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.threshold.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoKpphaseShift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kpphase.shift'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpphase.shift.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpphase.shift.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpphase.shift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpphase.shift.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpphase.shift.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpphase.shift.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKpphaseShiftdirection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kpphase.shiftdirection'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpphase.shiftdirection.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpphase.shiftdirection.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpphase.shiftdirection.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpphase.shiftdirection.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpphase.shiftdirection.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpphase.shiftdirection.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKpphaseFactor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kpphase.factor'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpphase.factor.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpphase.factor.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpphase.factor.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpphase.factor.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpphase.factor.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpphase.factor.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKpphase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kpphase'
        self.factor = RootSeqRbanaAnalyzerTwoKpphaseFactor(self._context)
        self.shiftdirection = RootSeqRbanaAnalyzerTwoKpphaseShiftdirection(self._context)
        self.shift = RootSeqRbanaAnalyzerTwoKpphaseShift(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kpphase.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kpphase.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoModeAnalyzerinput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.mode.analyzerinput'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.analyzerinput.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.analyzerinput.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.analyzerinput.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.analyzerinput.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.analyzerinput.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.analyzerinput.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoModeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.mode.input'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.input.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.input.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.input.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.input.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.input.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.input.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoModePhasedetref(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.mode.phasedetref'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.phasedetref.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.phasedetref.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.phasedetref.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.phasedetref.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.phasedetref.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.phasedetref.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoModeOpmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.mode.opmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.opmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.opmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.opmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.opmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.opmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.opmode.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.mode'
        self.opmode = RootSeqRbanaAnalyzerTwoModeOpmode(self._context)
        self.phasedetref = RootSeqRbanaAnalyzerTwoModePhasedetref(self._context)
        self.input = RootSeqRbanaAnalyzerTwoModeInput(self._context)
        self.analyzerinput = RootSeqRbanaAnalyzerTwoModeAnalyzerinput(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.mode.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoPhase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.phase'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.phase.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.phase.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoSafetipSafetip(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.safetip.safetip'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.safetip.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.safetip.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.safetip.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.safetip.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.safetip.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.safetip.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoSafetipSyncorsafetip(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.safetip.syncorsafetip'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.syncorsafetip.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.syncorsafetip.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.syncorsafetip.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.syncorsafetip.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.syncorsafetip.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.syncorsafetip.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoSafetipSafetipmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.safetip.safetipmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.safetipmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.safetipmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.safetipmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.safetipmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.safetipmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.safetipmode.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoSafetipThresholdmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.safetip.thresholdmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.thresholdmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.thresholdmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.thresholdmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.thresholdmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.thresholdmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.thresholdmode.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoSafetip(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.safetip'
        self.thresholdmode = RootSeqRbanaAnalyzerTwoSafetipThresholdmode(self._context)
        self.safetipmode = RootSeqRbanaAnalyzerTwoSafetipSafetipmode(self._context)
        self.syncorsafetip = RootSeqRbanaAnalyzerTwoSafetipSyncorsafetip(self._context)
        self.safetip = RootSeqRbanaAnalyzerTwoSafetipSafetip(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.safetip.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.safetip.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoFltrcoeff(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.fltrcoeff'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.fltrcoeff.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.fltrcoeff.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoLockrangeshift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.lockrangeshift'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.lockrangeshift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.lockrangeshift.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoSetvalampkel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.setvalampkel'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.setvalampkel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.setvalampkel.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoDeltaf(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.deltaf'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.deltaf.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.deltaf.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoY(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.y'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.y.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.y.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoX(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.x'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.x.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.x.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoDisscp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.disscp'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.disscp.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.disscp.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoPhaseshift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.phaseshift'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.phaseshift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.phaseshift.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoDeltafoffs_lo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.deltafoffs_lo'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.deltafoffs_lo.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.deltafoffs_lo.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoCenterfreq_hi(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.centerfreq_hi'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.centerfreq_hi.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.centerfreq_hi.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoKiphaseShift(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kiphase.shift'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiphase.shift.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiphase.shift.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiphase.shift.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiphase.shift.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiphase.shift.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiphase.shift.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKiphaseShiftdirection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kiphase.shiftdirection'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiphase.shiftdirection.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiphase.shiftdirection.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiphase.shiftdirection.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiphase.shiftdirection.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiphase.shiftdirection.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiphase.shiftdirection.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKiphaseFactor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kiphase.factor'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiphase.factor.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiphase.factor.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiphase.factor.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiphase.factor.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiphase.factor.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiphase.factor.lsb', int(new_val))


class RootSeqRbanaAnalyzerTwoKiphase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.kiphase'
        self.factor = RootSeqRbanaAnalyzerTwoKiphaseFactor(self._context)
        self.shiftdirection = RootSeqRbanaAnalyzerTwoKiphaseShiftdirection(self._context)
        self.shift = RootSeqRbanaAnalyzerTwoKiphaseShift(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.kiphase.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.kiphase.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoSetptampkel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.setptampkel'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.setptampkel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.setptampkel.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwoCenterfreq_lo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two.centerfreq_lo'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzer.two.centerfreq_lo.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzer.two.centerfreq_lo.regaddr', int(new_val))


class RootSeqRbanaAnalyzerTwo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer.two'
        self.centerfreq_lo = RootSeqRbanaAnalyzerTwoCenterfreq_lo(self._context)
        self.setptampkel = RootSeqRbanaAnalyzerTwoSetptampkel(self._context)
        self.kiphase = RootSeqRbanaAnalyzerTwoKiphase(self._context)
        self.centerfreq_hi = RootSeqRbanaAnalyzerTwoCenterfreq_hi(self._context)
        self.deltafoffs_lo = RootSeqRbanaAnalyzerTwoDeltafoffs_lo(self._context)
        self.phaseshift = RootSeqRbanaAnalyzerTwoPhaseshift(self._context)
        self.disscp = RootSeqRbanaAnalyzerTwoDisscp(self._context)
        self.x = RootSeqRbanaAnalyzerTwoX(self._context)
        self.y = RootSeqRbanaAnalyzerTwoY(self._context)
        self.deltaf = RootSeqRbanaAnalyzerTwoDeltaf(self._context)
        self.setvalampkel = RootSeqRbanaAnalyzerTwoSetvalampkel(self._context)
        self.lockrangeshift = RootSeqRbanaAnalyzerTwoLockrangeshift(self._context)
        self.fltrcoeff = RootSeqRbanaAnalyzerTwoFltrcoeff(self._context)
        self.safetip = RootSeqRbanaAnalyzerTwoSafetip(self._context)
        self.phase = RootSeqRbanaAnalyzerTwoPhase(self._context)
        self.mode = RootSeqRbanaAnalyzerTwoMode(self._context)
        self.kpphase = RootSeqRbanaAnalyzerTwoKpphase(self._context)
        self.threshold = RootSeqRbanaAnalyzerTwoThreshold(self._context)
        self.kpampkel = RootSeqRbanaAnalyzerTwoKpampkel(self._context)
        self.flag = RootSeqRbanaAnalyzerTwoFlag(self._context)
        self.kiampkel = RootSeqRbanaAnalyzerTwoKiampkel(self._context)
        self.modampkel = RootSeqRbanaAnalyzerTwoModampkel(self._context)
        self.delaycomp = RootSeqRbanaAnalyzerTwoDelaycomp(self._context)
        self.ctrlbits = RootSeqRbanaAnalyzerTwoCtrlbits(self._context)
        self.control1 = RootSeqRbanaAnalyzerTwoControl1(self._context)
        self.deltafoffs_hi = RootSeqRbanaAnalyzerTwoDeltafoffs_hi(self._context)
        self.amplitude = RootSeqRbanaAnalyzerTwoAmplitude(self._context)


class RootSeqRbanaAnalyzer(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzer'
        self.two = RootSeqRbanaAnalyzerTwo(self._context)
        self.one = RootSeqRbanaAnalyzerOne(self._context)


class RootSeqRbanaAnalyzercommonSgleControlHarmoncinput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzercommon.sgle.control.harmoncinput'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzercommon.sgle.control.harmoncinput.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzercommon.sgle.control.harmoncinput.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzercommon.sgle.control.harmoncinput.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzercommon.sgle.control.harmoncinput.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzercommon.sgle.control.harmoncinput.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.analyzercommon.sgle.control.harmoncinput.lsb', int(new_val))


class RootSeqRbanaAnalyzercommonSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzercommon.sgle.control'
        self.harmoncinput = RootSeqRbanaAnalyzercommonSgleControlHarmoncinput(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.analyzercommon.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.analyzercommon.sgle.control.regaddr', int(new_val))


class RootSeqRbanaAnalyzercommonSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzercommon.sgle'
        self.control = RootSeqRbanaAnalyzercommonSgleControl(self._context)


class RootSeqRbanaAnalyzercommon(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.analyzercommon'
        self.sgle = RootSeqRbanaAnalyzercommonSgle(self._context)


class RootSeqRbanaGpiSgleIrqenaRampgenuser4done(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqena.rampgenuser4done'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.rampgenuser4done.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.rampgenuser4done.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.rampgenuser4done.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.rampgenuser4done.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.rampgenuser4done.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.rampgenuser4done.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqenaEventmgrdone(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqena.eventmgrdone'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.eventmgrdone.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.eventmgrdone.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.eventmgrdone.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.eventmgrdone.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.eventmgrdone.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.eventmgrdone.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqenaUserdigi1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqena.userdigi1'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.userdigi1.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.userdigi1.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.userdigi1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.userdigi1.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.userdigi1.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.userdigi1.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqenaUserdigi2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqena.userdigi2'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.userdigi2.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.userdigi2.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.userdigi2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.userdigi2.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.userdigi2.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.userdigi2.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqenaRampgentestdone(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqena.rampgentestdone'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.rampgentestdone.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.rampgentestdone.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.rampgentestdone.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.rampgentestdone.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.rampgentestdone.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.rampgentestdone.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqenaEventmgrstop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqena.eventmgrstop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.eventmgrstop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.eventmgrstop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.eventmgrstop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.eventmgrstop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.eventmgrstop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.eventmgrstop.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqenaEventmgrabort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqena.eventmgrabort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.eventmgrabort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.eventmgrabort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.eventmgrabort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.eventmgrabort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.eventmgrabort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.eventmgrabort.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqena'
        self.eventmgrabort = RootSeqRbanaGpiSgleIrqenaEventmgrabort(self._context)
        self.eventmgrstop = RootSeqRbanaGpiSgleIrqenaEventmgrstop(self._context)
        self.rampgentestdone = RootSeqRbanaGpiSgleIrqenaRampgentestdone(self._context)
        self.userdigi2 = RootSeqRbanaGpiSgleIrqenaUserdigi2(self._context)
        self.userdigi1 = RootSeqRbanaGpiSgleIrqenaUserdigi1(self._context)
        self.eventmgrdone = RootSeqRbanaGpiSgleIrqenaEventmgrdone(self._context)
        self.rampgenuser4done = RootSeqRbanaGpiSgleIrqenaRampgenuser4done(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqena.regaddr', int(new_val))


class RootSeqRbanaGpiSgleIrqvecRampgenuser4done(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqvec.rampgenuser4done'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.rampgenuser4done.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.rampgenuser4done.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.rampgenuser4done.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.rampgenuser4done.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.rampgenuser4done.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.rampgenuser4done.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqvecEventmgrdone(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqvec.eventmgrdone'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.eventmgrdone.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.eventmgrdone.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.eventmgrdone.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.eventmgrdone.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.eventmgrdone.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.eventmgrdone.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqvecUserdigi1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqvec.userdigi1'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.userdigi1.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.userdigi1.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.userdigi1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.userdigi1.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.userdigi1.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.userdigi1.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqvecUserdigi2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqvec.userdigi2'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.userdigi2.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.userdigi2.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.userdigi2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.userdigi2.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.userdigi2.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.userdigi2.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqvecRampgentestdone(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqvec.rampgentestdone'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.rampgentestdone.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.rampgentestdone.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.rampgentestdone.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.rampgentestdone.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.rampgentestdone.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.rampgentestdone.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqvecEventmgrstop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqvec.eventmgrstop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.eventmgrstop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.eventmgrstop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.eventmgrstop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.eventmgrstop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.eventmgrstop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.eventmgrstop.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqvecEventmgrabort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqvec.eventmgrabort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.eventmgrabort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.eventmgrabort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.eventmgrabort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.eventmgrabort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.eventmgrabort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.eventmgrabort.lsb', int(new_val))


class RootSeqRbanaGpiSgleIrqvec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.irqvec'
        self.eventmgrabort = RootSeqRbanaGpiSgleIrqvecEventmgrabort(self._context)
        self.eventmgrstop = RootSeqRbanaGpiSgleIrqvecEventmgrstop(self._context)
        self.rampgentestdone = RootSeqRbanaGpiSgleIrqvecRampgentestdone(self._context)
        self.userdigi2 = RootSeqRbanaGpiSgleIrqvecUserdigi2(self._context)
        self.userdigi1 = RootSeqRbanaGpiSgleIrqvecUserdigi1(self._context)
        self.eventmgrdone = RootSeqRbanaGpiSgleIrqvecEventmgrdone(self._context)
        self.rampgenuser4done = RootSeqRbanaGpiSgleIrqvecRampgenuser4done(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.irqvec.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.irqvec.regaddr', int(new_val))


class RootSeqRbanaGpiSgleOdata(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.odata'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.odata.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.odata.regaddr', int(new_val))


class RootSeqRbanaGpiSgleIdataRampgenuser4done(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.idata.rampgenuser4done'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.rampgenuser4done.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.rampgenuser4done.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.rampgenuser4done.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.rampgenuser4done.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.rampgenuser4done.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.rampgenuser4done.lsb', int(new_val))


class RootSeqRbanaGpiSgleIdataEventmgrdone(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.idata.eventmgrdone'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.eventmgrdone.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.eventmgrdone.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.eventmgrdone.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.eventmgrdone.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.eventmgrdone.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.eventmgrdone.lsb', int(new_val))


class RootSeqRbanaGpiSgleIdataUserdigi1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.idata.userdigi1'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.userdigi1.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.userdigi1.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.userdigi1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.userdigi1.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.userdigi1.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.userdigi1.lsb', int(new_val))


class RootSeqRbanaGpiSgleIdataUserdigi2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.idata.userdigi2'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.userdigi2.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.userdigi2.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.userdigi2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.userdigi2.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.userdigi2.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.userdigi2.lsb', int(new_val))


class RootSeqRbanaGpiSgleIdataRampgentestdone(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.idata.rampgentestdone'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.rampgentestdone.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.rampgentestdone.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.rampgentestdone.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.rampgentestdone.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.rampgentestdone.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.rampgentestdone.lsb', int(new_val))


class RootSeqRbanaGpiSgleIdataEventmgrstop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.idata.eventmgrstop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.eventmgrstop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.eventmgrstop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.eventmgrstop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.eventmgrstop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.eventmgrstop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.eventmgrstop.lsb', int(new_val))


class RootSeqRbanaGpiSgleIdataEventmgrabort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.idata.eventmgrabort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.eventmgrabort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.eventmgrabort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.eventmgrabort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.eventmgrabort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.eventmgrabort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.eventmgrabort.lsb', int(new_val))


class RootSeqRbanaGpiSgleIdata(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle.idata'
        self.eventmgrabort = RootSeqRbanaGpiSgleIdataEventmgrabort(self._context)
        self.eventmgrstop = RootSeqRbanaGpiSgleIdataEventmgrstop(self._context)
        self.rampgentestdone = RootSeqRbanaGpiSgleIdataRampgentestdone(self._context)
        self.userdigi2 = RootSeqRbanaGpiSgleIdataUserdigi2(self._context)
        self.userdigi1 = RootSeqRbanaGpiSgleIdataUserdigi1(self._context)
        self.eventmgrdone = RootSeqRbanaGpiSgleIdataEventmgrdone(self._context)
        self.rampgenuser4done = RootSeqRbanaGpiSgleIdataRampgenuser4done(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.gpi.sgle.idata.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.gpi.sgle.idata.regaddr', int(new_val))


class RootSeqRbanaGpiSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi.sgle'
        self.idata = RootSeqRbanaGpiSgleIdata(self._context)
        self.odata = RootSeqRbanaGpiSgleOdata(self._context)
        self.irqvec = RootSeqRbanaGpiSgleIrqvec(self._context)
        self.irqena = RootSeqRbanaGpiSgleIrqena(self._context)


class RootSeqRbanaGpi(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.gpi'
        self.sgle = RootSeqRbanaGpiSgle(self._context)


class RootSeqRbanaPidPidyMinvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.minvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.minvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.minvalue.regaddr', int(new_val))


class RootSeqRbanaPidPidyErrorlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.errorlimit'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.errorlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.errorlimit.regaddr', int(new_val))


class RootSeqRbanaPidPidyMaxvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.maxvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.maxvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.maxvalue.regaddr', int(new_val))


class RootSeqRbanaPidPidyGain_d(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.gain_d'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.gain_d.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.gain_d.regaddr', int(new_val))


class RootSeqRbanaPidPidyGain_i(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.gain_i'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.gain_i.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.gain_i.regaddr', int(new_val))


class RootSeqRbanaPidPidyControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.mode.lsb', int(new_val))


class RootSeqRbanaPidPidyControlPidinputactual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.pidinputactual'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.pidinputactual.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.pidinputactual.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.pidinputactual.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.pidinputactual.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.pidinputactual.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.pidinputactual.lsb', int(new_val))


class RootSeqRbanaPidPidyControlOutsel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.outsel'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.outsel.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.outsel.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.outsel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.outsel.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.outsel.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.outsel.lsb', int(new_val))


class RootSeqRbanaPidPidyControlPidinputsetpoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.pidinputsetpoint'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.pidinputsetpoint.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.pidinputsetpoint.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.pidinputsetpoint.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.pidinputsetpoint.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.pidinputsetpoint.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.pidinputsetpoint.lsb', int(new_val))


class RootSeqRbanaPidPidyControlPolpidin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.polpidin'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.polpidin.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.polpidin.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.polpidin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.polpidin.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.polpidin.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.polpidin.lsb', int(new_val))


class RootSeqRbanaPidPidyControlMedianfilterena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.medianfilterena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.medianfilterena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.medianfilterena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.medianfilterena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.medianfilterena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.medianfilterena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.medianfilterena.lsb', int(new_val))


class RootSeqRbanaPidPidyControlLoadinterna(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.loadinterna'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.loadinterna.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.loadinterna.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.loadinterna.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.loadinterna.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.loadinterna.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.loadinterna.lsb', int(new_val))


class RootSeqRbanaPidPidyControlPolcomperrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.polcomperrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.polcomperrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.polcomperrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.polcomperrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.polcomperrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.polcomperrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.polcomperrlim.lsb', int(new_val))


class RootSeqRbanaPidPidyControlMemorygendriveena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.memorygendriveena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.memorygendriveena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.memorygendriveena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.memorygendriveena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.memorygendriveena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.memorygendriveena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.memorygendriveena.lsb', int(new_val))


class RootSeqRbanaPidPidyControlMemorygenpositionena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.memorygenpositionena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.memorygenpositionena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.memorygenpositionena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.memorygenpositionena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.memorygenpositionena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.memorygenpositionena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.memorygenpositionena.lsb', int(new_val))


class RootSeqRbanaPidPidyControlModena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control.modena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.modena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.modena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.modena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.modena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.modena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.modena.lsb', int(new_val))


class RootSeqRbanaPidPidyControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.control'
        self.modena = RootSeqRbanaPidPidyControlModena(self._context)
        self.memorygenpositionena = RootSeqRbanaPidPidyControlMemorygenpositionena(self._context)
        self.memorygendriveena = RootSeqRbanaPidPidyControlMemorygendriveena(self._context)
        self.polcomperrlim = RootSeqRbanaPidPidyControlPolcomperrlim(self._context)
        self.loadinterna = RootSeqRbanaPidPidyControlLoadinterna(self._context)
        self.medianfilterena = RootSeqRbanaPidPidyControlMedianfilterena(self._context)
        self.polpidin = RootSeqRbanaPidPidyControlPolpidin(self._context)
        self.pidinputsetpoint = RootSeqRbanaPidPidyControlPidinputsetpoint(self._context)
        self.outsel = RootSeqRbanaPidPidyControlOutsel(self._context)
        self.pidinputactual = RootSeqRbanaPidPidyControlPidinputactual(self._context)
        self.mode = RootSeqRbanaPidPidyControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.control.regaddr', int(new_val))


class RootSeqRbanaPidPidyGain_p(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.gain_p'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.gain_p.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.gain_p.regaddr', int(new_val))


class RootSeqRbanaPidPidyOffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.offset.regaddr', int(new_val))


class RootSeqRbanaPidPidyConversion(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.conversion'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.conversion.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.conversion.regaddr', int(new_val))


class RootSeqRbanaPidPidyStatusReachedmin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.status.reachedmin'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.reachedmin.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.reachedmin.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.reachedmin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.reachedmin.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.reachedmin.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.reachedmin.lsb', int(new_val))


class RootSeqRbanaPidPidyStatusReachederrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.status.reachederrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.reachederrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.reachederrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.reachederrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.reachederrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.reachederrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.reachederrlim.lsb', int(new_val))


class RootSeqRbanaPidPidyStatusReachedmax(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.status.reachedmax'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.reachedmax.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.reachedmax.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.reachedmax.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.reachedmax.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.reachedmax.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.reachedmax.lsb', int(new_val))


class RootSeqRbanaPidPidyStatusInternaloaded(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.status.internaloaded'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.internaloaded.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.internaloaded.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.internaloaded.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.internaloaded.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.internaloaded.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.internaloaded.lsb', int(new_val))


class RootSeqRbanaPidPidyStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.status'
        self.internaloaded = RootSeqRbanaPidPidyStatusInternaloaded(self._context)
        self.reachedmax = RootSeqRbanaPidPidyStatusReachedmax(self._context)
        self.reachederrlim = RootSeqRbanaPidPidyStatusReachederrlim(self._context)
        self.reachedmin = RootSeqRbanaPidPidyStatusReachedmin(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.status.regaddr', int(new_val))


class RootSeqRbanaPidPidySlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.slope'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.slope.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.slope.regaddr', int(new_val))


class RootSeqRbanaPidPidyPreloadvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy.preloadvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidy.preloadvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidy.preloadvalue.regaddr', int(new_val))


class RootSeqRbanaPidPidy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidy'
        self.preloadvalue = RootSeqRbanaPidPidyPreloadvalue(self._context)
        self.slope = RootSeqRbanaPidPidySlope(self._context)
        self.status = RootSeqRbanaPidPidyStatus(self._context)
        self.conversion = RootSeqRbanaPidPidyConversion(self._context)
        self.offset = RootSeqRbanaPidPidyOffset(self._context)
        self.gain_p = RootSeqRbanaPidPidyGain_p(self._context)
        self.control = RootSeqRbanaPidPidyControl(self._context)
        self.gain_i = RootSeqRbanaPidPidyGain_i(self._context)
        self.gain_d = RootSeqRbanaPidPidyGain_d(self._context)
        self.maxvalue = RootSeqRbanaPidPidyMaxvalue(self._context)
        self.errorlimit = RootSeqRbanaPidPidyErrorlimit(self._context)
        self.minvalue = RootSeqRbanaPidPidyMinvalue(self._context)


class RootSeqRbanaPidPidwMinvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.minvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.minvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.minvalue.regaddr', int(new_val))


class RootSeqRbanaPidPidwErrorlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.errorlimit'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.errorlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.errorlimit.regaddr', int(new_val))


class RootSeqRbanaPidPidwMaxvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.maxvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.maxvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.maxvalue.regaddr', int(new_val))


class RootSeqRbanaPidPidwGain_d(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.gain_d'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.gain_d.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.gain_d.regaddr', int(new_val))


class RootSeqRbanaPidPidwGain_i(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.gain_i'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.gain_i.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.gain_i.regaddr', int(new_val))


class RootSeqRbanaPidPidwControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.mode.lsb', int(new_val))


class RootSeqRbanaPidPidwControlPidinputactual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.pidinputactual'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.pidinputactual.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.pidinputactual.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.pidinputactual.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.pidinputactual.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.pidinputactual.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.pidinputactual.lsb', int(new_val))


class RootSeqRbanaPidPidwControlOutsel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.outsel'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.outsel.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.outsel.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.outsel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.outsel.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.outsel.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.outsel.lsb', int(new_val))


class RootSeqRbanaPidPidwControlPidinputsetpoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.pidinputsetpoint'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.pidinputsetpoint.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.pidinputsetpoint.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.pidinputsetpoint.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.pidinputsetpoint.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.pidinputsetpoint.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.pidinputsetpoint.lsb', int(new_val))


class RootSeqRbanaPidPidwControlPolpidin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.polpidin'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.polpidin.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.polpidin.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.polpidin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.polpidin.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.polpidin.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.polpidin.lsb', int(new_val))


class RootSeqRbanaPidPidwControlMedianfilterena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.medianfilterena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.medianfilterena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.medianfilterena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.medianfilterena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.medianfilterena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.medianfilterena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.medianfilterena.lsb', int(new_val))


class RootSeqRbanaPidPidwControlLoadinterna(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.loadinterna'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.loadinterna.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.loadinterna.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.loadinterna.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.loadinterna.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.loadinterna.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.loadinterna.lsb', int(new_val))


class RootSeqRbanaPidPidwControlPolcomperrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.polcomperrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.polcomperrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.polcomperrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.polcomperrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.polcomperrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.polcomperrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.polcomperrlim.lsb', int(new_val))


class RootSeqRbanaPidPidwControlMemorygendriveena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.memorygendriveena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.memorygendriveena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.memorygendriveena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.memorygendriveena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.memorygendriveena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.memorygendriveena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.memorygendriveena.lsb', int(new_val))


class RootSeqRbanaPidPidwControlMemorygenpositionena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.memorygenpositionena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.memorygenpositionena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.memorygenpositionena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.memorygenpositionena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.memorygenpositionena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.memorygenpositionena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.memorygenpositionena.lsb', int(new_val))


class RootSeqRbanaPidPidwControlModena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control.modena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.modena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.modena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.modena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.modena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.modena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.modena.lsb', int(new_val))


class RootSeqRbanaPidPidwControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.control'
        self.modena = RootSeqRbanaPidPidwControlModena(self._context)
        self.memorygenpositionena = RootSeqRbanaPidPidwControlMemorygenpositionena(self._context)
        self.memorygendriveena = RootSeqRbanaPidPidwControlMemorygendriveena(self._context)
        self.polcomperrlim = RootSeqRbanaPidPidwControlPolcomperrlim(self._context)
        self.loadinterna = RootSeqRbanaPidPidwControlLoadinterna(self._context)
        self.medianfilterena = RootSeqRbanaPidPidwControlMedianfilterena(self._context)
        self.polpidin = RootSeqRbanaPidPidwControlPolpidin(self._context)
        self.pidinputsetpoint = RootSeqRbanaPidPidwControlPidinputsetpoint(self._context)
        self.outsel = RootSeqRbanaPidPidwControlOutsel(self._context)
        self.pidinputactual = RootSeqRbanaPidPidwControlPidinputactual(self._context)
        self.mode = RootSeqRbanaPidPidwControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.control.regaddr', int(new_val))


class RootSeqRbanaPidPidwGain_p(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.gain_p'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.gain_p.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.gain_p.regaddr', int(new_val))


class RootSeqRbanaPidPidwOffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.offset.regaddr', int(new_val))


class RootSeqRbanaPidPidwConversion(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.conversion'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.conversion.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.conversion.regaddr', int(new_val))


class RootSeqRbanaPidPidwStatusReachedmin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.status.reachedmin'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.reachedmin.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.reachedmin.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.reachedmin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.reachedmin.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.reachedmin.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.reachedmin.lsb', int(new_val))


class RootSeqRbanaPidPidwStatusReachederrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.status.reachederrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.reachederrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.reachederrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.reachederrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.reachederrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.reachederrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.reachederrlim.lsb', int(new_val))


class RootSeqRbanaPidPidwStatusReachedmax(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.status.reachedmax'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.reachedmax.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.reachedmax.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.reachedmax.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.reachedmax.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.reachedmax.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.reachedmax.lsb', int(new_val))


class RootSeqRbanaPidPidwStatusInternaloaded(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.status.internaloaded'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.internaloaded.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.internaloaded.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.internaloaded.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.internaloaded.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.internaloaded.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.internaloaded.lsb', int(new_val))


class RootSeqRbanaPidPidwStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.status'
        self.internaloaded = RootSeqRbanaPidPidwStatusInternaloaded(self._context)
        self.reachedmax = RootSeqRbanaPidPidwStatusReachedmax(self._context)
        self.reachederrlim = RootSeqRbanaPidPidwStatusReachederrlim(self._context)
        self.reachedmin = RootSeqRbanaPidPidwStatusReachedmin(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.status.regaddr', int(new_val))


class RootSeqRbanaPidPidwSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.slope'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.slope.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.slope.regaddr', int(new_val))


class RootSeqRbanaPidPidwPreloadvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw.preloadvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidw.preloadvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidw.preloadvalue.regaddr', int(new_val))


class RootSeqRbanaPidPidw(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidw'
        self.preloadvalue = RootSeqRbanaPidPidwPreloadvalue(self._context)
        self.slope = RootSeqRbanaPidPidwSlope(self._context)
        self.status = RootSeqRbanaPidPidwStatus(self._context)
        self.conversion = RootSeqRbanaPidPidwConversion(self._context)
        self.offset = RootSeqRbanaPidPidwOffset(self._context)
        self.gain_p = RootSeqRbanaPidPidwGain_p(self._context)
        self.control = RootSeqRbanaPidPidwControl(self._context)
        self.gain_i = RootSeqRbanaPidPidwGain_i(self._context)
        self.gain_d = RootSeqRbanaPidPidwGain_d(self._context)
        self.maxvalue = RootSeqRbanaPidPidwMaxvalue(self._context)
        self.errorlimit = RootSeqRbanaPidPidwErrorlimit(self._context)
        self.minvalue = RootSeqRbanaPidPidwMinvalue(self._context)


class RootSeqRbanaPidPiduser2Minvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.minvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.minvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.minvalue.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2Errorlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.errorlimit'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.errorlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.errorlimit.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2Maxvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.maxvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.maxvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.maxvalue.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2Gain_d(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.gain_d'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.gain_d.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.gain_d.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2Gain_i(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.gain_i'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.gain_i.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.gain_i.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2ControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.mode.lsb', int(new_val))


class RootSeqRbanaPidPiduser2ControlPidinputactual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.pidinputactual'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.pidinputactual.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.pidinputactual.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.pidinputactual.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.pidinputactual.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.pidinputactual.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.pidinputactual.lsb', int(new_val))


class RootSeqRbanaPidPiduser2ControlOutsel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.outsel'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.outsel.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.outsel.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.outsel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.outsel.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.outsel.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.outsel.lsb', int(new_val))


class RootSeqRbanaPidPiduser2ControlPidinputsetpoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.pidinputsetpoint'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.pidinputsetpoint.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.pidinputsetpoint.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.pidinputsetpoint.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.pidinputsetpoint.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.pidinputsetpoint.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.pidinputsetpoint.lsb', int(new_val))


class RootSeqRbanaPidPiduser2ControlPolpidin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.polpidin'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.polpidin.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.polpidin.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.polpidin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.polpidin.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.polpidin.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.polpidin.lsb', int(new_val))


class RootSeqRbanaPidPiduser2ControlMedianfilterena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.medianfilterena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.medianfilterena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.medianfilterena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.medianfilterena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.medianfilterena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.medianfilterena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.medianfilterena.lsb', int(new_val))


class RootSeqRbanaPidPiduser2ControlLoadinterna(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.loadinterna'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.loadinterna.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.loadinterna.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.loadinterna.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.loadinterna.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.loadinterna.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.loadinterna.lsb', int(new_val))


class RootSeqRbanaPidPiduser2ControlPolcomperrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.polcomperrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.polcomperrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.polcomperrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.polcomperrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.polcomperrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.polcomperrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.polcomperrlim.lsb', int(new_val))


class RootSeqRbanaPidPiduser2ControlMemorygendriveena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.memorygendriveena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.memorygendriveena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.memorygendriveena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.memorygendriveena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.memorygendriveena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.memorygendriveena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.memorygendriveena.lsb', int(new_val))


class RootSeqRbanaPidPiduser2ControlMemorygenpositionena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.memorygenpositionena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.memorygenpositionena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.memorygenpositionena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.memorygenpositionena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.memorygenpositionena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.memorygenpositionena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.memorygenpositionena.lsb', int(new_val))


class RootSeqRbanaPidPiduser2ControlModena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control.modena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.modena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.modena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.modena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.modena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.modena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.modena.lsb', int(new_val))


class RootSeqRbanaPidPiduser2Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.control'
        self.modena = RootSeqRbanaPidPiduser2ControlModena(self._context)
        self.memorygenpositionena = RootSeqRbanaPidPiduser2ControlMemorygenpositionena(self._context)
        self.memorygendriveena = RootSeqRbanaPidPiduser2ControlMemorygendriveena(self._context)
        self.polcomperrlim = RootSeqRbanaPidPiduser2ControlPolcomperrlim(self._context)
        self.loadinterna = RootSeqRbanaPidPiduser2ControlLoadinterna(self._context)
        self.medianfilterena = RootSeqRbanaPidPiduser2ControlMedianfilterena(self._context)
        self.polpidin = RootSeqRbanaPidPiduser2ControlPolpidin(self._context)
        self.pidinputsetpoint = RootSeqRbanaPidPiduser2ControlPidinputsetpoint(self._context)
        self.outsel = RootSeqRbanaPidPiduser2ControlOutsel(self._context)
        self.pidinputactual = RootSeqRbanaPidPiduser2ControlPidinputactual(self._context)
        self.mode = RootSeqRbanaPidPiduser2ControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.control.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2Gain_p(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.gain_p'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.gain_p.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.gain_p.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.offset.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2Conversion(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.conversion'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.conversion.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.conversion.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2StatusReachedmin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.status.reachedmin'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.reachedmin.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.reachedmin.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.reachedmin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.reachedmin.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.reachedmin.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.reachedmin.lsb', int(new_val))


class RootSeqRbanaPidPiduser2StatusReachederrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.status.reachederrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.reachederrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.reachederrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.reachederrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.reachederrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.reachederrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.reachederrlim.lsb', int(new_val))


class RootSeqRbanaPidPiduser2StatusReachedmax(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.status.reachedmax'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.reachedmax.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.reachedmax.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.reachedmax.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.reachedmax.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.reachedmax.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.reachedmax.lsb', int(new_val))


class RootSeqRbanaPidPiduser2StatusInternaloaded(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.status.internaloaded'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.internaloaded.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.internaloaded.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.internaloaded.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.internaloaded.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.internaloaded.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.internaloaded.lsb', int(new_val))


class RootSeqRbanaPidPiduser2Status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.status'
        self.internaloaded = RootSeqRbanaPidPiduser2StatusInternaloaded(self._context)
        self.reachedmax = RootSeqRbanaPidPiduser2StatusReachedmax(self._context)
        self.reachederrlim = RootSeqRbanaPidPiduser2StatusReachederrlim(self._context)
        self.reachedmin = RootSeqRbanaPidPiduser2StatusReachedmin(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.status.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2Slope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.slope'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.slope.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.slope.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2Preloadvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2.preloadvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser2.preloadvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser2.preloadvalue.regaddr', int(new_val))


class RootSeqRbanaPidPiduser2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser2'
        self.preloadvalue = RootSeqRbanaPidPiduser2Preloadvalue(self._context)
        self.slope = RootSeqRbanaPidPiduser2Slope(self._context)
        self.status = RootSeqRbanaPidPiduser2Status(self._context)
        self.conversion = RootSeqRbanaPidPiduser2Conversion(self._context)
        self.offset = RootSeqRbanaPidPiduser2Offset(self._context)
        self.gain_p = RootSeqRbanaPidPiduser2Gain_p(self._context)
        self.control = RootSeqRbanaPidPiduser2Control(self._context)
        self.gain_i = RootSeqRbanaPidPiduser2Gain_i(self._context)
        self.gain_d = RootSeqRbanaPidPiduser2Gain_d(self._context)
        self.maxvalue = RootSeqRbanaPidPiduser2Maxvalue(self._context)
        self.errorlimit = RootSeqRbanaPidPiduser2Errorlimit(self._context)
        self.minvalue = RootSeqRbanaPidPiduser2Minvalue(self._context)


class RootSeqRbanaPidPidxMinvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.minvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.minvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.minvalue.regaddr', int(new_val))


class RootSeqRbanaPidPidxErrorlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.errorlimit'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.errorlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.errorlimit.regaddr', int(new_val))


class RootSeqRbanaPidPidxMaxvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.maxvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.maxvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.maxvalue.regaddr', int(new_val))


class RootSeqRbanaPidPidxGain_d(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.gain_d'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.gain_d.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.gain_d.regaddr', int(new_val))


class RootSeqRbanaPidPidxGain_i(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.gain_i'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.gain_i.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.gain_i.regaddr', int(new_val))


class RootSeqRbanaPidPidxControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.mode.lsb', int(new_val))


class RootSeqRbanaPidPidxControlPidinputactual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.pidinputactual'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.pidinputactual.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.pidinputactual.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.pidinputactual.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.pidinputactual.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.pidinputactual.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.pidinputactual.lsb', int(new_val))


class RootSeqRbanaPidPidxControlOutsel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.outsel'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.outsel.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.outsel.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.outsel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.outsel.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.outsel.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.outsel.lsb', int(new_val))


class RootSeqRbanaPidPidxControlPidinputsetpoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.pidinputsetpoint'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.pidinputsetpoint.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.pidinputsetpoint.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.pidinputsetpoint.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.pidinputsetpoint.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.pidinputsetpoint.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.pidinputsetpoint.lsb', int(new_val))


class RootSeqRbanaPidPidxControlPolpidin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.polpidin'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.polpidin.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.polpidin.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.polpidin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.polpidin.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.polpidin.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.polpidin.lsb', int(new_val))


class RootSeqRbanaPidPidxControlMedianfilterena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.medianfilterena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.medianfilterena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.medianfilterena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.medianfilterena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.medianfilterena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.medianfilterena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.medianfilterena.lsb', int(new_val))


class RootSeqRbanaPidPidxControlLoadinterna(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.loadinterna'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.loadinterna.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.loadinterna.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.loadinterna.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.loadinterna.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.loadinterna.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.loadinterna.lsb', int(new_val))


class RootSeqRbanaPidPidxControlPolcomperrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.polcomperrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.polcomperrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.polcomperrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.polcomperrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.polcomperrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.polcomperrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.polcomperrlim.lsb', int(new_val))


class RootSeqRbanaPidPidxControlMemorygendriveena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.memorygendriveena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.memorygendriveena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.memorygendriveena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.memorygendriveena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.memorygendriveena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.memorygendriveena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.memorygendriveena.lsb', int(new_val))


class RootSeqRbanaPidPidxControlMemorygenpositionena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.memorygenpositionena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.memorygenpositionena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.memorygenpositionena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.memorygenpositionena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.memorygenpositionena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.memorygenpositionena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.memorygenpositionena.lsb', int(new_val))


class RootSeqRbanaPidPidxControlModena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control.modena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.modena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.modena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.modena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.modena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.modena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.modena.lsb', int(new_val))


class RootSeqRbanaPidPidxControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.control'
        self.modena = RootSeqRbanaPidPidxControlModena(self._context)
        self.memorygenpositionena = RootSeqRbanaPidPidxControlMemorygenpositionena(self._context)
        self.memorygendriveena = RootSeqRbanaPidPidxControlMemorygendriveena(self._context)
        self.polcomperrlim = RootSeqRbanaPidPidxControlPolcomperrlim(self._context)
        self.loadinterna = RootSeqRbanaPidPidxControlLoadinterna(self._context)
        self.medianfilterena = RootSeqRbanaPidPidxControlMedianfilterena(self._context)
        self.polpidin = RootSeqRbanaPidPidxControlPolpidin(self._context)
        self.pidinputsetpoint = RootSeqRbanaPidPidxControlPidinputsetpoint(self._context)
        self.outsel = RootSeqRbanaPidPidxControlOutsel(self._context)
        self.pidinputactual = RootSeqRbanaPidPidxControlPidinputactual(self._context)
        self.mode = RootSeqRbanaPidPidxControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.control.regaddr', int(new_val))


class RootSeqRbanaPidPidxGain_p(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.gain_p'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.gain_p.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.gain_p.regaddr', int(new_val))


class RootSeqRbanaPidPidxOffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.offset.regaddr', int(new_val))


class RootSeqRbanaPidPidxConversion(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.conversion'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.conversion.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.conversion.regaddr', int(new_val))


class RootSeqRbanaPidPidxStatusReachedmin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.status.reachedmin'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.reachedmin.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.reachedmin.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.reachedmin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.reachedmin.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.reachedmin.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.reachedmin.lsb', int(new_val))


class RootSeqRbanaPidPidxStatusReachederrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.status.reachederrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.reachederrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.reachederrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.reachederrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.reachederrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.reachederrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.reachederrlim.lsb', int(new_val))


class RootSeqRbanaPidPidxStatusReachedmax(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.status.reachedmax'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.reachedmax.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.reachedmax.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.reachedmax.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.reachedmax.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.reachedmax.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.reachedmax.lsb', int(new_val))


class RootSeqRbanaPidPidxStatusInternaloaded(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.status.internaloaded'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.internaloaded.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.internaloaded.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.internaloaded.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.internaloaded.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.internaloaded.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.internaloaded.lsb', int(new_val))


class RootSeqRbanaPidPidxStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.status'
        self.internaloaded = RootSeqRbanaPidPidxStatusInternaloaded(self._context)
        self.reachedmax = RootSeqRbanaPidPidxStatusReachedmax(self._context)
        self.reachederrlim = RootSeqRbanaPidPidxStatusReachederrlim(self._context)
        self.reachedmin = RootSeqRbanaPidPidxStatusReachedmin(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.status.regaddr', int(new_val))


class RootSeqRbanaPidPidxSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.slope'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.slope.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.slope.regaddr', int(new_val))


class RootSeqRbanaPidPidxPreloadvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx.preloadvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.pidx.preloadvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.pidx.preloadvalue.regaddr', int(new_val))


class RootSeqRbanaPidPidx(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.pidx'
        self.preloadvalue = RootSeqRbanaPidPidxPreloadvalue(self._context)
        self.slope = RootSeqRbanaPidPidxSlope(self._context)
        self.status = RootSeqRbanaPidPidxStatus(self._context)
        self.conversion = RootSeqRbanaPidPidxConversion(self._context)
        self.offset = RootSeqRbanaPidPidxOffset(self._context)
        self.gain_p = RootSeqRbanaPidPidxGain_p(self._context)
        self.control = RootSeqRbanaPidPidxControl(self._context)
        self.gain_i = RootSeqRbanaPidPidxGain_i(self._context)
        self.gain_d = RootSeqRbanaPidPidxGain_d(self._context)
        self.maxvalue = RootSeqRbanaPidPidxMaxvalue(self._context)
        self.errorlimit = RootSeqRbanaPidPidxErrorlimit(self._context)
        self.minvalue = RootSeqRbanaPidPidxMinvalue(self._context)


class RootSeqRbanaPidPiduser1Minvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.minvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.minvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.minvalue.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1Errorlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.errorlimit'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.errorlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.errorlimit.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1Maxvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.maxvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.maxvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.maxvalue.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1Gain_d(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.gain_d'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.gain_d.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.gain_d.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1Gain_i(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.gain_i'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.gain_i.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.gain_i.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1ControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.mode.lsb', int(new_val))


class RootSeqRbanaPidPiduser1ControlPidinputactual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.pidinputactual'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.pidinputactual.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.pidinputactual.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.pidinputactual.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.pidinputactual.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.pidinputactual.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.pidinputactual.lsb', int(new_val))


class RootSeqRbanaPidPiduser1ControlOutsel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.outsel'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.outsel.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.outsel.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.outsel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.outsel.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.outsel.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.outsel.lsb', int(new_val))


class RootSeqRbanaPidPiduser1ControlPidinputsetpoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.pidinputsetpoint'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.pidinputsetpoint.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.pidinputsetpoint.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.pidinputsetpoint.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.pidinputsetpoint.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.pidinputsetpoint.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.pidinputsetpoint.lsb', int(new_val))


class RootSeqRbanaPidPiduser1ControlPolpidin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.polpidin'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.polpidin.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.polpidin.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.polpidin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.polpidin.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.polpidin.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.polpidin.lsb', int(new_val))


class RootSeqRbanaPidPiduser1ControlMedianfilterena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.medianfilterena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.medianfilterena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.medianfilterena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.medianfilterena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.medianfilterena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.medianfilterena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.medianfilterena.lsb', int(new_val))


class RootSeqRbanaPidPiduser1ControlLoadinterna(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.loadinterna'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.loadinterna.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.loadinterna.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.loadinterna.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.loadinterna.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.loadinterna.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.loadinterna.lsb', int(new_val))


class RootSeqRbanaPidPiduser1ControlPolcomperrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.polcomperrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.polcomperrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.polcomperrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.polcomperrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.polcomperrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.polcomperrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.polcomperrlim.lsb', int(new_val))


class RootSeqRbanaPidPiduser1ControlMemorygendriveena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.memorygendriveena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.memorygendriveena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.memorygendriveena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.memorygendriveena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.memorygendriveena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.memorygendriveena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.memorygendriveena.lsb', int(new_val))


class RootSeqRbanaPidPiduser1ControlMemorygenpositionena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.memorygenpositionena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.memorygenpositionena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.memorygenpositionena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.memorygenpositionena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.memorygenpositionena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.memorygenpositionena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.memorygenpositionena.lsb', int(new_val))


class RootSeqRbanaPidPiduser1ControlModena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control.modena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.modena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.modena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.modena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.modena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.modena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.modena.lsb', int(new_val))


class RootSeqRbanaPidPiduser1Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.control'
        self.modena = RootSeqRbanaPidPiduser1ControlModena(self._context)
        self.memorygenpositionena = RootSeqRbanaPidPiduser1ControlMemorygenpositionena(self._context)
        self.memorygendriveena = RootSeqRbanaPidPiduser1ControlMemorygendriveena(self._context)
        self.polcomperrlim = RootSeqRbanaPidPiduser1ControlPolcomperrlim(self._context)
        self.loadinterna = RootSeqRbanaPidPiduser1ControlLoadinterna(self._context)
        self.medianfilterena = RootSeqRbanaPidPiduser1ControlMedianfilterena(self._context)
        self.polpidin = RootSeqRbanaPidPiduser1ControlPolpidin(self._context)
        self.pidinputsetpoint = RootSeqRbanaPidPiduser1ControlPidinputsetpoint(self._context)
        self.outsel = RootSeqRbanaPidPiduser1ControlOutsel(self._context)
        self.pidinputactual = RootSeqRbanaPidPiduser1ControlPidinputactual(self._context)
        self.mode = RootSeqRbanaPidPiduser1ControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.control.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1Gain_p(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.gain_p'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.gain_p.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.gain_p.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.offset.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1Conversion(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.conversion'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.conversion.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.conversion.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1StatusReachedmin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.status.reachedmin'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.reachedmin.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.reachedmin.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.reachedmin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.reachedmin.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.reachedmin.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.reachedmin.lsb', int(new_val))


class RootSeqRbanaPidPiduser1StatusReachederrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.status.reachederrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.reachederrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.reachederrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.reachederrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.reachederrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.reachederrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.reachederrlim.lsb', int(new_val))


class RootSeqRbanaPidPiduser1StatusReachedmax(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.status.reachedmax'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.reachedmax.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.reachedmax.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.reachedmax.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.reachedmax.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.reachedmax.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.reachedmax.lsb', int(new_val))


class RootSeqRbanaPidPiduser1StatusInternaloaded(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.status.internaloaded'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.internaloaded.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.internaloaded.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.internaloaded.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.internaloaded.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.internaloaded.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.internaloaded.lsb', int(new_val))


class RootSeqRbanaPidPiduser1Status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.status'
        self.internaloaded = RootSeqRbanaPidPiduser1StatusInternaloaded(self._context)
        self.reachedmax = RootSeqRbanaPidPiduser1StatusReachedmax(self._context)
        self.reachederrlim = RootSeqRbanaPidPiduser1StatusReachederrlim(self._context)
        self.reachedmin = RootSeqRbanaPidPiduser1StatusReachedmin(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.status.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1Slope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.slope'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.slope.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.slope.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1Preloadvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1.preloadvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.pid.piduser1.preloadvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.pid.piduser1.preloadvalue.regaddr', int(new_val))


class RootSeqRbanaPidPiduser1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid.piduser1'
        self.preloadvalue = RootSeqRbanaPidPiduser1Preloadvalue(self._context)
        self.slope = RootSeqRbanaPidPiduser1Slope(self._context)
        self.status = RootSeqRbanaPidPiduser1Status(self._context)
        self.conversion = RootSeqRbanaPidPiduser1Conversion(self._context)
        self.offset = RootSeqRbanaPidPiduser1Offset(self._context)
        self.gain_p = RootSeqRbanaPidPiduser1Gain_p(self._context)
        self.control = RootSeqRbanaPidPiduser1Control(self._context)
        self.gain_i = RootSeqRbanaPidPiduser1Gain_i(self._context)
        self.gain_d = RootSeqRbanaPidPiduser1Gain_d(self._context)
        self.maxvalue = RootSeqRbanaPidPiduser1Maxvalue(self._context)
        self.errorlimit = RootSeqRbanaPidPiduser1Errorlimit(self._context)
        self.minvalue = RootSeqRbanaPidPiduser1Minvalue(self._context)


class RootSeqRbanaPid(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.pid'
        self.piduser1 = RootSeqRbanaPidPiduser1(self._context)
        self.pidx = RootSeqRbanaPidPidx(self._context)
        self.piduser2 = RootSeqRbanaPidPiduser2(self._context)
        self.pidw = RootSeqRbanaPidPidw(self._context)
        self.pidy = RootSeqRbanaPidPidy(self._context)


class RootSeqRbanaInfastCh2Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.offset.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.gain.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.currentinval.regaddr', int(new_val))


class RootSeqRbanaInfastCh2Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch2.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch2.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInfastCh2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch2'
        self.cccoefz1 = RootSeqRbanaInfastCh2Cccoefz1(self._context)
        self.currentinval = RootSeqRbanaInfastCh2Currentinval(self._context)
        self.cccoefx2 = RootSeqRbanaInfastCh2Cccoefx2(self._context)
        self.cccoefx0 = RootSeqRbanaInfastCh2Cccoefx0(self._context)
        self.cccoefy2 = RootSeqRbanaInfastCh2Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInfastCh2Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInfastCh2Cccoefx1(self._context)
        self.gain = RootSeqRbanaInfastCh2Gain(self._context)
        self.offset = RootSeqRbanaInfastCh2Offset(self._context)
        self.cccoefz2 = RootSeqRbanaInfastCh2Cccoefz2(self._context)
        self.cccoefy0 = RootSeqRbanaInfastCh2Cccoefy0(self._context)
        self.cccoefz0 = RootSeqRbanaInfastCh2Cccoefz0(self._context)


class RootSeqRbanaInfastCh3Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.offset.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.gain.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.currentinval.regaddr', int(new_val))


class RootSeqRbanaInfastCh3Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch3.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch3.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInfastCh3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch3'
        self.cccoefz1 = RootSeqRbanaInfastCh3Cccoefz1(self._context)
        self.currentinval = RootSeqRbanaInfastCh3Currentinval(self._context)
        self.cccoefx2 = RootSeqRbanaInfastCh3Cccoefx2(self._context)
        self.cccoefx0 = RootSeqRbanaInfastCh3Cccoefx0(self._context)
        self.cccoefy2 = RootSeqRbanaInfastCh3Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInfastCh3Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInfastCh3Cccoefx1(self._context)
        self.gain = RootSeqRbanaInfastCh3Gain(self._context)
        self.offset = RootSeqRbanaInfastCh3Offset(self._context)
        self.cccoefz2 = RootSeqRbanaInfastCh3Cccoefz2(self._context)
        self.cccoefy0 = RootSeqRbanaInfastCh3Cccoefy0(self._context)
        self.cccoefz0 = RootSeqRbanaInfastCh3Cccoefz0(self._context)


class RootSeqRbanaInfastCh1Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.offset.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.gain.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.currentinval.regaddr', int(new_val))


class RootSeqRbanaInfastCh1Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.infast.ch1.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.infast.ch1.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInfastCh1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast.ch1'
        self.cccoefz1 = RootSeqRbanaInfastCh1Cccoefz1(self._context)
        self.currentinval = RootSeqRbanaInfastCh1Currentinval(self._context)
        self.cccoefx2 = RootSeqRbanaInfastCh1Cccoefx2(self._context)
        self.cccoefx0 = RootSeqRbanaInfastCh1Cccoefx0(self._context)
        self.cccoefy2 = RootSeqRbanaInfastCh1Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInfastCh1Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInfastCh1Cccoefx1(self._context)
        self.gain = RootSeqRbanaInfastCh1Gain(self._context)
        self.offset = RootSeqRbanaInfastCh1Offset(self._context)
        self.cccoefz2 = RootSeqRbanaInfastCh1Cccoefz2(self._context)
        self.cccoefy0 = RootSeqRbanaInfastCh1Cccoefy0(self._context)
        self.cccoefz0 = RootSeqRbanaInfastCh1Cccoefz0(self._context)


class RootSeqRbanaInfast(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infast'
        self.ch1 = RootSeqRbanaInfastCh1(self._context)
        self.ch3 = RootSeqRbanaInfastCh3(self._context)
        self.ch2 = RootSeqRbanaInfastCh2(self._context)


class RootSeqRbanaOrtSgleBaselineamplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.baselineamplitude'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.baselineamplitude.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.baselineamplitude.regaddr', int(new_val))


class RootSeqRbanaOrtSgleStatusAveraging(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.status.averaging'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.status.averaging.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.status.averaging.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.status.averaging.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.status.averaging.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.status.averaging.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.status.averaging.lsb', int(new_val))


class RootSeqRbanaOrtSgleStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.status'
        self.averaging = RootSeqRbanaOrtSgleStatusAveraging(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.status.regaddr', int(new_val))


class RootSeqRbanaOrtSgleBaselinewindowendsample(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.baselinewindowendsample'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.baselinewindowendsample.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.baselinewindowendsample.regaddr', int(new_val))


class RootSeqRbanaOrtSgleMinvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.minvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.minvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.minvalue.regaddr', int(new_val))


class RootSeqRbanaOrtSgleBaselinewindowbeginsample(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.baselinewindowbeginsample'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.baselinewindowbeginsample.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.baselinewindowbeginsample.regaddr', int(new_val))


class RootSeqRbanaOrtSgleControlFreewaveoutputenable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.control.freewaveoutputenable'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.freewaveoutputenable.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.freewaveoutputenable.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.freewaveoutputenable.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.freewaveoutputenable.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.freewaveoutputenable.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.freewaveoutputenable.lsb', int(new_val))


class RootSeqRbanaOrtSgleControlAveragestart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.control.averagestart'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.averagestart.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.averagestart.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.averagestart.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.averagestart.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.averagestart.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.averagestart.lsb', int(new_val))


class RootSeqRbanaOrtSgleControlUpdatesamplevalues(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.control.updatesamplevalues'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.updatesamplevalues.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.updatesamplevalues.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.updatesamplevalues.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.updatesamplevalues.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.updatesamplevalues.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.updatesamplevalues.lsb', int(new_val))


class RootSeqRbanaOrtSgleControlEnablebaselinecontroller(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.control.enablebaselinecontroller'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.enablebaselinecontroller.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.enablebaselinecontroller.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.enablebaselinecontroller.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.enablebaselinecontroller.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.enablebaselinecontroller.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.enablebaselinecontroller.lsb', int(new_val))


class RootSeqRbanaOrtSgleControlAveragestop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.control.averagestop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.averagestop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.averagestop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.averagestop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.averagestop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.averagestop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.averagestop.lsb', int(new_val))


class RootSeqRbanaOrtSgleControlInputselect(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.control.inputselect'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.inputselect.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.inputselect.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.inputselect.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.inputselect.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.inputselect.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.inputselect.lsb', int(new_val))


class RootSeqRbanaOrtSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.control'
        self.inputselect = RootSeqRbanaOrtSgleControlInputselect(self._context)
        self.averagestop = RootSeqRbanaOrtSgleControlAveragestop(self._context)
        self.enablebaselinecontroller = RootSeqRbanaOrtSgleControlEnablebaselinecontroller(self._context)
        self.updatesamplevalues = RootSeqRbanaOrtSgleControlUpdatesamplevalues(self._context)
        self.averagestart = RootSeqRbanaOrtSgleControlAveragestart(self._context)
        self.freewaveoutputenable = RootSeqRbanaOrtSgleControlFreewaveoutputenable(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.control.regaddr', int(new_val))


class RootSeqRbanaOrtSgleMinposition(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.minposition'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.minposition.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.minposition.regaddr', int(new_val))


class RootSeqRbanaOrtSgleAmplitudereduction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.amplitudereduction'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.amplitudereduction.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.amplitudereduction.regaddr', int(new_val))


class RootSeqRbanaOrtSgleSamplesperperiodSamplesperperiod(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.samplesperperiod.samplesperperiod'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.samplesperperiod.samplesperperiod.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.samplesperperiod.samplesperperiod.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.samplesperperiod.samplesperperiod.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.samplesperperiod.samplesperperiod.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.samplesperperiod.samplesperperiod.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.samplesperperiod.samplesperperiod.lsb', int(new_val))


class RootSeqRbanaOrtSgleSamplesperperiod(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.samplesperperiod'
        self.samplesperperiod = RootSeqRbanaOrtSgleSamplesperperiodSamplesperperiod(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.samplesperperiod.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.samplesperperiod.regaddr', int(new_val))


class RootSeqRbanaOrtSgleFreewavebeginsample(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.freewavebeginsample'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.freewavebeginsample.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.freewavebeginsample.regaddr', int(new_val))


class RootSeqRbanaOrtSgleBaselinemultiplier(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.baselinemultiplier'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.baselinemultiplier.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.baselinemultiplier.regaddr', int(new_val))


class RootSeqRbanaOrtSgleExcitationamplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.excitationamplitude'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.excitationamplitude.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.excitationamplitude.regaddr', int(new_val))


class RootSeqRbanaOrtSgleAmplitudesample(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.amplitudesample'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.amplitudesample.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.amplitudesample.regaddr', int(new_val))


class RootSeqRbanaOrtSgleCantileversamplesperperiodSamplesperperiod(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.cantileversamplesperperiod.samplesperperiod'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.cantileversamplesperperiod.samplesperperiod.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.cantileversamplesperperiod.samplesperperiod.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.cantileversamplesperperiod.samplesperperiod.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.cantileversamplesperperiod.samplesperperiod.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.cantileversamplesperperiod.samplesperperiod.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.cantileversamplesperperiod.samplesperperiod.lsb', int(new_val))


class RootSeqRbanaOrtSgleCantileversamplesperperiod(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.cantileversamplesperperiod'
        self.samplesperperiod = RootSeqRbanaOrtSgleCantileversamplesperperiodSamplesperperiod(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.cantileversamplesperperiod.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.cantileversamplesperperiod.regaddr', int(new_val))


class RootSeqRbanaOrtSgleAverageperiodsAverageperiod(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.averageperiods.averageperiod'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.averageperiods.averageperiod.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.averageperiods.averageperiod.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.averageperiods.averageperiod.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.averageperiods.averageperiod.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.averageperiods.averageperiod.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.averageperiods.averageperiod.lsb', int(new_val))


class RootSeqRbanaOrtSgleAverageperiods(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle.averageperiods'
        self.averageperiod = RootSeqRbanaOrtSgleAverageperiodsAverageperiod(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.ort.sgle.averageperiods.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.ort.sgle.averageperiods.regaddr', int(new_val))


class RootSeqRbanaOrtSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort.sgle'
        self.averageperiods = RootSeqRbanaOrtSgleAverageperiods(self._context)
        self.cantileversamplesperperiod = RootSeqRbanaOrtSgleCantileversamplesperperiod(self._context)
        self.amplitudesample = RootSeqRbanaOrtSgleAmplitudesample(self._context)
        self.excitationamplitude = RootSeqRbanaOrtSgleExcitationamplitude(self._context)
        self.baselinemultiplier = RootSeqRbanaOrtSgleBaselinemultiplier(self._context)
        self.freewavebeginsample = RootSeqRbanaOrtSgleFreewavebeginsample(self._context)
        self.samplesperperiod = RootSeqRbanaOrtSgleSamplesperperiod(self._context)
        self.amplitudereduction = RootSeqRbanaOrtSgleAmplitudereduction(self._context)
        self.minposition = RootSeqRbanaOrtSgleMinposition(self._context)
        self.control = RootSeqRbanaOrtSgleControl(self._context)
        self.baselinewindowbeginsample = RootSeqRbanaOrtSgleBaselinewindowbeginsample(self._context)
        self.minvalue = RootSeqRbanaOrtSgleMinvalue(self._context)
        self.baselinewindowendsample = RootSeqRbanaOrtSgleBaselinewindowendsample(self._context)
        self.status = RootSeqRbanaOrtSgleStatus(self._context)
        self.baselineamplitude = RootSeqRbanaOrtSgleBaselineamplitude(self._context)


class RootSeqRbanaOrt(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.ort'
        self.sgle = RootSeqRbanaOrtSgle(self._context)


class RootSeqRbanaUserioSgleDigitalin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.digitalin'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.digitalin.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.digitalin.regaddr', int(new_val))


class RootSeqRbanaUserioSgleControlOut2enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.out2enable'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2enable.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2enable.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2enable.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2enable.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2enable.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2enable.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlOut1src(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.out1src'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1src.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1src.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1src.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1src.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1src.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1src.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlOut2pulse(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.out2pulse'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2pulse.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2pulse.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2pulse.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2pulse.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2pulse.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2pulse.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlOut2level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.out2level'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2level.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2level.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2level.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2level.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2level.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2level.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlOut2src(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.out2src'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2src.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2src.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2src.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2src.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2src.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2src.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlOut2type(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.out2type'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2type.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2type.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2type.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2type.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out2type.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out2type.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlIn1enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.in1enable'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.in1enable.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.in1enable.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.in1enable.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.in1enable.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.in1enable.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.in1enable.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlOut1level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.out1level'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1level.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1level.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1level.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1level.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1level.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1level.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlOut1pulse(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.out1pulse'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1pulse.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1pulse.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1pulse.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1pulse.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1pulse.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1pulse.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlOut1type(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.out1type'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1type.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1type.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1type.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1type.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1type.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1type.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlIn2enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.in2enable'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.in2enable.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.in2enable.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.in2enable.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.in2enable.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.in2enable.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.in2enable.lsb', int(new_val))


class RootSeqRbanaUserioSgleControlOut1enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control.out1enable'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1enable.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1enable.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1enable.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1enable.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.out1enable.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.out1enable.lsb', int(new_val))


class RootSeqRbanaUserioSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle.control'
        self.out1enable = RootSeqRbanaUserioSgleControlOut1enable(self._context)
        self.in2enable = RootSeqRbanaUserioSgleControlIn2enable(self._context)
        self.out1type = RootSeqRbanaUserioSgleControlOut1type(self._context)
        self.out1pulse = RootSeqRbanaUserioSgleControlOut1pulse(self._context)
        self.out1level = RootSeqRbanaUserioSgleControlOut1level(self._context)
        self.in1enable = RootSeqRbanaUserioSgleControlIn1enable(self._context)
        self.out2type = RootSeqRbanaUserioSgleControlOut2type(self._context)
        self.out2src = RootSeqRbanaUserioSgleControlOut2src(self._context)
        self.out2level = RootSeqRbanaUserioSgleControlOut2level(self._context)
        self.out2pulse = RootSeqRbanaUserioSgleControlOut2pulse(self._context)
        self.out1src = RootSeqRbanaUserioSgleControlOut1src(self._context)
        self.out2enable = RootSeqRbanaUserioSgleControlOut2enable(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.userio.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.userio.sgle.control.regaddr', int(new_val))


class RootSeqRbanaUserioSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio.sgle'
        self.control = RootSeqRbanaUserioSgleControl(self._context)
        self.digitalin = RootSeqRbanaUserioSgleDigitalin(self._context)


class RootSeqRbanaUserio(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.userio'
        self.sgle = RootSeqRbanaUserioSgle(self._context)


class RootSeqRbanaInchannelsdigiSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inchannelsdigi.sgle.control'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inchannelsdigi.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inchannelsdigi.sgle.control.regaddr', int(new_val))


class RootSeqRbanaInchannelsdigiSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inchannelsdigi.sgle'
        self.control = RootSeqRbanaInchannelsdigiSgleControl(self._context)


class RootSeqRbanaInchannelsdigi(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inchannelsdigi'
        self.sgle = RootSeqRbanaInchannelsdigiSgle(self._context)


class RootSeqRbanaInternaSgleControlRst8chconverters(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.interna.sgle.control.rst8chconverters'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.interna.sgle.control.rst8chconverters.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.interna.sgle.control.rst8chconverters.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.interna.sgle.control.rst8chconverters.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.interna.sgle.control.rst8chconverters.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.interna.sgle.control.rst8chconverters.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.interna.sgle.control.rst8chconverters.lsb', int(new_val))


class RootSeqRbanaInternaSgleControlStatusled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.interna.sgle.control.statusled'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.interna.sgle.control.statusled.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.interna.sgle.control.statusled.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.interna.sgle.control.statusled.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.interna.sgle.control.statusled.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.interna.sgle.control.statusled.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.interna.sgle.control.statusled.lsb', int(new_val))


class RootSeqRbanaInternaSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.interna.sgle.control'
        self.statusled = RootSeqRbanaInternaSgleControlStatusled(self._context)
        self.rst8chconverters = RootSeqRbanaInternaSgleControlRst8chconverters(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.interna.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.interna.sgle.control.regaddr', int(new_val))


class RootSeqRbanaInternaSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.interna.sgle'
        self.control = RootSeqRbanaInternaSgleControl(self._context)


class RootSeqRbanaInterna(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.interna'
        self.sgle = RootSeqRbanaInternaSgle(self._context)


class RootSeqRbanaSeqSgleBit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.bit'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.bit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.bit.regaddr', int(new_val))


class RootSeqRbanaSeqSgleStatusReaderror(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.status.readerror'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.status.readerror.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.status.readerror.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.status.readerror.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.status.readerror.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.status.readerror.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.status.readerror.lsb', int(new_val))


class RootSeqRbanaSeqSgleStatusRunning(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.status.running'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.status.running.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.status.running.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.status.running.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.status.running.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.status.running.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.status.running.lsb', int(new_val))


class RootSeqRbanaSeqSgleStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.status'
        self.running = RootSeqRbanaSeqSgleStatusRunning(self._context)
        self.readerror = RootSeqRbanaSeqSgleStatusReaderror(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.status.regaddr', int(new_val))


class RootSeqRbanaSeqSgleData(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.data'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.data.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.data.regaddr', int(new_val))


class RootSeqRbanaSeqSgleSum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.sum'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.sum.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.sum.regaddr', int(new_val))


class RootSeqRbanaSeqSgleControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.start.lsb', int(new_val))


class RootSeqRbanaSeqSgleControlStep(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.control.step'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.step.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.step.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.step.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.step.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.step.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.step.lsb', int(new_val))


class RootSeqRbanaSeqSgleControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.stop.lsb', int(new_val))


class RootSeqRbanaSeqSgleControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.abort.lsb', int(new_val))


class RootSeqRbanaSeqSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.control'
        self.abort = RootSeqRbanaSeqSgleControlAbort(self._context)
        self.stop = RootSeqRbanaSeqSgleControlStop(self._context)
        self.step = RootSeqRbanaSeqSgleControlStep(self._context)
        self.start = RootSeqRbanaSeqSgleControlStart(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.control.regaddr', int(new_val))


class RootSeqRbanaSeqSgleInstrptr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.instrptr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.instrptr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.instrptr.regaddr', int(new_val))


class RootSeqRbanaSeqSgleB(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.b'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.b.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.b.regaddr', int(new_val))


class RootSeqRbanaSeqSgleA(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.a'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.a.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.a.regaddr', int(new_val))


class RootSeqRbanaSeqSgleAddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.addr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.addr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.addr.regaddr', int(new_val))


class RootSeqRbanaSeqSgleM(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.m'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.m.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.m.regaddr', int(new_val))


class RootSeqRbanaSeqSgleSeqreg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle.seqreg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.seq.sgle.seqreg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.seq.sgle.seqreg.regaddr', int(new_val))


class RootSeqRbanaSeqSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq.sgle'
        self.seqreg = RootSeqRbanaSeqSgleSeqreg(self._context)
        self.m = RootSeqRbanaSeqSgleM(self._context)
        self.addr = RootSeqRbanaSeqSgleAddr(self._context)
        self.a = RootSeqRbanaSeqSgleA(self._context)
        self.b = RootSeqRbanaSeqSgleB(self._context)
        self.instrptr = RootSeqRbanaSeqSgleInstrptr(self._context)
        self.control = RootSeqRbanaSeqSgleControl(self._context)
        self.sum = RootSeqRbanaSeqSgleSum(self._context)
        self.data = RootSeqRbanaSeqSgleData(self._context)
        self.status = RootSeqRbanaSeqSgleStatus(self._context)
        self.bit = RootSeqRbanaSeqSgleBit(self._context)


class RootSeqRbanaSeq(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.seq'
        self.sgle = RootSeqRbanaSeqSgle(self._context)


class RootSeqRbanaOuthiresCh8Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh8Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh8Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh8Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh8Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh8ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh8ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh8ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh8ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh8Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh8ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh8ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh8ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh8ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh8Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh8Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh8Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch8.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch8.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh8(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch8'
        self.filterval = RootSeqRbanaOuthiresCh8Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh8Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh8Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh8Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh8Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh8Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh8Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh8Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh8Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh10Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh10Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh10Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh10Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh10Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh10ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh10ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh10ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh10ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh10Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh10ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh10ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh10ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh10ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh10Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh10Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh10Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch10.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch10.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh10(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch10'
        self.filterval = RootSeqRbanaOuthiresCh10Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh10Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh10Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh10Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh10Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh10Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh10Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh10Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh10Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh9Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh9Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh9Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh9Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh9Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh9ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh9ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh9ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh9ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh9Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh9ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh9ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh9ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh9ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh9Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh9Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh9Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch9.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch9.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh9(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch9'
        self.filterval = RootSeqRbanaOuthiresCh9Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh9Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh9Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh9Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh9Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh9Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh9Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh9Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh9Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh11Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh11Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh11Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh11Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh11Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh11ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh11ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh11ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh11ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh11Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh11ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh11ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh11ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh11ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh11Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh11Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh11Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch11.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch11.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh11(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch11'
        self.filterval = RootSeqRbanaOuthiresCh11Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh11Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh11Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh11Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh11Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh11Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh11Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh11Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh11Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh4Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh4Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh4Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh4Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh4Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh4ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh4ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh4ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh4ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh4Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh4ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh4ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh4ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh4ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh4Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh4Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh4Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch4.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch4.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch4'
        self.filterval = RootSeqRbanaOuthiresCh4Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh4Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh4Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh4Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh4Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh4Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh4Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh4Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh4Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh3Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh3Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh3Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh3Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh3Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh3ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh3ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh3ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh3ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh3Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh3ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh3ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh3ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh3ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh3Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh3Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh3Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch3.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch3.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch3'
        self.filterval = RootSeqRbanaOuthiresCh3Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh3Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh3Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh3Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh3Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh3Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh3Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh3Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh3Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh6Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh6Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh6Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh6Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh6Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh6ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh6ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh6ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh6ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh6Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh6ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh6ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh6ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh6ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh6Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh6Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh6Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch6.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch6.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh6(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch6'
        self.filterval = RootSeqRbanaOuthiresCh6Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh6Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh6Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh6Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh6Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh6Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh6Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh6Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh6Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh1Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh1Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh1Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh1Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh1Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh1ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh1ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh1ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh1ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh1Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh1ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh1ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh1ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh1ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh1Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh1Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh1Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch1.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch1.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch1'
        self.filterval = RootSeqRbanaOuthiresCh1Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh1Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh1Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh1Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh1Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh1Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh1Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh1Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh1Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh12Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh12Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh12Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh12Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh12Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh12ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh12ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh12ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh12ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh12Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh12ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh12ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh12ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh12ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh12Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh12Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh12Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch12.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch12.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh12(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch12'
        self.filterval = RootSeqRbanaOuthiresCh12Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh12Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh12Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh12Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh12Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh12Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh12Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh12Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh12Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh2Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh2Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh2Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh2Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh2Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh2ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh2ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh2ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh2ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh2Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh2ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh2ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh2ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh2ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh2Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh2Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh2Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch2.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch2.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch2'
        self.filterval = RootSeqRbanaOuthiresCh2Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh2Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh2Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh2Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh2Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh2Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh2Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh2Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh2Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh5Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh5Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh5Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh5Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh5Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh5ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh5ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh5ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh5ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh5Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh5ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh5ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh5ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh5ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh5Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh5Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh5Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch5.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch5.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh5(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch5'
        self.filterval = RootSeqRbanaOuthiresCh5Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh5Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh5Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh5Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh5Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh5Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh5Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh5Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh5Glitchcorr(self._context)


class RootSeqRbanaOuthiresCh7Glitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.glitchcorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.glitchcorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh7Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.testvalue.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh7Lowordgaincorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.lowordgaincorr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.lowordgaincorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.lowordgaincorr.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh7Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.offset.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh7Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.gain.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh7ControlSelectout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.control.selectout'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.selectout.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.selectout.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.selectout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.selectout.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.selectout.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.selectout.lsb', int(new_val))


class RootSeqRbanaOuthiresCh7ControlBypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.control.bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.bypassfilter.lsb', int(new_val))


class RootSeqRbanaOuthiresCh7ControlAdddigitalmodulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.control.adddigitalmodulation'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.adddigitalmodulation.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.adddigitalmodulation.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.adddigitalmodulation.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.adddigitalmodulation.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.adddigitalmodulation.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.adddigitalmodulation.lsb', int(new_val))


class RootSeqRbanaOuthiresCh7ControlGlitchcorr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.control.glitchcorr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.glitchcorr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.glitchcorr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.glitchcorr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.glitchcorr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.glitchcorr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.glitchcorr.lsb', int(new_val))


class RootSeqRbanaOuthiresCh7Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.control'
        self.glitchcorr = RootSeqRbanaOuthiresCh7ControlGlitchcorr(self._context)
        self.adddigitalmodulation = RootSeqRbanaOuthiresCh7ControlAdddigitalmodulation(self._context)
        self.bypassfilter = RootSeqRbanaOuthiresCh7ControlBypassfilter(self._context)
        self.selectout = RootSeqRbanaOuthiresCh7ControlSelectout(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.control.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh7Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh7Slewrate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.slewrate'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.slewrate.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.slewrate.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh7Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhires.ch7.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhires.ch7.filterval.regaddr', int(new_val))


class RootSeqRbanaOuthiresCh7(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires.ch7'
        self.filterval = RootSeqRbanaOuthiresCh7Filterval(self._context)
        self.slewrate = RootSeqRbanaOuthiresCh7Slewrate(self._context)
        self.currentoutval = RootSeqRbanaOuthiresCh7Currentoutval(self._context)
        self.control = RootSeqRbanaOuthiresCh7Control(self._context)
        self.gain = RootSeqRbanaOuthiresCh7Gain(self._context)
        self.offset = RootSeqRbanaOuthiresCh7Offset(self._context)
        self.lowordgaincorr = RootSeqRbanaOuthiresCh7Lowordgaincorr(self._context)
        self.testvalue = RootSeqRbanaOuthiresCh7Testvalue(self._context)
        self.glitchcorr = RootSeqRbanaOuthiresCh7Glitchcorr(self._context)


class RootSeqRbanaOuthires(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhires'
        self.ch7 = RootSeqRbanaOuthiresCh7(self._context)
        self.ch5 = RootSeqRbanaOuthiresCh5(self._context)
        self.ch2 = RootSeqRbanaOuthiresCh2(self._context)
        self.ch12 = RootSeqRbanaOuthiresCh12(self._context)
        self.ch1 = RootSeqRbanaOuthiresCh1(self._context)
        self.ch6 = RootSeqRbanaOuthiresCh6(self._context)
        self.ch3 = RootSeqRbanaOuthiresCh3(self._context)
        self.ch4 = RootSeqRbanaOuthiresCh4(self._context)
        self.ch11 = RootSeqRbanaOuthiresCh11(self._context)
        self.ch9 = RootSeqRbanaOuthiresCh9(self._context)
        self.ch10 = RootSeqRbanaOuthiresCh10(self._context)
        self.ch8 = RootSeqRbanaOuthiresCh8(self._context)


class RootSeqRbanaDpointfltrSgleChanin8Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin8.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin8.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin8.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin8.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin8.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin8.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin8.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin8(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin8'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin8Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin8.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin8.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleStatusFifofullflag(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.status.fifofullflag'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.fifofullflag.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.fifofullflag.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.fifofullflag.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.fifofullflag.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.fifofullflag.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.fifofullflag.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleStatusAcqdone(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.status.acqdone'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.acqdone.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.acqdone.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.acqdone.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.acqdone.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.acqdone.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.acqdone.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleStatusAcqinprogress(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.status.acqinprogress'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.acqinprogress.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.acqinprogress.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.acqinprogress.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.acqinprogress.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.acqinprogress.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.acqinprogress.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleStatusFifolevel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.status.fifolevel'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.fifolevel.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.fifolevel.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.fifolevel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.fifolevel.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.fifolevel.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.fifolevel.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleStatusFifoemptyflag(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.status.fifoemptyflag'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.fifoemptyflag.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.fifoemptyflag.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.fifoemptyflag.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.fifoemptyflag.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.fifoemptyflag.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.fifoemptyflag.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.status'
        self.fifoemptyflag = RootSeqRbanaDpointfltrSgleStatusFifoemptyflag(self._context)
        self.fifolevel = RootSeqRbanaDpointfltrSgleStatusFifolevel(self._context)
        self.acqinprogress = RootSeqRbanaDpointfltrSgleStatusAcqinprogress(self._context)
        self.acqdone = RootSeqRbanaDpointfltrSgleStatusAcqdone(self._context)
        self.fifofullflag = RootSeqRbanaDpointfltrSgleStatusFifofullflag(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.status.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin10Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin10.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin10.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin10.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin10.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin10.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin10.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin10.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin10(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin10'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin10Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin10.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin10.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin14Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin14.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin14.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin14.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin14.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin14.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin14.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin14.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin14(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin14'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin14Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin14.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin14.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin15Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin15.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin15.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin15.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin15.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin15.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin15.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin15.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin15(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin15'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin15Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin15.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin15.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleControlSamplemask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.control.samplemask'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.control.samplemask.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.control.samplemask.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.control.samplemask.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.control.samplemask.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.control.samplemask.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.control.samplemask.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleControlFilterstage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.control.filterstage'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.control.filterstage.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.control.filterstage.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.control.filterstage.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.control.filterstage.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.control.filterstage.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.control.filterstage.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.control'
        self.filterstage = RootSeqRbanaDpointfltrSgleControlFilterstage(self._context)
        self.samplemask = RootSeqRbanaDpointfltrSgleControlSamplemask(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.control.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleFircoeffs(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.fircoeffs'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.fircoeffs.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.fircoeffs.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin13Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin13.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin13.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin13.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin13.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin13.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin13.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin13.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin13(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin13'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin13Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin13.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin13.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleData(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.data'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.data.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.data.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin9Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin9.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin9.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin9.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin9.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin9.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin9.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin9.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin9(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin9'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin9Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin9.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin9.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin4Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin4.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin4.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin4.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin4.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin4.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin4.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin4.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin4'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin4Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin4.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin0Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin0.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin0.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin0.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin0.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin0.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin0.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin0.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin0'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin0Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin0.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin6Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin6.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin6.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin6.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin6.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin6.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin6.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin6.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin6(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin6'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin6Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin6.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin6.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin2Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin2.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin2.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin2.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin2.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin2.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin2.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin2.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin2'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin2Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin2.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin1Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin1.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin1.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin1.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin1.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin1.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin1.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin1.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin1'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin1Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin1.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin7Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin7.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin7.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin7.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin7.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin7.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin7.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin7.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin7(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin7'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin7Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin7.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin7.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin11Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin11.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin11.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin11.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin11.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin11.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin11.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin11.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin11(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin11'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin11Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin11.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin11.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin12Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin12.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin12.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin12.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin12.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin12.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin12.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin12.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin12(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin12'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin12Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin12.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin12.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin3Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin3.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin3.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin3.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin3.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin3.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin3.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin3.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin3'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin3Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin3.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin5Srcchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin5.srcchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin5.srcchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin5.srcchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin5.srcchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin5.srcchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin5.srcchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin5.srcchan.lsb', int(new_val))


class RootSeqRbanaDpointfltrSgleChanin5(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle.chanin5'
        self.srcchan = RootSeqRbanaDpointfltrSgleChanin5Srcchan(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.dpointfltr.sgle.chanin5.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.dpointfltr.sgle.chanin5.regaddr', int(new_val))


class RootSeqRbanaDpointfltrSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr.sgle'
        self.chanin5 = RootSeqRbanaDpointfltrSgleChanin5(self._context)
        self.chanin3 = RootSeqRbanaDpointfltrSgleChanin3(self._context)
        self.chanin12 = RootSeqRbanaDpointfltrSgleChanin12(self._context)
        self.chanin11 = RootSeqRbanaDpointfltrSgleChanin11(self._context)
        self.chanin7 = RootSeqRbanaDpointfltrSgleChanin7(self._context)
        self.chanin1 = RootSeqRbanaDpointfltrSgleChanin1(self._context)
        self.chanin2 = RootSeqRbanaDpointfltrSgleChanin2(self._context)
        self.chanin6 = RootSeqRbanaDpointfltrSgleChanin6(self._context)
        self.chanin0 = RootSeqRbanaDpointfltrSgleChanin0(self._context)
        self.chanin4 = RootSeqRbanaDpointfltrSgleChanin4(self._context)
        self.chanin9 = RootSeqRbanaDpointfltrSgleChanin9(self._context)
        self.data = RootSeqRbanaDpointfltrSgleData(self._context)
        self.chanin13 = RootSeqRbanaDpointfltrSgleChanin13(self._context)
        self.fircoeffs = RootSeqRbanaDpointfltrSgleFircoeffs(self._context)
        self.control = RootSeqRbanaDpointfltrSgleControl(self._context)
        self.chanin15 = RootSeqRbanaDpointfltrSgleChanin15(self._context)
        self.chanin14 = RootSeqRbanaDpointfltrSgleChanin14(self._context)
        self.chanin10 = RootSeqRbanaDpointfltrSgleChanin10(self._context)
        self.status = RootSeqRbanaDpointfltrSgleStatus(self._context)
        self.chanin8 = RootSeqRbanaDpointfltrSgleChanin8(self._context)


class RootSeqRbanaDpointfltr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.dpointfltr'
        self.sgle = RootSeqRbanaDpointfltrSgle(self._context)


class RootSeqRbanaRegaddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.regaddr'


class RootSeqRbanaOutfastcommonSgleDampinggain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.dampinggain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.dampinggain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.dampinggain.regaddr', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddigitalmodulation2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation2'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation2.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation2.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation2.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation2.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation2.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddigitalhiresmodulation2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation2'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation2.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation2.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation2.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation2.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation2.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddigitalhiresmodulation4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation4'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation4.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation4.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation4.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation4.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation4.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddigitalmodulation4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation4'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation4.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation4.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation4.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation4.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation4.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddigitalhiresmodulation1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation1'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation1.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation1.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation1.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation1.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation1.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlSelectout1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.selectout1'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout1.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout1.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout1.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout1.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout1.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddamping4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddamping4'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping4.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping4.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping4.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping4.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping4.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlSelectout3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.selectout3'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout3.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout3.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout3.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout3.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout3.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddigitalhiresmodulation3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation3'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation3.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation3.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation3.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation3.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalhiresmodulation3.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddigitalmodulation3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation3'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation3.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation3.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation3.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation3.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation3.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddamping1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddamping1'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping1.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping1.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping1.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping1.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping1.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlSelectout2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.selectout2'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout2.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout2.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout2.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout2.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout2.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlSelectout4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.selectout4'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout4.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout4.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout4.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.selectout4.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.selectout4.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddigitalmodulation1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation1'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation1.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation1.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation1.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation1.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddigitalmodulation1.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddamping2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddamping2'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping2.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping2.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping2.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping2.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping2.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControlAdddamping3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control.adddamping3'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping3.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping3.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping3.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.adddamping3.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.adddamping3.lsb', int(new_val))


class RootSeqRbanaOutfastcommonSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle.control'
        self.adddamping3 = RootSeqRbanaOutfastcommonSgleControlAdddamping3(self._context)
        self.adddamping2 = RootSeqRbanaOutfastcommonSgleControlAdddamping2(self._context)
        self.adddigitalmodulation1 = RootSeqRbanaOutfastcommonSgleControlAdddigitalmodulation1(self._context)
        self.selectout4 = RootSeqRbanaOutfastcommonSgleControlSelectout4(self._context)
        self.selectout2 = RootSeqRbanaOutfastcommonSgleControlSelectout2(self._context)
        self.adddamping1 = RootSeqRbanaOutfastcommonSgleControlAdddamping1(self._context)
        self.adddigitalmodulation3 = RootSeqRbanaOutfastcommonSgleControlAdddigitalmodulation3(self._context)
        self.adddigitalhiresmodulation3 = RootSeqRbanaOutfastcommonSgleControlAdddigitalhiresmodulation3(self._context)
        self.selectout3 = RootSeqRbanaOutfastcommonSgleControlSelectout3(self._context)
        self.adddamping4 = RootSeqRbanaOutfastcommonSgleControlAdddamping4(self._context)
        self.selectout1 = RootSeqRbanaOutfastcommonSgleControlSelectout1(self._context)
        self.adddigitalhiresmodulation1 = RootSeqRbanaOutfastcommonSgleControlAdddigitalhiresmodulation1(self._context)
        self.adddigitalmodulation4 = RootSeqRbanaOutfastcommonSgleControlAdddigitalmodulation4(self._context)
        self.adddigitalhiresmodulation4 = RootSeqRbanaOutfastcommonSgleControlAdddigitalhiresmodulation4(self._context)
        self.adddigitalhiresmodulation2 = RootSeqRbanaOutfastcommonSgleControlAdddigitalhiresmodulation2(self._context)
        self.adddigitalmodulation2 = RootSeqRbanaOutfastcommonSgleControlAdddigitalmodulation2(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfastcommon.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfastcommon.sgle.control.regaddr', int(new_val))


class RootSeqRbanaOutfastcommonSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon.sgle'
        self.control = RootSeqRbanaOutfastcommonSgleControl(self._context)
        self.dampinggain = RootSeqRbanaOutfastcommonSgleDampinggain(self._context)


class RootSeqRbanaOutfastcommon(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfastcommon'
        self.sgle = RootSeqRbanaOutfastcommonSgle(self._context)


class RootSeqRbanaOuthirescommonSgleGpfiltrcoef(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhirescommon.sgle.gpfiltrcoef'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.gpfiltrcoef.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.gpfiltrcoef.regaddr', int(new_val))


class RootSeqRbanaOuthirescommonSgleControlGpflt_vld(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhirescommon.sgle.control.gpflt_vld'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.control.gpflt_vld.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.control.gpflt_vld.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.control.gpflt_vld.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.control.gpflt_vld.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.control.gpflt_vld.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.control.gpflt_vld.lsb', int(new_val))


class RootSeqRbanaOuthirescommonSgleControlSelectmod(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhirescommon.sgle.control.selectmod'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.control.selectmod.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.control.selectmod.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.control.selectmod.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.control.selectmod.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.control.selectmod.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.control.selectmod.lsb', int(new_val))


class RootSeqRbanaOuthirescommonSgleControlOuthires_dac8delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhirescommon.sgle.control.outhires_dac8delay'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.control.outhires_dac8delay.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.control.outhires_dac8delay.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.control.outhires_dac8delay.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.control.outhires_dac8delay.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.control.outhires_dac8delay.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.control.outhires_dac8delay.lsb', int(new_val))


class RootSeqRbanaOuthirescommonSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhirescommon.sgle.control'
        self.outhires_dac8delay = RootSeqRbanaOuthirescommonSgleControlOuthires_dac8delay(self._context)
        self.selectmod = RootSeqRbanaOuthirescommonSgleControlSelectmod(self._context)
        self.gpflt_vld = RootSeqRbanaOuthirescommonSgleControlGpflt_vld(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.control.regaddr', int(new_val))


class RootSeqRbanaOuthirescommonSgleGpfiltraddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhirescommon.sgle.gpfiltraddr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outhirescommon.sgle.gpfiltraddr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outhirescommon.sgle.gpfiltraddr.regaddr', int(new_val))


class RootSeqRbanaOuthirescommonSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhirescommon.sgle'
        self.gpfiltraddr = RootSeqRbanaOuthirescommonSgleGpfiltraddr(self._context)
        self.control = RootSeqRbanaOuthirescommonSgleControl(self._context)
        self.gpfiltrcoef = RootSeqRbanaOuthirescommonSgleGpfiltrcoef(self._context)


class RootSeqRbanaOuthirescommon(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outhirescommon'
        self.sgle = RootSeqRbanaOuthirescommonSgle(self._context)


class RootSeqRbanaTimerProc0StatusEventcount(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0.status.eventcount'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.status.eventcount.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.status.eventcount.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.status.eventcount.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.status.eventcount.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.status.eventcount.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.status.eventcount.lsb', int(new_val))


class RootSeqRbanaTimerProc0StatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.status.busy.lsb', int(new_val))


class RootSeqRbanaTimerProc0Status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0.status'
        self.busy = RootSeqRbanaTimerProc0StatusBusy(self._context)
        self.eventcount = RootSeqRbanaTimerProc0StatusEventcount(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.status.regaddr', int(new_val))


class RootSeqRbanaTimerProc0ControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.mode.lsb', int(new_val))


class RootSeqRbanaTimerProc0ControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.start.lsb', int(new_val))


class RootSeqRbanaTimerProc0ControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.stop.lsb', int(new_val))


class RootSeqRbanaTimerProc0ControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.abort.lsb', int(new_val))


class RootSeqRbanaTimerProc0Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0.control'
        self.abort = RootSeqRbanaTimerProc0ControlAbort(self._context)
        self.stop = RootSeqRbanaTimerProc0ControlStop(self._context)
        self.start = RootSeqRbanaTimerProc0ControlStart(self._context)
        self.mode = RootSeqRbanaTimerProc0ControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.control.regaddr', int(new_val))


class RootSeqRbanaTimerProc0Value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.value.regaddr', int(new_val))


class RootSeqRbanaTimerProc0Events(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0.events'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.proc0.events.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.proc0.events.regaddr', int(new_val))


class RootSeqRbanaTimerProc0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.proc0'
        self.events = RootSeqRbanaTimerProc0Events(self._context)
        self.value = RootSeqRbanaTimerProc0Value(self._context)
        self.control = RootSeqRbanaTimerProc0Control(self._context)
        self.status = RootSeqRbanaTimerProc0Status(self._context)


class RootSeqRbanaTimerDbg1StatusEventcount(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1.status.eventcount'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.status.eventcount.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.status.eventcount.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.status.eventcount.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.status.eventcount.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.status.eventcount.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.status.eventcount.lsb', int(new_val))


class RootSeqRbanaTimerDbg1StatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.status.busy.lsb', int(new_val))


class RootSeqRbanaTimerDbg1Status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1.status'
        self.busy = RootSeqRbanaTimerDbg1StatusBusy(self._context)
        self.eventcount = RootSeqRbanaTimerDbg1StatusEventcount(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.status.regaddr', int(new_val))


class RootSeqRbanaTimerDbg1ControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.mode.lsb', int(new_val))


class RootSeqRbanaTimerDbg1ControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.start.lsb', int(new_val))


class RootSeqRbanaTimerDbg1ControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.stop.lsb', int(new_val))


class RootSeqRbanaTimerDbg1ControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.abort.lsb', int(new_val))


class RootSeqRbanaTimerDbg1Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1.control'
        self.abort = RootSeqRbanaTimerDbg1ControlAbort(self._context)
        self.stop = RootSeqRbanaTimerDbg1ControlStop(self._context)
        self.start = RootSeqRbanaTimerDbg1ControlStart(self._context)
        self.mode = RootSeqRbanaTimerDbg1ControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.control.regaddr', int(new_val))


class RootSeqRbanaTimerDbg1Value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.value.regaddr', int(new_val))


class RootSeqRbanaTimerDbg1Events(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1.events'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.timer.dbg1.events.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.timer.dbg1.events.regaddr', int(new_val))


class RootSeqRbanaTimerDbg1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer.dbg1'
        self.events = RootSeqRbanaTimerDbg1Events(self._context)
        self.value = RootSeqRbanaTimerDbg1Value(self._context)
        self.control = RootSeqRbanaTimerDbg1Control(self._context)
        self.status = RootSeqRbanaTimerDbg1Status(self._context)


class RootSeqRbanaTimer(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.timer'
        self.dbg1 = RootSeqRbanaTimerDbg1(self._context)
        self.proc0 = RootSeqRbanaTimerProc0(self._context)


class RootSeqRbanaComparatorComparator2Level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator2.level'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.level.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.level.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator2ControlPolcomparator(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator2.control.polcomparator'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.polcomparator.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.polcomparator.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.polcomparator.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.polcomparator.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.polcomparator.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.polcomparator.lsb', int(new_val))


class RootSeqRbanaComparatorComparator2ControlInputiir_vld(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator2.control.inputiir_vld'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.inputiir_vld.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.inputiir_vld.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.inputiir_vld.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.inputiir_vld.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.inputiir_vld.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.inputiir_vld.lsb', int(new_val))


class RootSeqRbanaComparatorComparator2ControlFilterena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator2.control.filterena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.filterena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.filterena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.filterena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.filterena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.filterena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.filterena.lsb', int(new_val))


class RootSeqRbanaComparatorComparator2ControlComparatorinput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator2.control.comparatorinput'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.comparatorinput.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.comparatorinput.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.comparatorinput.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.comparatorinput.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.comparatorinput.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.comparatorinput.lsb', int(new_val))


class RootSeqRbanaComparatorComparator2Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator2.control'
        self.comparatorinput = RootSeqRbanaComparatorComparator2ControlComparatorinput(self._context)
        self.filterena = RootSeqRbanaComparatorComparator2ControlFilterena(self._context)
        self.inputiir_vld = RootSeqRbanaComparatorComparator2ControlInputiir_vld(self._context)
        self.polcomparator = RootSeqRbanaComparatorComparator2ControlPolcomparator(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.control.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator2Iircoef(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator2.iircoef'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.iircoef.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.iircoef.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator2Iiraddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator2.iiraddr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator2.iiraddr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator2.iiraddr.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator2'
        self.iiraddr = RootSeqRbanaComparatorComparator2Iiraddr(self._context)
        self.iircoef = RootSeqRbanaComparatorComparator2Iircoef(self._context)
        self.control = RootSeqRbanaComparatorComparator2Control(self._context)
        self.level = RootSeqRbanaComparatorComparator2Level(self._context)


class RootSeqRbanaComparatorComparator1Level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator1.level'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.level.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.level.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator1ControlPolcomparator(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator1.control.polcomparator'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.polcomparator.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.polcomparator.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.polcomparator.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.polcomparator.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.polcomparator.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.polcomparator.lsb', int(new_val))


class RootSeqRbanaComparatorComparator1ControlInputiir_vld(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator1.control.inputiir_vld'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.inputiir_vld.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.inputiir_vld.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.inputiir_vld.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.inputiir_vld.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.inputiir_vld.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.inputiir_vld.lsb', int(new_val))


class RootSeqRbanaComparatorComparator1ControlFilterena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator1.control.filterena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.filterena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.filterena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.filterena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.filterena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.filterena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.filterena.lsb', int(new_val))


class RootSeqRbanaComparatorComparator1ControlComparatorinput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator1.control.comparatorinput'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.comparatorinput.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.comparatorinput.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.comparatorinput.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.comparatorinput.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.comparatorinput.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.comparatorinput.lsb', int(new_val))


class RootSeqRbanaComparatorComparator1Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator1.control'
        self.comparatorinput = RootSeqRbanaComparatorComparator1ControlComparatorinput(self._context)
        self.filterena = RootSeqRbanaComparatorComparator1ControlFilterena(self._context)
        self.inputiir_vld = RootSeqRbanaComparatorComparator1ControlInputiir_vld(self._context)
        self.polcomparator = RootSeqRbanaComparatorComparator1ControlPolcomparator(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.control.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator1Iircoef(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator1.iircoef'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.iircoef.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.iircoef.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator1Iiraddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator1.iiraddr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator1.iiraddr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator1.iiraddr.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator1'
        self.iiraddr = RootSeqRbanaComparatorComparator1Iiraddr(self._context)
        self.iircoef = RootSeqRbanaComparatorComparator1Iircoef(self._context)
        self.control = RootSeqRbanaComparatorComparator1Control(self._context)
        self.level = RootSeqRbanaComparatorComparator1Level(self._context)


class RootSeqRbanaComparatorComparator3Level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator3.level'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.level.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.level.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator3ControlPolcomparator(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator3.control.polcomparator'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.polcomparator.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.polcomparator.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.polcomparator.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.polcomparator.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.polcomparator.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.polcomparator.lsb', int(new_val))


class RootSeqRbanaComparatorComparator3ControlInputiir_vld(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator3.control.inputiir_vld'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.inputiir_vld.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.inputiir_vld.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.inputiir_vld.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.inputiir_vld.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.inputiir_vld.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.inputiir_vld.lsb', int(new_val))


class RootSeqRbanaComparatorComparator3ControlFilterena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator3.control.filterena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.filterena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.filterena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.filterena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.filterena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.filterena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.filterena.lsb', int(new_val))


class RootSeqRbanaComparatorComparator3ControlComparatorinput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator3.control.comparatorinput'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.comparatorinput.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.comparatorinput.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.comparatorinput.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.comparatorinput.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.comparatorinput.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.comparatorinput.lsb', int(new_val))


class RootSeqRbanaComparatorComparator3Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator3.control'
        self.comparatorinput = RootSeqRbanaComparatorComparator3ControlComparatorinput(self._context)
        self.filterena = RootSeqRbanaComparatorComparator3ControlFilterena(self._context)
        self.inputiir_vld = RootSeqRbanaComparatorComparator3ControlInputiir_vld(self._context)
        self.polcomparator = RootSeqRbanaComparatorComparator3ControlPolcomparator(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.control.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator3Iircoef(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator3.iircoef'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.iircoef.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.iircoef.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator3Iiraddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator3.iiraddr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.comparator.comparator3.iiraddr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.comparator.comparator3.iiraddr.regaddr', int(new_val))


class RootSeqRbanaComparatorComparator3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator.comparator3'
        self.iiraddr = RootSeqRbanaComparatorComparator3Iiraddr(self._context)
        self.iircoef = RootSeqRbanaComparatorComparator3Iircoef(self._context)
        self.control = RootSeqRbanaComparatorComparator3Control(self._context)
        self.level = RootSeqRbanaComparatorComparator3Level(self._context)


class RootSeqRbanaComparator(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.comparator'
        self.comparator3 = RootSeqRbanaComparatorComparator3(self._context)
        self.comparator1 = RootSeqRbanaComparatorComparator1(self._context)
        self.comparator2 = RootSeqRbanaComparatorComparator2(self._context)


class RootSeqRbanaInfastcommon(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.infastcommon'


class RootSeqRbanaOutfastCh2Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch2.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch2.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch2.gain.regaddr', int(new_val))


class RootSeqRbanaOutfastCh2Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch2.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch2.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch2.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOutfastCh2Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch2.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch2.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch2.testvalue.regaddr', int(new_val))


class RootSeqRbanaOutfastCh2Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch2.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch2.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch2.offset.regaddr', int(new_val))


class RootSeqRbanaOutfastCh2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch2'
        self.offset = RootSeqRbanaOutfastCh2Offset(self._context)
        self.testvalue = RootSeqRbanaOutfastCh2Testvalue(self._context)
        self.currentoutval = RootSeqRbanaOutfastCh2Currentoutval(self._context)
        self.gain = RootSeqRbanaOutfastCh2Gain(self._context)


class RootSeqRbanaOutfastCh3Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch3.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch3.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch3.gain.regaddr', int(new_val))


class RootSeqRbanaOutfastCh3Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch3.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch3.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch3.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOutfastCh3Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch3.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch3.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch3.testvalue.regaddr', int(new_val))


class RootSeqRbanaOutfastCh3Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch3.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch3.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch3.offset.regaddr', int(new_val))


class RootSeqRbanaOutfastCh3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch3'
        self.offset = RootSeqRbanaOutfastCh3Offset(self._context)
        self.testvalue = RootSeqRbanaOutfastCh3Testvalue(self._context)
        self.currentoutval = RootSeqRbanaOutfastCh3Currentoutval(self._context)
        self.gain = RootSeqRbanaOutfastCh3Gain(self._context)


class RootSeqRbanaOutfastCh4Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch4.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch4.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch4.gain.regaddr', int(new_val))


class RootSeqRbanaOutfastCh4Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch4.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch4.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch4.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOutfastCh4Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch4.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch4.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch4.testvalue.regaddr', int(new_val))


class RootSeqRbanaOutfastCh4Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch4.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch4.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch4.offset.regaddr', int(new_val))


class RootSeqRbanaOutfastCh4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch4'
        self.offset = RootSeqRbanaOutfastCh4Offset(self._context)
        self.testvalue = RootSeqRbanaOutfastCh4Testvalue(self._context)
        self.currentoutval = RootSeqRbanaOutfastCh4Currentoutval(self._context)
        self.gain = RootSeqRbanaOutfastCh4Gain(self._context)


class RootSeqRbanaOutfastCh1Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch1.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch1.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch1.gain.regaddr', int(new_val))


class RootSeqRbanaOutfastCh1Currentoutval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch1.currentoutval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch1.currentoutval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch1.currentoutval.regaddr', int(new_val))


class RootSeqRbanaOutfastCh1Testvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch1.testvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch1.testvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch1.testvalue.regaddr', int(new_val))


class RootSeqRbanaOutfastCh1Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch1.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.outfast.ch1.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.outfast.ch1.offset.regaddr', int(new_val))


class RootSeqRbanaOutfastCh1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast.ch1'
        self.offset = RootSeqRbanaOutfastCh1Offset(self._context)
        self.testvalue = RootSeqRbanaOutfastCh1Testvalue(self._context)
        self.currentoutval = RootSeqRbanaOutfastCh1Currentoutval(self._context)
        self.gain = RootSeqRbanaOutfastCh1Gain(self._context)


class RootSeqRbanaOutfast(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.outfast'
        self.ch1 = RootSeqRbanaOutfastCh1(self._context)
        self.ch4 = RootSeqRbanaOutfastCh4(self._context)
        self.ch3 = RootSeqRbanaOutfastCh3(self._context)
        self.ch2 = RootSeqRbanaOutfastCh2(self._context)


class RootSeqRbanaEventmgrSgleEventsnapshot(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.eventsnapshot'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.eventsnapshot.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.eventsnapshot.regaddr', int(new_val))


class RootSeqRbanaEventmgrSgleStatusAbortevent(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.status.abortevent'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.status.abortevent.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.status.abortevent.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.status.abortevent.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.status.abortevent.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.status.abortevent.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.status.abortevent.lsb', int(new_val))


class RootSeqRbanaEventmgrSgleStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.status.busy.lsb', int(new_val))


class RootSeqRbanaEventmgrSgleStatusStopevent(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.status.stopevent'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.status.stopevent.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.status.stopevent.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.status.stopevent.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.status.stopevent.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.status.stopevent.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.status.stopevent.lsb', int(new_val))


class RootSeqRbanaEventmgrSgleStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.status'
        self.stopevent = RootSeqRbanaEventmgrSgleStatusStopevent(self._context)
        self.busy = RootSeqRbanaEventmgrSgleStatusBusy(self._context)
        self.abortevent = RootSeqRbanaEventmgrSgleStatusAbortevent(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.status.regaddr', int(new_val))


class RootSeqRbanaEventmgrSgleStopmask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.stopmask'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.stopmask.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.stopmask.regaddr', int(new_val))


class RootSeqRbanaEventmgrSgleControlSoftevent1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.control.softevent1'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent1.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent1.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent1.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent1.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent1.lsb', int(new_val))


class RootSeqRbanaEventmgrSgleControlSoftevent3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.control.softevent3'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent3.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent3.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent3.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent3.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent3.lsb', int(new_val))


class RootSeqRbanaEventmgrSgleControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.start.lsb', int(new_val))


class RootSeqRbanaEventmgrSgleControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.stop.lsb', int(new_val))


class RootSeqRbanaEventmgrSgleControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.abort.lsb', int(new_val))


class RootSeqRbanaEventmgrSgleControlSoftevent2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.control.softevent2'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent2.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent2.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent2.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent2.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent2.lsb', int(new_val))


class RootSeqRbanaEventmgrSgleControlSoftevent0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.control.softevent0'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent0.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent0.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent0.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.softevent0.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.softevent0.lsb', int(new_val))


class RootSeqRbanaEventmgrSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.control'
        self.softevent0 = RootSeqRbanaEventmgrSgleControlSoftevent0(self._context)
        self.softevent2 = RootSeqRbanaEventmgrSgleControlSoftevent2(self._context)
        self.abort = RootSeqRbanaEventmgrSgleControlAbort(self._context)
        self.stop = RootSeqRbanaEventmgrSgleControlStop(self._context)
        self.start = RootSeqRbanaEventmgrSgleControlStart(self._context)
        self.softevent3 = RootSeqRbanaEventmgrSgleControlSoftevent3(self._context)
        self.softevent1 = RootSeqRbanaEventmgrSgleControlSoftevent1(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.control.regaddr', int(new_val))


class RootSeqRbanaEventmgrSgleStopeventmask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.stopeventmask'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.stopeventmask.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.stopeventmask.regaddr', int(new_val))


class RootSeqRbanaEventmgrSgleEventvector(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.eventvector'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.eventvector.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.eventvector.regaddr', int(new_val))


class RootSeqRbanaEventmgrSgleAndmask0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.andmask0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.andmask0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.andmask0.regaddr', int(new_val))


class RootSeqRbanaEventmgrSgleStartmask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.startmask'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.startmask.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.startmask.regaddr', int(new_val))


class RootSeqRbanaEventmgrSgleAborteventmask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle.aborteventmask'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.eventmgr.sgle.aborteventmask.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.eventmgr.sgle.aborteventmask.regaddr', int(new_val))


class RootSeqRbanaEventmgrSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr.sgle'
        self.aborteventmask = RootSeqRbanaEventmgrSgleAborteventmask(self._context)
        self.startmask = RootSeqRbanaEventmgrSgleStartmask(self._context)
        self.andmask0 = RootSeqRbanaEventmgrSgleAndmask0(self._context)
        self.eventvector = RootSeqRbanaEventmgrSgleEventvector(self._context)
        self.stopeventmask = RootSeqRbanaEventmgrSgleStopeventmask(self._context)
        self.control = RootSeqRbanaEventmgrSgleControl(self._context)
        self.stopmask = RootSeqRbanaEventmgrSgleStopmask(self._context)
        self.status = RootSeqRbanaEventmgrSgleStatus(self._context)
        self.eventsnapshot = RootSeqRbanaEventmgrSgleEventsnapshot(self._context)


class RootSeqRbanaEventmgr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.eventmgr'
        self.sgle = RootSeqRbanaEventmgrSgle(self._context)


class RootSeqRbanaRampgenTestOut(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.out'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.out.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.out.regaddr', int(new_val))


class RootSeqRbanaRampgenTestStatusReachedlowerlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.status.reachedlowerlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.reachedlowerlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.reachedlowerlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.reachedlowerlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.reachedlowerlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.reachedlowerlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.reachedlowerlimit.lsb', int(new_val))


class RootSeqRbanaRampgenTestStatusReachedregularend(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.status.reachedregularend'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.reachedregularend.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.reachedregularend.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.reachedregularend.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.reachedregularend.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.reachedregularend.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.reachedregularend.lsb', int(new_val))


class RootSeqRbanaRampgenTestStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.busy.lsb', int(new_val))


class RootSeqRbanaRampgenTestStatusReachedupperlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.status.reachedupperlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.reachedupperlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.reachedupperlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.reachedupperlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.reachedupperlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.reachedupperlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.reachedupperlimit.lsb', int(new_val))


class RootSeqRbanaRampgenTestStatusCountup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.status.countup'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.countup.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.countup.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.countup.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.countup.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.countup.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.countup.lsb', int(new_val))


class RootSeqRbanaRampgenTestStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.status'
        self.countup = RootSeqRbanaRampgenTestStatusCountup(self._context)
        self.reachedupperlimit = RootSeqRbanaRampgenTestStatusReachedupperlimit(self._context)
        self.busy = RootSeqRbanaRampgenTestStatusBusy(self._context)
        self.reachedregularend = RootSeqRbanaRampgenTestStatusReachedregularend(self._context)
        self.reachedlowerlimit = RootSeqRbanaRampgenTestStatusReachedlowerlimit(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.status.regaddr', int(new_val))


class RootSeqRbanaRampgenTestValue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.value.regaddr', int(new_val))


class RootSeqRbanaRampgenTestLimit_neg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.limit_neg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.limit_neg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.limit_neg.regaddr', int(new_val))


class RootSeqRbanaRampgenTestControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.mode.lsb', int(new_val))


class RootSeqRbanaRampgenTestControlInit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.control.init'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.init.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.init.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.init.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.init.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.init.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.init.lsb', int(new_val))


class RootSeqRbanaRampgenTestControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.start.lsb', int(new_val))


class RootSeqRbanaRampgenTestControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.stop.lsb', int(new_val))


class RootSeqRbanaRampgenTestControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.abort.lsb', int(new_val))


class RootSeqRbanaRampgenTestControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.control'
        self.abort = RootSeqRbanaRampgenTestControlAbort(self._context)
        self.stop = RootSeqRbanaRampgenTestControlStop(self._context)
        self.start = RootSeqRbanaRampgenTestControlStart(self._context)
        self.init = RootSeqRbanaRampgenTestControlInit(self._context)
        self.mode = RootSeqRbanaRampgenTestControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.control.regaddr', int(new_val))


class RootSeqRbanaRampgenTestIncrement(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.increment'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.increment.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.increment.regaddr', int(new_val))


class RootSeqRbanaRampgenTestLimit_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test.limit_pos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.test.limit_pos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.test.limit_pos.regaddr', int(new_val))


class RootSeqRbanaRampgenTest(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.test'
        self.limit_pos = RootSeqRbanaRampgenTestLimit_pos(self._context)
        self.increment = RootSeqRbanaRampgenTestIncrement(self._context)
        self.control = RootSeqRbanaRampgenTestControl(self._context)
        self.limit_neg = RootSeqRbanaRampgenTestLimit_neg(self._context)
        self.value = RootSeqRbanaRampgenTestValue(self._context)
        self.status = RootSeqRbanaRampgenTestStatus(self._context)
        self.out = RootSeqRbanaRampgenTestOut(self._context)


class RootSeqRbanaRampgenApproachOut(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.out'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.out.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.out.regaddr', int(new_val))


class RootSeqRbanaRampgenApproachStatusReachedlowerlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.status.reachedlowerlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.reachedlowerlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.reachedlowerlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.reachedlowerlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.reachedlowerlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.reachedlowerlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.reachedlowerlimit.lsb', int(new_val))


class RootSeqRbanaRampgenApproachStatusReachedregularend(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.status.reachedregularend'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.reachedregularend.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.reachedregularend.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.reachedregularend.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.reachedregularend.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.reachedregularend.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.reachedregularend.lsb', int(new_val))


class RootSeqRbanaRampgenApproachStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.busy.lsb', int(new_val))


class RootSeqRbanaRampgenApproachStatusReachedupperlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.status.reachedupperlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.reachedupperlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.reachedupperlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.reachedupperlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.reachedupperlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.reachedupperlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.reachedupperlimit.lsb', int(new_val))


class RootSeqRbanaRampgenApproachStatusCountup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.status.countup'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.countup.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.countup.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.countup.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.countup.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.countup.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.countup.lsb', int(new_val))


class RootSeqRbanaRampgenApproachStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.status'
        self.countup = RootSeqRbanaRampgenApproachStatusCountup(self._context)
        self.reachedupperlimit = RootSeqRbanaRampgenApproachStatusReachedupperlimit(self._context)
        self.busy = RootSeqRbanaRampgenApproachStatusBusy(self._context)
        self.reachedregularend = RootSeqRbanaRampgenApproachStatusReachedregularend(self._context)
        self.reachedlowerlimit = RootSeqRbanaRampgenApproachStatusReachedlowerlimit(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.status.regaddr', int(new_val))


class RootSeqRbanaRampgenApproachValue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.value.regaddr', int(new_val))


class RootSeqRbanaRampgenApproachLimit_neg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.limit_neg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.limit_neg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.limit_neg.regaddr', int(new_val))


class RootSeqRbanaRampgenApproachControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.mode.lsb', int(new_val))


class RootSeqRbanaRampgenApproachControlInit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.control.init'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.init.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.init.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.init.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.init.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.init.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.init.lsb', int(new_val))


class RootSeqRbanaRampgenApproachControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.start.lsb', int(new_val))


class RootSeqRbanaRampgenApproachControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.stop.lsb', int(new_val))


class RootSeqRbanaRampgenApproachControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.abort.lsb', int(new_val))


class RootSeqRbanaRampgenApproachControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.control'
        self.abort = RootSeqRbanaRampgenApproachControlAbort(self._context)
        self.stop = RootSeqRbanaRampgenApproachControlStop(self._context)
        self.start = RootSeqRbanaRampgenApproachControlStart(self._context)
        self.init = RootSeqRbanaRampgenApproachControlInit(self._context)
        self.mode = RootSeqRbanaRampgenApproachControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.control.regaddr', int(new_val))


class RootSeqRbanaRampgenApproachIncrement(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.increment'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.increment.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.increment.regaddr', int(new_val))


class RootSeqRbanaRampgenApproachLimit_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach.limit_pos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.approach.limit_pos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.approach.limit_pos.regaddr', int(new_val))


class RootSeqRbanaRampgenApproach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.approach'
        self.limit_pos = RootSeqRbanaRampgenApproachLimit_pos(self._context)
        self.increment = RootSeqRbanaRampgenApproachIncrement(self._context)
        self.control = RootSeqRbanaRampgenApproachControl(self._context)
        self.limit_neg = RootSeqRbanaRampgenApproachLimit_neg(self._context)
        self.value = RootSeqRbanaRampgenApproachValue(self._context)
        self.status = RootSeqRbanaRampgenApproachStatus(self._context)
        self.out = RootSeqRbanaRampgenApproachOut(self._context)


class RootSeqRbanaRampgenTipvoltageOut(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.out'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.out.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.out.regaddr', int(new_val))


class RootSeqRbanaRampgenTipvoltageStatusReachedlowerlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.status.reachedlowerlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.reachedlowerlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.reachedlowerlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.reachedlowerlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.reachedlowerlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.reachedlowerlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.reachedlowerlimit.lsb', int(new_val))


class RootSeqRbanaRampgenTipvoltageStatusReachedregularend(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.status.reachedregularend'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.reachedregularend.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.reachedregularend.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.reachedregularend.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.reachedregularend.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.reachedregularend.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.reachedregularend.lsb', int(new_val))


class RootSeqRbanaRampgenTipvoltageStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.busy.lsb', int(new_val))


class RootSeqRbanaRampgenTipvoltageStatusReachedupperlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.status.reachedupperlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.reachedupperlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.reachedupperlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.reachedupperlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.reachedupperlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.reachedupperlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.reachedupperlimit.lsb', int(new_val))


class RootSeqRbanaRampgenTipvoltageStatusCountup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.status.countup'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.countup.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.countup.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.countup.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.countup.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.countup.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.countup.lsb', int(new_val))


class RootSeqRbanaRampgenTipvoltageStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.status'
        self.countup = RootSeqRbanaRampgenTipvoltageStatusCountup(self._context)
        self.reachedupperlimit = RootSeqRbanaRampgenTipvoltageStatusReachedupperlimit(self._context)
        self.busy = RootSeqRbanaRampgenTipvoltageStatusBusy(self._context)
        self.reachedregularend = RootSeqRbanaRampgenTipvoltageStatusReachedregularend(self._context)
        self.reachedlowerlimit = RootSeqRbanaRampgenTipvoltageStatusReachedlowerlimit(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.status.regaddr', int(new_val))


class RootSeqRbanaRampgenTipvoltageValue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.value.regaddr', int(new_val))


class RootSeqRbanaRampgenTipvoltageLimit_neg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.limit_neg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.limit_neg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.limit_neg.regaddr', int(new_val))


class RootSeqRbanaRampgenTipvoltageControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.mode.lsb', int(new_val))


class RootSeqRbanaRampgenTipvoltageControlInit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.control.init'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.init.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.init.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.init.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.init.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.init.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.init.lsb', int(new_val))


class RootSeqRbanaRampgenTipvoltageControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.start.lsb', int(new_val))


class RootSeqRbanaRampgenTipvoltageControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.stop.lsb', int(new_val))


class RootSeqRbanaRampgenTipvoltageControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.abort.lsb', int(new_val))


class RootSeqRbanaRampgenTipvoltageControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.control'
        self.abort = RootSeqRbanaRampgenTipvoltageControlAbort(self._context)
        self.stop = RootSeqRbanaRampgenTipvoltageControlStop(self._context)
        self.start = RootSeqRbanaRampgenTipvoltageControlStart(self._context)
        self.init = RootSeqRbanaRampgenTipvoltageControlInit(self._context)
        self.mode = RootSeqRbanaRampgenTipvoltageControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.control.regaddr', int(new_val))


class RootSeqRbanaRampgenTipvoltageIncrement(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.increment'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.increment.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.increment.regaddr', int(new_val))


class RootSeqRbanaRampgenTipvoltageLimit_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage.limit_pos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.tipvoltage.limit_pos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.tipvoltage.limit_pos.regaddr', int(new_val))


class RootSeqRbanaRampgenTipvoltage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.tipvoltage'
        self.limit_pos = RootSeqRbanaRampgenTipvoltageLimit_pos(self._context)
        self.increment = RootSeqRbanaRampgenTipvoltageIncrement(self._context)
        self.control = RootSeqRbanaRampgenTipvoltageControl(self._context)
        self.limit_neg = RootSeqRbanaRampgenTipvoltageLimit_neg(self._context)
        self.value = RootSeqRbanaRampgenTipvoltageValue(self._context)
        self.status = RootSeqRbanaRampgenTipvoltageStatus(self._context)
        self.out = RootSeqRbanaRampgenTipvoltageOut(self._context)


class RootSeqRbanaRampgenUser4Out(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.out'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.out.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.out.regaddr', int(new_val))


class RootSeqRbanaRampgenUser4StatusReachedlowerlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.status.reachedlowerlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.reachedlowerlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.reachedlowerlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.reachedlowerlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.reachedlowerlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.reachedlowerlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.reachedlowerlimit.lsb', int(new_val))


class RootSeqRbanaRampgenUser4StatusReachedregularend(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.status.reachedregularend'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.reachedregularend.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.reachedregularend.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.reachedregularend.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.reachedregularend.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.reachedregularend.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.reachedregularend.lsb', int(new_val))


class RootSeqRbanaRampgenUser4StatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.busy.lsb', int(new_val))


class RootSeqRbanaRampgenUser4StatusReachedupperlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.status.reachedupperlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.reachedupperlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.reachedupperlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.reachedupperlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.reachedupperlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.reachedupperlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.reachedupperlimit.lsb', int(new_val))


class RootSeqRbanaRampgenUser4StatusCountup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.status.countup'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.countup.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.countup.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.countup.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.countup.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.countup.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.countup.lsb', int(new_val))


class RootSeqRbanaRampgenUser4Status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.status'
        self.countup = RootSeqRbanaRampgenUser4StatusCountup(self._context)
        self.reachedupperlimit = RootSeqRbanaRampgenUser4StatusReachedupperlimit(self._context)
        self.busy = RootSeqRbanaRampgenUser4StatusBusy(self._context)
        self.reachedregularend = RootSeqRbanaRampgenUser4StatusReachedregularend(self._context)
        self.reachedlowerlimit = RootSeqRbanaRampgenUser4StatusReachedlowerlimit(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.status.regaddr', int(new_val))


class RootSeqRbanaRampgenUser4Value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.value.regaddr', int(new_val))


class RootSeqRbanaRampgenUser4Limit_neg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.limit_neg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.limit_neg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.limit_neg.regaddr', int(new_val))


class RootSeqRbanaRampgenUser4ControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.mode.lsb', int(new_val))


class RootSeqRbanaRampgenUser4ControlInit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.control.init'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.init.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.init.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.init.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.init.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.init.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.init.lsb', int(new_val))


class RootSeqRbanaRampgenUser4ControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.start.lsb', int(new_val))


class RootSeqRbanaRampgenUser4ControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.stop.lsb', int(new_val))


class RootSeqRbanaRampgenUser4ControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.abort.lsb', int(new_val))


class RootSeqRbanaRampgenUser4Control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.control'
        self.abort = RootSeqRbanaRampgenUser4ControlAbort(self._context)
        self.stop = RootSeqRbanaRampgenUser4ControlStop(self._context)
        self.start = RootSeqRbanaRampgenUser4ControlStart(self._context)
        self.init = RootSeqRbanaRampgenUser4ControlInit(self._context)
        self.mode = RootSeqRbanaRampgenUser4ControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.control.regaddr', int(new_val))


class RootSeqRbanaRampgenUser4Increment(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.increment'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.increment.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.increment.regaddr', int(new_val))


class RootSeqRbanaRampgenUser4Limit_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4.limit_pos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.user4.limit_pos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.user4.limit_pos.regaddr', int(new_val))


class RootSeqRbanaRampgenUser4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.user4'
        self.limit_pos = RootSeqRbanaRampgenUser4Limit_pos(self._context)
        self.increment = RootSeqRbanaRampgenUser4Increment(self._context)
        self.control = RootSeqRbanaRampgenUser4Control(self._context)
        self.limit_neg = RootSeqRbanaRampgenUser4Limit_neg(self._context)
        self.value = RootSeqRbanaRampgenUser4Value(self._context)
        self.status = RootSeqRbanaRampgenUser4Status(self._context)
        self.out = RootSeqRbanaRampgenUser4Out(self._context)


class RootSeqRbanaRampgenPositionxOut(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.out'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.out.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.out.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionxStatusReachedlowerlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.status.reachedlowerlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.reachedlowerlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.reachedlowerlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.reachedlowerlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.reachedlowerlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.reachedlowerlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.reachedlowerlimit.lsb', int(new_val))


class RootSeqRbanaRampgenPositionxStatusReachedregularend(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.status.reachedregularend'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.reachedregularend.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.reachedregularend.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.reachedregularend.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.reachedregularend.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.reachedregularend.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.reachedregularend.lsb', int(new_val))


class RootSeqRbanaRampgenPositionxStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.busy.lsb', int(new_val))


class RootSeqRbanaRampgenPositionxStatusReachedupperlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.status.reachedupperlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.reachedupperlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.reachedupperlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.reachedupperlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.reachedupperlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.reachedupperlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.reachedupperlimit.lsb', int(new_val))


class RootSeqRbanaRampgenPositionxStatusCountup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.status.countup'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.countup.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.countup.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.countup.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.countup.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.countup.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.countup.lsb', int(new_val))


class RootSeqRbanaRampgenPositionxStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.status'
        self.countup = RootSeqRbanaRampgenPositionxStatusCountup(self._context)
        self.reachedupperlimit = RootSeqRbanaRampgenPositionxStatusReachedupperlimit(self._context)
        self.busy = RootSeqRbanaRampgenPositionxStatusBusy(self._context)
        self.reachedregularend = RootSeqRbanaRampgenPositionxStatusReachedregularend(self._context)
        self.reachedlowerlimit = RootSeqRbanaRampgenPositionxStatusReachedlowerlimit(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.status.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionxValue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.value.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionxLimit_neg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.limit_neg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.limit_neg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.limit_neg.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionxControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.mode.lsb', int(new_val))


class RootSeqRbanaRampgenPositionxControlInit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.control.init'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.init.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.init.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.init.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.init.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.init.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.init.lsb', int(new_val))


class RootSeqRbanaRampgenPositionxControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.start.lsb', int(new_val))


class RootSeqRbanaRampgenPositionxControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.stop.lsb', int(new_val))


class RootSeqRbanaRampgenPositionxControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.abort.lsb', int(new_val))


class RootSeqRbanaRampgenPositionxControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.control'
        self.abort = RootSeqRbanaRampgenPositionxControlAbort(self._context)
        self.stop = RootSeqRbanaRampgenPositionxControlStop(self._context)
        self.start = RootSeqRbanaRampgenPositionxControlStart(self._context)
        self.init = RootSeqRbanaRampgenPositionxControlInit(self._context)
        self.mode = RootSeqRbanaRampgenPositionxControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.control.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionxIncrement(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.increment'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.increment.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.increment.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionxLimit_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx.limit_pos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positionx.limit_pos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positionx.limit_pos.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionx(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positionx'
        self.limit_pos = RootSeqRbanaRampgenPositionxLimit_pos(self._context)
        self.increment = RootSeqRbanaRampgenPositionxIncrement(self._context)
        self.control = RootSeqRbanaRampgenPositionxControl(self._context)
        self.limit_neg = RootSeqRbanaRampgenPositionxLimit_neg(self._context)
        self.value = RootSeqRbanaRampgenPositionxValue(self._context)
        self.status = RootSeqRbanaRampgenPositionxStatus(self._context)
        self.out = RootSeqRbanaRampgenPositionxOut(self._context)


class RootSeqRbanaRampgenAlternatezOut(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.out'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.out.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.out.regaddr', int(new_val))


class RootSeqRbanaRampgenAlternatezStatusReachedlowerlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.status.reachedlowerlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.reachedlowerlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.reachedlowerlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.reachedlowerlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.reachedlowerlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.reachedlowerlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.reachedlowerlimit.lsb', int(new_val))


class RootSeqRbanaRampgenAlternatezStatusReachedregularend(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.status.reachedregularend'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.reachedregularend.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.reachedregularend.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.reachedregularend.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.reachedregularend.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.reachedregularend.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.reachedregularend.lsb', int(new_val))


class RootSeqRbanaRampgenAlternatezStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.busy.lsb', int(new_val))


class RootSeqRbanaRampgenAlternatezStatusReachedupperlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.status.reachedupperlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.reachedupperlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.reachedupperlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.reachedupperlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.reachedupperlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.reachedupperlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.reachedupperlimit.lsb', int(new_val))


class RootSeqRbanaRampgenAlternatezStatusCountup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.status.countup'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.countup.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.countup.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.countup.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.countup.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.countup.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.countup.lsb', int(new_val))


class RootSeqRbanaRampgenAlternatezStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.status'
        self.countup = RootSeqRbanaRampgenAlternatezStatusCountup(self._context)
        self.reachedupperlimit = RootSeqRbanaRampgenAlternatezStatusReachedupperlimit(self._context)
        self.busy = RootSeqRbanaRampgenAlternatezStatusBusy(self._context)
        self.reachedregularend = RootSeqRbanaRampgenAlternatezStatusReachedregularend(self._context)
        self.reachedlowerlimit = RootSeqRbanaRampgenAlternatezStatusReachedlowerlimit(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.status.regaddr', int(new_val))


class RootSeqRbanaRampgenAlternatezValue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.value.regaddr', int(new_val))


class RootSeqRbanaRampgenAlternatezLimit_neg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.limit_neg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.limit_neg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.limit_neg.regaddr', int(new_val))


class RootSeqRbanaRampgenAlternatezControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.mode.lsb', int(new_val))


class RootSeqRbanaRampgenAlternatezControlInit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.control.init'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.init.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.init.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.init.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.init.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.init.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.init.lsb', int(new_val))


class RootSeqRbanaRampgenAlternatezControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.start.lsb', int(new_val))


class RootSeqRbanaRampgenAlternatezControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.stop.lsb', int(new_val))


class RootSeqRbanaRampgenAlternatezControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.abort.lsb', int(new_val))


class RootSeqRbanaRampgenAlternatezControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.control'
        self.abort = RootSeqRbanaRampgenAlternatezControlAbort(self._context)
        self.stop = RootSeqRbanaRampgenAlternatezControlStop(self._context)
        self.start = RootSeqRbanaRampgenAlternatezControlStart(self._context)
        self.init = RootSeqRbanaRampgenAlternatezControlInit(self._context)
        self.mode = RootSeqRbanaRampgenAlternatezControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.control.regaddr', int(new_val))


class RootSeqRbanaRampgenAlternatezIncrement(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.increment'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.increment.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.increment.regaddr', int(new_val))


class RootSeqRbanaRampgenAlternatezLimit_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez.limit_pos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.alternatez.limit_pos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.alternatez.limit_pos.regaddr', int(new_val))


class RootSeqRbanaRampgenAlternatez(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.alternatez'
        self.limit_pos = RootSeqRbanaRampgenAlternatezLimit_pos(self._context)
        self.increment = RootSeqRbanaRampgenAlternatezIncrement(self._context)
        self.control = RootSeqRbanaRampgenAlternatezControl(self._context)
        self.limit_neg = RootSeqRbanaRampgenAlternatezLimit_neg(self._context)
        self.value = RootSeqRbanaRampgenAlternatezValue(self._context)
        self.status = RootSeqRbanaRampgenAlternatezStatus(self._context)
        self.out = RootSeqRbanaRampgenAlternatezOut(self._context)


class RootSeqRbanaRampgenPositionyOut(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.out'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.out.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.out.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionyStatusReachedlowerlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.status.reachedlowerlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.reachedlowerlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.reachedlowerlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.reachedlowerlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.reachedlowerlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.reachedlowerlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.reachedlowerlimit.lsb', int(new_val))


class RootSeqRbanaRampgenPositionyStatusReachedregularend(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.status.reachedregularend'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.reachedregularend.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.reachedregularend.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.reachedregularend.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.reachedregularend.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.reachedregularend.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.reachedregularend.lsb', int(new_val))


class RootSeqRbanaRampgenPositionyStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.busy.lsb', int(new_val))


class RootSeqRbanaRampgenPositionyStatusReachedupperlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.status.reachedupperlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.reachedupperlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.reachedupperlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.reachedupperlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.reachedupperlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.reachedupperlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.reachedupperlimit.lsb', int(new_val))


class RootSeqRbanaRampgenPositionyStatusCountup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.status.countup'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.countup.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.countup.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.countup.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.countup.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.countup.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.countup.lsb', int(new_val))


class RootSeqRbanaRampgenPositionyStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.status'
        self.countup = RootSeqRbanaRampgenPositionyStatusCountup(self._context)
        self.reachedupperlimit = RootSeqRbanaRampgenPositionyStatusReachedupperlimit(self._context)
        self.busy = RootSeqRbanaRampgenPositionyStatusBusy(self._context)
        self.reachedregularend = RootSeqRbanaRampgenPositionyStatusReachedregularend(self._context)
        self.reachedlowerlimit = RootSeqRbanaRampgenPositionyStatusReachedlowerlimit(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.status.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionyValue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.value.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionyLimit_neg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.limit_neg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.limit_neg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.limit_neg.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionyControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.mode.lsb', int(new_val))


class RootSeqRbanaRampgenPositionyControlInit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.control.init'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.init.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.init.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.init.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.init.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.init.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.init.lsb', int(new_val))


class RootSeqRbanaRampgenPositionyControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.start.lsb', int(new_val))


class RootSeqRbanaRampgenPositionyControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.stop.lsb', int(new_val))


class RootSeqRbanaRampgenPositionyControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.abort.lsb', int(new_val))


class RootSeqRbanaRampgenPositionyControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.control'
        self.abort = RootSeqRbanaRampgenPositionyControlAbort(self._context)
        self.stop = RootSeqRbanaRampgenPositionyControlStop(self._context)
        self.start = RootSeqRbanaRampgenPositionyControlStart(self._context)
        self.init = RootSeqRbanaRampgenPositionyControlInit(self._context)
        self.mode = RootSeqRbanaRampgenPositionyControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.control.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionyIncrement(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.increment'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.increment.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.increment.regaddr', int(new_val))


class RootSeqRbanaRampgenPositionyLimit_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony.limit_pos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.positiony.limit_pos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.positiony.limit_pos.regaddr', int(new_val))


class RootSeqRbanaRampgenPositiony(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.positiony'
        self.limit_pos = RootSeqRbanaRampgenPositionyLimit_pos(self._context)
        self.increment = RootSeqRbanaRampgenPositionyIncrement(self._context)
        self.control = RootSeqRbanaRampgenPositionyControl(self._context)
        self.limit_neg = RootSeqRbanaRampgenPositionyLimit_neg(self._context)
        self.value = RootSeqRbanaRampgenPositionyValue(self._context)
        self.status = RootSeqRbanaRampgenPositionyStatus(self._context)
        self.out = RootSeqRbanaRampgenPositionyOut(self._context)


class RootSeqRbanaRampgenPlanezOut(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.out'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.out.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.out.regaddr', int(new_val))


class RootSeqRbanaRampgenPlanezStatusReachedlowerlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.status.reachedlowerlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.reachedlowerlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.reachedlowerlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.reachedlowerlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.reachedlowerlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.reachedlowerlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.reachedlowerlimit.lsb', int(new_val))


class RootSeqRbanaRampgenPlanezStatusReachedregularend(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.status.reachedregularend'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.reachedregularend.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.reachedregularend.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.reachedregularend.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.reachedregularend.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.reachedregularend.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.reachedregularend.lsb', int(new_val))


class RootSeqRbanaRampgenPlanezStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.busy.lsb', int(new_val))


class RootSeqRbanaRampgenPlanezStatusReachedupperlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.status.reachedupperlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.reachedupperlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.reachedupperlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.reachedupperlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.reachedupperlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.reachedupperlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.reachedupperlimit.lsb', int(new_val))


class RootSeqRbanaRampgenPlanezStatusCountup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.status.countup'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.countup.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.countup.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.countup.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.countup.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.countup.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.countup.lsb', int(new_val))


class RootSeqRbanaRampgenPlanezStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.status'
        self.countup = RootSeqRbanaRampgenPlanezStatusCountup(self._context)
        self.reachedupperlimit = RootSeqRbanaRampgenPlanezStatusReachedupperlimit(self._context)
        self.busy = RootSeqRbanaRampgenPlanezStatusBusy(self._context)
        self.reachedregularend = RootSeqRbanaRampgenPlanezStatusReachedregularend(self._context)
        self.reachedlowerlimit = RootSeqRbanaRampgenPlanezStatusReachedlowerlimit(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.status.regaddr', int(new_val))


class RootSeqRbanaRampgenPlanezValue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.value.regaddr', int(new_val))


class RootSeqRbanaRampgenPlanezLimit_neg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.limit_neg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.limit_neg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.limit_neg.regaddr', int(new_val))


class RootSeqRbanaRampgenPlanezControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.mode.lsb', int(new_val))


class RootSeqRbanaRampgenPlanezControlInit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.control.init'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.init.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.init.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.init.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.init.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.init.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.init.lsb', int(new_val))


class RootSeqRbanaRampgenPlanezControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.start.lsb', int(new_val))


class RootSeqRbanaRampgenPlanezControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.stop.lsb', int(new_val))


class RootSeqRbanaRampgenPlanezControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.abort.lsb', int(new_val))


class RootSeqRbanaRampgenPlanezControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.control'
        self.abort = RootSeqRbanaRampgenPlanezControlAbort(self._context)
        self.stop = RootSeqRbanaRampgenPlanezControlStop(self._context)
        self.start = RootSeqRbanaRampgenPlanezControlStart(self._context)
        self.init = RootSeqRbanaRampgenPlanezControlInit(self._context)
        self.mode = RootSeqRbanaRampgenPlanezControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.control.regaddr', int(new_val))


class RootSeqRbanaRampgenPlanezIncrement(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.increment'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.increment.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.increment.regaddr', int(new_val))


class RootSeqRbanaRampgenPlanezLimit_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez.limit_pos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.planez.limit_pos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.planez.limit_pos.regaddr', int(new_val))


class RootSeqRbanaRampgenPlanez(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.planez'
        self.limit_pos = RootSeqRbanaRampgenPlanezLimit_pos(self._context)
        self.increment = RootSeqRbanaRampgenPlanezIncrement(self._context)
        self.control = RootSeqRbanaRampgenPlanezControl(self._context)
        self.limit_neg = RootSeqRbanaRampgenPlanezLimit_neg(self._context)
        self.value = RootSeqRbanaRampgenPlanezValue(self._context)
        self.status = RootSeqRbanaRampgenPlanezStatus(self._context)
        self.out = RootSeqRbanaRampgenPlanezOut(self._context)


class RootSeqRbanaRampgenMaxzOut(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.out'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.out.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.out.regaddr', int(new_val))


class RootSeqRbanaRampgenMaxzStatusReachedlowerlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.status.reachedlowerlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.reachedlowerlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.reachedlowerlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.reachedlowerlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.reachedlowerlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.reachedlowerlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.reachedlowerlimit.lsb', int(new_val))


class RootSeqRbanaRampgenMaxzStatusReachedregularend(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.status.reachedregularend'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.reachedregularend.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.reachedregularend.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.reachedregularend.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.reachedregularend.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.reachedregularend.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.reachedregularend.lsb', int(new_val))


class RootSeqRbanaRampgenMaxzStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.busy.lsb', int(new_val))


class RootSeqRbanaRampgenMaxzStatusReachedupperlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.status.reachedupperlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.reachedupperlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.reachedupperlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.reachedupperlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.reachedupperlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.reachedupperlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.reachedupperlimit.lsb', int(new_val))


class RootSeqRbanaRampgenMaxzStatusCountup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.status.countup'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.countup.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.countup.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.countup.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.countup.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.countup.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.countup.lsb', int(new_val))


class RootSeqRbanaRampgenMaxzStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.status'
        self.countup = RootSeqRbanaRampgenMaxzStatusCountup(self._context)
        self.reachedupperlimit = RootSeqRbanaRampgenMaxzStatusReachedupperlimit(self._context)
        self.busy = RootSeqRbanaRampgenMaxzStatusBusy(self._context)
        self.reachedregularend = RootSeqRbanaRampgenMaxzStatusReachedregularend(self._context)
        self.reachedlowerlimit = RootSeqRbanaRampgenMaxzStatusReachedlowerlimit(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.status.regaddr', int(new_val))


class RootSeqRbanaRampgenMaxzValue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.value'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.value.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.value.regaddr', int(new_val))


class RootSeqRbanaRampgenMaxzLimit_neg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.limit_neg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.limit_neg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.limit_neg.regaddr', int(new_val))


class RootSeqRbanaRampgenMaxzControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.mode.lsb', int(new_val))


class RootSeqRbanaRampgenMaxzControlInit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.control.init'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.init.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.init.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.init.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.init.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.init.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.init.lsb', int(new_val))


class RootSeqRbanaRampgenMaxzControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.start.lsb', int(new_val))


class RootSeqRbanaRampgenMaxzControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.stop.lsb', int(new_val))


class RootSeqRbanaRampgenMaxzControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.abort.lsb', int(new_val))


class RootSeqRbanaRampgenMaxzControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.control'
        self.abort = RootSeqRbanaRampgenMaxzControlAbort(self._context)
        self.stop = RootSeqRbanaRampgenMaxzControlStop(self._context)
        self.start = RootSeqRbanaRampgenMaxzControlStart(self._context)
        self.init = RootSeqRbanaRampgenMaxzControlInit(self._context)
        self.mode = RootSeqRbanaRampgenMaxzControlMode(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.control.regaddr', int(new_val))


class RootSeqRbanaRampgenMaxzIncrement(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.increment'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.increment.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.increment.regaddr', int(new_val))


class RootSeqRbanaRampgenMaxzLimit_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz.limit_pos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.rampgen.maxz.limit_pos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.rampgen.maxz.limit_pos.regaddr', int(new_val))


class RootSeqRbanaRampgenMaxz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen.maxz'
        self.limit_pos = RootSeqRbanaRampgenMaxzLimit_pos(self._context)
        self.increment = RootSeqRbanaRampgenMaxzIncrement(self._context)
        self.control = RootSeqRbanaRampgenMaxzControl(self._context)
        self.limit_neg = RootSeqRbanaRampgenMaxzLimit_neg(self._context)
        self.value = RootSeqRbanaRampgenMaxzValue(self._context)
        self.status = RootSeqRbanaRampgenMaxzStatus(self._context)
        self.out = RootSeqRbanaRampgenMaxzOut(self._context)


class RootSeqRbanaRampgen(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.rampgen'
        self.maxz = RootSeqRbanaRampgenMaxz(self._context)
        self.planez = RootSeqRbanaRampgenPlanez(self._context)
        self.positiony = RootSeqRbanaRampgenPositiony(self._context)
        self.alternatez = RootSeqRbanaRampgenAlternatez(self._context)
        self.positionx = RootSeqRbanaRampgenPositionx(self._context)
        self.user4 = RootSeqRbanaRampgenUser4(self._context)
        self.tipvoltage = RootSeqRbanaRampgenTipvoltage(self._context)
        self.approach = RootSeqRbanaRampgenApproach(self._context)
        self.test = RootSeqRbanaRampgenTest(self._context)


class RootSeqRbanaMemorysignalgenSgleOut(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.out'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.out.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.out.regaddr', int(new_val))


class RootSeqRbanaMemorysignalgenSgleSamplecnt(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.samplecnt'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.samplecnt.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.samplecnt.regaddr', int(new_val))


class RootSeqRbanaMemorysignalgenSgleSampleno(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.sampleno'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.sampleno.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.sampleno.regaddr', int(new_val))


class RootSeqRbanaMemorysignalgenSgleStatusUnderrun(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.status.underrun'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.underrun.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.underrun.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.underrun.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.underrun.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.underrun.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.underrun.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.busy.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleStatusEndreached(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.status.endreached'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.endreached.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.endreached.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.endreached.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.endreached.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.endreached.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.endreached.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleStatusFifolevel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.status.fifolevel'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.fifolevel.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.fifolevel.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.fifolevel.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.fifolevel.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.fifolevel.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.fifolevel.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.status'
        self.fifolevel = RootSeqRbanaMemorysignalgenSgleStatusFifolevel(self._context)
        self.endreached = RootSeqRbanaMemorysignalgenSgleStatusEndreached(self._context)
        self.busy = RootSeqRbanaMemorysignalgenSgleStatusBusy(self._context)
        self.underrun = RootSeqRbanaMemorysignalgenSgleStatusUnderrun(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.status.regaddr', int(new_val))


class RootSeqRbanaMemorysignalgenSgleRvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.rvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.rvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.rvalue.regaddr', int(new_val))


class RootSeqRbanaMemorysignalgenSgleControlOutaddress(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.control.outaddress'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.outaddress.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.outaddress.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.outaddress.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.outaddress.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.outaddress.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.outaddress.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleControlClear(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.control.clear'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.clear.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.clear.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.clear.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.clear.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.clear.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.clear.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.start.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleControlEnable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.control.enable'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.enable.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.enable.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.enable.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.enable.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.enable.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.enable.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.stop.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleControlLinear(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.control.linear'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.linear.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.linear.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.linear.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.linear.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.linear.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.linear.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleControlJoin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.control.join'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.join.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.join.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.join.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.join.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.join.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.join.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleControlAddress(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.control.address'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.address.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.address.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.address.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.address.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.address.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.address.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.abort.lsb', int(new_val))


class RootSeqRbanaMemorysignalgenSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.control'
        self.abort = RootSeqRbanaMemorysignalgenSgleControlAbort(self._context)
        self.address = RootSeqRbanaMemorysignalgenSgleControlAddress(self._context)
        self.join = RootSeqRbanaMemorysignalgenSgleControlJoin(self._context)
        self.linear = RootSeqRbanaMemorysignalgenSgleControlLinear(self._context)
        self.stop = RootSeqRbanaMemorysignalgenSgleControlStop(self._context)
        self.enable = RootSeqRbanaMemorysignalgenSgleControlEnable(self._context)
        self.start = RootSeqRbanaMemorysignalgenSgleControlStart(self._context)
        self.clear = RootSeqRbanaMemorysignalgenSgleControlClear(self._context)
        self.outaddress = RootSeqRbanaMemorysignalgenSgleControlOutaddress(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.control.regaddr', int(new_val))


class RootSeqRbanaMemorysignalgenSgleIncrement(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.increment'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.increment.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.increment.regaddr', int(new_val))


class RootSeqRbanaMemorysignalgenSgleWvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle.wvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.memorysignalgen.sgle.wvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.memorysignalgen.sgle.wvalue.regaddr', int(new_val))


class RootSeqRbanaMemorysignalgenSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen.sgle'
        self.wvalue = RootSeqRbanaMemorysignalgenSgleWvalue(self._context)
        self.increment = RootSeqRbanaMemorysignalgenSgleIncrement(self._context)
        self.control = RootSeqRbanaMemorysignalgenSgleControl(self._context)
        self.rvalue = RootSeqRbanaMemorysignalgenSgleRvalue(self._context)
        self.status = RootSeqRbanaMemorysignalgenSgleStatus(self._context)
        self.sampleno = RootSeqRbanaMemorysignalgenSgleSampleno(self._context)
        self.samplecnt = RootSeqRbanaMemorysignalgenSgleSamplecnt(self._context)
        self.out = RootSeqRbanaMemorysignalgenSgleOut(self._context)


class RootSeqRbanaMemorysignalgen(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.memorysignalgen'
        self.sgle = RootSeqRbanaMemorysignalgenSgle(self._context)


class RootSeqRbanaInhiresCh8Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch8.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch8.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh8(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch8'
        self.cccoefs2 = RootSeqRbanaInhiresCh8Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh8Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh8Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh8Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh8Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh8Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh8Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh8Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh8Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh8Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh8Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh8Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh8Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh8Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh8Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh8Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh8Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh8Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh8Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh8Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh8Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh8Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh8Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh8Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh8Cccoefy4(self._context)


class RootSeqRbanaInhiresCh10Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch10.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch10.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh10(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch10'
        self.cccoefs2 = RootSeqRbanaInhiresCh10Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh10Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh10Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh10Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh10Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh10Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh10Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh10Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh10Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh10Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh10Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh10Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh10Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh10Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh10Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh10Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh10Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh10Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh10Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh10Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh10Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh10Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh10Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh10Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh10Cccoefy4(self._context)


class RootSeqRbanaInhiresCh9Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch9.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch9.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh9(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch9'
        self.cccoefs2 = RootSeqRbanaInhiresCh9Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh9Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh9Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh9Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh9Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh9Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh9Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh9Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh9Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh9Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh9Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh9Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh9Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh9Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh9Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh9Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh9Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh9Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh9Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh9Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh9Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh9Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh9Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh9Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh9Cccoefy4(self._context)


class RootSeqRbanaInhiresCh11Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch11.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch11.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh11(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch11'
        self.cccoefs2 = RootSeqRbanaInhiresCh11Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh11Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh11Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh11Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh11Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh11Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh11Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh11Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh11Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh11Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh11Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh11Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh11Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh11Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh11Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh11Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh11Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh11Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh11Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh11Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh11Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh11Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh11Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh11Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh11Cccoefy4(self._context)


class RootSeqRbanaInhiresCh4Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch4.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch4.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch4'
        self.cccoefs2 = RootSeqRbanaInhiresCh4Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh4Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh4Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh4Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh4Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh4Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh4Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh4Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh4Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh4Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh4Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh4Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh4Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh4Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh4Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh4Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh4Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh4Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh4Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh4Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh4Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh4Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh4Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh4Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh4Cccoefy4(self._context)


class RootSeqRbanaInhiresCh3Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch3.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch3.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch3'
        self.cccoefs2 = RootSeqRbanaInhiresCh3Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh3Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh3Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh3Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh3Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh3Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh3Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh3Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh3Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh3Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh3Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh3Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh3Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh3Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh3Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh3Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh3Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh3Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh3Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh3Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh3Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh3Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh3Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh3Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh3Cccoefy4(self._context)


class RootSeqRbanaInhiresCh6Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch6.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch6.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh6(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch6'
        self.cccoefs2 = RootSeqRbanaInhiresCh6Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh6Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh6Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh6Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh6Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh6Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh6Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh6Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh6Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh6Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh6Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh6Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh6Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh6Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh6Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh6Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh6Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh6Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh6Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh6Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh6Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh6Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh6Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh6Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh6Cccoefy4(self._context)


class RootSeqRbanaInhiresCh1Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch1.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch1.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch1'
        self.cccoefs2 = RootSeqRbanaInhiresCh1Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh1Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh1Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh1Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh1Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh1Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh1Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh1Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh1Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh1Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh1Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh1Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh1Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh1Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh1Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh1Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh1Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh1Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh1Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh1Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh1Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh1Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh1Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh1Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh1Cccoefy4(self._context)


class RootSeqRbanaInhiresCh12Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch12.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch12.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh12(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch12'
        self.cccoefs2 = RootSeqRbanaInhiresCh12Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh12Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh12Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh12Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh12Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh12Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh12Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh12Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh12Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh12Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh12Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh12Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh12Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh12Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh12Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh12Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh12Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh12Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh12Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh12Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh12Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh12Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh12Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh12Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh12Cccoefy4(self._context)


class RootSeqRbanaInhiresCh2Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch2.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch2.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch2'
        self.cccoefs2 = RootSeqRbanaInhiresCh2Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh2Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh2Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh2Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh2Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh2Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh2Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh2Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh2Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh2Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh2Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh2Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh2Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh2Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh2Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh2Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh2Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh2Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh2Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh2Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh2Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh2Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh2Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh2Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh2Cccoefy4(self._context)


class RootSeqRbanaInhiresCh5Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch5.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch5.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh5(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch5'
        self.cccoefs2 = RootSeqRbanaInhiresCh5Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh5Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh5Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh5Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh5Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh5Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh5Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh5Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh5Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh5Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh5Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh5Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh5Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh5Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh5Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh5Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh5Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh5Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh5Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh5Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh5Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh5Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh5Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh5Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh5Cccoefy4(self._context)


class RootSeqRbanaInhiresCh7Cccoefy4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefy4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefy4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefy4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefy0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefy0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefy0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefy0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefs0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefs0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefs0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefs0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefx3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefx3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefx3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefx3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefx4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefx4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefx4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefx4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefs4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefs4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefs4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefs4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefz3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefz3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefz3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefz3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefz4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefz4'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefz4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefz4.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Filterval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.filterval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.filterval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.filterval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefx0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefx0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefx0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefx0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.gain'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.gain.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.gain.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Inputoffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.inputoffset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.inputoffset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.inputoffset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefs1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefs1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefs1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefs1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefz0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefz0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefz0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefz0.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.offset'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.offset.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.offset.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefx1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefx1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefx1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefx1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefy1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefy1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefy1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefy1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefy2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefy2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefy2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefy2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefz2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefz2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefz2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefz2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefx2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefx2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefx2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefx2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefy3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefy3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefy3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefy3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Currentinval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.currentinval'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.currentinval.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.currentinval.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefs3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefs3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefs3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefs3.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefz1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefz1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefz1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefz1.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7Cccoefs2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7.cccoefs2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhires.ch7.cccoefs2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhires.ch7.cccoefs2.regaddr', int(new_val))


class RootSeqRbanaInhiresCh7(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires.ch7'
        self.cccoefs2 = RootSeqRbanaInhiresCh7Cccoefs2(self._context)
        self.cccoefz1 = RootSeqRbanaInhiresCh7Cccoefz1(self._context)
        self.cccoefs3 = RootSeqRbanaInhiresCh7Cccoefs3(self._context)
        self.currentinval = RootSeqRbanaInhiresCh7Currentinval(self._context)
        self.cccoefy3 = RootSeqRbanaInhiresCh7Cccoefy3(self._context)
        self.cccoefx2 = RootSeqRbanaInhiresCh7Cccoefx2(self._context)
        self.cccoefz2 = RootSeqRbanaInhiresCh7Cccoefz2(self._context)
        self.cccoefy2 = RootSeqRbanaInhiresCh7Cccoefy2(self._context)
        self.cccoefy1 = RootSeqRbanaInhiresCh7Cccoefy1(self._context)
        self.cccoefx1 = RootSeqRbanaInhiresCh7Cccoefx1(self._context)
        self.offset = RootSeqRbanaInhiresCh7Offset(self._context)
        self.cccoefz0 = RootSeqRbanaInhiresCh7Cccoefz0(self._context)
        self.cccoefs1 = RootSeqRbanaInhiresCh7Cccoefs1(self._context)
        self.inputoffset = RootSeqRbanaInhiresCh7Inputoffset(self._context)
        self.gain = RootSeqRbanaInhiresCh7Gain(self._context)
        self.cccoefx0 = RootSeqRbanaInhiresCh7Cccoefx0(self._context)
        self.filterval = RootSeqRbanaInhiresCh7Filterval(self._context)
        self.cccoefz4 = RootSeqRbanaInhiresCh7Cccoefz4(self._context)
        self.cccoefz3 = RootSeqRbanaInhiresCh7Cccoefz3(self._context)
        self.cccoefs4 = RootSeqRbanaInhiresCh7Cccoefs4(self._context)
        self.cccoefx4 = RootSeqRbanaInhiresCh7Cccoefx4(self._context)
        self.cccoefx3 = RootSeqRbanaInhiresCh7Cccoefx3(self._context)
        self.cccoefs0 = RootSeqRbanaInhiresCh7Cccoefs0(self._context)
        self.cccoefy0 = RootSeqRbanaInhiresCh7Cccoefy0(self._context)
        self.cccoefy4 = RootSeqRbanaInhiresCh7Cccoefy4(self._context)


class RootSeqRbanaInhires(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhires'
        self.ch7 = RootSeqRbanaInhiresCh7(self._context)
        self.ch5 = RootSeqRbanaInhiresCh5(self._context)
        self.ch2 = RootSeqRbanaInhiresCh2(self._context)
        self.ch12 = RootSeqRbanaInhiresCh12(self._context)
        self.ch1 = RootSeqRbanaInhiresCh1(self._context)
        self.ch6 = RootSeqRbanaInhiresCh6(self._context)
        self.ch3 = RootSeqRbanaInhiresCh3(self._context)
        self.ch4 = RootSeqRbanaInhiresCh4(self._context)
        self.ch11 = RootSeqRbanaInhiresCh11(self._context)
        self.ch9 = RootSeqRbanaInhiresCh9(self._context)
        self.ch10 = RootSeqRbanaInhiresCh10(self._context)
        self.ch8 = RootSeqRbanaInhiresCh8(self._context)


class RootSeqRbanaDatacaptureSgleSelecthires1Selectin7(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.selecthires1.selectin7'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin7.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin7.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin7.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin7.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin7.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin7.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleSelecthires1Selectin5(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.selecthires1.selectin5'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin5.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin5.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin5.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin5.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin5.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin5.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleSelecthires1Selectin6(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.selecthires1.selectin6'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin6.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin6.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin6.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin6.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin6.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin6.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleSelecthires1Selectin4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.selecthires1.selectin4'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin4.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin4.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin4.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin4.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.selectin4.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.selectin4.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleSelecthires1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.selecthires1'
        self.selectin4 = RootSeqRbanaDatacaptureSgleSelecthires1Selectin4(self._context)
        self.selectin6 = RootSeqRbanaDatacaptureSgleSelecthires1Selectin6(self._context)
        self.selectin5 = RootSeqRbanaDatacaptureSgleSelecthires1Selectin5(self._context)
        self.selectin7 = RootSeqRbanaDatacaptureSgleSelecthires1Selectin7(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires1.regaddr', int(new_val))


class RootSeqRbanaDatacaptureSgleStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.status.busy.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.status'
        self.busy = RootSeqRbanaDatacaptureSgleStatusBusy(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.status.regaddr', int(new_val))


class RootSeqRbanaDatacaptureSgleTimestampfirstmsb(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.timestampfirstmsb'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.timestampfirstmsb.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.timestampfirstmsb.regaddr', int(new_val))


class RootSeqRbanaDatacaptureSgleSelecthires0Selectin2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.selecthires0.selectin2'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin2.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin2.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin2.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin2.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin2.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleSelecthires0Selectin1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.selecthires0.selectin1'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin1.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin1.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin1.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin1.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin1.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleSelecthires0Selectin3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.selecthires0.selectin3'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin3.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin3.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin3.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin3.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin3.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleSelecthires0Selectin0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.selecthires0.selectin0'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin0.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin0.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin0.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.selectin0.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.selectin0.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleSelecthires0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.selecthires0'
        self.selectin0 = RootSeqRbanaDatacaptureSgleSelecthires0Selectin0(self._context)
        self.selectin3 = RootSeqRbanaDatacaptureSgleSelecthires0Selectin3(self._context)
        self.selectin1 = RootSeqRbanaDatacaptureSgleSelecthires0Selectin1(self._context)
        self.selectin2 = RootSeqRbanaDatacaptureSgleSelecthires0Selectin2(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.selecthires0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.selecthires0.regaddr', int(new_val))


class RootSeqRbanaDatacaptureSgleTimestampfirstlsb(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.timestampfirstlsb'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.timestampfirstlsb.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.timestampfirstlsb.regaddr', int(new_val))


class RootSeqRbanaDatacaptureSgleControlSelectfastin1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control.selectfastin1'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.selectfastin1.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.selectfastin1.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.selectfastin1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.selectfastin1.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.selectfastin1.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.selectfastin1.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.start.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleControlChanmaskhires(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control.chanmaskhires'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.chanmaskhires.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.chanmaskhires.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.chanmaskhires.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.chanmaskhires.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.chanmaskhires.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.chanmaskhires.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleControlFastdivider(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control.fastdivider'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.fastdivider.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.fastdivider.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.fastdivider.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.fastdivider.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.fastdivider.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.fastdivider.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleControlChanmaskfast(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control.chanmaskfast'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.chanmaskfast.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.chanmaskfast.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.chanmaskfast.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.chanmaskfast.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.chanmaskfast.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.chanmaskfast.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleControlEnablehirescapture(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control.enablehirescapture'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.enablehirescapture.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.enablehirescapture.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.enablehirescapture.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.enablehirescapture.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.enablehirescapture.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.enablehirescapture.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleControlSelectfastin0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control.selectfastin0'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.selectfastin0.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.selectfastin0.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.selectfastin0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.selectfastin0.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.selectfastin0.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.selectfastin0.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleControlEnablefastcapture(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control.enablefastcapture'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.enablefastcapture.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.enablefastcapture.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.enablefastcapture.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.enablefastcapture.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.enablefastcapture.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.enablefastcapture.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.stop.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.abort.lsb', int(new_val))


class RootSeqRbanaDatacaptureSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle.control'
        self.abort = RootSeqRbanaDatacaptureSgleControlAbort(self._context)
        self.stop = RootSeqRbanaDatacaptureSgleControlStop(self._context)
        self.enablefastcapture = RootSeqRbanaDatacaptureSgleControlEnablefastcapture(self._context)
        self.selectfastin0 = RootSeqRbanaDatacaptureSgleControlSelectfastin0(self._context)
        self.enablehirescapture = RootSeqRbanaDatacaptureSgleControlEnablehirescapture(self._context)
        self.chanmaskfast = RootSeqRbanaDatacaptureSgleControlChanmaskfast(self._context)
        self.fastdivider = RootSeqRbanaDatacaptureSgleControlFastdivider(self._context)
        self.chanmaskhires = RootSeqRbanaDatacaptureSgleControlChanmaskhires(self._context)
        self.start = RootSeqRbanaDatacaptureSgleControlStart(self._context)
        self.selectfastin1 = RootSeqRbanaDatacaptureSgleControlSelectfastin1(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datacapture.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datacapture.sgle.control.regaddr', int(new_val))


class RootSeqRbanaDatacaptureSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture.sgle'
        self.control = RootSeqRbanaDatacaptureSgleControl(self._context)
        self.timestampfirstlsb = RootSeqRbanaDatacaptureSgleTimestampfirstlsb(self._context)
        self.selecthires0 = RootSeqRbanaDatacaptureSgleSelecthires0(self._context)
        self.timestampfirstmsb = RootSeqRbanaDatacaptureSgleTimestampfirstmsb(self._context)
        self.status = RootSeqRbanaDatacaptureSgleStatus(self._context)
        self.selecthires1 = RootSeqRbanaDatacaptureSgleSelecthires1(self._context)


class RootSeqRbanaDatacapture(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datacapture'
        self.sgle = RootSeqRbanaDatacaptureSgle(self._context)


class RootSeqRbanaZctrlexSgleClp_pid_gain_d(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.clp_pid_gain_d'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.clp_pid_gain_d.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.clp_pid_gain_d.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleErrorlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.errorlimit'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.errorlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.errorlimit.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P1movestopbyvalueactive(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p1movestopbyvalueactive'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p1movestopbyvalueactive.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p1movestopbyvalueactive.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p1movestopbyvalueactive.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p1movestopbyvalueactive.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p1movestopbyvalueactive.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p1movestopbyvalueactive.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P2movestopbyvalueactive(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p2movestopbyvalueactive'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p2movestopbyvalueactive.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p2movestopbyvalueactive.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p2movestopbyvalueactive.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p2movestopbyvalueactive.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p2movestopbyvalueactive.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p2movestopbyvalueactive.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P2workmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p2workmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p2workmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p2workmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p2workmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p2workmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p2workmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p2workmode.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P0movestopbyvalueactive(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p0movestopbyvalueactive'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p0movestopbyvalueactive.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p0movestopbyvalueactive.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p0movestopbyvalueactive.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p0movestopbyvalueactive.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p0movestopbyvalueactive.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p0movestopbyvalueactive.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P1moveendmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p1moveendmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p1moveendmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p1moveendmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p1moveendmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p1moveendmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p1moveendmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p1moveendmode.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P0moveendmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p0moveendmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p0moveendmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p0moveendmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p0moveendmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p0moveendmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p0moveendmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p0moveendmode.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P1workmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p1workmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p1workmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p1workmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p1workmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p1workmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p1workmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p1workmode.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P0workmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p0workmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p0workmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p0workmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p0workmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p0workmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p0workmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p0workmode.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P3movestopbyvalueactive(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p3movestopbyvalueactive'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p3movestopbyvalueactive.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p3movestopbyvalueactive.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p3movestopbyvalueactive.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p3movestopbyvalueactive.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p3movestopbyvalueactive.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p3movestopbyvalueactive.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P3workmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p3workmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p3workmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p3workmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p3workmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p3workmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p3workmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p3workmode.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P2moveendmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p2moveendmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p2moveendmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p2moveendmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p2moveendmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p2moveendmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p2moveendmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p2moveendmode.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1P3moveendmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1.p3moveendmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p3moveendmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p3moveendmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p3moveendmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p3moveendmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.p3moveendmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.p3moveendmode.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control1'
        self.p3moveendmode = RootSeqRbanaZctrlexSgleControl1P3moveendmode(self._context)
        self.p2moveendmode = RootSeqRbanaZctrlexSgleControl1P2moveendmode(self._context)
        self.p3workmode = RootSeqRbanaZctrlexSgleControl1P3workmode(self._context)
        self.p3movestopbyvalueactive = RootSeqRbanaZctrlexSgleControl1P3movestopbyvalueactive(self._context)
        self.p0workmode = RootSeqRbanaZctrlexSgleControl1P0workmode(self._context)
        self.p1workmode = RootSeqRbanaZctrlexSgleControl1P1workmode(self._context)
        self.p0moveendmode = RootSeqRbanaZctrlexSgleControl1P0moveendmode(self._context)
        self.p1moveendmode = RootSeqRbanaZctrlexSgleControl1P1moveendmode(self._context)
        self.p0movestopbyvalueactive = RootSeqRbanaZctrlexSgleControl1P0movestopbyvalueactive(self._context)
        self.p2workmode = RootSeqRbanaZctrlexSgleControl1P2workmode(self._context)
        self.p2movestopbyvalueactive = RootSeqRbanaZctrlexSgleControl1P2movestopbyvalueactive(self._context)
        self.p1movestopbyvalueactive = RootSeqRbanaZctrlexSgleControl1P1movestopbyvalueactive(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control1.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleP3moveinc(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.p3moveinc'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.p3moveinc.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.p3moveinc.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleDdciircoef(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.ddciircoef'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.ddciircoef.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.ddciircoef.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleFb_pid_gain_p(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.fb_pid_gain_p'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.fb_pid_gain_p.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.fb_pid_gain_p.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleCompdcwithz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.compdcwithz'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.compdcwithz.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.compdcwithz.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleP0movevalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.p0movevalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.p0movevalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.p0movevalue.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleP1moveinc(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.p1moveinc'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.p1moveinc.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.p1moveinc.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleP1movevalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.p1movevalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.p1movevalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.p1movevalue.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleInputiirout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.inputiirout'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.inputiirout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.inputiirout.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleInputiiraddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.inputiiraddr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.inputiiraddr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.inputiiraddr.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleSetpoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.setpoint'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.setpoint.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.setpoint.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleRampgenctrlzout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.rampgenctrlzout'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.rampgenctrlzout.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.rampgenctrlzout.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleMinzvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.minzvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.minzvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.minzvalue.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleRampgenctrlzlimitpos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.rampgenctrlzlimitpos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.rampgenctrlzlimitpos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.rampgenctrlzlimitpos.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleCurrentphase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.currentphase'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.currentphase.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.currentphase.regaddr', int(new_val))


class RootSeqRbanaZctrlexSglePhase2realendpos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.phase2realendpos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.phase2realendpos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.phase2realendpos.regaddr', int(new_val))


class RootSeqRbanaZctrlexSglePhase0realendpos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.phase0realendpos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.phase0realendpos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.phase0realendpos.regaddr', int(new_val))


class RootSeqRbanaZctrlexSglePhase1realendpos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.phase1realendpos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.phase1realendpos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.phase1realendpos.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleStatusStopwhileprocessing(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.stopwhileprocessing'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.stopwhileprocessing.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.stopwhileprocessing.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.stopwhileprocessing.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.stopwhileprocessing.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.stopwhileprocessing.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.stopwhileprocessing.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusRampgenctrlzbusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.rampgenctrlzbusy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzbusy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzbusy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzbusy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzbusy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzbusy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzbusy.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusZctrlexrampgenctrlzdone(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenctrlzdone'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenctrlzdone.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenctrlzdone.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenctrlzdone.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenctrlzdone.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenctrlzdone.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenctrlzdone.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusZctrlexinternaloaded(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.zctrlexinternaloaded'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexinternaloaded.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexinternaloaded.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexinternaloaded.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexinternaloaded.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexinternaloaded.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexinternaloaded.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusRampgenctrlzcountup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.rampgenctrlzcountup'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzcountup.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzcountup.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzcountup.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzcountup.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzcountup.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzcountup.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusZctrlexactivaterunmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.zctrlexactivaterunmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexactivaterunmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexactivaterunmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexactivaterunmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexactivaterunmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexactivaterunmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexactivaterunmode.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusZctrlexreachederrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.zctrlexreachederrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexreachederrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexreachederrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexreachederrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexreachederrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexreachederrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexreachederrlim.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusRampgenctrlzreachedregularend(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedregularend'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedregularend.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedregularend.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedregularend.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedregularend.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedregularend.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedregularend.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusEndofphase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.endofphase'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.endofphase.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.endofphase.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.endofphase.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.endofphase.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.endofphase.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.endofphase.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusZctrlexrampgenmaxzdone(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenmaxzdone'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenmaxzdone.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenmaxzdone.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenmaxzdone.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenmaxzdone.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenmaxzdone.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexrampgenmaxzdone.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusRampgenctrlzreachedlowerlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedlowerlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedlowerlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedlowerlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedlowerlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedlowerlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedlowerlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedlowerlimit.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusZctrlexreachedmaxz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.zctrlexreachedmaxz'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedmaxz.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedmaxz.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedmaxz.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedmaxz.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedmaxz.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedmaxz.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusZctrlexreachedminz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.zctrlexreachedminz'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedminz.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedminz.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedminz.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedminz.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedminz.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.zctrlexreachedminz.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatusRampgenctrlzreachedupperlimit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedupperlimit'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedupperlimit.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedupperlimit.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedupperlimit.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedupperlimit.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedupperlimit.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.rampgenctrlzreachedupperlimit.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.status'
        self.rampgenctrlzreachedupperlimit = RootSeqRbanaZctrlexSgleStatusRampgenctrlzreachedupperlimit(self._context)
        self.zctrlexreachedminz = RootSeqRbanaZctrlexSgleStatusZctrlexreachedminz(self._context)
        self.zctrlexreachedmaxz = RootSeqRbanaZctrlexSgleStatusZctrlexreachedmaxz(self._context)
        self.rampgenctrlzreachedlowerlimit = RootSeqRbanaZctrlexSgleStatusRampgenctrlzreachedlowerlimit(self._context)
        self.zctrlexrampgenmaxzdone = RootSeqRbanaZctrlexSgleStatusZctrlexrampgenmaxzdone(self._context)
        self.endofphase = RootSeqRbanaZctrlexSgleStatusEndofphase(self._context)
        self.rampgenctrlzreachedregularend = RootSeqRbanaZctrlexSgleStatusRampgenctrlzreachedregularend(self._context)
        self.zctrlexreachederrlim = RootSeqRbanaZctrlexSgleStatusZctrlexreachederrlim(self._context)
        self.zctrlexactivaterunmode = RootSeqRbanaZctrlexSgleStatusZctrlexactivaterunmode(self._context)
        self.rampgenctrlzcountup = RootSeqRbanaZctrlexSgleStatusRampgenctrlzcountup(self._context)
        self.zctrlexinternaloaded = RootSeqRbanaZctrlexSgleStatusZctrlexinternaloaded(self._context)
        self.zctrlexrampgenctrlzdone = RootSeqRbanaZctrlexSgleStatusZctrlexrampgenctrlzdone(self._context)
        self.rampgenctrlzbusy = RootSeqRbanaZctrlexSgleStatusRampgenctrlzbusy(self._context)
        self.stopwhileprocessing = RootSeqRbanaZctrlexSgleStatusStopwhileprocessing(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.status.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleClp_pid_gain_i(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.clp_pid_gain_i'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.clp_pid_gain_i.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.clp_pid_gain_i.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleSum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.sum'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.sum.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.sum.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleZoutlimited(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.zoutlimited'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.zoutlimited.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.zoutlimited.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.input'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.input.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.input.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleFb_pid_gain_i(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.fb_pid_gain_i'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.fb_pid_gain_i.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.fb_pid_gain_i.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleP3movevalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.p3movevalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.p3movevalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.p3movevalue.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleP2moveinc(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.p2moveinc'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.p2moveinc.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.p2moveinc.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Setpointmodulationena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.setpointmodulationena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.setpointmodulationena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.setpointmodulationena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.setpointmodulationena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.setpointmodulationena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.setpointmodulationena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.setpointmodulationena.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Inputiir_vld(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.inputiir_vld'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.inputiir_vld.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.inputiir_vld.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.inputiir_vld.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.inputiir_vld.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.inputiir_vld.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.inputiir_vld.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Stop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.stop.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Zctrlexmode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.zctrlexmode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexmode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexmode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexmode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexmode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexmode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexmode.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Zctrlexpolpidinfb(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinfb'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinfb.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinfb.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinfb.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinfb.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinfb.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinfb.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Ddciir_vld(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.ddciir_vld'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.ddciir_vld.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.ddciir_vld.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.ddciir_vld.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.ddciir_vld.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.ddciir_vld.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.ddciir_vld.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Zctrlexloadinterna(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.zctrlexloadinterna'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexloadinterna.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexloadinterna.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexloadinterna.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexloadinterna.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexloadinterna.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexloadinterna.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.abort.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Zctrlexpolpidinzclp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinzclp'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinzclp.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinzclp.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinzclp.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinzclp.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinzclp.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolpidinzclp.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Ddcdownsamplefactor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.ddcdownsamplefactor'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.ddcdownsamplefactor.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.ddcdownsamplefactor.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.ddcdownsamplefactor.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.ddcdownsamplefactor.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.ddcdownsamplefactor.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.ddcdownsamplefactor.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.start.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Outputmodulationena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.outputmodulationena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.outputmodulationena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.outputmodulationena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.outputmodulationena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.outputmodulationena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.outputmodulationena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.outputmodulationena.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Zctrlexpolcomperrlim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.zctrlexpolcomperrlim'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolcomperrlim.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolcomperrlim.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolcomperrlim.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolcomperrlim.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolcomperrlim.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexpolcomperrlim.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Memorygendriveena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.memorygendriveena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.memorygendriveena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.memorygendriveena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.memorygendriveena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.memorygendriveena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.memorygendriveena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.memorygendriveena.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Memorygenpositionena(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.memorygenpositionena'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.memorygenpositionena.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.memorygenpositionena.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.memorygenpositionena.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.memorygenpositionena.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.memorygenpositionena.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.memorygenpositionena.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0Zctrlexinputchan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0.zctrlexinputchan'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexinputchan.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexinputchan.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexinputchan.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexinputchan.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.zctrlexinputchan.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.zctrlexinputchan.lsb', int(new_val))


class RootSeqRbanaZctrlexSgleControl0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.control0'
        self.zctrlexinputchan = RootSeqRbanaZctrlexSgleControl0Zctrlexinputchan(self._context)
        self.memorygenpositionena = RootSeqRbanaZctrlexSgleControl0Memorygenpositionena(self._context)
        self.memorygendriveena = RootSeqRbanaZctrlexSgleControl0Memorygendriveena(self._context)
        self.zctrlexpolcomperrlim = RootSeqRbanaZctrlexSgleControl0Zctrlexpolcomperrlim(self._context)
        self.outputmodulationena = RootSeqRbanaZctrlexSgleControl0Outputmodulationena(self._context)
        self.start = RootSeqRbanaZctrlexSgleControl0Start(self._context)
        self.ddcdownsamplefactor = RootSeqRbanaZctrlexSgleControl0Ddcdownsamplefactor(self._context)
        self.zctrlexpolpidinzclp = RootSeqRbanaZctrlexSgleControl0Zctrlexpolpidinzclp(self._context)
        self.abort = RootSeqRbanaZctrlexSgleControl0Abort(self._context)
        self.zctrlexloadinterna = RootSeqRbanaZctrlexSgleControl0Zctrlexloadinterna(self._context)
        self.ddciir_vld = RootSeqRbanaZctrlexSgleControl0Ddciir_vld(self._context)
        self.zctrlexpolpidinfb = RootSeqRbanaZctrlexSgleControl0Zctrlexpolpidinfb(self._context)
        self.zctrlexmode = RootSeqRbanaZctrlexSgleControl0Zctrlexmode(self._context)
        self.stop = RootSeqRbanaZctrlexSgleControl0Stop(self._context)
        self.inputiir_vld = RootSeqRbanaZctrlexSgleControl0Inputiir_vld(self._context)
        self.setpointmodulationena = RootSeqRbanaZctrlexSgleControl0Setpointmodulationena(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.control0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.control0.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleFb_pid_gain_d(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.fb_pid_gain_d'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.fb_pid_gain_d.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.fb_pid_gain_d.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleOutput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.output'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.output.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.output.regaddr', int(new_val))


class RootSeqRbanaZctrlexSglePidcommand(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.pidcommand'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.pidcommand.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.pidcommand.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleError(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.error'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.error.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.error.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleCurrentrampvalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.currentrampvalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.currentrampvalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.currentrampvalue.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleRampgenctrlzlimitneg(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.rampgenctrlzlimitneg'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.rampgenctrlzlimitneg.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.rampgenctrlzlimitneg.regaddr', int(new_val))


class RootSeqRbanaZctrlexSglePhase3realendpos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.phase3realendpos'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.phase3realendpos.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.phase3realendpos.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleDdciiraddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.ddciiraddr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.ddciiraddr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.ddciiraddr.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleClp_pid_gain_p(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.clp_pid_gain_p'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.clp_pid_gain_p.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.clp_pid_gain_p.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleTotphasenbr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.totphasenbr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.totphasenbr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.totphasenbr.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleP0moveinc(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.p0moveinc'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.p0moveinc.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.p0moveinc.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleInputiircoef(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.inputiircoef'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.inputiircoef.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.inputiircoef.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgleP2movevalue(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle.p2movevalue'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.zctrlex.sgle.p2movevalue.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.zctrlex.sgle.p2movevalue.regaddr', int(new_val))


class RootSeqRbanaZctrlexSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex.sgle'
        self.p2movevalue = RootSeqRbanaZctrlexSgleP2movevalue(self._context)
        self.inputiircoef = RootSeqRbanaZctrlexSgleInputiircoef(self._context)
        self.p0moveinc = RootSeqRbanaZctrlexSgleP0moveinc(self._context)
        self.totphasenbr = RootSeqRbanaZctrlexSgleTotphasenbr(self._context)
        self.clp_pid_gain_p = RootSeqRbanaZctrlexSgleClp_pid_gain_p(self._context)
        self.ddciiraddr = RootSeqRbanaZctrlexSgleDdciiraddr(self._context)
        self.phase3realendpos = RootSeqRbanaZctrlexSglePhase3realendpos(self._context)
        self.rampgenctrlzlimitneg = RootSeqRbanaZctrlexSgleRampgenctrlzlimitneg(self._context)
        self.currentrampvalue = RootSeqRbanaZctrlexSgleCurrentrampvalue(self._context)
        self.error = RootSeqRbanaZctrlexSgleError(self._context)
        self.pidcommand = RootSeqRbanaZctrlexSglePidcommand(self._context)
        self.output = RootSeqRbanaZctrlexSgleOutput(self._context)
        self.fb_pid_gain_d = RootSeqRbanaZctrlexSgleFb_pid_gain_d(self._context)
        self.control0 = RootSeqRbanaZctrlexSgleControl0(self._context)
        self.p2moveinc = RootSeqRbanaZctrlexSgleP2moveinc(self._context)
        self.p3movevalue = RootSeqRbanaZctrlexSgleP3movevalue(self._context)
        self.fb_pid_gain_i = RootSeqRbanaZctrlexSgleFb_pid_gain_i(self._context)
        self.input = RootSeqRbanaZctrlexSgleInput(self._context)
        self.zoutlimited = RootSeqRbanaZctrlexSgleZoutlimited(self._context)
        self.sum = RootSeqRbanaZctrlexSgleSum(self._context)
        self.clp_pid_gain_i = RootSeqRbanaZctrlexSgleClp_pid_gain_i(self._context)
        self.status = RootSeqRbanaZctrlexSgleStatus(self._context)
        self.phase1realendpos = RootSeqRbanaZctrlexSglePhase1realendpos(self._context)
        self.phase0realendpos = RootSeqRbanaZctrlexSglePhase0realendpos(self._context)
        self.phase2realendpos = RootSeqRbanaZctrlexSglePhase2realendpos(self._context)
        self.currentphase = RootSeqRbanaZctrlexSgleCurrentphase(self._context)
        self.rampgenctrlzlimitpos = RootSeqRbanaZctrlexSgleRampgenctrlzlimitpos(self._context)
        self.minzvalue = RootSeqRbanaZctrlexSgleMinzvalue(self._context)
        self.rampgenctrlzout = RootSeqRbanaZctrlexSgleRampgenctrlzout(self._context)
        self.setpoint = RootSeqRbanaZctrlexSgleSetpoint(self._context)
        self.inputiiraddr = RootSeqRbanaZctrlexSgleInputiiraddr(self._context)
        self.inputiirout = RootSeqRbanaZctrlexSgleInputiirout(self._context)
        self.p1movevalue = RootSeqRbanaZctrlexSgleP1movevalue(self._context)
        self.p1moveinc = RootSeqRbanaZctrlexSgleP1moveinc(self._context)
        self.p0movevalue = RootSeqRbanaZctrlexSgleP0movevalue(self._context)
        self.compdcwithz = RootSeqRbanaZctrlexSgleCompdcwithz(self._context)
        self.fb_pid_gain_p = RootSeqRbanaZctrlexSgleFb_pid_gain_p(self._context)
        self.ddciircoef = RootSeqRbanaZctrlexSgleDdciircoef(self._context)
        self.p3moveinc = RootSeqRbanaZctrlexSgleP3moveinc(self._context)
        self.control1 = RootSeqRbanaZctrlexSgleControl1(self._context)
        self.errorlimit = RootSeqRbanaZctrlexSgleErrorlimit(self._context)
        self.clp_pid_gain_d = RootSeqRbanaZctrlexSgleClp_pid_gain_d(self._context)


class RootSeqRbanaZctrlex(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.zctrlex'
        self.sgle = RootSeqRbanaZctrlexSgle(self._context)


class RootSeqRbanaDatasamplerSgleDatapoint2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.datapoint2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.datapoint2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.datapoint2.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleStatusEventcount(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.status.eventcount'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.status.eventcount.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.status.eventcount.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.status.eventcount.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.status.eventcount.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.status.eventcount.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.status.eventcount.lsb', int(new_val))


class RootSeqRbanaDatasamplerSgleStatusBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.status.busy'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.status.busy.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.status.busy.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.status.busy.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.status.busy.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.status.busy.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.status.busy.lsb', int(new_val))


class RootSeqRbanaDatasamplerSgleStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.status'
        self.busy = RootSeqRbanaDatasamplerSgleStatusBusy(self._context)
        self.eventcount = RootSeqRbanaDatasamplerSgleStatusEventcount(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.status.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.status.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleTimestamplastlsb(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.timestamplastlsb'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.timestamplastlsb.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.timestamplastlsb.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleEvents(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.events'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.events.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.events.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleTimestamplastmsb(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.timestamplastmsb'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.timestamplastmsb.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.timestamplastmsb.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleControlFlushfifo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.control.flushfifo'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.flushfifo.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.flushfifo.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.flushfifo.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.flushfifo.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.flushfifo.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.flushfifo.lsb', int(new_val))


class RootSeqRbanaDatasamplerSgleControlMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.control.mode'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.mode.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.mode.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.mode.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.mode.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.mode.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.mode.lsb', int(new_val))


class RootSeqRbanaDatasamplerSgleControlStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.control.start'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.start.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.start.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.start.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.start.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.start.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.start.lsb', int(new_val))


class RootSeqRbanaDatasamplerSgleControlStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.control.stop'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.stop.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.stop.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.stop.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.stop.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.stop.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.stop.lsb', int(new_val))


class RootSeqRbanaDatasamplerSgleControlAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.control.abort'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.abort.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.abort.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.abort.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.abort.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.abort.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.abort.lsb', int(new_val))


class RootSeqRbanaDatasamplerSgleControlSyncwithzctrlex(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.control.syncwithzctrlex'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.syncwithzctrlex.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.syncwithzctrlex.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.syncwithzctrlex.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.syncwithzctrlex.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.syncwithzctrlex.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.syncwithzctrlex.lsb', int(new_val))


class RootSeqRbanaDatasamplerSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.control'
        self.syncwithzctrlex = RootSeqRbanaDatasamplerSgleControlSyncwithzctrlex(self._context)
        self.abort = RootSeqRbanaDatasamplerSgleControlAbort(self._context)
        self.stop = RootSeqRbanaDatasamplerSgleControlStop(self._context)
        self.start = RootSeqRbanaDatasamplerSgleControlStart(self._context)
        self.mode = RootSeqRbanaDatasamplerSgleControlMode(self._context)
        self.flushfifo = RootSeqRbanaDatasamplerSgleControlFlushfifo(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.control.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleValue0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.value0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.value0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.value0.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleDatapoint3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.datapoint3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.datapoint3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.datapoint3.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleValue3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.value3'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.value3.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.value3.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleTimestampfirstmsb(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.timestampfirstmsb'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.timestampfirstmsb.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.timestampfirstmsb.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleValue2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.value2'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.value2.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.value2.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleValue1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.value1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.value1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.value1.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleTimestampfirstlsb(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.timestampfirstlsb'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.timestampfirstlsb.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.timestampfirstlsb.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleDatapoint0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.datapoint0'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.datapoint0.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.datapoint0.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSglePhasenbr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.phasenbr'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.phasenbr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.phasenbr.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgleDatapoint1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle.datapoint1'

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.datasampler.sgle.datapoint1.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.datasampler.sgle.datapoint1.regaddr', int(new_val))


class RootSeqRbanaDatasamplerSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler.sgle'
        self.datapoint1 = RootSeqRbanaDatasamplerSgleDatapoint1(self._context)
        self.phasenbr = RootSeqRbanaDatasamplerSglePhasenbr(self._context)
        self.datapoint0 = RootSeqRbanaDatasamplerSgleDatapoint0(self._context)
        self.timestampfirstlsb = RootSeqRbanaDatasamplerSgleTimestampfirstlsb(self._context)
        self.value1 = RootSeqRbanaDatasamplerSgleValue1(self._context)
        self.value2 = RootSeqRbanaDatasamplerSgleValue2(self._context)
        self.timestampfirstmsb = RootSeqRbanaDatasamplerSgleTimestampfirstmsb(self._context)
        self.value3 = RootSeqRbanaDatasamplerSgleValue3(self._context)
        self.datapoint3 = RootSeqRbanaDatasamplerSgleDatapoint3(self._context)
        self.value0 = RootSeqRbanaDatasamplerSgleValue0(self._context)
        self.control = RootSeqRbanaDatasamplerSgleControl(self._context)
        self.timestamplastmsb = RootSeqRbanaDatasamplerSgleTimestamplastmsb(self._context)
        self.events = RootSeqRbanaDatasamplerSgleEvents(self._context)
        self.timestamplastlsb = RootSeqRbanaDatasamplerSgleTimestamplastlsb(self._context)
        self.status = RootSeqRbanaDatasamplerSgleStatus(self._context)
        self.datapoint2 = RootSeqRbanaDatasamplerSgleDatapoint2(self._context)


class RootSeqRbanaDatasampler(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.datasampler'
        self.sgle = RootSeqRbanaDatasamplerSgle(self._context)


class RootSeqRbanaInhirescommonSgleAafcoefData(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.aafcoef.data'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.aafcoef.data.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.aafcoef.data.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.aafcoef.data.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.aafcoef.data.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.aafcoef.data.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.aafcoef.data.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleAafcoefAddr(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.aafcoef.addr'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.aafcoef.addr.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.aafcoef.addr.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.aafcoef.addr.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.aafcoef.addr.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.aafcoef.addr.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.aafcoef.addr.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleAafcoef(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.aafcoef'
        self.addr = RootSeqRbanaInhirescommonSgleAafcoefAddr(self._context)
        self.data = RootSeqRbanaInhirescommonSgleAafcoefData(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.aafcoef.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.aafcoef.regaddr', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh2bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch2bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch2bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch2bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch2bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch2bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch2bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch2bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh4bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch4bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch4bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch4bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch4bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch4bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch4bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch4bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh6bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch6bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch6bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch6bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch6bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch6bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch6bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch6bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh9bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch9bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch9bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch9bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch9bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch9bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch9bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch9bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh7bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch7bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch7bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch7bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch7bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch7bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch7bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch7bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh5bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch5bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch5bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch5bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch5bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch5bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch5bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch5bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh12bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch12bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch12bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch12bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch12bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch12bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch12bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch12bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh10bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch10bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch10bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch10bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch10bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch10bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch10bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch10bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh3bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch3bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch3bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch3bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch3bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch3bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch3bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch3bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh8bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch8bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch8bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch8bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch8bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch8bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch8bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch8bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh1bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch1bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch1bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch1bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch1bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch1bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch1bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch1bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControlCh11bypassfilter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control.ch11bypassfilter'

    @property
    def msb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch11bypassfilter.msb'))

    @msb.setter
    def msb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch11bypassfilter.msb', int(new_val))

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch11bypassfilter.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch11bypassfilter.regaddr', int(new_val))

    @property
    def lsb(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.ch11bypassfilter.lsb'))

    @lsb.setter
    def lsb(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.ch11bypassfilter.lsb', int(new_val))


class RootSeqRbanaInhirescommonSgleControl(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle.control'
        self.ch11bypassfilter = RootSeqRbanaInhirescommonSgleControlCh11bypassfilter(self._context)
        self.ch1bypassfilter = RootSeqRbanaInhirescommonSgleControlCh1bypassfilter(self._context)
        self.ch8bypassfilter = RootSeqRbanaInhirescommonSgleControlCh8bypassfilter(self._context)
        self.ch3bypassfilter = RootSeqRbanaInhirescommonSgleControlCh3bypassfilter(self._context)
        self.ch10bypassfilter = RootSeqRbanaInhirescommonSgleControlCh10bypassfilter(self._context)
        self.ch12bypassfilter = RootSeqRbanaInhirescommonSgleControlCh12bypassfilter(self._context)
        self.ch5bypassfilter = RootSeqRbanaInhirescommonSgleControlCh5bypassfilter(self._context)
        self.ch7bypassfilter = RootSeqRbanaInhirescommonSgleControlCh7bypassfilter(self._context)
        self.ch9bypassfilter = RootSeqRbanaInhirescommonSgleControlCh9bypassfilter(self._context)
        self.ch6bypassfilter = RootSeqRbanaInhirescommonSgleControlCh6bypassfilter(self._context)
        self.ch4bypassfilter = RootSeqRbanaInhirescommonSgleControlCh4bypassfilter(self._context)
        self.ch2bypassfilter = RootSeqRbanaInhirescommonSgleControlCh2bypassfilter(self._context)

    @property
    def regaddr(self) -> int:
        return int(self._context.get('root.seq.rbana.inhirescommon.sgle.control.regaddr'))

    @regaddr.setter
    def regaddr(self, new_val:int):
        self._context.set('root.seq.rbana.inhirescommon.sgle.control.regaddr', int(new_val))


class RootSeqRbanaInhirescommonSgle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon.sgle'
        self.control = RootSeqRbanaInhirescommonSgleControl(self._context)
        self.aafcoef = RootSeqRbanaInhirescommonSgleAafcoef(self._context)


class RootSeqRbanaInhirescommon(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana.inhirescommon'
        self.sgle = RootSeqRbanaInhirescommonSgle(self._context)


class RootSeqRbana(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq.rbana'
        self.inhirescommon = RootSeqRbanaInhirescommon(self._context)
        self.datasampler = RootSeqRbanaDatasampler(self._context)
        self.zctrlex = RootSeqRbanaZctrlex(self._context)
        self.datacapture = RootSeqRbanaDatacapture(self._context)
        self.inhires = RootSeqRbanaInhires(self._context)
        self.memorysignalgen = RootSeqRbanaMemorysignalgen(self._context)
        self.rampgen = RootSeqRbanaRampgen(self._context)
        self.eventmgr = RootSeqRbanaEventmgr(self._context)
        self.outfast = RootSeqRbanaOutfast(self._context)
        self.infastcommon = RootSeqRbanaInfastcommon(self._context)
        self.comparator = RootSeqRbanaComparator(self._context)
        self.timer = RootSeqRbanaTimer(self._context)
        self.outhirescommon = RootSeqRbanaOuthirescommon(self._context)
        self.outfastcommon = RootSeqRbanaOutfastcommon(self._context)
        self.regaddr = RootSeqRbanaRegaddr(self._context)
        self.dpointfltr = RootSeqRbanaDpointfltr(self._context)
        self.outhires = RootSeqRbanaOuthires(self._context)
        self.seq = RootSeqRbanaSeq(self._context)
        self.interna = RootSeqRbanaInterna(self._context)
        self.inchannelsdigi = RootSeqRbanaInchannelsdigi(self._context)
        self.userio = RootSeqRbanaUserio(self._context)
        self.ort = RootSeqRbanaOrt(self._context)
        self.infast = RootSeqRbanaInfast(self._context)
        self.pid = RootSeqRbanaPid(self._context)
        self.gpi = RootSeqRbanaGpi(self._context)
        self.analyzercommon = RootSeqRbanaAnalyzercommon(self._context)
        self.analyzer = RootSeqRbanaAnalyzer(self._context)


class RootSeq(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.seq'
        self.rbana = RootSeqRbana(self._context)


class RootSession(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.session'

    @property
    def name(self) -> str:
        return str(self._context.get('root.session.name'))

    @name.setter
    def name(self, new_val:str):
        self._context.set('root.session.name', str(new_val))

    def list(self, *args) -> Any:
        return self._context.call('root.session.list', *args)

    @property
    def current_connection(self) -> str:
        return str(self._context.get('root.session.current_connection'))

    @current_connection.setter
    def current_connection(self, new_val:str):
        self._context.set('root.session.current_connection', str(new_val))

    def select_main(self, *args) -> Any:
        return self._context.call('root.session.select_main', *args)

    def select(self, *args) -> Any:
        return self._context.call('root.session.select', *args)


class RootLuOrtInstanceAttributeInput_selectEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.input_select.enum'

    @property
    def hi_res_in_user1(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.input_select.enum.hi_res_in_user1'))

    @hi_res_in_user1.setter
    def hi_res_in_user1(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.input_select.enum.hi_res_in_user1', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.input_select.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.input_select.enum.fast_in_deflection', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.input_select.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.input_select.enum.fast_in_user', int(new_val))

    @property
    def hi_res_in_deflection(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.input_select.enum.hi_res_in_deflection'))

    @hi_res_in_deflection.setter
    def hi_res_in_deflection(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.input_select.enum.hi_res_in_deflection', int(new_val))


class RootLuOrtInstanceAttributeInput_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.input_select'
        self.enum = RootLuOrtInstanceAttributeInput_selectEnum(self._context)


class RootLuOrtInstanceAttributeFree_wave_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.free_wave_delay'


class RootLuOrtInstanceAttributeBaseline_window_begin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline_window_begin'


class RootLuOrtInstanceAttributeAverage_periods(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.average_periods'


class RootLuOrtInstanceAttributeCantilever_samples_per_periodEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.cantilever_samples_per_period.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.cantilever_samples_per_period.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.cantilever_samples_per_period.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.cantilever_samples_per_period.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.cantilever_samples_per_period.enum.enabled', int(new_val))


class RootLuOrtInstanceAttributeCantilever_samples_per_period(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.cantilever_samples_per_period'
        self.enum = RootLuOrtInstanceAttributeCantilever_samples_per_periodEnum(self._context)


class RootLuOrtInstanceAttributeExcitation_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.excitation_amplitude'


class RootLuOrtInstanceAttributeAmplitude_reduction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.amplitude_reduction'


class RootLuOrtInstanceAttributeBaseline_window_end(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline_window_end'


class RootLuOrtInstanceAttributeFree_wave_output_stateEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.free_wave_output_state.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.free_wave_output_state.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.free_wave_output_state.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.ort.instance.attribute.free_wave_output_state.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.ort.instance.attribute.free_wave_output_state.enum.enabled', int(new_val))


class RootLuOrtInstanceAttributeFree_wave_output_state(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.free_wave_output_state'
        self.enum = RootLuOrtInstanceAttributeFree_wave_output_stateEnum(self._context)


class RootLuOrtInstanceAttributeBaseline_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline_amplitude'


class RootLuOrtInstanceAttributeBaseline_controller_state(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline_controller_state'


class RootLuOrtInstanceAttributeFeedback_amplitude_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.feedback_amplitude_position'


class RootLuOrtInstanceAttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.min_value'


class RootLuOrtInstanceAttributeMin_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.min_position'


class RootLuOrtInstanceAttributeBaseline_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.baseline_frequency'


class RootLuOrtInstanceAttributeSamples_per_period(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute.samples_per_period'


class RootLuOrtInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.attribute'
        self.samples_per_period = RootLuOrtInstanceAttributeSamples_per_period(self._context)
        self.baseline_frequency = RootLuOrtInstanceAttributeBaseline_frequency(self._context)
        self.min_position = RootLuOrtInstanceAttributeMin_position(self._context)
        self.min_value = RootLuOrtInstanceAttributeMin_value(self._context)
        self.feedback_amplitude_position = RootLuOrtInstanceAttributeFeedback_amplitude_position(self._context)
        self.baseline_controller_state = RootLuOrtInstanceAttributeBaseline_controller_state(self._context)
        self.baseline_amplitude = RootLuOrtInstanceAttributeBaseline_amplitude(self._context)
        self.free_wave_output_state = RootLuOrtInstanceAttributeFree_wave_output_state(self._context)
        self.baseline_window_end = RootLuOrtInstanceAttributeBaseline_window_end(self._context)
        self.amplitude_reduction = RootLuOrtInstanceAttributeAmplitude_reduction(self._context)
        self.excitation_amplitude = RootLuOrtInstanceAttributeExcitation_amplitude(self._context)
        self.cantilever_samples_per_period = RootLuOrtInstanceAttributeCantilever_samples_per_period(self._context)
        self.average_periods = RootLuOrtInstanceAttributeAverage_periods(self._context)
        self.baseline_window_begin = RootLuOrtInstanceAttributeBaseline_window_begin(self._context)
        self.free_wave_delay = RootLuOrtInstanceAttributeFree_wave_delay(self._context)
        self.input_select = RootLuOrtInstanceAttributeInput_select(self._context)


class RootLuOrtInstanceTriggerAverage_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger.average_start'


class RootLuOrtInstanceTriggerApply_samples_values(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger.apply_samples_values'


class RootLuOrtInstanceTriggerAverage_stop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger.average_stop'


class RootLuOrtInstanceTriggerProcess_averaged_samples(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger.process_averaged_samples'


class RootLuOrtInstanceTriggerUpdate_free_wave(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger.update_free_wave'


class RootLuOrtInstanceTriggerApply_samples_per_period(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger.apply_samples_per_period'


class RootLuOrtInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.trigger'
        self.apply_samples_per_period = RootLuOrtInstanceTriggerApply_samples_per_period(self._context)
        self.update_free_wave = RootLuOrtInstanceTriggerUpdate_free_wave(self._context)
        self.process_averaged_samples = RootLuOrtInstanceTriggerProcess_averaged_samples(self._context)
        self.average_stop = RootLuOrtInstanceTriggerAverage_stop(self._context)
        self.apply_samples_values = RootLuOrtInstanceTriggerApply_samples_values(self._context)
        self.average_start = RootLuOrtInstanceTriggerAverage_start(self._context)


class RootLuOrtInstanceBusyIs_averaging(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.busy.is_averaging'


class RootLuOrtInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance.busy'
        self.is_averaging = RootLuOrtInstanceBusyIs_averaging(self._context)


class RootLuOrtInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort.instance'
        self.busy = RootLuOrtInstanceBusy(self._context)
        self.trigger = RootLuOrtInstanceTrigger(self._context)
        self.attribute = RootLuOrtInstanceAttribute(self._context)


class RootLuOrt(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ort'
        self.instance = RootLuOrtInstance(self._context)


class RootLuApproachInstanceAttributeStep_by_step_coarse_step_size_percentage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_coarse_step_size_percentage'


class RootLuApproachInstanceAttributeApproach_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_speed'


class RootLuApproachInstanceAttributeMotor_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.motor_source.enum'

    @property
    def external(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.motor_source.enum.external'))

    @external.setter
    def external(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.motor_source.enum.external', int(new_val))

    @property
    def internal(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.motor_source.enum.internal'))

    @internal.setter
    def internal(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.motor_source.enum.internal', int(new_val))


class RootLuApproachInstanceAttributeMotor_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.motor_source'
        self.enum = RootLuApproachInstanceAttributeMotor_sourceEnum(self._context)


class RootLuApproachInstanceAttributeCurrent_z_stage_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.current_z_stage_pos'


class RootLuApproachInstanceAttributeStep_by_step_fine_step_size_percentage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_fine_step_size_percentage'


class RootLuApproachInstanceAttributeStep_by_step_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_time'


class RootLuApproachInstanceAttributeStep_period(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_period'


class RootLuApproachInstanceAttributeWithdraw_steps(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.withdraw_steps'


class RootLuApproachInstanceAttributeApproach_steps(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_steps'


class RootLuApproachInstanceAttributeStepper_directionEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.stepper_direction.enum'

    @property
    def forward(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.stepper_direction.enum.forward'))

    @forward.setter
    def forward(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.stepper_direction.enum.forward', int(new_val))

    @property
    def backward(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.stepper_direction.enum.backward'))

    @backward.setter
    def backward(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.stepper_direction.enum.backward', int(new_val))


class RootLuApproachInstanceAttributeStepper_direction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.stepper_direction'
        self.enum = RootLuApproachInstanceAttributeStepper_directionEnum(self._context)


class RootLuApproachInstanceAttributeApproach_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_status.enum'

    @property
    def sensor_failed(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.sensor_failed'))

    @sensor_failed.setter
    def sensor_failed(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.sensor_failed', int(new_val))

    @property
    def process_dialog(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.process_dialog'))

    @process_dialog.setter
    def process_dialog(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.process_dialog', int(new_val))

    @property
    def user_abort(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.user_abort'))

    @user_abort.setter
    def user_abort(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.user_abort', int(new_val))

    @property
    def move_away(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.move_away'))

    @move_away.setter
    def move_away(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.move_away', int(new_val))

    @property
    def adjusting_tip_pos(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.adjusting_tip_pos'))

    @adjusting_tip_pos.setter
    def adjusting_tip_pos(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.adjusting_tip_pos', int(new_val))

    @property
    def idle(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.idle'))

    @idle.setter
    def idle(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.idle', int(new_val))

    @property
    def max_out(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.max_out'))

    @max_out.setter
    def max_out(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.max_out', int(new_val))

    @property
    def approach_done(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.approach_done'))

    @approach_done.setter
    def approach_done(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.approach_done', int(new_val))

    @property
    def move_to_home_position(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.move_to_home_position'))

    @move_to_home_position.setter
    def move_to_home_position(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.move_to_home_position', int(new_val))

    @property
    def home_position_reached(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.home_position_reached'))

    @home_position_reached.setter
    def home_position_reached(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.home_position_reached', int(new_val))

    @property
    def approaching(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.approaching'))

    @approaching.setter
    def approaching(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.approaching', int(new_val))

    @property
    def timeout(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.timeout'))

    @timeout.setter
    def timeout(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.timeout', int(new_val))

    @property
    def calibration_failed(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.calibration_failed'))

    @calibration_failed.setter
    def calibration_failed(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.calibration_failed', int(new_val))

    @property
    def approach_aborted(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.approach_aborted'))

    @approach_aborted.setter
    def approach_aborted(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.approach_aborted', int(new_val))

    @property
    def limit_failed(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.limit_failed'))

    @limit_failed.setter
    def limit_failed(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.limit_failed', int(new_val))

    @property
    def init_done(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.init_done'))

    @init_done.setter
    def init_done(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.init_done', int(new_val))

    @property
    def initializing(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.initializing'))

    @initializing.setter
    def initializing(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.initializing', int(new_val))

    @property
    def cancel_dialog(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.cancel_dialog'))

    @cancel_dialog.setter
    def cancel_dialog(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.cancel_dialog', int(new_val))

    @property
    def move_toward(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_status.enum.move_toward'))

    @move_toward.setter
    def move_toward(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_status.enum.move_toward', int(new_val))


class RootLuApproachInstanceAttributeApproach_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_status'
        self.enum = RootLuApproachInstanceAttributeApproach_statusEnum(self._context)


class RootLuApproachInstanceAttributeStep_by_step_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_mode.enum'

    @property
    def tip_position_ignored(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.step_by_step_mode.enum.tip_position_ignored'))

    @tip_position_ignored.setter
    def tip_position_ignored(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.step_by_step_mode.enum.tip_position_ignored', int(new_val))

    @property
    def position_controlled(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.step_by_step_mode.enum.position_controlled'))

    @position_controlled.setter
    def position_controlled(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.step_by_step_mode.enum.position_controlled', int(new_val))

    @property
    def not_controlled(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.step_by_step_mode.enum.not_controlled'))

    @not_controlled.setter
    def not_controlled(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.step_by_step_mode.enum.not_controlled', int(new_val))


class RootLuApproachInstanceAttributeStep_by_step_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_mode'
        self.enum = RootLuApproachInstanceAttributeStep_by_step_modeEnum(self._context)


class RootLuApproachInstanceAttributeStep_by_step_slope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.step_by_step_slope'


class RootLuApproachInstanceAttributeApproach_pos_error(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_pos_error'


class RootLuApproachInstanceAttributeApproach_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_pos'


class RootLuApproachInstanceAttributeRetract_tip(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.retract_tip'


class RootLuApproachInstanceAttributeApproach_resultEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_result.enum'

    @property
    def end_of_travel(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.end_of_travel'))

    @end_of_travel.setter
    def end_of_travel(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.end_of_travel', int(new_val))

    @property
    def timeout(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.timeout'))

    @timeout.setter
    def timeout(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.timeout', int(new_val))

    @property
    def sensor_error(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.sensor_error'))

    @sensor_error.setter
    def sensor_error(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.sensor_error', int(new_val))

    @property
    def user_abort(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.user_abort'))

    @user_abort.setter
    def user_abort(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.user_abort', int(new_val))

    @property
    def no_error(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.no_error'))

    @no_error.setter
    def no_error(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.no_error', int(new_val))

    @property
    def tip_pos_adjust_done(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.tip_pos_adjust_done'))

    @tip_pos_adjust_done.setter
    def tip_pos_adjust_done(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.tip_pos_adjust_done', int(new_val))

    @property
    def tip_pos_adjust_failed(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.tip_pos_adjust_failed'))

    @tip_pos_adjust_failed.setter
    def tip_pos_adjust_failed(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.tip_pos_adjust_failed', int(new_val))

    @property
    def limit_switch_error(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.limit_switch_error'))

    @limit_switch_error.setter
    def limit_switch_error(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.limit_switch_error', int(new_val))

    @property
    def approach_done(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.approach_done'))

    @approach_done.setter
    def approach_done(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.approach_done', int(new_val))

    @property
    def park_position(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.approach_result.enum.park_position'))

    @park_position.setter
    def park_position(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.approach_result.enum.park_position', int(new_val))


class RootLuApproachInstanceAttributeApproach_result(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.approach_result'
        self.enum = RootLuApproachInstanceAttributeApproach_resultEnum(self._context)


class RootLuApproachInstanceAttributeAfm_approach_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.afm_approach_mode.enum'

    @property
    def step_by_step(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.afm_approach_mode.enum.step_by_step'))

    @step_by_step.setter
    def step_by_step(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.afm_approach_mode.enum.step_by_step', int(new_val))

    @property
    def continuous(self) -> int:
        return int(self._context.get('root.lu.approach.instance.attribute.afm_approach_mode.enum.continuous'))

    @continuous.setter
    def continuous(self, new_val:int):
        self._context.set('root.lu.approach.instance.attribute.afm_approach_mode.enum.continuous', int(new_val))


class RootLuApproachInstanceAttributeAfm_approach_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.afm_approach_mode'
        self.enum = RootLuApproachInstanceAttributeAfm_approach_modeEnum(self._context)


class RootLuApproachInstanceAttributeRelease_tip(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.release_tip'


class RootLuApproachInstanceAttributeEnable_pre_approach_xycl_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute.enable_pre_approach_xycl_calibration'


class RootLuApproachInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.attribute'
        self.enable_pre_approach_xycl_calibration = RootLuApproachInstanceAttributeEnable_pre_approach_xycl_calibration(self._context)
        self.release_tip = RootLuApproachInstanceAttributeRelease_tip(self._context)
        self.afm_approach_mode = RootLuApproachInstanceAttributeAfm_approach_mode(self._context)
        self.approach_result = RootLuApproachInstanceAttributeApproach_result(self._context)
        self.retract_tip = RootLuApproachInstanceAttributeRetract_tip(self._context)
        self.approach_pos = RootLuApproachInstanceAttributeApproach_pos(self._context)
        self.approach_pos_error = RootLuApproachInstanceAttributeApproach_pos_error(self._context)
        self.step_by_step_slope = RootLuApproachInstanceAttributeStep_by_step_slope(self._context)
        self.step_by_step_mode = RootLuApproachInstanceAttributeStep_by_step_mode(self._context)
        self.approach_status = RootLuApproachInstanceAttributeApproach_status(self._context)
        self.stepper_direction = RootLuApproachInstanceAttributeStepper_direction(self._context)
        self.approach_steps = RootLuApproachInstanceAttributeApproach_steps(self._context)
        self.withdraw_steps = RootLuApproachInstanceAttributeWithdraw_steps(self._context)
        self.step_period = RootLuApproachInstanceAttributeStep_period(self._context)
        self.step_by_step_time = RootLuApproachInstanceAttributeStep_by_step_time(self._context)
        self.step_by_step_fine_step_size_percentage = RootLuApproachInstanceAttributeStep_by_step_fine_step_size_percentage(self._context)
        self.current_z_stage_pos = RootLuApproachInstanceAttributeCurrent_z_stage_pos(self._context)
        self.motor_source = RootLuApproachInstanceAttributeMotor_source(self._context)
        self.approach_speed = RootLuApproachInstanceAttributeApproach_speed(self._context)
        self.step_by_step_coarse_step_size_percentage = RootLuApproachInstanceAttributeStep_by_step_coarse_step_size_percentage(self._context)


class RootLuApproachInstanceTriggerStart_approach_steps(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_approach_steps'


class RootLuApproachInstanceTriggerStart_pre_approach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_pre_approach'


class RootLuApproachInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.user_abort'


class RootLuApproachInstanceTriggerStart_adjust_tip_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_adjust_tip_pos'


class RootLuApproachInstanceTriggerUser_done(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.user_done'


class RootLuApproachInstanceTriggerStart_approach_motor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_approach_motor'


class RootLuApproachInstanceTriggerStart_approach_afm(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger.start_approach_afm'


class RootLuApproachInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance.trigger'
        self.start_approach_afm = RootLuApproachInstanceTriggerStart_approach_afm(self._context)
        self.start_approach_motor = RootLuApproachInstanceTriggerStart_approach_motor(self._context)
        self.user_done = RootLuApproachInstanceTriggerUser_done(self._context)
        self.start_adjust_tip_pos = RootLuApproachInstanceTriggerStart_adjust_tip_pos(self._context)
        self.user_abort = RootLuApproachInstanceTriggerUser_abort(self._context)
        self.start_pre_approach = RootLuApproachInstanceTriggerStart_pre_approach(self._context)
        self.start_approach_steps = RootLuApproachInstanceTriggerStart_approach_steps(self._context)


class RootLuApproachInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach.instance'
        self.trigger = RootLuApproachInstanceTrigger(self._context)
        self.attribute = RootLuApproachInstanceAttribute(self._context)


class RootLuApproach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.approach'
        self.instance = RootLuApproachInstance(self._context)


class RootLuPosition_controlInstanceAttributeAxis_scale_xylv(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.axis_scale_xylv'


class RootLuPosition_controlInstanceAttributeAxis_scale_zlv(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.axis_scale_zlv'


class RootLuPosition_controlInstanceAttributeCurrent_scan_axis_range_selectEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum'

    @property
    def full_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.full_range'))

    @full_range.setter
    def full_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.full_range', int(new_val))

    @property
    def reduced_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.reduced_range'))

    @reduced_range.setter
    def reduced_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.reduced_range', int(new_val))

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.current_scan_axis_range_select.enum.off', int(new_val))


class RootLuPosition_controlInstanceAttributeCurrent_scan_axis_range_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_scan_axis_range_select'
        self.enum = RootLuPosition_controlInstanceAttributeCurrent_scan_axis_range_selectEnum(self._context)


class RootLuPosition_controlInstanceAttributeCurrent_pos_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_pos_z'


class RootLuPosition_controlInstanceAttributeRamp_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.ramp_count'


class RootLuPosition_controlInstanceAttributeTarget_move_pos_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_move_pos_z'


class RootLuPosition_controlInstanceAttributeScan_correction_y_rotation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.scan_correction_y_rotation'


class RootLuPosition_controlInstanceAttributePid_controller_settings_yEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.pid_controller_settings_y.enum'

    @property
    def p_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.p_gain'))

    @p_gain.setter
    def p_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.p_gain', int(new_val))

    @property
    def i_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.i_gain'))

    @i_gain.setter
    def i_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.i_gain', int(new_val))

    @property
    def d_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.d_gain'))

    @d_gain.setter
    def d_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_y.enum.d_gain', int(new_val))


class RootLuPosition_controlInstanceAttributePid_controller_settings_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.pid_controller_settings_y'
        self.enum = RootLuPosition_controlInstanceAttributePid_controller_settings_yEnum(self._context)


class RootLuPosition_controlInstanceAttributeTarget_move_pos_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_move_pos_x'


class RootLuPosition_controlInstanceAttributeAxis_scale_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.axis_scale_z'


class RootLuPosition_controlInstanceAttributeTarget_move_pos_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_move_pos_y'


class RootLuPosition_controlInstanceAttributeLast_scan_axis_range_select_switch_resultEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum'

    @property
    def full_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.full_range'))

    @full_range.setter
    def full_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.full_range', int(new_val))

    @property
    def reduced_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.reduced_range'))

    @reduced_range.setter
    def reduced_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.reduced_range', int(new_val))

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result.enum.off', int(new_val))


class RootLuPosition_controlInstanceAttributeLast_scan_axis_range_select_switch_result(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.last_scan_axis_range_select_switch_result'
        self.enum = RootLuPosition_controlInstanceAttributeLast_scan_axis_range_select_switch_resultEnum(self._context)


class RootLuPosition_controlInstanceAttributeTarget_moving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_moving_speed'


class RootLuPosition_controlInstanceAttributeTarget_moving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_moving_time'


class RootLuPosition_controlInstanceAttributeTarget_scan_axis_range_selectEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum'

    @property
    def full_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.full_range'))

    @full_range.setter
    def full_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.full_range', int(new_val))

    @property
    def reduced_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.reduced_range'))

    @reduced_range.setter
    def reduced_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.reduced_range', int(new_val))

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.target_scan_axis_range_select.enum.off', int(new_val))


class RootLuPosition_controlInstanceAttributeTarget_scan_axis_range_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.target_scan_axis_range_select'
        self.enum = RootLuPosition_controlInstanceAttributeTarget_scan_axis_range_selectEnum(self._context)


class RootLuPosition_controlInstanceAttributeRamp_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.ramp_time'


class RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_keep_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.xy_closed_loop_speed_keep_pos'


class RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode.enum'

    @property
    def keep_position(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode.enum.keep_position'))

    @keep_position.setter
    def keep_position(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode.enum.keep_position', int(new_val))

    @property
    def moving(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode.enum.moving'))

    @moving.setter
    def moving(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode.enum.moving', int(new_val))


class RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.xy_closed_loop_speed_mode'
        self.enum = RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_modeEnum(self._context)


class RootLuPosition_controlInstanceAttributeCurrent_pos_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_pos_x'


class RootLuPosition_controlInstanceAttributeAxis_scale_xy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.axis_scale_xy'


class RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.xy_closed_loop_speed_moving'


class RootLuPosition_controlInstanceAttributeIs_xy_closed_loop_possibleEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum'

    @property
    def not_possible(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible'))

    @not_possible.setter
    def not_possible(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible', int(new_val))

    @property
    def not_possible_wrong_scan_axis_range(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_wrong_scan_axis_range'))

    @not_possible_wrong_scan_axis_range.setter
    def not_possible_wrong_scan_axis_range(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_wrong_scan_axis_range', int(new_val))

    @property
    def not_possible_no_sensor(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_no_sensor'))

    @not_possible_no_sensor.setter
    def not_possible_no_sensor(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_no_sensor', int(new_val))

    @property
    def possible(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.possible'))

    @possible.setter
    def possible(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.possible', int(new_val))

    @property
    def not_possible_no_scan_head(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_no_scan_head'))

    @not_possible_no_scan_head.setter
    def not_possible_no_scan_head(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.is_xy_closed_loop_possible.enum.not_possible_no_scan_head', int(new_val))


class RootLuPosition_controlInstanceAttributeIs_xy_closed_loop_possible(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.is_xy_closed_loop_possible'
        self.enum = RootLuPosition_controlInstanceAttributeIs_xy_closed_loop_possibleEnum(self._context)


class RootLuPosition_controlInstanceAttributeLast_move_stop_eventEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.last_move_stop_event.enum'

    @property
    def out_of_bound_upper_limit(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_upper_limit'))

    @out_of_bound_upper_limit.setter
    def out_of_bound_upper_limit(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_upper_limit', int(new_val))

    @property
    def finish(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.finish'))

    @finish.setter
    def finish(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.finish', int(new_val))

    @property
    def out_of_bound_lower_limit(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_lower_limit'))

    @out_of_bound_lower_limit.setter
    def out_of_bound_lower_limit(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_lower_limit', int(new_val))

    @property
    def out_of_bound_min(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_min'))

    @out_of_bound_min.setter
    def out_of_bound_min(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_min', int(new_val))

    @property
    def setpoint_reached(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.setpoint_reached'))

    @setpoint_reached.setter
    def setpoint_reached(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.setpoint_reached', int(new_val))

    @property
    def user_abort(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.user_abort'))

    @user_abort.setter
    def user_abort(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.user_abort', int(new_val))

    @property
    def position_reached(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.position_reached'))

    @position_reached.setter
    def position_reached(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.position_reached', int(new_val))

    @property
    def timer_expired(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.timer_expired'))

    @timer_expired.setter
    def timer_expired(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.timer_expired', int(new_val))

    @property
    def out_of_bound_max(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_max'))

    @out_of_bound_max.setter
    def out_of_bound_max(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_bound_max', int(new_val))

    @property
    def out_of_data(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_data'))

    @out_of_data.setter
    def out_of_data(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.last_move_stop_event.enum.out_of_data', int(new_val))


class RootLuPosition_controlInstanceAttributeLast_move_stop_event(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.last_move_stop_event'
        self.enum = RootLuPosition_controlInstanceAttributeLast_move_stop_eventEnum(self._context)


class RootLuPosition_controlInstanceAttributeCurrent_pos_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.current_pos_y'


class RootLuPosition_controlInstanceAttributeEnable_xy_closed_loop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.enable_xy_closed_loop'


class RootLuPosition_controlInstanceAttributeScan_correction_x_rotation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.scan_correction_x_rotation'


class RootLuPosition_controlInstanceAttributePid_controller_settings_xEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.pid_controller_settings_x.enum'

    @property
    def p_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.p_gain'))

    @p_gain.setter
    def p_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.p_gain', int(new_val))

    @property
    def i_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.i_gain'))

    @i_gain.setter
    def i_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.i_gain', int(new_val))

    @property
    def d_gain(self) -> int:
        return int(self._context.get('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.d_gain'))

    @d_gain.setter
    def d_gain(self, new_val:int):
        self._context.set('root.lu.position_control.instance.attribute.pid_controller_settings_x.enum.d_gain', int(new_val))


class RootLuPosition_controlInstanceAttributePid_controller_settings_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute.pid_controller_settings_x'
        self.enum = RootLuPosition_controlInstanceAttributePid_controller_settings_xEnum(self._context)


class RootLuPosition_controlInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.attribute'
        self.pid_controller_settings_x = RootLuPosition_controlInstanceAttributePid_controller_settings_x(self._context)
        self.scan_correction_x_rotation = RootLuPosition_controlInstanceAttributeScan_correction_x_rotation(self._context)
        self.enable_xy_closed_loop = RootLuPosition_controlInstanceAttributeEnable_xy_closed_loop(self._context)
        self.current_pos_y = RootLuPosition_controlInstanceAttributeCurrent_pos_y(self._context)
        self.last_move_stop_event = RootLuPosition_controlInstanceAttributeLast_move_stop_event(self._context)
        self.is_xy_closed_loop_possible = RootLuPosition_controlInstanceAttributeIs_xy_closed_loop_possible(self._context)
        self.xy_closed_loop_speed_moving = RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_moving(self._context)
        self.axis_scale_xy = RootLuPosition_controlInstanceAttributeAxis_scale_xy(self._context)
        self.current_pos_x = RootLuPosition_controlInstanceAttributeCurrent_pos_x(self._context)
        self.xy_closed_loop_speed_mode = RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_mode(self._context)
        self.xy_closed_loop_speed_keep_pos = RootLuPosition_controlInstanceAttributeXy_closed_loop_speed_keep_pos(self._context)
        self.ramp_time = RootLuPosition_controlInstanceAttributeRamp_time(self._context)
        self.target_scan_axis_range_select = RootLuPosition_controlInstanceAttributeTarget_scan_axis_range_select(self._context)
        self.target_moving_time = RootLuPosition_controlInstanceAttributeTarget_moving_time(self._context)
        self.target_moving_speed = RootLuPosition_controlInstanceAttributeTarget_moving_speed(self._context)
        self.last_scan_axis_range_select_switch_result = RootLuPosition_controlInstanceAttributeLast_scan_axis_range_select_switch_result(self._context)
        self.target_move_pos_y = RootLuPosition_controlInstanceAttributeTarget_move_pos_y(self._context)
        self.axis_scale_z = RootLuPosition_controlInstanceAttributeAxis_scale_z(self._context)
        self.target_move_pos_x = RootLuPosition_controlInstanceAttributeTarget_move_pos_x(self._context)
        self.pid_controller_settings_y = RootLuPosition_controlInstanceAttributePid_controller_settings_y(self._context)
        self.scan_correction_y_rotation = RootLuPosition_controlInstanceAttributeScan_correction_y_rotation(self._context)
        self.target_move_pos_z = RootLuPosition_controlInstanceAttributeTarget_move_pos_z(self._context)
        self.ramp_count = RootLuPosition_controlInstanceAttributeRamp_count(self._context)
        self.current_pos_z = RootLuPosition_controlInstanceAttributeCurrent_pos_z(self._context)
        self.current_scan_axis_range_select = RootLuPosition_controlInstanceAttributeCurrent_scan_axis_range_select(self._context)
        self.axis_scale_zlv = RootLuPosition_controlInstanceAttributeAxis_scale_zlv(self._context)
        self.axis_scale_xylv = RootLuPosition_controlInstanceAttributeAxis_scale_xylv(self._context)


class RootLuPosition_controlInstanceTriggerStart_calib_xy_sensor_zero_to_center_of_ramp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_calib_xy_sensor_zero_to_center_of_ramp'


class RootLuPosition_controlInstanceTriggerMove_to_target_fix_time_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.move_to_target_fix_time_xyz'


class RootLuPosition_controlInstanceTriggerStart_switch_to_target_scan_axis_range_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_switch_to_target_scan_axis_range_select'


class RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_speed_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_move_to_target_fix_speed_xyz'


class RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_time_xy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_move_to_target_fix_time_xy'


class RootLuPosition_controlInstanceTriggerMove_to_target_fix_speed_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.move_to_target_fix_speed_xyz'


class RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_time_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_move_to_target_fix_time_xyz'


class RootLuPosition_controlInstanceTriggerCalib_xy_sensor_zero_to_center_of_ramp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.calib_xy_sensor_zero_to_center_of_ramp'


class RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_speed_xy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.start_move_to_target_fix_speed_xy'


class RootLuPosition_controlInstanceTriggerMove_to_target_fix_time_xy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.move_to_target_fix_time_xy'


class RootLuPosition_controlInstanceTriggerSwitch_to_target_scan_axis_range_select(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.switch_to_target_scan_axis_range_select'


class RootLuPosition_controlInstanceTriggerMove_to_target_fix_speed_xy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger.move_to_target_fix_speed_xy'


class RootLuPosition_controlInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.trigger'
        self.move_to_target_fix_speed_xy = RootLuPosition_controlInstanceTriggerMove_to_target_fix_speed_xy(self._context)
        self.switch_to_target_scan_axis_range_select = RootLuPosition_controlInstanceTriggerSwitch_to_target_scan_axis_range_select(self._context)
        self.move_to_target_fix_time_xy = RootLuPosition_controlInstanceTriggerMove_to_target_fix_time_xy(self._context)
        self.start_move_to_target_fix_speed_xy = RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_speed_xy(self._context)
        self.calib_xy_sensor_zero_to_center_of_ramp = RootLuPosition_controlInstanceTriggerCalib_xy_sensor_zero_to_center_of_ramp(self._context)
        self.start_move_to_target_fix_time_xyz = RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_time_xyz(self._context)
        self.move_to_target_fix_speed_xyz = RootLuPosition_controlInstanceTriggerMove_to_target_fix_speed_xyz(self._context)
        self.start_move_to_target_fix_time_xy = RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_time_xy(self._context)
        self.start_move_to_target_fix_speed_xyz = RootLuPosition_controlInstanceTriggerStart_move_to_target_fix_speed_xyz(self._context)
        self.start_switch_to_target_scan_axis_range_select = RootLuPosition_controlInstanceTriggerStart_switch_to_target_scan_axis_range_select(self._context)
        self.move_to_target_fix_time_xyz = RootLuPosition_controlInstanceTriggerMove_to_target_fix_time_xyz(self._context)
        self.start_calib_xy_sensor_zero_to_center_of_ramp = RootLuPosition_controlInstanceTriggerStart_calib_xy_sensor_zero_to_center_of_ramp(self._context)


class RootLuPosition_controlInstanceBusyIs_calibrating(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.busy.is_calibrating'


class RootLuPosition_controlInstanceBusyIs_range_switching(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.busy.is_range_switching'


class RootLuPosition_controlInstanceBusyIs_tip_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.busy.is_tip_moving'


class RootLuPosition_controlInstanceBusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.busy.is_busy'


class RootLuPosition_controlInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance.busy'
        self.is_busy = RootLuPosition_controlInstanceBusyIs_busy(self._context)
        self.is_tip_moving = RootLuPosition_controlInstanceBusyIs_tip_moving(self._context)
        self.is_range_switching = RootLuPosition_controlInstanceBusyIs_range_switching(self._context)
        self.is_calibrating = RootLuPosition_controlInstanceBusyIs_calibrating(self._context)


class RootLuPosition_controlInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control.instance'
        self.busy = RootLuPosition_controlInstanceBusy(self._context)
        self.trigger = RootLuPosition_controlInstanceTrigger(self._context)
        self.attribute = RootLuPosition_controlInstanceAttribute(self._context)


class RootLuPosition_control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.position_control'
        self.instance = RootLuPosition_controlInstance(self._context)


class RootLuRescanInstanceAttributeLine_repetition_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance.attribute.line_repetition_max'


class RootLuRescanInstanceAttributeLine_repetition_max_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance.attribute.line_repetition_max_count'


class RootLuRescanInstanceAttributeLine_repetition_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance.attribute.line_repetition_count'


class RootLuRescanInstanceAttributeEnable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance.attribute.enable'


class RootLuRescanInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance.attribute'
        self.enable = RootLuRescanInstanceAttributeEnable(self._context)
        self.line_repetition_count = RootLuRescanInstanceAttributeLine_repetition_count(self._context)
        self.line_repetition_max_count = RootLuRescanInstanceAttributeLine_repetition_max_count(self._context)
        self.line_repetition_max = RootLuRescanInstanceAttributeLine_repetition_max(self._context)


class RootLuRescanInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan.instance'
        self.attribute = RootLuRescanInstanceAttribute(self._context)


class RootLuRescan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.rescan'
        self.instance = RootLuRescanInstance(self._context)


class RootLuSensor_controlInstanceAttributeOffset_calib_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.offset_calib_i_gain'


class RootLuSensor_controlInstanceAttributeEnable10_hz_update_laser_spot_on_detector_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.enable10_hz_update_laser_spot_on_detector_status'


class RootLuSensor_controlInstanceAttributeOffset_calib_i_gain_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode.enum'

    @property
    def auto_from_head_typ(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode.enum.auto_from_head_typ'))

    @auto_from_head_typ.setter
    def auto_from_head_typ(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode.enum.auto_from_head_typ', int(new_val))

    @property
    def fix_from_attr(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode.enum.fix_from_attr'))

    @fix_from_attr.setter
    def fix_from_attr(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode.enum.fix_from_attr', int(new_val))


class RootLuSensor_controlInstanceAttributeOffset_calib_i_gain_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.offset_calib_i_gain_mode'
        self.enum = RootLuSensor_controlInstanceAttributeOffset_calib_i_gain_modeEnum(self._context)


class RootLuSensor_controlInstanceAttributeOffset_calib_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.offset_calib_mode.enum'

    @property
    def auto_calibrate_z_ctrl_input(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.auto_calibrate_z_ctrl_input'))

    @auto_calibrate_z_ctrl_input.setter
    def auto_calibrate_z_ctrl_input(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.auto_calibrate_z_ctrl_input', int(new_val))

    @property
    def auto_calibrate_deflection(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.auto_calibrate_deflection'))

    @auto_calibrate_deflection.setter
    def auto_calibrate_deflection(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.auto_calibrate_deflection', int(new_val))

    @property
    def no_auto_calibration(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.no_auto_calibration'))

    @no_auto_calibration.setter
    def no_auto_calibration(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.offset_calib_mode.enum.no_auto_calibration', int(new_val))


class RootLuSensor_controlInstanceAttributeOffset_calib_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.offset_calib_mode'
        self.enum = RootLuSensor_controlInstanceAttributeOffset_calib_modeEnum(self._context)


class RootLuSensor_controlInstanceAttributeDetector_adjustment_tolerance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.detector_adjustment_tolerance'


class RootLuSensor_controlInstanceAttributeSensor_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.sensor_amplitude'


class RootLuSensor_controlInstanceAttributeDetector_auto_adjustment_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum'

    @property
    def idle(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum.idle'))

    @idle.setter
    def idle(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum.idle', int(new_val))

    @property
    def running(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum.running'))

    @running.setter
    def running(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status.enum.running', int(new_val))


class RootLuSensor_controlInstanceAttributeDetector_auto_adjustment_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.detector_auto_adjustment_status'
        self.enum = RootLuSensor_controlInstanceAttributeDetector_auto_adjustment_statusEnum(self._context)


class RootLuSensor_controlInstanceAttributeDeflection_offset_calibration_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum'

    @property
    def calibration_error(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.calibration_error'))

    @calibration_error.setter
    def calibration_error(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.calibration_error', int(new_val))

    @property
    def no_error(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.no_error'))

    @no_error.setter
    def no_error(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.no_error', int(new_val))

    @property
    def sensor_signal_failed(self) -> int:
        return int(self._context.get('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.sensor_signal_failed'))

    @sensor_signal_failed.setter
    def sensor_signal_failed(self, new_val:int):
        self._context.set('root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status.enum.sensor_signal_failed', int(new_val))


class RootLuSensor_controlInstanceAttributeDeflection_offset_calibration_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute.deflection_offset_calibration_status'
        self.enum = RootLuSensor_controlInstanceAttributeDeflection_offset_calibration_statusEnum(self._context)


class RootLuSensor_controlInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.attribute'
        self.deflection_offset_calibration_status = RootLuSensor_controlInstanceAttributeDeflection_offset_calibration_status(self._context)
        self.detector_auto_adjustment_status = RootLuSensor_controlInstanceAttributeDetector_auto_adjustment_status(self._context)
        self.sensor_amplitude = RootLuSensor_controlInstanceAttributeSensor_amplitude(self._context)
        self.detector_adjustment_tolerance = RootLuSensor_controlInstanceAttributeDetector_adjustment_tolerance(self._context)
        self.offset_calib_mode = RootLuSensor_controlInstanceAttributeOffset_calib_mode(self._context)
        self.offset_calib_i_gain_mode = RootLuSensor_controlInstanceAttributeOffset_calib_i_gain_mode(self._context)
        self.enable10_hz_update_laser_spot_on_detector_status = RootLuSensor_controlInstanceAttributeEnable10_hz_update_laser_spot_on_detector_status(self._context)
        self.offset_calib_i_gain = RootLuSensor_controlInstanceAttributeOffset_calib_i_gain(self._context)


class RootLuSensor_controlInstanceTriggerStart_deflection_offset_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.start_deflection_offset_calibration'


class RootLuSensor_controlInstanceTriggerStart_sensor_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.start_sensor_calibration'


class RootLuSensor_controlInstanceTriggerDeflection_offset_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.deflection_offset_calibration'


class RootLuSensor_controlInstanceTriggerDeflection_offset_calibration_with_retract(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.deflection_offset_calibration_with_retract'


class RootLuSensor_controlInstanceTriggerUpdate_laser_spot_on_detector_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.update_laser_spot_on_detector_status'


class RootLuSensor_controlInstanceTriggerStart_update_laser_spot_on_detector_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.start_update_laser_spot_on_detector_status'


class RootLuSensor_controlInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.user_abort'


class RootLuSensor_controlInstanceTriggerStart_detector_auto_adjustment(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.start_detector_auto_adjustment'


class RootLuSensor_controlInstanceTriggerStart_set_dynamic_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger.start_set_dynamic_amplitude'


class RootLuSensor_controlInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance.trigger'
        self.start_set_dynamic_amplitude = RootLuSensor_controlInstanceTriggerStart_set_dynamic_amplitude(self._context)
        self.start_detector_auto_adjustment = RootLuSensor_controlInstanceTriggerStart_detector_auto_adjustment(self._context)
        self.user_abort = RootLuSensor_controlInstanceTriggerUser_abort(self._context)
        self.start_update_laser_spot_on_detector_status = RootLuSensor_controlInstanceTriggerStart_update_laser_spot_on_detector_status(self._context)
        self.update_laser_spot_on_detector_status = RootLuSensor_controlInstanceTriggerUpdate_laser_spot_on_detector_status(self._context)
        self.deflection_offset_calibration_with_retract = RootLuSensor_controlInstanceTriggerDeflection_offset_calibration_with_retract(self._context)
        self.deflection_offset_calibration = RootLuSensor_controlInstanceTriggerDeflection_offset_calibration(self._context)
        self.start_sensor_calibration = RootLuSensor_controlInstanceTriggerStart_sensor_calibration(self._context)
        self.start_deflection_offset_calibration = RootLuSensor_controlInstanceTriggerStart_deflection_offset_calibration(self._context)


class RootLuSensor_controlInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control.instance'
        self.trigger = RootLuSensor_controlInstanceTrigger(self._context)
        self.attribute = RootLuSensor_controlInstanceAttribute(self._context)


class RootLuSensor_control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sensor_control'
        self.instance = RootLuSensor_controlInstance(self._context)


class RootLuSpecInstanceAttributeBwd_mod_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_range'


class RootLuSpecInstanceAttributeDeflection_force_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.deflection_force_offset'


class RootLuSpecInstanceAttributeSpec_map_configuration_blob_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.spec_map_configuration_blob_vec'


class RootLuSpecInstanceAttributeFwd_mod_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_range'


class RootLuSpecInstanceAttributeCurrent_repetition(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.current_repetition'


class RootLuSpecInstanceAttributeBwd_pause_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_pause_mode.enum'

    @property
    def z_on(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_pause_mode.enum.z_on'))

    @z_on.setter
    def z_on(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_pause_mode.enum.z_on', int(new_val))

    @property
    def z_off(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_pause_mode.enum.z_off'))

    @z_off.setter
    def z_off(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_pause_mode.enum.z_off', int(new_val))


class RootLuSpecInstanceAttributeBwd_pause_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_pause_mode'
        self.enum = RootLuSpecInstanceAttributeBwd_pause_modeEnum(self._context)


class RootLuSpecInstanceAttributeSpec_end_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.spec_end_mode.enum'

    @property
    def keep_last_z_pos(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.spec_end_mode.enum.keep_last_z_pos'))

    @keep_last_z_pos.setter
    def keep_last_z_pos(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.spec_end_mode.enum.keep_last_z_pos', int(new_val))

    @property
    def z_controller_active(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.spec_end_mode.enum.z_controller_active'))

    @z_controller_active.setter
    def z_controller_active(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.spec_end_mode.enum.z_controller_active', int(new_val))


class RootLuSpecInstanceAttributeSpec_end_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.spec_end_mode'
        self.enum = RootLuSpecInstanceAttributeSpec_end_modeEnum(self._context)


class RootLuSpecInstanceAttributeStart_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.start_offset'


class RootLuSpecInstanceAttributeRepetition_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.repetition_count'


class RootLuSpecInstanceAttributeBwd_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_datapoints'


class RootLuSpecInstanceAttributePoint_coords_blob_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.point_coords_blob_vec'


class RootLuSpecInstanceAttributePhase_sample_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_sample_mask'


class RootLuSpecInstanceAttributeRepetition_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.repetition_mode.enum'

    @property
    def list(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.repetition_mode.enum.list'))

    @list.setter
    def list(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.repetition_mode.enum.list', int(new_val))

    @property
    def position(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.repetition_mode.enum.position'))

    @position.setter
    def position(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.repetition_mode.enum.position', int(new_val))


class RootLuSpecInstanceAttributeRepetition_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.repetition_mode'
        self.enum = RootLuSpecInstanceAttributeRepetition_modeEnum(self._context)


class RootLuSpecInstanceAttributePhase_fwd_mod_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_fwd_mod_rate'


class RootLuSpecInstanceAttributeFwd_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_datapoints'


class RootLuSpecInstanceAttributePhase_fwd_pause_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_fwd_pause_rate'


class RootLuSpecInstanceAttributeXy_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.xy_move_speed'


class RootLuSpecInstanceAttributeBwd_mod_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_time'


class RootLuSpecInstanceAttributePhase_bwd_pause_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_bwd_pause_rate'


class RootLuSpecInstanceAttributeFwd_mod_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_time'


class RootLuSpecInstanceAttributeFwd_pause_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_pause_mode.enum'

    @property
    def z_on(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_pause_mode.enum.z_on'))

    @z_on.setter
    def z_on(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_pause_mode.enum.z_on', int(new_val))

    @property
    def z_off(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_pause_mode.enum.z_off'))

    @z_off.setter
    def z_off(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_pause_mode.enum.z_off', int(new_val))


class RootLuSpecInstanceAttributeFwd_pause_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_pause_mode'
        self.enum = RootLuSpecInstanceAttributeFwd_pause_modeEnum(self._context)


class RootLuSpecInstanceAttributeMod_rel_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.mod_rel_value'


class RootLuSpecInstanceAttributeAuto_recalibrate_probe_interval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.auto_recalibrate_probe_interval'


class RootLuSpecInstanceAttributePhase_bwd_mod_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_bwd_mod_rate'


class RootLuSpecInstanceAttributeStart_offset_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.start_offset_move_speed'


class RootLuSpecInstanceAttributePhase_data_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.phase_data_group_id'


class RootLuSpecInstanceAttributeBwd_mod_stop_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_stop_value'


class RootLuSpecInstanceAttributeBwd_mod_stop_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_stop_mode.enum'

    @property
    def is_less_than(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_mod_stop_mode.enum.is_less_than'))

    @is_less_than.setter
    def is_less_than(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_mod_stop_mode.enum.is_less_than', int(new_val))

    @property
    def is_greater_than(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_mod_stop_mode.enum.is_greater_than'))

    @is_greater_than.setter
    def is_greater_than(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_mod_stop_mode.enum.is_greater_than', int(new_val))


class RootLuSpecInstanceAttributeBwd_mod_stop_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_stop_mode'
        self.enum = RootLuSpecInstanceAttributeBwd_mod_stop_modeEnum(self._context)


class RootLuSpecInstanceAttributeFwd_pause_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_pause_time'


class RootLuSpecInstanceAttributeFwd_mod_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_mode.enum'

    @property
    def fixed_length(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_mod_mode.enum.fixed_length'))

    @fixed_length.setter
    def fixed_length(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_mod_mode.enum.fixed_length', int(new_val))

    @property
    def stop_by_value(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_mod_mode.enum.stop_by_value'))

    @stop_by_value.setter
    def stop_by_value(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_mod_mode.enum.stop_by_value', int(new_val))


class RootLuSpecInstanceAttributeFwd_mod_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_mode'
        self.enum = RootLuSpecInstanceAttributeFwd_mod_modeEnum(self._context)


class RootLuSpecInstanceAttributeFwd_mod_stop_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_stop_mode.enum'

    @property
    def is_less_than(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_mod_stop_mode.enum.is_less_than'))

    @is_less_than.setter
    def is_less_than(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_mod_stop_mode.enum.is_less_than', int(new_val))

    @property
    def is_greater_than(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.fwd_mod_stop_mode.enum.is_greater_than'))

    @is_greater_than.setter
    def is_greater_than(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.fwd_mod_stop_mode.enum.is_greater_than', int(new_val))


class RootLuSpecInstanceAttributeFwd_mod_stop_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_stop_mode'
        self.enum = RootLuSpecInstanceAttributeFwd_mod_stop_modeEnum(self._context)


class RootLuSpecInstanceAttributeBwd_pause_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_pause_time'


class RootLuSpecInstanceAttributeBwd_mod_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_mode.enum'

    @property
    def fixed_length(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_mod_mode.enum.fixed_length'))

    @fixed_length.setter
    def fixed_length(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_mod_mode.enum.fixed_length', int(new_val))

    @property
    def stop_by_value(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.bwd_mod_mode.enum.stop_by_value'))

    @stop_by_value.setter
    def stop_by_value(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.bwd_mod_mode.enum.stop_by_value', int(new_val))


class RootLuSpecInstanceAttributeBwd_mod_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_mod_mode'
        self.enum = RootLuSpecInstanceAttributeBwd_mod_modeEnum(self._context)


class RootLuSpecInstanceAttributeSpec_map_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.spec_map_mode'


class RootLuSpecInstanceAttributeFwd_mod_stop_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_mod_stop_value'


class RootLuSpecInstanceAttributeFwd_pause_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_pause_datapoints'


class RootLuSpecInstanceAttributeBwd_pause_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_pause_datapoints'


class RootLuSpecInstanceAttributeBwd_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.bwd_move_speed'


class RootLuSpecInstanceAttributeFeedback_active(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.feedback_active'


class RootLuSpecInstanceAttributeFwd_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.fwd_move_speed'


class RootLuSpecInstanceAttributeModulation_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.modulation_output.enum'

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.modulation_output.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.modulation_output.enum.position_z', int(new_val))

    @property
    def external_z(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.modulation_output.enum.external_z'))

    @external_z.setter
    def external_z(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.modulation_output.enum.external_z', int(new_val))

    @property
    def tip_voltage(self) -> int:
        return int(self._context.get('root.lu.spec.instance.attribute.modulation_output.enum.tip_voltage'))

    @tip_voltage.setter
    def tip_voltage(self, new_val:int):
        self._context.set('root.lu.spec.instance.attribute.modulation_output.enum.tip_voltage', int(new_val))


class RootLuSpecInstanceAttributeModulation_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute.modulation_output'
        self.enum = RootLuSpecInstanceAttributeModulation_outputEnum(self._context)


class RootLuSpecInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.attribute'
        self.modulation_output = RootLuSpecInstanceAttributeModulation_output(self._context)
        self.fwd_move_speed = RootLuSpecInstanceAttributeFwd_move_speed(self._context)
        self.feedback_active = RootLuSpecInstanceAttributeFeedback_active(self._context)
        self.bwd_move_speed = RootLuSpecInstanceAttributeBwd_move_speed(self._context)
        self.bwd_pause_datapoints = RootLuSpecInstanceAttributeBwd_pause_datapoints(self._context)
        self.fwd_pause_datapoints = RootLuSpecInstanceAttributeFwd_pause_datapoints(self._context)
        self.fwd_mod_stop_value = RootLuSpecInstanceAttributeFwd_mod_stop_value(self._context)
        self.spec_map_mode = RootLuSpecInstanceAttributeSpec_map_mode(self._context)
        self.bwd_mod_mode = RootLuSpecInstanceAttributeBwd_mod_mode(self._context)
        self.bwd_pause_time = RootLuSpecInstanceAttributeBwd_pause_time(self._context)
        self.fwd_mod_stop_mode = RootLuSpecInstanceAttributeFwd_mod_stop_mode(self._context)
        self.fwd_mod_mode = RootLuSpecInstanceAttributeFwd_mod_mode(self._context)
        self.fwd_pause_time = RootLuSpecInstanceAttributeFwd_pause_time(self._context)
        self.bwd_mod_stop_mode = RootLuSpecInstanceAttributeBwd_mod_stop_mode(self._context)
        self.bwd_mod_stop_value = RootLuSpecInstanceAttributeBwd_mod_stop_value(self._context)
        self.phase_data_group_id = RootLuSpecInstanceAttributePhase_data_group_id(self._context)
        self.start_offset_move_speed = RootLuSpecInstanceAttributeStart_offset_move_speed(self._context)
        self.phase_bwd_mod_rate = RootLuSpecInstanceAttributePhase_bwd_mod_rate(self._context)
        self.auto_recalibrate_probe_interval = RootLuSpecInstanceAttributeAuto_recalibrate_probe_interval(self._context)
        self.mod_rel_value = RootLuSpecInstanceAttributeMod_rel_value(self._context)
        self.fwd_pause_mode = RootLuSpecInstanceAttributeFwd_pause_mode(self._context)
        self.fwd_mod_time = RootLuSpecInstanceAttributeFwd_mod_time(self._context)
        self.phase_bwd_pause_rate = RootLuSpecInstanceAttributePhase_bwd_pause_rate(self._context)
        self.bwd_mod_time = RootLuSpecInstanceAttributeBwd_mod_time(self._context)
        self.xy_move_speed = RootLuSpecInstanceAttributeXy_move_speed(self._context)
        self.phase_fwd_pause_rate = RootLuSpecInstanceAttributePhase_fwd_pause_rate(self._context)
        self.fwd_datapoints = RootLuSpecInstanceAttributeFwd_datapoints(self._context)
        self.phase_fwd_mod_rate = RootLuSpecInstanceAttributePhase_fwd_mod_rate(self._context)
        self.repetition_mode = RootLuSpecInstanceAttributeRepetition_mode(self._context)
        self.phase_sample_mask = RootLuSpecInstanceAttributePhase_sample_mask(self._context)
        self.point_coords_blob_vec = RootLuSpecInstanceAttributePoint_coords_blob_vec(self._context)
        self.bwd_datapoints = RootLuSpecInstanceAttributeBwd_datapoints(self._context)
        self.repetition_count = RootLuSpecInstanceAttributeRepetition_count(self._context)
        self.start_offset = RootLuSpecInstanceAttributeStart_offset(self._context)
        self.spec_end_mode = RootLuSpecInstanceAttributeSpec_end_mode(self._context)
        self.bwd_pause_mode = RootLuSpecInstanceAttributeBwd_pause_mode(self._context)
        self.current_repetition = RootLuSpecInstanceAttributeCurrent_repetition(self._context)
        self.fwd_mod_range = RootLuSpecInstanceAttributeFwd_mod_range(self._context)
        self.spec_map_configuration_blob_vec = RootLuSpecInstanceAttributeSpec_map_configuration_blob_vec(self._context)
        self.deflection_force_offset = RootLuSpecInstanceAttributeDeflection_force_offset(self._context)
        self.bwd_mod_range = RootLuSpecInstanceAttributeBwd_mod_range(self._context)


class RootLuSpecInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger.start'


class RootLuSpecInstanceTriggerPause(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger.pause'


class RootLuSpecInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger.user_abort'


class RootLuSpecInstanceTriggerResume_last_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger.resume_last_point'


class RootLuSpecInstanceTriggerResume_next_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger.resume_next_point'


class RootLuSpecInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance.trigger'
        self.resume_next_point = RootLuSpecInstanceTriggerResume_next_point(self._context)
        self.resume_last_point = RootLuSpecInstanceTriggerResume_last_point(self._context)
        self.user_abort = RootLuSpecInstanceTriggerUser_abort(self._context)
        self.pause = RootLuSpecInstanceTriggerPause(self._context)
        self.start = RootLuSpecInstanceTriggerStart(self._context)


class RootLuSpecInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec.instance'
        self.trigger = RootLuSpecInstanceTrigger(self._context)
        self.attribute = RootLuSpecInstanceAttribute(self._context)


class RootLuSpec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.spec'
        self.instance = RootLuSpecInstance(self._context)


class RootLuMemory_signal_genInstanceAttributeJoinEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.join.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.memory_signal_gen.instance.attribute.join.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.memory_signal_gen.instance.attribute.join.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.memory_signal_gen.instance.attribute.join.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.memory_signal_gen.instance.attribute.join.enum.enabled', int(new_val))


class RootLuMemory_signal_genInstanceAttributeJoin(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.join'
        self.enum = RootLuMemory_signal_genInstanceAttributeJoinEnum(self._context)


class RootLuMemory_signal_genInstanceAttributeCurrent_datapoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.current_datapoint'


class RootLuMemory_signal_genInstanceAttributeLast_datapoint_value_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.last_datapoint_value_binary_vec'


class RootLuMemory_signal_genInstanceAttributeEnd_reached(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.end_reached'


class RootLuMemory_signal_genInstanceAttributeOutput_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.output_binary_vec'


class RootLuMemory_signal_genInstanceAttributeFirst_datapoint_value_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.first_datapoint_value_vec'


class RootLuMemory_signal_genInstanceAttributeUnder_run(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.under_run'


class RootLuMemory_signal_genInstanceAttributeFirst_datapoint_value_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.first_datapoint_value_binary_vec'


class RootLuMemory_signal_genInstanceAttributeOffset_value_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.offset_value_vec'


class RootLuMemory_signal_genInstanceAttributeLinear_interpolationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.linear_interpolation.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.memory_signal_gen.instance.attribute.linear_interpolation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.memory_signal_gen.instance.attribute.linear_interpolation.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.memory_signal_gen.instance.attribute.linear_interpolation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.memory_signal_gen.instance.attribute.linear_interpolation.enum.enabled', int(new_val))


class RootLuMemory_signal_genInstanceAttributeLinear_interpolation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.linear_interpolation'
        self.enum = RootLuMemory_signal_genInstanceAttributeLinear_interpolationEnum(self._context)


class RootLuMemory_signal_genInstanceAttributeData_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.data_group_id'


class RootLuMemory_signal_genInstanceAttributeOutput_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.output_vec'


class RootLuMemory_signal_genInstanceAttributeSweep_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.sweep_time'


class RootLuMemory_signal_genInstanceAttributeLast_datapoint_value_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.last_datapoint_value_vec'


class RootLuMemory_signal_genInstanceAttributeOffset_value_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute.offset_value_binary_vec'


class RootLuMemory_signal_genInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.attribute'
        self.offset_value_binary_vec = RootLuMemory_signal_genInstanceAttributeOffset_value_binary_vec(self._context)
        self.last_datapoint_value_vec = RootLuMemory_signal_genInstanceAttributeLast_datapoint_value_vec(self._context)
        self.sweep_time = RootLuMemory_signal_genInstanceAttributeSweep_time(self._context)
        self.output_vec = RootLuMemory_signal_genInstanceAttributeOutput_vec(self._context)
        self.data_group_id = RootLuMemory_signal_genInstanceAttributeData_group_id(self._context)
        self.linear_interpolation = RootLuMemory_signal_genInstanceAttributeLinear_interpolation(self._context)
        self.offset_value_vec = RootLuMemory_signal_genInstanceAttributeOffset_value_vec(self._context)
        self.first_datapoint_value_binary_vec = RootLuMemory_signal_genInstanceAttributeFirst_datapoint_value_binary_vec(self._context)
        self.under_run = RootLuMemory_signal_genInstanceAttributeUnder_run(self._context)
        self.first_datapoint_value_vec = RootLuMemory_signal_genInstanceAttributeFirst_datapoint_value_vec(self._context)
        self.output_binary_vec = RootLuMemory_signal_genInstanceAttributeOutput_binary_vec(self._context)
        self.end_reached = RootLuMemory_signal_genInstanceAttributeEnd_reached(self._context)
        self.last_datapoint_value_binary_vec = RootLuMemory_signal_genInstanceAttributeLast_datapoint_value_binary_vec(self._context)
        self.current_datapoint = RootLuMemory_signal_genInstanceAttributeCurrent_datapoint(self._context)
        self.join = RootLuMemory_signal_genInstanceAttributeJoin(self._context)


class RootLuMemory_signal_genInstanceTriggerEnable_preset_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.enable_preset_value'


class RootLuMemory_signal_genInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.start'


class RootLuMemory_signal_genInstanceTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.prepare'


class RootLuMemory_signal_genInstanceTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.stop'


class RootLuMemory_signal_genInstanceTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger.abort'


class RootLuMemory_signal_genInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.trigger'
        self.abort = RootLuMemory_signal_genInstanceTriggerAbort(self._context)
        self.stop = RootLuMemory_signal_genInstanceTriggerStop(self._context)
        self.prepare = RootLuMemory_signal_genInstanceTriggerPrepare(self._context)
        self.start = RootLuMemory_signal_genInstanceTriggerStart(self._context)
        self.enable_preset_value = RootLuMemory_signal_genInstanceTriggerEnable_preset_value(self._context)


class RootLuMemory_signal_genInstanceBusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.busy.is_busy'


class RootLuMemory_signal_genInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance.busy'
        self.is_busy = RootLuMemory_signal_genInstanceBusyIs_busy(self._context)


class RootLuMemory_signal_genInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen.instance'
        self.busy = RootLuMemory_signal_genInstanceBusy(self._context)
        self.trigger = RootLuMemory_signal_genInstanceTrigger(self._context)
        self.attribute = RootLuMemory_signal_genInstanceAttribute(self._context)


class RootLuMemory_signal_gen(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.memory_signal_gen'
        self.instance = RootLuMemory_signal_genInstance(self._context)


class RootLuAnalog_fast_inCh2AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.calib_gain'


class RootLuAnalog_fast_inCh2AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.input_gain'


class RootLuAnalog_fast_inCh2AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.current_input_value'


class RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_fast_inCh2AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.calib_offset'


class RootLuAnalog_fast_inCh2AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.input_offset'


class RootLuAnalog_fast_inCh2AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.ch2.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.ch2.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_fast_inCh2AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_inCh2AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_inCh2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.attribute'
        self.calib_polarity = RootLuAnalog_fast_inCh2AttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_fast_inCh2AttributeInput_offset(self._context)
        self.calib_offset = RootLuAnalog_fast_inCh2AttributeCalib_offset(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_fast_inCh2AttributeCross_coupling_axis_coefficient_vec(self._context)
        self.current_input_value = RootLuAnalog_fast_inCh2AttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_fast_inCh2AttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_fast_inCh2AttributeCalib_gain(self._context)


class RootLuAnalog_fast_inCh2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2.trigger'


class RootLuAnalog_fast_inCh2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.ch2'
        self.trigger = RootLuAnalog_fast_inCh2Trigger(self._context)
        self.attribute = RootLuAnalog_fast_inCh2Attribute(self._context)


class RootLuAnalog_fast_inUserAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.calib_gain'


class RootLuAnalog_fast_inUserAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.input_gain'


class RootLuAnalog_fast_inUserAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.current_input_value'


class RootLuAnalog_fast_inUserAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_fast_inUserAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_fast_inUserAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_fast_inUserAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_fast_inUserAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.calib_offset'


class RootLuAnalog_fast_inUserAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.input_offset'


class RootLuAnalog_fast_inUserAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.user.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.user.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_fast_inUserAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_inUserAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_inUserAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.attribute'
        self.calib_polarity = RootLuAnalog_fast_inUserAttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_fast_inUserAttributeInput_offset(self._context)
        self.calib_offset = RootLuAnalog_fast_inUserAttributeCalib_offset(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_fast_inUserAttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_fast_inUserAttributeCross_coupling_axis_coefficient_vec(self._context)
        self.current_input_value = RootLuAnalog_fast_inUserAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_fast_inUserAttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_fast_inUserAttributeCalib_gain(self._context)


class RootLuAnalog_fast_inUserTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user.trigger'


class RootLuAnalog_fast_inUser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.user'
        self.trigger = RootLuAnalog_fast_inUserTrigger(self._context)
        self.attribute = RootLuAnalog_fast_inUserAttribute(self._context)


class RootLuAnalog_fast_inDeflectionAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.calib_gain'


class RootLuAnalog_fast_inDeflectionAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.input_gain'


class RootLuAnalog_fast_inDeflectionAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.current_input_value'


class RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_fast_inDeflectionAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.calib_offset'


class RootLuAnalog_fast_inDeflectionAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.input_offset'


class RootLuAnalog_fast_inDeflectionAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_in.deflection.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_in.deflection.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_fast_inDeflectionAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_inDeflectionAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_inDeflectionAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.attribute'
        self.calib_polarity = RootLuAnalog_fast_inDeflectionAttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_fast_inDeflectionAttributeInput_offset(self._context)
        self.calib_offset = RootLuAnalog_fast_inDeflectionAttributeCalib_offset(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_id(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_fast_inDeflectionAttributeCross_coupling_axis_coefficient_vec(self._context)
        self.current_input_value = RootLuAnalog_fast_inDeflectionAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_fast_inDeflectionAttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_fast_inDeflectionAttributeCalib_gain(self._context)


class RootLuAnalog_fast_inDeflectionTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection.trigger'


class RootLuAnalog_fast_inDeflection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in.deflection'
        self.trigger = RootLuAnalog_fast_inDeflectionTrigger(self._context)
        self.attribute = RootLuAnalog_fast_inDeflectionAttribute(self._context)


class RootLuAnalog_fast_in(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_in'
        self.deflection = RootLuAnalog_fast_inDeflection(self._context)
        self.user = RootLuAnalog_fast_inUser(self._context)
        self.ch2 = RootLuAnalog_fast_inCh2(self._context)


class RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum'

    @property
    def free_vibration(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.free_vibration'))

    @free_vibration.setter
    def free_vibration(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.free_vibration', int(new_val))

    @property
    def const_drive(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.const_drive'))

    @const_drive.setter
    def const_drive(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.const_drive', int(new_val))

    @property
    def const_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.const_amplitude'))

    @const_amplitude.setter
    def const_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode.enum.const_amplitude', int(new_val))


class RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_mode'
        self.enum = RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_modeEnum(self._context)


class RootLuSignal_analyzerInst2AttributeCurrent_amplitude_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_amplitude_binary'


class RootLuSignal_analyzerInst2AttributeCurrent_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_y'


class RootLuSignal_analyzerInst2AttributeDemodulator_bwEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum'

    @property
    def bw_23_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_23_hz'))

    @bw_23_hz.setter
    def bw_23_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_23_hz', int(new_val))

    @property
    def bw_6_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_6_k_hz'))

    @bw_6_k_hz.setter
    def bw_6_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_6_k_hz', int(new_val))

    @property
    def bw_180_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_180_hz'))

    @bw_180_hz.setter
    def bw_180_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_180_hz', int(new_val))

    @property
    def bw_750_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_750_hz'))

    @bw_750_hz.setter
    def bw_750_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_750_hz', int(new_val))

    @property
    def bw_500_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_500_k_hz'))

    @bw_500_k_hz.setter
    def bw_500_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_500_k_hz', int(new_val))

    @property
    def bw_12_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_12_k_hz'))

    @bw_12_k_hz.setter
    def bw_12_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_12_k_hz', int(new_val))

    @property
    def bw_45_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_45_hz'))

    @bw_45_hz.setter
    def bw_45_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_45_hz', int(new_val))

    @property
    def bw_23_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_23_k_hz'))

    @bw_23_k_hz.setter
    def bw_23_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_23_k_hz', int(new_val))

    @property
    def bw_1500_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_1500_hz'))

    @bw_1500_hz.setter
    def bw_1500_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_1500_hz', int(new_val))

    @property
    def bw_100_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_100_k_hz'))

    @bw_100_k_hz.setter
    def bw_100_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_100_k_hz', int(new_val))

    @property
    def bw_90_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_90_hz'))

    @bw_90_hz.setter
    def bw_90_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_90_hz', int(new_val))

    @property
    def bw_3_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_3_k_hz'))

    @bw_3_k_hz.setter
    def bw_3_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_3_k_hz', int(new_val))

    @property
    def bw_45_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_45_k_hz'))

    @bw_45_k_hz.setter
    def bw_45_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_45_k_hz', int(new_val))

    @property
    def bw_230_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_230_k_hz'))

    @bw_230_k_hz.setter
    def bw_230_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_230_k_hz', int(new_val))

    @property
    def bw_360_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_360_hz'))

    @bw_360_hz.setter
    def bw_360_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.demodulator_bw.enum.bw_360_hz', int(new_val))


class RootLuSignal_analyzerInst2AttributeDemodulator_bw(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.demodulator_bw'
        self.enum = RootLuSignal_analyzerInst2AttributeDemodulator_bwEnum(self._context)


class RootLuSignal_analyzerInst2AttributePhase_ctrl_p_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.phase_ctrl_p_gain'


class RootLuSignal_analyzerInst2AttributeOperating_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.operating_mode.enum'

    @property
    def pll(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.pll'))

    @pll.setter
    def pll(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.pll', int(new_val))

    @property
    def lock_in(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.lock_in'))

    @lock_in.setter
    def lock_in(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.lock_in', int(new_val))

    @property
    def kpfm(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.kpfm'))

    @kpfm.setter
    def kpfm(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.operating_mode.enum.kpfm', int(new_val))


class RootLuSignal_analyzerInst2AttributeOperating_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.operating_mode'
        self.enum = RootLuSignal_analyzerInst2AttributeOperating_modeEnum(self._context)


class RootLuSignal_analyzerInst2AttributeDisplay_df_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.display_df_range'


class RootLuSignal_analyzerInst2AttributePhase_lock_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.phase_lock_range'


class RootLuSignal_analyzerInst2AttributeReference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_amplitude'


class RootLuSignal_analyzerInst2AttributeReference_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_phase'


class RootLuSignal_analyzerInst2AttributeCurrent_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_x'


class RootLuSignal_analyzerInst2AttributePll_unlocked(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.pll_unlocked'


class RootLuSignal_analyzerInst2AttributeReset_flag_pll_unlocked(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reset_flag_pll_unlocked'


class RootLuSignal_analyzerInst2AttributeCurrent_reference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_reference_amplitude'


class RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst2AttributeHarmonic_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.harmonic_source.enum'

    @property
    def analyzer1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.harmonic_source.enum.analyzer1'))

    @analyzer1.setter
    def analyzer1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.harmonic_source.enum.analyzer1', int(new_val))

    @property
    def analyzer2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.harmonic_source.enum.analyzer2'))

    @analyzer2.setter
    def analyzer2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.harmonic_source.enum.analyzer2', int(new_val))


class RootLuSignal_analyzerInst2AttributeHarmonic_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.harmonic_source'
        self.enum = RootLuSignal_analyzerInst2AttributeHarmonic_sourceEnum(self._context)


class RootLuSignal_analyzerInst2AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def test_ref(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.test_ref'))

    @test_ref.setter
    def test_ref(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.test_ref', int(new_val))

    @property
    def test_ana_gnd(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.test_ana_gnd'))

    @test_ana_gnd.setter
    def test_ana_gnd(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.test_ana_gnd', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def test_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.test_tip_voltage'))

    @test_tip_voltage.setter
    def test_tip_voltage(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.test_tip_voltage', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuSignal_analyzerInst2AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.input'
        self.enum = RootLuSignal_analyzerInst2AttributeInputEnum(self._context)


class RootLuSignal_analyzerInst2AttributeAmplitude_modulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_modulation.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.amplitude_modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.amplitude_modulation.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.amplitude_modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.amplitude_modulation.enum.enabled', int(new_val))


class RootLuSignal_analyzerInst2AttributeAmplitude_modulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_modulation'
        self.enum = RootLuSignal_analyzerInst2AttributeAmplitude_modulationEnum(self._context)


class RootLuSignal_analyzerInst2AttributeDelay_comp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.delay_comp'


class RootLuSignal_analyzerInst2AttributeCurrent_x_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_x_binary'


class RootLuSignal_analyzerInst2AttributeReference_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_frequency'


class RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_i_gain'


class RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_set_point_calib_resultEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result.enum'

    @property
    def no_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result.enum.no_error'))

    @no_error.setter
    def no_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result.enum.no_error', int(new_val))

    @property
    def amplitude_calibration_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result.enum.amplitude_calibration_error'))

    @amplitude_calibration_error.setter
    def amplitude_calibration_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result.enum.amplitude_calibration_error', int(new_val))


class RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_set_point_calib_result(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_set_point_calib_result'
        self.enum = RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_set_point_calib_resultEnum(self._context)


class RootLuSignal_analyzerInst2AttributeCurrent_ctrl_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_ctrl_amplitude'


class RootLuSignal_analyzerInst2AttributeLock_in_calc_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.lock_in_calc_phase'


class RootLuSignal_analyzerInst2AttributeCurrent_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_amplitude'


class RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_p_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.amplitude_ctrl_p_gain'


class RootLuSignal_analyzerInst2AttributeCurrent_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_phase'


class RootLuSignal_analyzerInst2AttributeCurrent_ctrl_delta_f(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_ctrl_delta_f'


class RootLuSignal_analyzerInst2AttributeReference_amplitude_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_amplitude_factor'


class RootLuSignal_analyzerInst2AttributePhase_ctrl_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.phase_ctrl_i_gain'


class RootLuSignal_analyzerInst2AttributeLock_in_calc_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.lock_in_calc_amplitude'


class RootLuSignal_analyzerInst2AttributeReference_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_source.enum'

    @property
    def own(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.own'))

    @own.setter
    def own(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.own', int(new_val))

    @property
    def harmonic1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic1'))

    @harmonic1.setter
    def harmonic1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic1', int(new_val))

    @property
    def harmonic3(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic3'))

    @harmonic3.setter
    def harmonic3(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic3', int(new_val))

    @property
    def harmonic2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic2'))

    @harmonic2.setter
    def harmonic2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.reference_source.enum.harmonic2', int(new_val))


class RootLuSignal_analyzerInst2AttributeReference_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.reference_source'
        self.enum = RootLuSignal_analyzerInst2AttributeReference_sourceEnum(self._context)


class RootLuSignal_analyzerInst2AttributeCurrent_y_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_y_binary'


class RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum'

    @property
    def free_vibration(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.free_vibration'))

    @free_vibration.setter
    def free_vibration(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.free_vibration', int(new_val))

    @property
    def const_drive(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.const_drive'))

    @const_drive.setter
    def const_drive(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.const_drive', int(new_val))

    @property
    def const_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.const_amplitude'))

    @const_amplitude.setter
    def const_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode.enum.const_amplitude', int(new_val))


class RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.target_amplitude_ctrl_mode'
        self.enum = RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_modeEnum(self._context)


class RootLuSignal_analyzerInst2AttributeCurrent_phase_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.current_phase_binary'


class RootLuSignal_analyzerInst2AttributeEnable_dc_blockEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.enable_dc_block.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.enable_dc_block.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.enable_dc_block.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst2.attribute.enable_dc_block.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst2.attribute.enable_dc_block.enum.enabled', int(new_val))


class RootLuSignal_analyzerInst2AttributeEnable_dc_block(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute.enable_dc_block'
        self.enum = RootLuSignal_analyzerInst2AttributeEnable_dc_blockEnum(self._context)


class RootLuSignal_analyzerInst2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.attribute'
        self.enable_dc_block = RootLuSignal_analyzerInst2AttributeEnable_dc_block(self._context)
        self.current_phase_binary = RootLuSignal_analyzerInst2AttributeCurrent_phase_binary(self._context)
        self.target_amplitude_ctrl_mode = RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_mode(self._context)
        self.current_y_binary = RootLuSignal_analyzerInst2AttributeCurrent_y_binary(self._context)
        self.reference_source = RootLuSignal_analyzerInst2AttributeReference_source(self._context)
        self.lock_in_calc_amplitude = RootLuSignal_analyzerInst2AttributeLock_in_calc_amplitude(self._context)
        self.phase_ctrl_i_gain = RootLuSignal_analyzerInst2AttributePhase_ctrl_i_gain(self._context)
        self.reference_amplitude_factor = RootLuSignal_analyzerInst2AttributeReference_amplitude_factor(self._context)
        self.current_ctrl_delta_f = RootLuSignal_analyzerInst2AttributeCurrent_ctrl_delta_f(self._context)
        self.current_phase = RootLuSignal_analyzerInst2AttributeCurrent_phase(self._context)
        self.amplitude_ctrl_p_gain = RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_p_gain(self._context)
        self.current_amplitude = RootLuSignal_analyzerInst2AttributeCurrent_amplitude(self._context)
        self.lock_in_calc_phase = RootLuSignal_analyzerInst2AttributeLock_in_calc_phase(self._context)
        self.current_ctrl_amplitude = RootLuSignal_analyzerInst2AttributeCurrent_ctrl_amplitude(self._context)
        self.amplitude_ctrl_set_point_calib_result = RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_set_point_calib_result(self._context)
        self.amplitude_ctrl_i_gain = RootLuSignal_analyzerInst2AttributeAmplitude_ctrl_i_gain(self._context)
        self.reference_frequency = RootLuSignal_analyzerInst2AttributeReference_frequency(self._context)
        self.current_x_binary = RootLuSignal_analyzerInst2AttributeCurrent_x_binary(self._context)
        self.delay_comp = RootLuSignal_analyzerInst2AttributeDelay_comp(self._context)
        self.amplitude_modulation = RootLuSignal_analyzerInst2AttributeAmplitude_modulation(self._context)
        self.input = RootLuSignal_analyzerInst2AttributeInput(self._context)
        self.harmonic_source = RootLuSignal_analyzerInst2AttributeHarmonic_source(self._context)
        self.current_amplitude_ctrl_set_point = RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_set_point(self._context)
        self.target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst2AttributeTarget_amplitude_ctrl_set_point(self._context)
        self.current_reference_amplitude = RootLuSignal_analyzerInst2AttributeCurrent_reference_amplitude(self._context)
        self.reset_flag_pll_unlocked = RootLuSignal_analyzerInst2AttributeReset_flag_pll_unlocked(self._context)
        self.pll_unlocked = RootLuSignal_analyzerInst2AttributePll_unlocked(self._context)
        self.current_x = RootLuSignal_analyzerInst2AttributeCurrent_x(self._context)
        self.reference_phase = RootLuSignal_analyzerInst2AttributeReference_phase(self._context)
        self.reference_amplitude = RootLuSignal_analyzerInst2AttributeReference_amplitude(self._context)
        self.phase_lock_range = RootLuSignal_analyzerInst2AttributePhase_lock_range(self._context)
        self.display_df_range = RootLuSignal_analyzerInst2AttributeDisplay_df_range(self._context)
        self.operating_mode = RootLuSignal_analyzerInst2AttributeOperating_mode(self._context)
        self.phase_ctrl_p_gain = RootLuSignal_analyzerInst2AttributePhase_ctrl_p_gain(self._context)
        self.demodulator_bw = RootLuSignal_analyzerInst2AttributeDemodulator_bw(self._context)
        self.current_y = RootLuSignal_analyzerInst2AttributeCurrent_y(self._context)
        self.current_amplitude_binary = RootLuSignal_analyzerInst2AttributeCurrent_amplitude_binary(self._context)
        self.current_amplitude_ctrl_mode = RootLuSignal_analyzerInst2AttributeCurrent_amplitude_ctrl_mode(self._context)


class RootLuSignal_analyzerInst2TriggerStart_switch_to_target_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.start_switch_to_target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst2TriggerStart_phase_zero_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.start_phase_zero_calibration'


class RootLuSignal_analyzerInst2TriggerStart_update_current_free_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.start_update_current_free_amplitude'


class RootLuSignal_analyzerInst2TriggerSwitch_to_target_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.switch_to_target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst2TriggerStart_kpfm_phase_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.start_kpfm_phase_calibration'


class RootLuSignal_analyzerInst2TriggerStart_switch_to_target_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.start_switch_to_target_amplitude_ctrl_mode'


class RootLuSignal_analyzerInst2TriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.user_abort'


class RootLuSignal_analyzerInst2TriggerKpfm_phase_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.kpfm_phase_calibration'


class RootLuSignal_analyzerInst2TriggerSwitch_to_target_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger.switch_to_target_amplitude_ctrl_mode'


class RootLuSignal_analyzerInst2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2.trigger'
        self.switch_to_target_amplitude_ctrl_mode = RootLuSignal_analyzerInst2TriggerSwitch_to_target_amplitude_ctrl_mode(self._context)
        self.kpfm_phase_calibration = RootLuSignal_analyzerInst2TriggerKpfm_phase_calibration(self._context)
        self.user_abort = RootLuSignal_analyzerInst2TriggerUser_abort(self._context)
        self.start_switch_to_target_amplitude_ctrl_mode = RootLuSignal_analyzerInst2TriggerStart_switch_to_target_amplitude_ctrl_mode(self._context)
        self.start_kpfm_phase_calibration = RootLuSignal_analyzerInst2TriggerStart_kpfm_phase_calibration(self._context)
        self.switch_to_target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst2TriggerSwitch_to_target_amplitude_ctrl_set_point(self._context)
        self.start_update_current_free_amplitude = RootLuSignal_analyzerInst2TriggerStart_update_current_free_amplitude(self._context)
        self.start_phase_zero_calibration = RootLuSignal_analyzerInst2TriggerStart_phase_zero_calibration(self._context)
        self.start_switch_to_target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst2TriggerStart_switch_to_target_amplitude_ctrl_set_point(self._context)


class RootLuSignal_analyzerInst2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst2'
        self.trigger = RootLuSignal_analyzerInst2Trigger(self._context)
        self.attribute = RootLuSignal_analyzerInst2Attribute(self._context)


class RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum'

    @property
    def free_vibration(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.free_vibration'))

    @free_vibration.setter
    def free_vibration(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.free_vibration', int(new_val))

    @property
    def const_drive(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.const_drive'))

    @const_drive.setter
    def const_drive(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.const_drive', int(new_val))

    @property
    def const_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.const_amplitude'))

    @const_amplitude.setter
    def const_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode.enum.const_amplitude', int(new_val))


class RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_mode'
        self.enum = RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_modeEnum(self._context)


class RootLuSignal_analyzerInst1AttributeCurrent_amplitude_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_amplitude_binary'


class RootLuSignal_analyzerInst1AttributeCurrent_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_y'


class RootLuSignal_analyzerInst1AttributeDemodulator_bwEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum'

    @property
    def bw_23_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_23_hz'))

    @bw_23_hz.setter
    def bw_23_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_23_hz', int(new_val))

    @property
    def bw_6_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_6_k_hz'))

    @bw_6_k_hz.setter
    def bw_6_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_6_k_hz', int(new_val))

    @property
    def bw_180_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_180_hz'))

    @bw_180_hz.setter
    def bw_180_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_180_hz', int(new_val))

    @property
    def bw_750_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_750_hz'))

    @bw_750_hz.setter
    def bw_750_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_750_hz', int(new_val))

    @property
    def bw_500_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_500_k_hz'))

    @bw_500_k_hz.setter
    def bw_500_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_500_k_hz', int(new_val))

    @property
    def bw_12_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_12_k_hz'))

    @bw_12_k_hz.setter
    def bw_12_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_12_k_hz', int(new_val))

    @property
    def bw_45_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_45_hz'))

    @bw_45_hz.setter
    def bw_45_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_45_hz', int(new_val))

    @property
    def bw_23_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_23_k_hz'))

    @bw_23_k_hz.setter
    def bw_23_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_23_k_hz', int(new_val))

    @property
    def bw_1500_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_1500_hz'))

    @bw_1500_hz.setter
    def bw_1500_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_1500_hz', int(new_val))

    @property
    def bw_100_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_100_k_hz'))

    @bw_100_k_hz.setter
    def bw_100_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_100_k_hz', int(new_val))

    @property
    def bw_90_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_90_hz'))

    @bw_90_hz.setter
    def bw_90_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_90_hz', int(new_val))

    @property
    def bw_3_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_3_k_hz'))

    @bw_3_k_hz.setter
    def bw_3_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_3_k_hz', int(new_val))

    @property
    def bw_45_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_45_k_hz'))

    @bw_45_k_hz.setter
    def bw_45_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_45_k_hz', int(new_val))

    @property
    def bw_230_k_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_230_k_hz'))

    @bw_230_k_hz.setter
    def bw_230_k_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_230_k_hz', int(new_val))

    @property
    def bw_360_hz(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_360_hz'))

    @bw_360_hz.setter
    def bw_360_hz(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.demodulator_bw.enum.bw_360_hz', int(new_val))


class RootLuSignal_analyzerInst1AttributeDemodulator_bw(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.demodulator_bw'
        self.enum = RootLuSignal_analyzerInst1AttributeDemodulator_bwEnum(self._context)


class RootLuSignal_analyzerInst1AttributePhase_ctrl_p_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.phase_ctrl_p_gain'


class RootLuSignal_analyzerInst1AttributeOperating_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.operating_mode.enum'

    @property
    def pll(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.pll'))

    @pll.setter
    def pll(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.pll', int(new_val))

    @property
    def lock_in(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.lock_in'))

    @lock_in.setter
    def lock_in(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.lock_in', int(new_val))

    @property
    def kpfm(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.kpfm'))

    @kpfm.setter
    def kpfm(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.operating_mode.enum.kpfm', int(new_val))


class RootLuSignal_analyzerInst1AttributeOperating_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.operating_mode'
        self.enum = RootLuSignal_analyzerInst1AttributeOperating_modeEnum(self._context)


class RootLuSignal_analyzerInst1AttributeDisplay_df_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.display_df_range'


class RootLuSignal_analyzerInst1AttributePhase_lock_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.phase_lock_range'


class RootLuSignal_analyzerInst1AttributeReference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_amplitude'


class RootLuSignal_analyzerInst1AttributeReference_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_phase'


class RootLuSignal_analyzerInst1AttributeCurrent_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_x'


class RootLuSignal_analyzerInst1AttributePll_unlocked(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.pll_unlocked'


class RootLuSignal_analyzerInst1AttributeReset_flag_pll_unlocked(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reset_flag_pll_unlocked'


class RootLuSignal_analyzerInst1AttributeCurrent_reference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_reference_amplitude'


class RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst1AttributeHarmonic_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.harmonic_source.enum'

    @property
    def analyzer1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.harmonic_source.enum.analyzer1'))

    @analyzer1.setter
    def analyzer1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.harmonic_source.enum.analyzer1', int(new_val))

    @property
    def analyzer2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.harmonic_source.enum.analyzer2'))

    @analyzer2.setter
    def analyzer2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.harmonic_source.enum.analyzer2', int(new_val))


class RootLuSignal_analyzerInst1AttributeHarmonic_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.harmonic_source'
        self.enum = RootLuSignal_analyzerInst1AttributeHarmonic_sourceEnum(self._context)


class RootLuSignal_analyzerInst1AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def test_ref(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.test_ref'))

    @test_ref.setter
    def test_ref(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.test_ref', int(new_val))

    @property
    def test_ana_gnd(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.test_ana_gnd'))

    @test_ana_gnd.setter
    def test_ana_gnd(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.test_ana_gnd', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def test_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.test_tip_voltage'))

    @test_tip_voltage.setter
    def test_tip_voltage(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.test_tip_voltage', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuSignal_analyzerInst1AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.input'
        self.enum = RootLuSignal_analyzerInst1AttributeInputEnum(self._context)


class RootLuSignal_analyzerInst1AttributeAmplitude_modulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_modulation.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.amplitude_modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.amplitude_modulation.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.amplitude_modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.amplitude_modulation.enum.enabled', int(new_val))


class RootLuSignal_analyzerInst1AttributeAmplitude_modulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_modulation'
        self.enum = RootLuSignal_analyzerInst1AttributeAmplitude_modulationEnum(self._context)


class RootLuSignal_analyzerInst1AttributeDelay_comp(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.delay_comp'


class RootLuSignal_analyzerInst1AttributeCurrent_x_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_x_binary'


class RootLuSignal_analyzerInst1AttributeReference_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_frequency'


class RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_i_gain'


class RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_set_point_calib_resultEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result.enum'

    @property
    def no_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result.enum.no_error'))

    @no_error.setter
    def no_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result.enum.no_error', int(new_val))

    @property
    def amplitude_calibration_error(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result.enum.amplitude_calibration_error'))

    @amplitude_calibration_error.setter
    def amplitude_calibration_error(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result.enum.amplitude_calibration_error', int(new_val))


class RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_set_point_calib_result(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_set_point_calib_result'
        self.enum = RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_set_point_calib_resultEnum(self._context)


class RootLuSignal_analyzerInst1AttributeCurrent_ctrl_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_ctrl_amplitude'


class RootLuSignal_analyzerInst1AttributeLock_in_calc_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.lock_in_calc_phase'


class RootLuSignal_analyzerInst1AttributeCurrent_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_amplitude'


class RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_p_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.amplitude_ctrl_p_gain'


class RootLuSignal_analyzerInst1AttributeCurrent_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_phase'


class RootLuSignal_analyzerInst1AttributeCurrent_ctrl_delta_f(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_ctrl_delta_f'


class RootLuSignal_analyzerInst1AttributeReference_amplitude_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_amplitude_factor'


class RootLuSignal_analyzerInst1AttributePhase_ctrl_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.phase_ctrl_i_gain'


class RootLuSignal_analyzerInst1AttributeLock_in_calc_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.lock_in_calc_amplitude'


class RootLuSignal_analyzerInst1AttributeReference_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_source.enum'

    @property
    def own(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.own'))

    @own.setter
    def own(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.own', int(new_val))

    @property
    def harmonic1(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic1'))

    @harmonic1.setter
    def harmonic1(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic1', int(new_val))

    @property
    def harmonic3(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic3'))

    @harmonic3.setter
    def harmonic3(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic3', int(new_val))

    @property
    def harmonic2(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic2'))

    @harmonic2.setter
    def harmonic2(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.reference_source.enum.harmonic2', int(new_val))


class RootLuSignal_analyzerInst1AttributeReference_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.reference_source'
        self.enum = RootLuSignal_analyzerInst1AttributeReference_sourceEnum(self._context)


class RootLuSignal_analyzerInst1AttributeCurrent_y_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_y_binary'


class RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum'

    @property
    def free_vibration(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.free_vibration'))

    @free_vibration.setter
    def free_vibration(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.free_vibration', int(new_val))

    @property
    def const_drive(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.const_drive'))

    @const_drive.setter
    def const_drive(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.const_drive', int(new_val))

    @property
    def const_amplitude(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.const_amplitude'))

    @const_amplitude.setter
    def const_amplitude(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode.enum.const_amplitude', int(new_val))


class RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.target_amplitude_ctrl_mode'
        self.enum = RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_modeEnum(self._context)


class RootLuSignal_analyzerInst1AttributeCurrent_phase_binary(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.current_phase_binary'


class RootLuSignal_analyzerInst1AttributeEnable_dc_blockEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.enable_dc_block.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.enable_dc_block.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.enable_dc_block.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.signal_analyzer.inst1.attribute.enable_dc_block.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.signal_analyzer.inst1.attribute.enable_dc_block.enum.enabled', int(new_val))


class RootLuSignal_analyzerInst1AttributeEnable_dc_block(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute.enable_dc_block'
        self.enum = RootLuSignal_analyzerInst1AttributeEnable_dc_blockEnum(self._context)


class RootLuSignal_analyzerInst1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.attribute'
        self.enable_dc_block = RootLuSignal_analyzerInst1AttributeEnable_dc_block(self._context)
        self.current_phase_binary = RootLuSignal_analyzerInst1AttributeCurrent_phase_binary(self._context)
        self.target_amplitude_ctrl_mode = RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_mode(self._context)
        self.current_y_binary = RootLuSignal_analyzerInst1AttributeCurrent_y_binary(self._context)
        self.reference_source = RootLuSignal_analyzerInst1AttributeReference_source(self._context)
        self.lock_in_calc_amplitude = RootLuSignal_analyzerInst1AttributeLock_in_calc_amplitude(self._context)
        self.phase_ctrl_i_gain = RootLuSignal_analyzerInst1AttributePhase_ctrl_i_gain(self._context)
        self.reference_amplitude_factor = RootLuSignal_analyzerInst1AttributeReference_amplitude_factor(self._context)
        self.current_ctrl_delta_f = RootLuSignal_analyzerInst1AttributeCurrent_ctrl_delta_f(self._context)
        self.current_phase = RootLuSignal_analyzerInst1AttributeCurrent_phase(self._context)
        self.amplitude_ctrl_p_gain = RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_p_gain(self._context)
        self.current_amplitude = RootLuSignal_analyzerInst1AttributeCurrent_amplitude(self._context)
        self.lock_in_calc_phase = RootLuSignal_analyzerInst1AttributeLock_in_calc_phase(self._context)
        self.current_ctrl_amplitude = RootLuSignal_analyzerInst1AttributeCurrent_ctrl_amplitude(self._context)
        self.amplitude_ctrl_set_point_calib_result = RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_set_point_calib_result(self._context)
        self.amplitude_ctrl_i_gain = RootLuSignal_analyzerInst1AttributeAmplitude_ctrl_i_gain(self._context)
        self.reference_frequency = RootLuSignal_analyzerInst1AttributeReference_frequency(self._context)
        self.current_x_binary = RootLuSignal_analyzerInst1AttributeCurrent_x_binary(self._context)
        self.delay_comp = RootLuSignal_analyzerInst1AttributeDelay_comp(self._context)
        self.amplitude_modulation = RootLuSignal_analyzerInst1AttributeAmplitude_modulation(self._context)
        self.input = RootLuSignal_analyzerInst1AttributeInput(self._context)
        self.harmonic_source = RootLuSignal_analyzerInst1AttributeHarmonic_source(self._context)
        self.current_amplitude_ctrl_set_point = RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_set_point(self._context)
        self.target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst1AttributeTarget_amplitude_ctrl_set_point(self._context)
        self.current_reference_amplitude = RootLuSignal_analyzerInst1AttributeCurrent_reference_amplitude(self._context)
        self.reset_flag_pll_unlocked = RootLuSignal_analyzerInst1AttributeReset_flag_pll_unlocked(self._context)
        self.pll_unlocked = RootLuSignal_analyzerInst1AttributePll_unlocked(self._context)
        self.current_x = RootLuSignal_analyzerInst1AttributeCurrent_x(self._context)
        self.reference_phase = RootLuSignal_analyzerInst1AttributeReference_phase(self._context)
        self.reference_amplitude = RootLuSignal_analyzerInst1AttributeReference_amplitude(self._context)
        self.phase_lock_range = RootLuSignal_analyzerInst1AttributePhase_lock_range(self._context)
        self.display_df_range = RootLuSignal_analyzerInst1AttributeDisplay_df_range(self._context)
        self.operating_mode = RootLuSignal_analyzerInst1AttributeOperating_mode(self._context)
        self.phase_ctrl_p_gain = RootLuSignal_analyzerInst1AttributePhase_ctrl_p_gain(self._context)
        self.demodulator_bw = RootLuSignal_analyzerInst1AttributeDemodulator_bw(self._context)
        self.current_y = RootLuSignal_analyzerInst1AttributeCurrent_y(self._context)
        self.current_amplitude_binary = RootLuSignal_analyzerInst1AttributeCurrent_amplitude_binary(self._context)
        self.current_amplitude_ctrl_mode = RootLuSignal_analyzerInst1AttributeCurrent_amplitude_ctrl_mode(self._context)


class RootLuSignal_analyzerInst1TriggerStart_switch_to_target_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.start_switch_to_target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst1TriggerStart_phase_zero_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.start_phase_zero_calibration'


class RootLuSignal_analyzerInst1TriggerStart_update_current_free_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.start_update_current_free_amplitude'


class RootLuSignal_analyzerInst1TriggerSwitch_to_target_amplitude_ctrl_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.switch_to_target_amplitude_ctrl_set_point'


class RootLuSignal_analyzerInst1TriggerStart_kpfm_phase_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.start_kpfm_phase_calibration'


class RootLuSignal_analyzerInst1TriggerStart_switch_to_target_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.start_switch_to_target_amplitude_ctrl_mode'


class RootLuSignal_analyzerInst1TriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.user_abort'


class RootLuSignal_analyzerInst1TriggerKpfm_phase_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.kpfm_phase_calibration'


class RootLuSignal_analyzerInst1TriggerSwitch_to_target_amplitude_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger.switch_to_target_amplitude_ctrl_mode'


class RootLuSignal_analyzerInst1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1.trigger'
        self.switch_to_target_amplitude_ctrl_mode = RootLuSignal_analyzerInst1TriggerSwitch_to_target_amplitude_ctrl_mode(self._context)
        self.kpfm_phase_calibration = RootLuSignal_analyzerInst1TriggerKpfm_phase_calibration(self._context)
        self.user_abort = RootLuSignal_analyzerInst1TriggerUser_abort(self._context)
        self.start_switch_to_target_amplitude_ctrl_mode = RootLuSignal_analyzerInst1TriggerStart_switch_to_target_amplitude_ctrl_mode(self._context)
        self.start_kpfm_phase_calibration = RootLuSignal_analyzerInst1TriggerStart_kpfm_phase_calibration(self._context)
        self.switch_to_target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst1TriggerSwitch_to_target_amplitude_ctrl_set_point(self._context)
        self.start_update_current_free_amplitude = RootLuSignal_analyzerInst1TriggerStart_update_current_free_amplitude(self._context)
        self.start_phase_zero_calibration = RootLuSignal_analyzerInst1TriggerStart_phase_zero_calibration(self._context)
        self.start_switch_to_target_amplitude_ctrl_set_point = RootLuSignal_analyzerInst1TriggerStart_switch_to_target_amplitude_ctrl_set_point(self._context)


class RootLuSignal_analyzerInst1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer.inst1'
        self.trigger = RootLuSignal_analyzerInst1Trigger(self._context)
        self.attribute = RootLuSignal_analyzerInst1Attribute(self._context)


class RootLuSignal_analyzer(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.signal_analyzer'
        self.inst1 = RootLuSignal_analyzerInst1(self._context)
        self.inst2 = RootLuSignal_analyzerInst2(self._context)


class RootLuScanheadInstanceAttributePte_laser_power_monitor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.pte_laser_power_monitor'


class RootLuScanheadInstanceAttributeHas_z_sensorEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.has_z_sensor.enum'

    @property
    def no(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.has_z_sensor.enum.no'))

    @no.setter
    def no(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.has_z_sensor.enum.no', int(new_val))

    @property
    def yes(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.has_z_sensor.enum.yes'))

    @yes.setter
    def yes(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.has_z_sensor.enum.yes', int(new_val))


class RootLuScanheadInstanceAttributeHas_z_sensor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.has_z_sensor'
        self.enum = RootLuScanheadInstanceAttributeHas_z_sensorEnum(self._context)


class RootLuScanheadInstanceAttributeReadout_laser_setpoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.readout_laser_setpoint'


class RootLuScanheadInstanceAttributePte_laser_setpoint(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.pte_laser_setpoint'


class RootLuScanheadInstanceAttributeTypeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.type.enum'

    @property
    def dummy6(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy6'))

    @dummy6.setter
    def dummy6(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy6', int(new_val))

    @property
    def p6_mount(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.p6_mount'))

    @p6_mount.setter
    def p6_mount(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.p6_mount', int(new_val))

    @property
    def dummy11(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy11'))

    @dummy11.setter
    def dummy11(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy11', int(new_val))

    @property
    def nanite_afm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.nanite_afm'))

    @nanite_afm.setter
    def nanite_afm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.nanite_afm', int(new_val))

    @property
    def semafm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.semafm'))

    @semafm.setter
    def semafm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.semafm', int(new_val))

    @property
    def afsem(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.afsem'))

    @afsem.setter
    def afsem(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.afsem', int(new_val))

    @property
    def dummy3(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy3'))

    @dummy3.setter
    def dummy3(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy3', int(new_val))

    @property
    def dummy8(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy8'))

    @dummy8.setter
    def dummy8(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy8', int(new_val))

    @property
    def core_afm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.core_afm'))

    @core_afm.setter
    def core_afm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.core_afm', int(new_val))

    @property
    def cytomass(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.cytomass'))

    @cytomass.setter
    def cytomass(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.cytomass', int(new_val))

    @property
    def dummy5(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy5'))

    @dummy5.setter
    def dummy5(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy5', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.unknown', int(new_val))

    @property
    def p6(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.p6'))

    @p6.setter
    def p6(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.p6', int(new_val))

    @property
    def arac(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.arac'))

    @arac.setter
    def arac(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.arac', int(new_val))

    @property
    def e_afm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.e_afm'))

    @e_afm.setter
    def e_afm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.e_afm', int(new_val))

    @property
    def dummy4(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy4'))

    @dummy4.setter
    def dummy4(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy4', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.not_connected', int(new_val))

    @property
    def dummy10(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy10'))

    @dummy10.setter
    def dummy10(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy10', int(new_val))

    @property
    def lens_afm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.lens_afm'))

    @lens_afm.setter
    def lens_afm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.lens_afm', int(new_val))

    @property
    def dummy7(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.dummy7'))

    @dummy7.setter
    def dummy7(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.dummy7', int(new_val))

    @property
    def e_stm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.e_stm'))

    @e_stm.setter
    def e_stm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.e_stm', int(new_val))

    @property
    def flex_afm(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.type.enum.flex_afm'))

    @flex_afm.setter
    def flex_afm(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.type.enum.flex_afm', int(new_val))


class RootLuScanheadInstanceAttributeType(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.type'
        self.enum = RootLuScanheadInstanceAttributeTypeEnum(self._context)


class RootLuScanheadInstanceAttributeTilt_angle_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.tilt_angle_y'


class RootLuScanheadInstanceAttributeFast_in2_channelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.fast_in2_channel.enum'

    @property
    def friction_channel(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.friction_channel'))

    @friction_channel.setter
    def friction_channel(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.friction_channel', int(new_val))

    @property
    def addon_in(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.addon_in'))

    @addon_in.setter
    def addon_in(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.addon_in', int(new_val))

    @property
    def pte_monitor(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.pte_monitor'))

    @pte_monitor.setter
    def pte_monitor(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.fast_in2_channel.enum.pte_monitor', int(new_val))


class RootLuScanheadInstanceAttributeFast_in2_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.fast_in2_channel'
        self.enum = RootLuScanheadInstanceAttributeFast_in2_channelEnum(self._context)


class RootLuScanheadInstanceAttributeTilt_angle_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.tilt_angle_x'


class RootLuScanheadInstanceAttributeTilt_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.tilt_mode.enum'

    @property
    def measured(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.tilt_mode.enum.measured'))

    @measured.setter
    def measured(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.tilt_mode.enum.measured', int(new_val))

    @property
    def override(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.tilt_mode.enum.override'))

    @override.setter
    def override(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.tilt_mode.enum.override', int(new_val))


class RootLuScanheadInstanceAttributeTilt_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.tilt_mode'
        self.enum = RootLuScanheadInstanceAttributeTilt_modeEnum(self._context)


class RootLuScanheadInstanceAttributeReadout_laser_power_monitor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.readout_laser_power_monitor'


class RootLuScanheadInstanceAttributeHas_xy_sensorEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.has_xy_sensor.enum'

    @property
    def no(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.has_xy_sensor.enum.no'))

    @no.setter
    def no(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.has_xy_sensor.enum.no', int(new_val))

    @property
    def yes(self) -> int:
        return int(self._context.get('root.lu.scanhead.instance.attribute.has_xy_sensor.enum.yes'))

    @yes.setter
    def yes(self, new_val:int):
        self._context.set('root.lu.scanhead.instance.attribute.has_xy_sensor.enum.yes', int(new_val))


class RootLuScanheadInstanceAttributeHas_xy_sensor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute.has_xy_sensor'
        self.enum = RootLuScanheadInstanceAttributeHas_xy_sensorEnum(self._context)


class RootLuScanheadInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.attribute'
        self.has_xy_sensor = RootLuScanheadInstanceAttributeHas_xy_sensor(self._context)
        self.readout_laser_power_monitor = RootLuScanheadInstanceAttributeReadout_laser_power_monitor(self._context)
        self.tilt_mode = RootLuScanheadInstanceAttributeTilt_mode(self._context)
        self.tilt_angle_x = RootLuScanheadInstanceAttributeTilt_angle_x(self._context)
        self.fast_in2_channel = RootLuScanheadInstanceAttributeFast_in2_channel(self._context)
        self.tilt_angle_y = RootLuScanheadInstanceAttributeTilt_angle_y(self._context)
        self.type = RootLuScanheadInstanceAttributeType(self._context)
        self.pte_laser_setpoint = RootLuScanheadInstanceAttributePte_laser_setpoint(self._context)
        self.readout_laser_setpoint = RootLuScanheadInstanceAttributeReadout_laser_setpoint(self._context)
        self.has_z_sensor = RootLuScanheadInstanceAttributeHas_z_sensor(self._context)
        self.pte_laser_power_monitor = RootLuScanheadInstanceAttributePte_laser_power_monitor(self._context)


class RootLuScanheadInstanceTriggerEnable_piezo_electric_excitation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.enable_piezo_electric_excitation'


class RootLuScanheadInstanceTriggerDisable_readout_laser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.disable_readout_laser'


class RootLuScanheadInstanceTriggerApply_tilt_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.apply_tilt_mode'


class RootLuScanheadInstanceTriggerEnable_electro_thermal_excitation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.enable_electro_thermal_excitation'


class RootLuScanheadInstanceTriggerDisable_pte_laser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.disable_pte_laser'


class RootLuScanheadInstanceTriggerDisable_piezo_electric_excitation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.disable_piezo_electric_excitation'


class RootLuScanheadInstanceTriggerEnable_readout_laser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.enable_readout_laser'


class RootLuScanheadInstanceTriggerEnable_pte_laser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.enable_pte_laser'


class RootLuScanheadInstanceTriggerDisable_electro_thermal_excitation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger.disable_electro_thermal_excitation'


class RootLuScanheadInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance.trigger'
        self.disable_electro_thermal_excitation = RootLuScanheadInstanceTriggerDisable_electro_thermal_excitation(self._context)
        self.enable_pte_laser = RootLuScanheadInstanceTriggerEnable_pte_laser(self._context)
        self.enable_readout_laser = RootLuScanheadInstanceTriggerEnable_readout_laser(self._context)
        self.disable_piezo_electric_excitation = RootLuScanheadInstanceTriggerDisable_piezo_electric_excitation(self._context)
        self.disable_pte_laser = RootLuScanheadInstanceTriggerDisable_pte_laser(self._context)
        self.enable_electro_thermal_excitation = RootLuScanheadInstanceTriggerEnable_electro_thermal_excitation(self._context)
        self.apply_tilt_mode = RootLuScanheadInstanceTriggerApply_tilt_mode(self._context)
        self.disable_readout_laser = RootLuScanheadInstanceTriggerDisable_readout_laser(self._context)
        self.enable_piezo_electric_excitation = RootLuScanheadInstanceTriggerEnable_piezo_electric_excitation(self._context)


class RootLuScanheadInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead.instance'
        self.trigger = RootLuScanheadInstanceTrigger(self._context)
        self.attribute = RootLuScanheadInstanceAttribute(self._context)


class RootLuScanhead(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scanhead'
        self.instance = RootLuScanheadInstance(self._context)


class RootLuMainboard_relaysInstanceAttributeSet_state_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays.instance.attribute.set_state_mask.enum'

    @property
    def hires_out_user4(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user4'))

    @hires_out_user4.setter
    def hires_out_user4(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user4', int(new_val))

    @property
    def hires_in_user3(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user3'))

    @hires_in_user3.setter
    def hires_in_user3(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user3', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.none', int(new_val))

    @property
    def hires_out_user3(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user3'))

    @hires_out_user3.setter
    def hires_out_user3(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user3', int(new_val))

    @property
    def hires_out_user2(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user2'))

    @hires_out_user2.setter
    def hires_out_user2(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user2', int(new_val))

    @property
    def fast_out_user(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.fast_out_user'))

    @fast_out_user.setter
    def fast_out_user(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.fast_out_user', int(new_val))

    @property
    def dummy0(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.dummy0'))

    @dummy0.setter
    def dummy0(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.dummy0', int(new_val))

    @property
    def hi_res_in6(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hi_res_in6'))

    @hi_res_in6.setter
    def hi_res_in6(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hi_res_in6', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.fast_in_user', int(new_val))

    @property
    def hires_in_user1(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user1'))

    @hires_in_user1.setter
    def hires_in_user1(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user1', int(new_val))

    @property
    def hires_in_user4(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user4'))

    @hires_in_user4.setter
    def hires_in_user4(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user4', int(new_val))

    @property
    def hires_in_user2(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user2'))

    @hires_in_user2.setter
    def hires_in_user2(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_in_user2', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.all', int(new_val))

    @property
    def hires_out_user1(self) -> int:
        return int(self._context.get('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user1'))

    @hires_out_user1.setter
    def hires_out_user1(self, new_val:int):
        self._context.set('root.lu.mainboard_relays.instance.attribute.set_state_mask.enum.hires_out_user1', int(new_val))


class RootLuMainboard_relaysInstanceAttributeSet_state_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays.instance.attribute.set_state_mask'
        self.enum = RootLuMainboard_relaysInstanceAttributeSet_state_maskEnum(self._context)


class RootLuMainboard_relaysInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays.instance.attribute'
        self.set_state_mask = RootLuMainboard_relaysInstanceAttributeSet_state_mask(self._context)


class RootLuMainboard_relaysInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays.instance.trigger'


class RootLuMainboard_relaysInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays.instance'
        self.trigger = RootLuMainboard_relaysInstanceTrigger(self._context)
        self.attribute = RootLuMainboard_relaysInstanceAttribute(self._context)


class RootLuMainboard_relays(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.mainboard_relays'
        self.instance = RootLuMainboard_relaysInstance(self._context)


class RootLuSequencerInstanceAttributeInstruction_pointer(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.attribute.instruction_pointer'


class RootLuSequencerInstanceAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.attribute.status'


class RootLuSequencerInstanceAttributeMemory_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.attribute.memory_vec'


class RootLuSequencerInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.attribute'
        self.memory_vec = RootLuSequencerInstanceAttributeMemory_vec(self._context)
        self.status = RootLuSequencerInstanceAttributeStatus(self._context)
        self.instruction_pointer = RootLuSequencerInstanceAttributeInstruction_pointer(self._context)


class RootLuSequencerInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.trigger.start'


class RootLuSequencerInstanceTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.trigger.abort'


class RootLuSequencerInstanceTriggerStep(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.trigger.step'


class RootLuSequencerInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.trigger'
        self.step = RootLuSequencerInstanceTriggerStep(self._context)
        self.abort = RootLuSequencerInstanceTriggerAbort(self._context)
        self.start = RootLuSequencerInstanceTriggerStart(self._context)


class RootLuSequencerInstanceBusyIs_running(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.busy.is_running'


class RootLuSequencerInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance.busy'
        self.is_running = RootLuSequencerInstanceBusyIs_running(self._context)


class RootLuSequencerInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer.instance'
        self.busy = RootLuSequencerInstanceBusy(self._context)
        self.trigger = RootLuSequencerInstanceTrigger(self._context)
        self.attribute = RootLuSequencerInstanceAttribute(self._context)


class RootLuSequencer(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.sequencer'
        self.instance = RootLuSequencerInstance(self._context)


class RootLuEvent_managerInstanceAttributeObject_idle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.object_idle'


class RootLuEvent_managerInstanceAttributeAbort_event_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.abort_event_mask.enum'

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator1_true', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ext_event1_true', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ext_event0_true', int(new_val))

    @property
    def comparator3_true(self) -> float:
        return float(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:float):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator3_true', float(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.none', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.user_abort_event_true', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_approach_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.timer_proc0_done', int(new_val))

    @property
    def all(self) -> float:
        return float(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.all'))

    @all.setter
    def all(self, new_val:float):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.all', float(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.data_capture_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.and_mask0_true', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_planez_done', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event1_true', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.soft_event0_true', int(new_val))

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_user4_done', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.mem_sig_gen_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.unused_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.comparator2_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.data_sampling_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.abort_event_mask.enum.ramp_gen_test_done', int(new_val))


class RootLuEvent_managerInstanceAttributeAbort_event_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.abort_event_mask'
        self.enum = RootLuEvent_managerInstanceAttributeAbort_event_maskEnum(self._context)


class RootLuEvent_managerInstanceAttributeObject_queue_size(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.object_queue_size'


class RootLuEvent_managerInstanceAttributeStart_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.start_mask.enum'

    @property
    def ramp_gen_ctrlz(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_ctrlz'))

    @ramp_gen_ctrlz.setter
    def ramp_gen_ctrlz(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_ctrlz', int(new_val))

    @property
    def data_capture(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.data_capture'))

    @data_capture.setter
    def data_capture(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.data_capture', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.none', int(new_val))

    @property
    def ramp_gen_alternatez(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_alternatez'))

    @ramp_gen_alternatez.setter
    def ramp_gen_alternatez(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_alternatez', int(new_val))

    @property
    def ramp_gen_positionx(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_positionx'))

    @ramp_gen_positionx.setter
    def ramp_gen_positionx(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_positionx', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.all', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_approach', int(new_val))

    @property
    def timer_dbg1(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.timer_dbg1'))

    @timer_dbg1.setter
    def timer_dbg1(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.timer_dbg1', int(new_val))

    @property
    def unused(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.unused'))

    @unused.setter
    def unused(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.unused', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_tipvoltage(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_tipvoltage'))

    @ramp_gen_tipvoltage.setter
    def ramp_gen_tipvoltage(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_tipvoltage', int(new_val))

    @property
    def mem_sig_gen(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.mem_sig_gen'))

    @mem_sig_gen.setter
    def mem_sig_gen(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.mem_sig_gen', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_user4', int(new_val))

    @property
    def timer_proc0(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.timer_proc0'))

    @timer_proc0.setter
    def timer_proc0(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.timer_proc0', int(new_val))

    @property
    def ramp_gen_positiony(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_positiony'))

    @ramp_gen_positiony.setter
    def ramp_gen_positiony(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_positiony', int(new_val))

    @property
    def ramp_gen_planez(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_planez'))

    @ramp_gen_planez.setter
    def ramp_gen_planez(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_planez', int(new_val))

    @property
    def data_sampling(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.data_sampling'))

    @data_sampling.setter
    def data_sampling(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.data_sampling', int(new_val))

    @property
    def ramp_gen_maxz(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_maxz'))

    @ramp_gen_maxz.setter
    def ramp_gen_maxz(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.start_mask.enum.ramp_gen_maxz', int(new_val))


class RootLuEvent_managerInstanceAttributeStart_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.start_mask'
        self.enum = RootLuEvent_managerInstanceAttributeStart_maskEnum(self._context)


class RootLuEvent_managerInstanceAttributeEvent_vectorEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.event_vector.enum'

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.comparator1_true', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ext_event1_true', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ext_event0_true', int(new_val))

    @property
    def comparator3_true(self) -> float:
        return float(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:float):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.comparator3_true', float(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.none', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.user_abort_event_true', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_approach_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.timer_proc0_done', int(new_val))

    @property
    def all(self) -> float:
        return float(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.all'))

    @all.setter
    def all(self, new_val:float):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.all', float(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.data_capture_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.and_mask0_true', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_planez_done', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event1_true', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.soft_event0_true', int(new_val))

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_user4_done', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.mem_sig_gen_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.unused_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.comparator2_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.data_sampling_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector.enum.ramp_gen_test_done', int(new_val))


class RootLuEvent_managerInstanceAttributeEvent_vector(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.event_vector'
        self.enum = RootLuEvent_managerInstanceAttributeEvent_vectorEnum(self._context)


class RootLuEvent_managerInstanceAttributeStop_event_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.stop_event_mask.enum'

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator1_true', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ext_event1_true', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ext_event0_true', int(new_val))

    @property
    def comparator3_true(self) -> float:
        return float(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:float):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator3_true', float(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.none', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.user_abort_event_true', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_approach_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.timer_proc0_done', int(new_val))

    @property
    def all(self) -> float:
        return float(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.all'))

    @all.setter
    def all(self, new_val:float):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.all', float(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.data_capture_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.and_mask0_true', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_planez_done', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event1_true', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.soft_event0_true', int(new_val))

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_user4_done', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.mem_sig_gen_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.unused_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.comparator2_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.data_sampling_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_event_mask.enum.ramp_gen_test_done', int(new_val))


class RootLuEvent_managerInstanceAttributeStop_event_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.stop_event_mask'
        self.enum = RootLuEvent_managerInstanceAttributeStop_event_maskEnum(self._context)


class RootLuEvent_managerInstanceAttributeAnd_mask0Enum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.and_mask0.enum'

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator1_true', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ext_event1_true', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ext_event0_true', int(new_val))

    @property
    def comparator3_true(self) -> float:
        return float(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:float):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator3_true', float(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.none', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.user_abort_event_true', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_approach_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.timer_proc0_done', int(new_val))

    @property
    def all(self) -> float:
        return float(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.all'))

    @all.setter
    def all(self, new_val:float):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.all', float(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.data_capture_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.and_mask0_true', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_planez_done', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event1_true', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.soft_event0_true', int(new_val))

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_user4_done', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.mem_sig_gen_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.unused_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.comparator2_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.data_sampling_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.and_mask0.enum.ramp_gen_test_done', int(new_val))


class RootLuEvent_managerInstanceAttributeAnd_mask0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.and_mask0'
        self.enum = RootLuEvent_managerInstanceAttributeAnd_mask0Enum(self._context)


class RootLuEvent_managerInstanceAttributeStop_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.stop_mask.enum'

    @property
    def ramp_gen_ctrlz(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_ctrlz'))

    @ramp_gen_ctrlz.setter
    def ramp_gen_ctrlz(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_ctrlz', int(new_val))

    @property
    def data_capture(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.data_capture'))

    @data_capture.setter
    def data_capture(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.data_capture', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.none', int(new_val))

    @property
    def ramp_gen_alternatez(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_alternatez'))

    @ramp_gen_alternatez.setter
    def ramp_gen_alternatez(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_alternatez', int(new_val))

    @property
    def ramp_gen_positionx(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_positionx'))

    @ramp_gen_positionx.setter
    def ramp_gen_positionx(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_positionx', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.all', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_approach', int(new_val))

    @property
    def timer_dbg1(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.timer_dbg1'))

    @timer_dbg1.setter
    def timer_dbg1(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.timer_dbg1', int(new_val))

    @property
    def unused(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.unused'))

    @unused.setter
    def unused(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.unused', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_tipvoltage(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_tipvoltage'))

    @ramp_gen_tipvoltage.setter
    def ramp_gen_tipvoltage(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_tipvoltage', int(new_val))

    @property
    def mem_sig_gen(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.mem_sig_gen'))

    @mem_sig_gen.setter
    def mem_sig_gen(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.mem_sig_gen', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_user4', int(new_val))

    @property
    def timer_proc0(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.timer_proc0'))

    @timer_proc0.setter
    def timer_proc0(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.timer_proc0', int(new_val))

    @property
    def ramp_gen_positiony(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_positiony'))

    @ramp_gen_positiony.setter
    def ramp_gen_positiony(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_positiony', int(new_val))

    @property
    def ramp_gen_planez(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_planez'))

    @ramp_gen_planez.setter
    def ramp_gen_planez(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_planez', int(new_val))

    @property
    def data_sampling(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.data_sampling'))

    @data_sampling.setter
    def data_sampling(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.data_sampling', int(new_val))

    @property
    def ramp_gen_maxz(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_maxz'))

    @ramp_gen_maxz.setter
    def ramp_gen_maxz(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.stop_mask.enum.ramp_gen_maxz', int(new_val))


class RootLuEvent_managerInstanceAttributeStop_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.stop_mask'
        self.enum = RootLuEvent_managerInstanceAttributeStop_maskEnum(self._context)


class RootLuEvent_managerInstanceAttributeEvent_vector_snapshotEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.event_vector_snapshot.enum'

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator1_true', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ext_event1_true', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ext_event0_true', int(new_val))

    @property
    def comparator3_true(self) -> float:
        return float(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:float):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator3_true', float(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.none', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.user_abort_event_true', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_approach_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.timer_proc0_done', int(new_val))

    @property
    def all(self) -> float:
        return float(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.all'))

    @all.setter
    def all(self, new_val:float):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.all', float(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.data_capture_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.and_mask0_true', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event2_true', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_planez_done', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event1_true', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.soft_event0_true', int(new_val))

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_user4_done', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.mem_sig_gen_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.unused_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.comparator2_true', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.data_sampling_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.event_manager.instance.attribute.event_vector_snapshot.enum.ramp_gen_test_done', int(new_val))


class RootLuEvent_managerInstanceAttributeEvent_vector_snapshot(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute.event_vector_snapshot'
        self.enum = RootLuEvent_managerInstanceAttributeEvent_vector_snapshotEnum(self._context)


class RootLuEvent_managerInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.attribute'
        self.event_vector_snapshot = RootLuEvent_managerInstanceAttributeEvent_vector_snapshot(self._context)
        self.stop_mask = RootLuEvent_managerInstanceAttributeStop_mask(self._context)
        self.and_mask0 = RootLuEvent_managerInstanceAttributeAnd_mask0(self._context)
        self.stop_event_mask = RootLuEvent_managerInstanceAttributeStop_event_mask(self._context)
        self.event_vector = RootLuEvent_managerInstanceAttributeEvent_vector(self._context)
        self.start_mask = RootLuEvent_managerInstanceAttributeStart_mask(self._context)
        self.object_queue_size = RootLuEvent_managerInstanceAttributeObject_queue_size(self._context)
        self.abort_event_mask = RootLuEvent_managerInstanceAttributeAbort_event_mask(self._context)
        self.object_idle = RootLuEvent_managerInstanceAttributeObject_idle(self._context)


class RootLuEvent_managerInstanceTriggerSoft_event2_falling_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event2_falling_edge'


class RootLuEvent_managerInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.start'


class RootLuEvent_managerInstanceTriggerSoft_event1_falling_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event1_falling_edge'


class RootLuEvent_managerInstanceTriggerSoft_event1_rising_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event1_rising_edge'


class RootLuEvent_managerInstanceTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.stop'


class RootLuEvent_managerInstanceTriggerSoft_event2_rising_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event2_rising_edge'


class RootLuEvent_managerInstanceTriggerSoft_event0_rising_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event0_rising_edge'


class RootLuEvent_managerInstanceTriggerSoft_event0_falling_edge(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.soft_event0_falling_edge'


class RootLuEvent_managerInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.user_abort'


class RootLuEvent_managerInstanceTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger.abort'


class RootLuEvent_managerInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.trigger'
        self.abort = RootLuEvent_managerInstanceTriggerAbort(self._context)
        self.user_abort = RootLuEvent_managerInstanceTriggerUser_abort(self._context)
        self.soft_event0_falling_edge = RootLuEvent_managerInstanceTriggerSoft_event0_falling_edge(self._context)
        self.soft_event0_rising_edge = RootLuEvent_managerInstanceTriggerSoft_event0_rising_edge(self._context)
        self.soft_event2_rising_edge = RootLuEvent_managerInstanceTriggerSoft_event2_rising_edge(self._context)
        self.stop = RootLuEvent_managerInstanceTriggerStop(self._context)
        self.soft_event1_rising_edge = RootLuEvent_managerInstanceTriggerSoft_event1_rising_edge(self._context)
        self.soft_event1_falling_edge = RootLuEvent_managerInstanceTriggerSoft_event1_falling_edge(self._context)
        self.start = RootLuEvent_managerInstanceTriggerStart(self._context)
        self.soft_event2_falling_edge = RootLuEvent_managerInstanceTriggerSoft_event2_falling_edge(self._context)


class RootLuEvent_managerInstanceBusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.busy.is_busy'


class RootLuEvent_managerInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance.busy'
        self.is_busy = RootLuEvent_managerInstanceBusyIs_busy(self._context)


class RootLuEvent_managerInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager.instance'
        self.busy = RootLuEvent_managerInstanceBusy(self._context)
        self.trigger = RootLuEvent_managerInstanceTrigger(self._context)
        self.attribute = RootLuEvent_managerInstanceAttribute(self._context)


class RootLuEvent_manager(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.event_manager'
        self.instance = RootLuEvent_managerInstance(self._context)


class RootLuSystemInstanceAttributeIdle_position_xy_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_position_xy_mode.enum'

    @property
    def keep_last_xy_pos(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_xy_mode.enum.keep_last_xy_pos'))

    @keep_last_xy_pos.setter
    def keep_last_xy_pos(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_xy_mode.enum.keep_last_xy_pos', int(new_val))

    @property
    def image_center(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_xy_mode.enum.image_center'))

    @image_center.setter
    def image_center(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_xy_mode.enum.image_center', int(new_val))


class RootLuSystemInstanceAttributeIdle_position_xy_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_position_xy_mode'
        self.enum = RootLuSystemInstanceAttributeIdle_position_xy_modeEnum(self._context)


class RootLuSystemInstanceAttributeIdle_external_z_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_external_z_mode.enum'

    @property
    def absolute_z_pos(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_external_z_mode.enum.absolute_z_pos'))

    @absolute_z_pos.setter
    def absolute_z_pos(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_external_z_mode.enum.absolute_z_pos', int(new_val))

    @property
    def keep_last_z_pos(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_external_z_mode.enum.keep_last_z_pos'))

    @keep_last_z_pos.setter
    def keep_last_z_pos(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_external_z_mode.enum.keep_last_z_pos', int(new_val))

    @property
    def z_controller_active(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_external_z_mode.enum.z_controller_active'))

    @z_controller_active.setter
    def z_controller_active(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_external_z_mode.enum.z_controller_active', int(new_val))

    @property
    def retract_tip(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_external_z_mode.enum.retract_tip'))

    @retract_tip.setter
    def retract_tip(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_external_z_mode.enum.retract_tip', int(new_val))


class RootLuSystemInstanceAttributeIdle_external_z_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_external_z_mode'
        self.enum = RootLuSystemInstanceAttributeIdle_external_z_modeEnum(self._context)


class RootLuSystemInstanceAttributeMotor_move_directionEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_move_direction.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_move_direction.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_move_direction.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_move_direction.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_move_direction.enum.negative', int(new_val))


class RootLuSystemInstanceAttributeMotor_move_direction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_move_direction'
        self.enum = RootLuSystemInstanceAttributeMotor_move_directionEnum(self._context)


class RootLuSystemInstanceAttributeOp_mode_kpfm_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.op_mode_kpfm_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.op_mode_kpfm_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.op_mode_kpfm_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.op_mode_kpfm_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.op_mode_kpfm_enabled.enum.enabled', int(new_val))


class RootLuSystemInstanceAttributeOp_mode_kpfm_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.op_mode_kpfm_enabled'
        self.enum = RootLuSystemInstanceAttributeOp_mode_kpfm_enabledEnum(self._context)


class RootLuSystemInstanceAttributeZ_axis_ctrl_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.z_axis_ctrl_mode.enum'

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.undefined', int(new_val))

    @property
    def position_control(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_control'))

    @position_control.setter
    def position_control(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_control', int(new_val))

    @property
    def position_sensing(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_sensing'))

    @position_sensing.setter
    def position_sensing(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_sensing', int(new_val))

    @property
    def position_drive(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_drive'))

    @position_drive.setter
    def position_drive(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.z_axis_ctrl_mode.enum.position_drive', int(new_val))


class RootLuSystemInstanceAttributeZ_axis_ctrl_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.z_axis_ctrl_mode'
        self.enum = RootLuSystemInstanceAttributeZ_axis_ctrl_modeEnum(self._context)


class RootLuSystemInstanceAttributeIdle_external_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_external_z'


class RootLuSystemInstanceAttributeMemory_block_available(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.memory_block_available'


class RootLuSystemInstanceAttributeHi_res_ch5_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.hi_res_ch5_input'


class RootLuSystemInstanceAttributeSystem_stateEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.system_state.enum'

    @property
    def uncal(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.uncal'))

    @uncal.setter
    def uncal(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.uncal', int(new_val))

    @property
    def spec(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.spec'))

    @spec.setter
    def spec(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.spec', int(new_val))

    @property
    def macro_cmd(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.macro_cmd'))

    @macro_cmd.setter
    def macro_cmd(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.macro_cmd', int(new_val))

    @property
    def litho(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.litho'))

    @litho.setter
    def litho(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.litho', int(new_val))

    @property
    def idle(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.idle'))

    @idle.setter
    def idle(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.idle', int(new_val))

    @property
    def scan(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.scan'))

    @scan.setter
    def scan(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.scan', int(new_val))

    @property
    def approach(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.approach'))

    @approach.setter
    def approach(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.approach', int(new_val))

    @property
    def internal(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.system_state.enum.internal'))

    @internal.setter
    def internal(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.system_state.enum.internal', int(new_val))


class RootLuSystemInstanceAttributeSystem_state(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.system_state'
        self.enum = RootLuSystemInstanceAttributeSystem_stateEnum(self._context)


class RootLuSystemInstanceAttributeMotor_move_speed_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_move_speed_factor'


class RootLuSystemInstanceAttributeMotor_step_size(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_step_size'


class RootLuSystemInstanceAttributeIdle_position_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_position_z'


class RootLuSystemInstanceAttributeMotor_selectionEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_selection.enum'

    @property
    def motor_focus(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_focus'))

    @motor_focus.setter
    def motor_focus(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_focus', int(new_val))

    @property
    def motor_c(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_c'))

    @motor_c.setter
    def motor_c(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_c', int(new_val))

    @property
    def motor_approach(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_approach'))

    @motor_approach.setter
    def motor_approach(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_approach', int(new_val))

    @property
    def motor_ptex(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_ptex'))

    @motor_ptex.setter
    def motor_ptex(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_ptex', int(new_val))

    @property
    def motor_ptey(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_ptey'))

    @motor_ptey.setter
    def motor_ptey(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_ptey', int(new_val))

    @property
    def motor_lens_gimbal(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_lens_gimbal'))

    @motor_lens_gimbal.setter
    def motor_lens_gimbal(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_lens_gimbal', int(new_val))

    @property
    def motor_photodiode_normal(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_photodiode_normal'))

    @motor_photodiode_normal.setter
    def motor_photodiode_normal(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_photodiode_normal', int(new_val))

    @property
    def motor_photodiode_lateral(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_photodiode_lateral'))

    @motor_photodiode_lateral.setter
    def motor_photodiode_lateral(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_photodiode_lateral', int(new_val))

    @property
    def motor_b(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_b'))

    @motor_b.setter
    def motor_b(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_b', int(new_val))

    @property
    def motor_beam_deflection_y(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_beam_deflection_y'))

    @motor_beam_deflection_y.setter
    def motor_beam_deflection_y(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_beam_deflection_y', int(new_val))

    @property
    def motor_beam_deflection_x(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_beam_deflection_x'))

    @motor_beam_deflection_x.setter
    def motor_beam_deflection_x(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_beam_deflection_x', int(new_val))

    @property
    def motor_a(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.motor_selection.enum.motor_a'))

    @motor_a.setter
    def motor_a(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.motor_selection.enum.motor_a', int(new_val))


class RootLuSystemInstanceAttributeMotor_selection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.motor_selection'
        self.enum = RootLuSystemInstanceAttributeMotor_selectionEnum(self._context)


class RootLuSystemInstanceAttributeIdle_position_z_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_position_z_mode.enum'

    @property
    def absolute_z_pos(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_z_mode.enum.absolute_z_pos'))

    @absolute_z_pos.setter
    def absolute_z_pos(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_z_mode.enum.absolute_z_pos', int(new_val))

    @property
    def keep_last_z_pos(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_z_mode.enum.keep_last_z_pos'))

    @keep_last_z_pos.setter
    def keep_last_z_pos(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_z_mode.enum.keep_last_z_pos', int(new_val))

    @property
    def z_controller_active(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_z_mode.enum.z_controller_active'))

    @z_controller_active.setter
    def z_controller_active(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_z_mode.enum.z_controller_active', int(new_val))

    @property
    def retract_tip(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.idle_position_z_mode.enum.retract_tip'))

    @retract_tip.setter
    def retract_tip(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.idle_position_z_mode.enum.retract_tip', int(new_val))


class RootLuSystemInstanceAttributeIdle_position_z_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.idle_position_z_mode'
        self.enum = RootLuSystemInstanceAttributeIdle_position_z_modeEnum(self._context)


class RootLuSystemInstanceAttributeMeasurement_environmentEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.measurement_environment.enum'

    @property
    def vacuum(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.measurement_environment.enum.vacuum'))

    @vacuum.setter
    def vacuum(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.measurement_environment.enum.vacuum', int(new_val))

    @property
    def air(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.measurement_environment.enum.air'))

    @air.setter
    def air(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.measurement_environment.enum.air', int(new_val))

    @property
    def liquid(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.measurement_environment.enum.liquid'))

    @liquid.setter
    def liquid(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.measurement_environment.enum.liquid', int(new_val))


class RootLuSystemInstanceAttributeMeasurement_environment(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.measurement_environment'
        self.enum = RootLuSystemInstanceAttributeMeasurement_environmentEnum(self._context)


class RootLuSystemInstanceAttributeMemory_available(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.memory_available'


class RootLuSystemInstanceAttributeOperating_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.operating_mode.enum'

    @property
    def lateral_force(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.lateral_force'))

    @lateral_force.setter
    def lateral_force(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.lateral_force', int(new_val))

    @property
    def phase_contrast(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.phase_contrast'))

    @phase_contrast.setter
    def phase_contrast(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.phase_contrast', int(new_val))

    @property
    def user_defined(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.user_defined'))

    @user_defined.setter
    def user_defined(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.user_defined', int(new_val))

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.undefined', int(new_val))

    @property
    def force_modulation(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.force_modulation'))

    @force_modulation.setter
    def force_modulation(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.force_modulation', int(new_val))

    @property
    def dynamic_afm(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.dynamic_afm'))

    @dynamic_afm.setter
    def dynamic_afm(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.dynamic_afm', int(new_val))

    @property
    def fm_dynamic_afm(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.fm_dynamic_afm'))

    @fm_dynamic_afm.setter
    def fm_dynamic_afm(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.fm_dynamic_afm', int(new_val))

    @property
    def stm(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.stm'))

    @stm.setter
    def stm(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.stm', int(new_val))

    @property
    def static_afm(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.static_afm'))

    @static_afm.setter
    def static_afm(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.static_afm', int(new_val))

    @property
    def const_phase(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.const_phase'))

    @const_phase.setter
    def const_phase(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.const_phase', int(new_val))

    @property
    def resistivity_map(self) -> int:
        return int(self._context.get('root.lu.system.instance.attribute.operating_mode.enum.resistivity_map'))

    @resistivity_map.setter
    def resistivity_map(self, new_val:int):
        self._context.set('root.lu.system.instance.attribute.operating_mode.enum.resistivity_map', int(new_val))


class RootLuSystemInstanceAttributeOperating_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.operating_mode'
        self.enum = RootLuSystemInstanceAttributeOperating_modeEnum(self._context)


class RootLuSystemInstanceAttributeHi_res_ch4_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute.hi_res_ch4_input'


class RootLuSystemInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.attribute'
        self.hi_res_ch4_input = RootLuSystemInstanceAttributeHi_res_ch4_input(self._context)
        self.operating_mode = RootLuSystemInstanceAttributeOperating_mode(self._context)
        self.memory_available = RootLuSystemInstanceAttributeMemory_available(self._context)
        self.measurement_environment = RootLuSystemInstanceAttributeMeasurement_environment(self._context)
        self.idle_position_z_mode = RootLuSystemInstanceAttributeIdle_position_z_mode(self._context)
        self.motor_selection = RootLuSystemInstanceAttributeMotor_selection(self._context)
        self.idle_position_z = RootLuSystemInstanceAttributeIdle_position_z(self._context)
        self.motor_step_size = RootLuSystemInstanceAttributeMotor_step_size(self._context)
        self.motor_move_speed_factor = RootLuSystemInstanceAttributeMotor_move_speed_factor(self._context)
        self.system_state = RootLuSystemInstanceAttributeSystem_state(self._context)
        self.hi_res_ch5_input = RootLuSystemInstanceAttributeHi_res_ch5_input(self._context)
        self.memory_block_available = RootLuSystemInstanceAttributeMemory_block_available(self._context)
        self.idle_external_z = RootLuSystemInstanceAttributeIdle_external_z(self._context)
        self.z_axis_ctrl_mode = RootLuSystemInstanceAttributeZ_axis_ctrl_mode(self._context)
        self.op_mode_kpfm_enabled = RootLuSystemInstanceAttributeOp_mode_kpfm_enabled(self._context)
        self.motor_move_direction = RootLuSystemInstanceAttributeMotor_move_direction(self._context)
        self.idle_external_z_mode = RootLuSystemInstanceAttributeIdle_external_z_mode(self._context)
        self.idle_position_xy_mode = RootLuSystemInstanceAttributeIdle_position_xy_mode(self._context)


class RootLuSystemInstanceTriggerEntry_uncal(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_uncal'


class RootLuSystemInstanceTriggerEntry_scan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_scan'


class RootLuSystemInstanceTriggerEntry_spec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_spec'


class RootLuSystemInstanceTriggerExit_approach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_approach'


class RootLuSystemInstanceTriggerExit_uncal(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_uncal'


class RootLuSystemInstanceTriggerExit_scan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_scan'


class RootLuSystemInstanceTriggerLevel_scanhead(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.level_scanhead'


class RootLuSystemInstanceTriggerEntry_approach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_approach'


class RootLuSystemInstanceTriggerMotor_stop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_stop'


class RootLuSystemInstanceTriggerStart_system_startup(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.start_system_startup'


class RootLuSystemInstanceTriggerEntry_idle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_idle'


class RootLuSystemInstanceTriggerMotor_step(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_step'


class RootLuSystemInstanceTriggerMotor_move(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_move'


class RootLuSystemInstanceTriggerOffset_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.offset_xyz'


class RootLuSystemInstanceTriggerExit_macro_cmd(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_macro_cmd'


class RootLuSystemInstanceTriggerMotor_reference_and_move_back(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_reference_and_move_back'


class RootLuSystemInstanceTriggerMotor_reference(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_reference'


class RootLuSystemInstanceTriggerMotor_set_pos_zero(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.motor_set_pos_zero'


class RootLuSystemInstanceTriggerForce_motor_pos_update(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.force_motor_pos_update'


class RootLuSystemInstanceTriggerExit_spec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_spec'


class RootLuSystemInstanceTriggerEntry_macro_cmd(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_macro_cmd'


class RootLuSystemInstanceTriggerExit_litho(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_litho'


class RootLuSystemInstanceTriggerExit_idle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.exit_idle'


class RootLuSystemInstanceTriggerEntry_litho(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger.entry_litho'


class RootLuSystemInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance.trigger'
        self.entry_litho = RootLuSystemInstanceTriggerEntry_litho(self._context)
        self.exit_idle = RootLuSystemInstanceTriggerExit_idle(self._context)
        self.exit_litho = RootLuSystemInstanceTriggerExit_litho(self._context)
        self.entry_macro_cmd = RootLuSystemInstanceTriggerEntry_macro_cmd(self._context)
        self.exit_spec = RootLuSystemInstanceTriggerExit_spec(self._context)
        self.force_motor_pos_update = RootLuSystemInstanceTriggerForce_motor_pos_update(self._context)
        self.motor_set_pos_zero = RootLuSystemInstanceTriggerMotor_set_pos_zero(self._context)
        self.motor_reference = RootLuSystemInstanceTriggerMotor_reference(self._context)
        self.motor_reference_and_move_back = RootLuSystemInstanceTriggerMotor_reference_and_move_back(self._context)
        self.exit_macro_cmd = RootLuSystemInstanceTriggerExit_macro_cmd(self._context)
        self.offset_xyz = RootLuSystemInstanceTriggerOffset_xyz(self._context)
        self.motor_move = RootLuSystemInstanceTriggerMotor_move(self._context)
        self.motor_step = RootLuSystemInstanceTriggerMotor_step(self._context)
        self.entry_idle = RootLuSystemInstanceTriggerEntry_idle(self._context)
        self.start_system_startup = RootLuSystemInstanceTriggerStart_system_startup(self._context)
        self.motor_stop = RootLuSystemInstanceTriggerMotor_stop(self._context)
        self.entry_approach = RootLuSystemInstanceTriggerEntry_approach(self._context)
        self.level_scanhead = RootLuSystemInstanceTriggerLevel_scanhead(self._context)
        self.exit_scan = RootLuSystemInstanceTriggerExit_scan(self._context)
        self.exit_uncal = RootLuSystemInstanceTriggerExit_uncal(self._context)
        self.exit_approach = RootLuSystemInstanceTriggerExit_approach(self._context)
        self.entry_spec = RootLuSystemInstanceTriggerEntry_spec(self._context)
        self.entry_scan = RootLuSystemInstanceTriggerEntry_scan(self._context)
        self.entry_uncal = RootLuSystemInstanceTriggerEntry_uncal(self._context)


class RootLuSystemInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system.instance'
        self.trigger = RootLuSystemInstanceTrigger(self._context)
        self.attribute = RootLuSystemInstanceAttribute(self._context)


class RootLuSystem(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system'
        self.instance = RootLuSystemInstance(self._context)


class RootLuTestInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.attribute'


class RootLuTestInstanceTriggerForce_all_dac_to_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.trigger.force_all_dac_to_max'


class RootLuTestInstanceTriggerForce_all_dac_to_zero(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.trigger.force_all_dac_to_zero'


class RootLuTestInstanceTriggerForce_all_dac_to_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.trigger.force_all_dac_to_min'


class RootLuTestInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance.trigger'
        self.force_all_dac_to_min = RootLuTestInstanceTriggerForce_all_dac_to_min(self._context)
        self.force_all_dac_to_zero = RootLuTestInstanceTriggerForce_all_dac_to_zero(self._context)
        self.force_all_dac_to_max = RootLuTestInstanceTriggerForce_all_dac_to_max(self._context)


class RootLuTestInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test.instance'
        self.trigger = RootLuTestInstanceTrigger(self._context)
        self.attribute = RootLuTestInstanceAttribute(self._context)


class RootLuTest(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.test'
        self.instance = RootLuTestInstance(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_fast_sampling_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_sampling_rate'


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch1_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum'

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.analyzer1_reference', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ctrl_z_out', int(new_val))

    @property
    def in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in2'))

    @in2.setter
    def in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in2', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ort_excitation', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in_user', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.in_deflection', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input.enum.ctrl_w_out', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch1_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch1_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_fast_ch1_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_fast_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_group_id'


class RootLuData_acquisitionInstanceAttributeSampler_filter_size(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_size'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch1_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch1_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch1_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch1_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeNumber_of_capture_sets(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.number_of_capture_sets'


class RootLuData_acquisitionInstanceAttributeSampler_channel_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_channel_mask'


class RootLuData_acquisitionInstanceAttributeSampler_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_datapoints'


class RootLuData_acquisitionInstanceAttributePhase_sampler_end_datapoint_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.phase_sampler_end_datapoint_vec'


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch2_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch2_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch2_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch2_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_datapoints'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch7_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch7_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch7_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch7_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeNumber_of_sampler_sets(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.number_of_sampler_sets'


class RootLuData_acquisitionInstanceAttributePhase_mode_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.phase_mode_enabled'


class RootLuData_acquisitionInstanceAttributeSampler_filter_cutoff(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_cutoff'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_channel_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_channel_mask'


class RootLuData_acquisitionInstanceAttributeCapture_fast_datapoints(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_datapoints'


class RootLuData_acquisitionInstanceAttributeSampler_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_group_id'


class RootLuData_acquisitionInstanceAttributePhase_sampler_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.phase_sampler_group_id'


class RootLuData_acquisitionInstanceAttributeActive_sampler_set(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.active_sampler_set'


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch3_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch3_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch3_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch3_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch4_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch4_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch4_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch4_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_filter_typeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum'

    @property
    def window_rectangular(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_rectangular'))

    @window_rectangular.setter
    def window_rectangular(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_rectangular', int(new_val))

    @property
    def window_hamming(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_hamming'))

    @window_hamming.setter
    def window_hamming(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_hamming', int(new_val))

    @property
    def window_nuttall(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_nuttall'))

    @window_nuttall.setter
    def window_nuttall(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_type.enum.window_nuttall', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_filter_type(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_type'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_filter_typeEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch4_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch4_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch4_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch4_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributePhase_sampler_data_rate_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.phase_sampler_data_rate_vec'


class RootLuData_acquisitionInstanceAttributeSampler_data_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_data_rate'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch3_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch3_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch3_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch3_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch5_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch5_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch5_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch5_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch_input_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch_input_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch_input_vec'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch_input_vecEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_trigger_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum'

    @property
    def internal_timer(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.internal_timer'))

    @internal_timer.setter
    def internal_timer(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.internal_timer', int(new_val))

    @property
    def external_trigger(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.external_trigger'))

    @external_trigger.setter
    def external_trigger(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.external_trigger', int(new_val))

    @property
    def num_trigger_modes(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.num_trigger_modes'))

    @num_trigger_modes.setter
    def num_trigger_modes(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_trigger_mode.enum.num_trigger_modes', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_trigger_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_trigger_mode'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_trigger_modeEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch_input_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum'

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ort_free_wave', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.analyzer1_reference', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ctrl_z_out', int(new_val))

    @property
    def in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in2'))

    @in2.setter
    def in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in2', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ort_excitation', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in_user', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.in_deflection', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec.enum.ctrl_w_out', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch_input_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch_input_vec'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_fast_ch_input_vecEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch2_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch2_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch2_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch2_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch7_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch7_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch7_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch7_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeActive_capture_set(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.active_capture_set'


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch0_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch0_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch0_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch0_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_group_id'


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch6_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch6_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch6_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch6_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch0_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum'

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.analyzer1_reference', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ctrl_z_out', int(new_val))

    @property
    def in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in2'))

    @in2.setter
    def in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in2', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ort_excitation', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in_user', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.in_deflection', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input.enum.ctrl_w_out', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_fast_ch0_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_ch0_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_fast_ch0_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_auto_set_filter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_auto_set_filter_mode'


class RootLuData_acquisitionInstanceAttributeCapture_fast_channel_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_fast_channel_mask'


class RootLuData_acquisitionInstanceAttributeSampler_filter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum'

    @property
    def low_pass_500_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_500_hz'))

    @low_pass_500_hz.setter
    def low_pass_500_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_500_hz', int(new_val))

    @property
    def low_pass_200_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_200_hz'))

    @low_pass_200_hz.setter
    def low_pass_200_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_200_hz', int(new_val))

    @property
    def low_pass_100_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_100_k_hz'))

    @low_pass_100_k_hz.setter
    def low_pass_100_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_100_k_hz', int(new_val))

    @property
    def low_pass_5_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_5_k_hz'))

    @low_pass_5_k_hz.setter
    def low_pass_5_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_5_k_hz', int(new_val))

    @property
    def low_pass_100_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_100_hz'))

    @low_pass_100_hz.setter
    def low_pass_100_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_100_hz', int(new_val))

    @property
    def low_pass_5_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_5_hz'))

    @low_pass_5_hz.setter
    def low_pass_5_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_5_hz', int(new_val))

    @property
    def low_pass_10_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_10_k_hz'))

    @low_pass_10_k_hz.setter
    def low_pass_10_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_10_k_hz', int(new_val))

    @property
    def low_pass_50_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_50_k_hz'))

    @low_pass_50_k_hz.setter
    def low_pass_50_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_50_k_hz', int(new_val))

    @property
    def low_pass_2_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_2_k_hz'))

    @low_pass_2_k_hz.setter
    def low_pass_2_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_2_k_hz', int(new_val))

    @property
    def low_pass_20_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_20_hz'))

    @low_pass_20_hz.setter
    def low_pass_20_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_20_hz', int(new_val))

    @property
    def filter_userdefined(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.filter_userdefined'))

    @filter_userdefined.setter
    def filter_userdefined(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.filter_userdefined', int(new_val))

    @property
    def low_pass_50_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_50_hz'))

    @low_pass_50_hz.setter
    def low_pass_50_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_50_hz', int(new_val))

    @property
    def low_pass_10_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_10_hz'))

    @low_pass_10_hz.setter
    def low_pass_10_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_10_hz', int(new_val))

    @property
    def low_pass_1_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_1_k_hz'))

    @low_pass_1_k_hz.setter
    def low_pass_1_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_1_k_hz', int(new_val))

    @property
    def low_pass_20_k_hz(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_20_k_hz'))

    @low_pass_20_k_hz.setter
    def low_pass_20_k_hz(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_filter_mode.enum.low_pass_20_k_hz', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_filter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_filter_mode'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_filter_modeEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch_input_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch_input_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch_input_vec'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch_input_vecEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch5_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch5_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch5_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch5_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch0_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch0_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch0_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch0_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch6_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch6_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.capture_hi_res_ch6_input'
        self.enum = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch6_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttributePhase_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.phase_count'


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch1_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch1_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute.sampler_hi_res_ch1_input'
        self.enum = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch1_inputEnum(self._context)


class RootLuData_acquisitionInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.attribute'
        self.sampler_hi_res_ch1_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch1_input(self._context)
        self.phase_count = RootLuData_acquisitionInstanceAttributePhase_count(self._context)
        self.capture_hi_res_ch6_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch6_input(self._context)
        self.sampler_hi_res_ch0_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch0_input(self._context)
        self.capture_hi_res_ch5_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch5_input(self._context)
        self.capture_hi_res_ch_input_vec = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch_input_vec(self._context)
        self.sampler_filter_mode = RootLuData_acquisitionInstanceAttributeSampler_filter_mode(self._context)
        self.capture_fast_channel_mask = RootLuData_acquisitionInstanceAttributeCapture_fast_channel_mask(self._context)
        self.sampler_auto_set_filter_mode = RootLuData_acquisitionInstanceAttributeSampler_auto_set_filter_mode(self._context)
        self.capture_fast_ch0_input = RootLuData_acquisitionInstanceAttributeCapture_fast_ch0_input(self._context)
        self.sampler_hi_res_ch6_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch6_input(self._context)
        self.capture_hi_res_group_id = RootLuData_acquisitionInstanceAttributeCapture_hi_res_group_id(self._context)
        self.capture_hi_res_ch0_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch0_input(self._context)
        self.active_capture_set = RootLuData_acquisitionInstanceAttributeActive_capture_set(self._context)
        self.sampler_hi_res_ch7_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch7_input(self._context)
        self.capture_hi_res_ch2_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch2_input(self._context)
        self.capture_fast_ch_input_vec = RootLuData_acquisitionInstanceAttributeCapture_fast_ch_input_vec(self._context)
        self.sampler_trigger_mode = RootLuData_acquisitionInstanceAttributeSampler_trigger_mode(self._context)
        self.sampler_hi_res_ch_input_vec = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch_input_vec(self._context)
        self.sampler_hi_res_ch5_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch5_input(self._context)
        self.capture_hi_res_ch3_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch3_input(self._context)
        self.sampler_data_rate = RootLuData_acquisitionInstanceAttributeSampler_data_rate(self._context)
        self.phase_sampler_data_rate_vec = RootLuData_acquisitionInstanceAttributePhase_sampler_data_rate_vec(self._context)
        self.sampler_hi_res_ch4_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch4_input(self._context)
        self.sampler_filter_type = RootLuData_acquisitionInstanceAttributeSampler_filter_type(self._context)
        self.capture_hi_res_ch4_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch4_input(self._context)
        self.sampler_hi_res_ch3_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch3_input(self._context)
        self.active_sampler_set = RootLuData_acquisitionInstanceAttributeActive_sampler_set(self._context)
        self.phase_sampler_group_id = RootLuData_acquisitionInstanceAttributePhase_sampler_group_id(self._context)
        self.sampler_group_id = RootLuData_acquisitionInstanceAttributeSampler_group_id(self._context)
        self.capture_fast_datapoints = RootLuData_acquisitionInstanceAttributeCapture_fast_datapoints(self._context)
        self.capture_hi_res_channel_mask = RootLuData_acquisitionInstanceAttributeCapture_hi_res_channel_mask(self._context)
        self.sampler_filter_cutoff = RootLuData_acquisitionInstanceAttributeSampler_filter_cutoff(self._context)
        self.phase_mode_enabled = RootLuData_acquisitionInstanceAttributePhase_mode_enabled(self._context)
        self.number_of_sampler_sets = RootLuData_acquisitionInstanceAttributeNumber_of_sampler_sets(self._context)
        self.capture_hi_res_ch7_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch7_input(self._context)
        self.capture_hi_res_datapoints = RootLuData_acquisitionInstanceAttributeCapture_hi_res_datapoints(self._context)
        self.sampler_hi_res_ch2_input = RootLuData_acquisitionInstanceAttributeSampler_hi_res_ch2_input(self._context)
        self.phase_sampler_end_datapoint_vec = RootLuData_acquisitionInstanceAttributePhase_sampler_end_datapoint_vec(self._context)
        self.sampler_datapoints = RootLuData_acquisitionInstanceAttributeSampler_datapoints(self._context)
        self.sampler_channel_mask = RootLuData_acquisitionInstanceAttributeSampler_channel_mask(self._context)
        self.number_of_capture_sets = RootLuData_acquisitionInstanceAttributeNumber_of_capture_sets(self._context)
        self.capture_hi_res_ch1_input = RootLuData_acquisitionInstanceAttributeCapture_hi_res_ch1_input(self._context)
        self.sampler_filter_size = RootLuData_acquisitionInstanceAttributeSampler_filter_size(self._context)
        self.capture_fast_group_id = RootLuData_acquisitionInstanceAttributeCapture_fast_group_id(self._context)
        self.capture_fast_ch1_input = RootLuData_acquisitionInstanceAttributeCapture_fast_ch1_input(self._context)
        self.capture_fast_sampling_rate = RootLuData_acquisitionInstanceAttributeCapture_fast_sampling_rate(self._context)


class RootLuData_acquisitionInstanceTriggerCapture_trim_data_storage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.capture_trim_data_storage'


class RootLuData_acquisitionInstanceTriggerBackground_capture_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.background_capture_start'


class RootLuData_acquisitionInstanceTriggerSampler_start_data_simulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.sampler_start_data_simulation'


class RootLuData_acquisitionInstanceTriggerSampler_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.sampler_start'


class RootLuData_acquisitionInstanceTriggerSampler_prepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.sampler_prepare'


class RootLuData_acquisitionInstanceTriggerCapture_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.capture_start'


class RootLuData_acquisitionInstanceTriggerSampler_trim_data_storage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.sampler_trim_data_storage'


class RootLuData_acquisitionInstanceTriggerBackground_sampler_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.background_sampler_start'


class RootLuData_acquisitionInstanceTriggerSampler_init_phase_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.sampler_init_phase_mode'


class RootLuData_acquisitionInstanceTriggerCapture_start_data_simulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.capture_start_data_simulation'


class RootLuData_acquisitionInstanceTriggerAbort_all(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.abort_all'


class RootLuData_acquisitionInstanceTriggerCapture_prepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger.capture_prepare'


class RootLuData_acquisitionInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.trigger'
        self.capture_prepare = RootLuData_acquisitionInstanceTriggerCapture_prepare(self._context)
        self.abort_all = RootLuData_acquisitionInstanceTriggerAbort_all(self._context)
        self.capture_start_data_simulation = RootLuData_acquisitionInstanceTriggerCapture_start_data_simulation(self._context)
        self.sampler_init_phase_mode = RootLuData_acquisitionInstanceTriggerSampler_init_phase_mode(self._context)
        self.background_sampler_start = RootLuData_acquisitionInstanceTriggerBackground_sampler_start(self._context)
        self.sampler_trim_data_storage = RootLuData_acquisitionInstanceTriggerSampler_trim_data_storage(self._context)
        self.capture_start = RootLuData_acquisitionInstanceTriggerCapture_start(self._context)
        self.sampler_prepare = RootLuData_acquisitionInstanceTriggerSampler_prepare(self._context)
        self.sampler_start = RootLuData_acquisitionInstanceTriggerSampler_start(self._context)
        self.sampler_start_data_simulation = RootLuData_acquisitionInstanceTriggerSampler_start_data_simulation(self._context)
        self.background_capture_start = RootLuData_acquisitionInstanceTriggerBackground_capture_start(self._context)
        self.capture_trim_data_storage = RootLuData_acquisitionInstanceTriggerCapture_trim_data_storage(self._context)


class RootLuData_acquisitionInstanceBusyIs_capturing(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.busy.is_capturing'


class RootLuData_acquisitionInstanceBusyIs_sampling(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.busy.is_sampling'


class RootLuData_acquisitionInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance.busy'
        self.is_sampling = RootLuData_acquisitionInstanceBusyIs_sampling(self._context)
        self.is_capturing = RootLuData_acquisitionInstanceBusyIs_capturing(self._context)


class RootLuData_acquisitionInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition.instance'
        self.busy = RootLuData_acquisitionInstanceBusy(self._context)
        self.trigger = RootLuData_acquisitionInstanceTrigger(self._context)
        self.attribute = RootLuData_acquisitionInstanceAttribute(self._context)


class RootLuData_acquisition(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.data_acquisition'
        self.instance = RootLuData_acquisitionInstance(self._context)


class RootLuZ_controller_exInstanceAttributeCurrent_status_flags(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_status_flags'


class RootLuZ_controller_exInstanceAttributeProportional_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.proportional_gain'


class RootLuZ_controller_exInstanceAttributeMax_z_current_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.max_z_current_value'


class RootLuZ_controller_exInstanceAttributeCurrent_output_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_output_channel'


class RootLuZ_controller_exInstanceAttributeInput_compare_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.input_compare_mode.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.input_compare_mode.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.input_compare_mode.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.input_compare_mode.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.input_compare_mode.enum.equal_or_higher_than', int(new_val))


class RootLuZ_controller_exInstanceAttributeInput_compare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.input_compare_mode'
        self.enum = RootLuZ_controller_exInstanceAttributeInput_compare_modeEnum(self._context)


class RootLuZ_controller_exInstanceAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.filter_coeff_vec'


class RootLuZ_controller_exInstanceAttributeCtrl_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.ctrl_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.ctrl_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuZ_controller_exInstanceAttributeCtrl_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.ctrl_input'
        self.enum = RootLuZ_controller_exInstanceAttributeCtrl_inputEnum(self._context)


class RootLuZ_controller_exInstanceAttributeDifferential_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.differential_gain'


class RootLuZ_controller_exInstanceAttributeInput_compare_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.input_compare_value'


class RootLuZ_controller_exInstanceAttributeClosed_loop_i_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.closed_loop_i_gain'


class RootLuZ_controller_exInstanceAttributeDdc_filter_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.ddc_filter_rate'


class RootLuZ_controller_exInstanceAttributeDdc_filter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.ddc_filter_number'


class RootLuZ_controller_exInstanceAttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))


class RootLuZ_controller_exInstanceAttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuZ_controller_exInstanceAttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuZ_controller_exInstanceAttributeCurrent_error_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_error_value'


class RootLuZ_controller_exInstanceAttributeCurrent_limited_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_limited_value'


class RootLuZ_controller_exInstanceAttributeBase_work_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.base_work_mode.enum'

    @property
    def z_feedback(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_feedback'))

    @z_feedback.setter
    def z_feedback(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_feedback', int(new_val))

    @property
    def z_closed_loop(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_closed_loop'))

    @z_closed_loop.setter
    def z_closed_loop(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_closed_loop', int(new_val))

    @property
    def z_drive(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_drive'))

    @z_drive.setter
    def z_drive(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.base_work_mode.enum.z_drive', int(new_val))


class RootLuZ_controller_exInstanceAttributeBase_work_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.base_work_mode'
        self.enum = RootLuZ_controller_exInstanceAttributeBase_work_modeEnum(self._context)


class RootLuZ_controller_exInstanceAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_input_value'


class RootLuZ_controller_exInstanceAttributeCurrent_pid_command_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_pid_command_value'


class RootLuZ_controller_exInstanceAttributeNumber_of_pid_gain_sets(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.number_of_pid_gain_sets'


class RootLuZ_controller_exInstanceAttributeFeedback_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.feedback_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.feedback_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.feedback_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.feedback_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.feedback_polarity.enum.negative', int(new_val))


class RootLuZ_controller_exInstanceAttributeFeedback_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.feedback_polarity'
        self.enum = RootLuZ_controller_exInstanceAttributeFeedback_polarityEnum(self._context)


class RootLuZ_controller_exInstanceAttributeOutput_compare_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.output_compare_mode.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.output_compare_mode.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.output_compare_mode.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.output_compare_mode.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.output_compare_mode.enum.equal_or_higher_than', int(new_val))


class RootLuZ_controller_exInstanceAttributeOutput_compare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.output_compare_mode'
        self.enum = RootLuZ_controller_exInstanceAttributeOutput_compare_modeEnum(self._context)


class RootLuZ_controller_exInstanceAttributeCurrent_feedback_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum'

    @property
    def in_range(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.in_range'))

    @in_range.setter
    def in_range(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.in_range', int(new_val))

    @property
    def max_extended(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.max_extended'))

    @max_extended.setter
    def max_extended(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.max_extended', int(new_val))

    @property
    def max_retracted(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.max_retracted'))

    @max_retracted.setter
    def max_retracted(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.current_feedback_status.enum.max_retracted', int(new_val))


class RootLuZ_controller_exInstanceAttributeCurrent_feedback_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_feedback_status'
        self.enum = RootLuZ_controller_exInstanceAttributeCurrent_feedback_statusEnum(self._context)


class RootLuZ_controller_exInstanceAttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))


class RootLuZ_controller_exInstanceAttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuZ_controller_exInstanceAttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuZ_controller_exInstanceAttributeMax_z_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.max_z_value'


class RootLuZ_controller_exInstanceAttributeIntegral_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.integral_gain'


class RootLuZ_controller_exInstanceAttributeOutput_compare_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.output_compare_value'


class RootLuZ_controller_exInstanceAttributePhase_work_mode_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum'

    @property
    def z_feedback(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_feedback'))

    @z_feedback.setter
    def z_feedback(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_feedback', int(new_val))

    @property
    def z_closed_loop(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_closed_loop'))

    @z_closed_loop.setter
    def z_closed_loop(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_closed_loop', int(new_val))

    @property
    def z_drive(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_drive'))

    @z_drive.setter
    def z_drive(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec.enum.z_drive', int(new_val))


class RootLuZ_controller_exInstanceAttributePhase_work_mode_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_work_mode_vec'
        self.enum = RootLuZ_controller_exInstanceAttributePhase_work_mode_vecEnum(self._context)


class RootLuZ_controller_exInstanceAttributeClosed_loop_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.closed_loop_polarity'


class RootLuZ_controller_exInstanceAttributeCurrent_input_filtered_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_input_filtered_value'


class RootLuZ_controller_exInstanceAttributePhase_move_end_mode_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum'

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.move_relative', int(new_val))

    @property
    def pause(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.pause'))

    @pause.setter
    def pause(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.pause', int(new_val))

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec.enum.move_to_absolute', int(new_val))


class RootLuZ_controller_exInstanceAttributePhase_move_end_mode_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_end_mode_vec'
        self.enum = RootLuZ_controller_exInstanceAttributePhase_move_end_mode_vecEnum(self._context)


class RootLuZ_controller_exInstanceAttributePhase_move_mode_vecEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec.enum.fix_time', int(new_val))


class RootLuZ_controller_exInstanceAttributePhase_move_mode_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_mode_vec'
        self.enum = RootLuZ_controller_exInstanceAttributePhase_move_mode_vecEnum(self._context)


class RootLuZ_controller_exInstanceAttributeZ_controller_adjust_timed_out(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.z_controller_adjust_timed_out'


class RootLuZ_controller_exInstanceAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_output_value'


class RootLuZ_controller_exInstanceAttributeActive_pid_gain_setEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum'

    @property
    def user(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.user'))

    @user.setter
    def user(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.user', int(new_val))

    @property
    def out_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.out_position_z'))

    @out_position_z.setter
    def out_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.out_position_z', int(new_val))

    @property
    def out_external_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.out_external_z'))

    @out_external_z.setter
    def out_external_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.active_pid_gain_set.enum.out_external_z', int(new_val))


class RootLuZ_controller_exInstanceAttributeActive_pid_gain_set(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.active_pid_gain_set'
        self.enum = RootLuZ_controller_exInstanceAttributeActive_pid_gain_setEnum(self._context)


class RootLuZ_controller_exInstanceAttributeClosed_loop_d_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.closed_loop_d_gain'


class RootLuZ_controller_exInstanceAttributePhase_move_stop_by_value_active_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_stop_by_value_active_vec'


class RootLuZ_controller_exInstanceAttributePhase_move_time_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_time_vec'


class RootLuZ_controller_exInstanceAttributeOutput_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.output_modulation_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.output_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.output_modulation_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.output_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.output_modulation_enable.enum.enabled', int(new_val))


class RootLuZ_controller_exInstanceAttributeOutput_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.output_modulation_enable'
        self.enum = RootLuZ_controller_exInstanceAttributeOutput_modulation_enableEnum(self._context)


class RootLuZ_controller_exInstanceAttributePhase_move_value_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_value_vec'


class RootLuZ_controller_exInstanceAttributePhase_pause_time_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_pause_time_vec'


class RootLuZ_controller_exInstanceAttributeMax_z_value_change_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.max_z_value_change_speed'


class RootLuZ_controller_exInstanceAttributePhase_real_end_pos_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_real_end_pos_vec'


class RootLuZ_controller_exInstanceAttributeClosed_loop_p_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.closed_loop_p_gain'


class RootLuZ_controller_exInstanceAttributePhase_init_phase_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_init_phase_count'


class RootLuZ_controller_exInstanceAttributeSet_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.set_point'


class RootLuZ_controller_exInstanceAttributeCurrent_phase(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_phase'


class RootLuZ_controller_exInstanceAttributeDdc_filter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.ddc_filter_coeff_vec'


class RootLuZ_controller_exInstanceAttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable.enum.enabled', int(new_val))


class RootLuZ_controller_exInstanceAttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.set_point_modulation_enable'
        self.enum = RootLuZ_controller_exInstanceAttributeSet_point_modulation_enableEnum(self._context)


class RootLuZ_controller_exInstanceAttributeTarget_output_channelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.target_output_channel.enum'

    @property
    def out_position_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.target_output_channel.enum.out_position_z'))

    @out_position_z.setter
    def out_position_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.target_output_channel.enum.out_position_z', int(new_val))

    @property
    def out_external_z(self) -> int:
        return int(self._context.get('root.lu.z_controller_ex.instance.attribute.target_output_channel.enum.out_external_z'))

    @out_external_z.setter
    def out_external_z(self, new_val:int):
        self._context.set('root.lu.z_controller_ex.instance.attribute.target_output_channel.enum.out_external_z', int(new_val))


class RootLuZ_controller_exInstanceAttributeTarget_output_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.target_output_channel'
        self.enum = RootLuZ_controller_exInstanceAttributeTarget_output_channelEnum(self._context)


class RootLuZ_controller_exInstanceAttributePhase_move_speed_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_move_speed_vec'


class RootLuZ_controller_exInstanceAttributeCurrent_sum_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.current_sum_value'


class RootLuZ_controller_exInstanceAttributeMin_z_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.min_z_value'


class RootLuZ_controller_exInstanceAttributePhase_count(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.phase_count'


class RootLuZ_controller_exInstanceAttributeBase_line_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute.base_line_pos'


class RootLuZ_controller_exInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.attribute'
        self.base_line_pos = RootLuZ_controller_exInstanceAttributeBase_line_pos(self._context)
        self.phase_count = RootLuZ_controller_exInstanceAttributePhase_count(self._context)
        self.min_z_value = RootLuZ_controller_exInstanceAttributeMin_z_value(self._context)
        self.current_sum_value = RootLuZ_controller_exInstanceAttributeCurrent_sum_value(self._context)
        self.phase_move_speed_vec = RootLuZ_controller_exInstanceAttributePhase_move_speed_vec(self._context)
        self.target_output_channel = RootLuZ_controller_exInstanceAttributeTarget_output_channel(self._context)
        self.set_point_modulation_enable = RootLuZ_controller_exInstanceAttributeSet_point_modulation_enable(self._context)
        self.ddc_filter_coeff_vec = RootLuZ_controller_exInstanceAttributeDdc_filter_coeff_vec(self._context)
        self.current_phase = RootLuZ_controller_exInstanceAttributeCurrent_phase(self._context)
        self.set_point = RootLuZ_controller_exInstanceAttributeSet_point(self._context)
        self.phase_init_phase_count = RootLuZ_controller_exInstanceAttributePhase_init_phase_count(self._context)
        self.closed_loop_p_gain = RootLuZ_controller_exInstanceAttributeClosed_loop_p_gain(self._context)
        self.phase_real_end_pos_vec = RootLuZ_controller_exInstanceAttributePhase_real_end_pos_vec(self._context)
        self.max_z_value_change_speed = RootLuZ_controller_exInstanceAttributeMax_z_value_change_speed(self._context)
        self.phase_pause_time_vec = RootLuZ_controller_exInstanceAttributePhase_pause_time_vec(self._context)
        self.phase_move_value_vec = RootLuZ_controller_exInstanceAttributePhase_move_value_vec(self._context)
        self.output_modulation_enable = RootLuZ_controller_exInstanceAttributeOutput_modulation_enable(self._context)
        self.phase_move_time_vec = RootLuZ_controller_exInstanceAttributePhase_move_time_vec(self._context)
        self.phase_move_stop_by_value_active_vec = RootLuZ_controller_exInstanceAttributePhase_move_stop_by_value_active_vec(self._context)
        self.closed_loop_d_gain = RootLuZ_controller_exInstanceAttributeClosed_loop_d_gain(self._context)
        self.active_pid_gain_set = RootLuZ_controller_exInstanceAttributeActive_pid_gain_set(self._context)
        self.current_output_value = RootLuZ_controller_exInstanceAttributeCurrent_output_value(self._context)
        self.z_controller_adjust_timed_out = RootLuZ_controller_exInstanceAttributeZ_controller_adjust_timed_out(self._context)
        self.phase_move_mode_vec = RootLuZ_controller_exInstanceAttributePhase_move_mode_vec(self._context)
        self.phase_move_end_mode_vec = RootLuZ_controller_exInstanceAttributePhase_move_end_mode_vec(self._context)
        self.current_input_filtered_value = RootLuZ_controller_exInstanceAttributeCurrent_input_filtered_value(self._context)
        self.closed_loop_polarity = RootLuZ_controller_exInstanceAttributeClosed_loop_polarity(self._context)
        self.phase_work_mode_vec = RootLuZ_controller_exInstanceAttributePhase_work_mode_vec(self._context)
        self.output_compare_value = RootLuZ_controller_exInstanceAttributeOutput_compare_value(self._context)
        self.integral_gain = RootLuZ_controller_exInstanceAttributeIntegral_gain(self._context)
        self.max_z_value = RootLuZ_controller_exInstanceAttributeMax_z_value(self._context)
        self.memory_signal_gen_position_enable = RootLuZ_controller_exInstanceAttributeMemory_signal_gen_position_enable(self._context)
        self.current_feedback_status = RootLuZ_controller_exInstanceAttributeCurrent_feedback_status(self._context)
        self.output_compare_mode = RootLuZ_controller_exInstanceAttributeOutput_compare_mode(self._context)
        self.feedback_polarity = RootLuZ_controller_exInstanceAttributeFeedback_polarity(self._context)
        self.number_of_pid_gain_sets = RootLuZ_controller_exInstanceAttributeNumber_of_pid_gain_sets(self._context)
        self.current_pid_command_value = RootLuZ_controller_exInstanceAttributeCurrent_pid_command_value(self._context)
        self.current_input_value = RootLuZ_controller_exInstanceAttributeCurrent_input_value(self._context)
        self.base_work_mode = RootLuZ_controller_exInstanceAttributeBase_work_mode(self._context)
        self.current_limited_value = RootLuZ_controller_exInstanceAttributeCurrent_limited_value(self._context)
        self.current_error_value = RootLuZ_controller_exInstanceAttributeCurrent_error_value(self._context)
        self.memory_signal_gen_drive_enable = RootLuZ_controller_exInstanceAttributeMemory_signal_gen_drive_enable(self._context)
        self.ddc_filter_number = RootLuZ_controller_exInstanceAttributeDdc_filter_number(self._context)
        self.ddc_filter_rate = RootLuZ_controller_exInstanceAttributeDdc_filter_rate(self._context)
        self.closed_loop_i_gain = RootLuZ_controller_exInstanceAttributeClosed_loop_i_gain(self._context)
        self.input_compare_value = RootLuZ_controller_exInstanceAttributeInput_compare_value(self._context)
        self.differential_gain = RootLuZ_controller_exInstanceAttributeDifferential_gain(self._context)
        self.ctrl_input = RootLuZ_controller_exInstanceAttributeCtrl_input(self._context)
        self.filter_coeff_vec = RootLuZ_controller_exInstanceAttributeFilter_coeff_vec(self._context)
        self.input_compare_mode = RootLuZ_controller_exInstanceAttributeInput_compare_mode(self._context)
        self.current_output_channel = RootLuZ_controller_exInstanceAttributeCurrent_output_channel(self._context)
        self.max_z_current_value = RootLuZ_controller_exInstanceAttributeMax_z_current_value(self._context)
        self.proportional_gain = RootLuZ_controller_exInstanceAttributeProportional_gain(self._context)
        self.current_status_flags = RootLuZ_controller_exInstanceAttributeCurrent_status_flags(self._context)


class RootLuZ_controller_exInstanceTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.stop'


class RootLuZ_controller_exInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.start'


class RootLuZ_controller_exInstanceTriggerSwitch_to_target_output_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.switch_to_target_output_channel'


class RootLuZ_controller_exInstanceTriggerStart_simple(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.start_simple'


class RootLuZ_controller_exInstanceTriggerUpdate_base_line_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.update_base_line_pos'


class RootLuZ_controller_exInstanceTriggerWait_for_z_controller_adjust(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.wait_for_z_controller_adjust'


class RootLuZ_controller_exInstanceTriggerApply_max_z_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.apply_max_z_value'


class RootLuZ_controller_exInstanceTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.abort'


class RootLuZ_controller_exInstanceTriggerInit_phase_move(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger.init_phase_move'


class RootLuZ_controller_exInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance.trigger'
        self.init_phase_move = RootLuZ_controller_exInstanceTriggerInit_phase_move(self._context)
        self.abort = RootLuZ_controller_exInstanceTriggerAbort(self._context)
        self.apply_max_z_value = RootLuZ_controller_exInstanceTriggerApply_max_z_value(self._context)
        self.wait_for_z_controller_adjust = RootLuZ_controller_exInstanceTriggerWait_for_z_controller_adjust(self._context)
        self.update_base_line_pos = RootLuZ_controller_exInstanceTriggerUpdate_base_line_pos(self._context)
        self.start_simple = RootLuZ_controller_exInstanceTriggerStart_simple(self._context)
        self.switch_to_target_output_channel = RootLuZ_controller_exInstanceTriggerSwitch_to_target_output_channel(self._context)
        self.start = RootLuZ_controller_exInstanceTriggerStart(self._context)
        self.stop = RootLuZ_controller_exInstanceTriggerStop(self._context)


class RootLuZ_controller_exInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex.instance'
        self.trigger = RootLuZ_controller_exInstanceTrigger(self._context)
        self.attribute = RootLuZ_controller_exInstanceAttribute(self._context)


class RootLuZ_controller_ex(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.z_controller_ex'
        self.instance = RootLuZ_controller_exInstance(self._context)


class RootLuIsostageInstanceAttributeIs_connected(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute.is_connected'


class RootLuIsostageInstanceAttributeOverload_sensitivity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute.overload_sensitivity'


class RootLuIsostageInstanceAttributeIsolation_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute.isolation_mode.enum'

    @property
    def off_or_defined_by_user_switch(self) -> int:
        return int(self._context.get('root.lu.isostage.instance.attribute.isolation_mode.enum.off_or_defined_by_user_switch'))

    @off_or_defined_by_user_switch.setter
    def off_or_defined_by_user_switch(self, new_val:int):
        self._context.set('root.lu.isostage.instance.attribute.isolation_mode.enum.off_or_defined_by_user_switch', int(new_val))

    @property
    def active(self) -> int:
        return int(self._context.get('root.lu.isostage.instance.attribute.isolation_mode.enum.active'))

    @active.setter
    def active(self, new_val:int):
        self._context.set('root.lu.isostage.instance.attribute.isolation_mode.enum.active', int(new_val))


class RootLuIsostageInstanceAttributeIsolation_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute.isolation_mode'
        self.enum = RootLuIsostageInstanceAttributeIsolation_modeEnum(self._context)


class RootLuIsostageInstanceAttributeEvent_counter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute.event_counter'


class RootLuIsostageInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.attribute'
        self.event_counter = RootLuIsostageInstanceAttributeEvent_counter(self._context)
        self.isolation_mode = RootLuIsostageInstanceAttributeIsolation_mode(self._context)
        self.overload_sensitivity = RootLuIsostageInstanceAttributeOverload_sensitivity(self._context)
        self.is_connected = RootLuIsostageInstanceAttributeIs_connected(self._context)


class RootLuIsostageInstanceTriggerTest_connection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.trigger.test_connection'


class RootLuIsostageInstanceTriggerUpdate_settings(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.trigger.update_settings'


class RootLuIsostageInstanceTriggerSetup_event_counter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.trigger.setup_event_counter'


class RootLuIsostageInstanceTriggerClear_event_counter(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.trigger.clear_event_counter'


class RootLuIsostageInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance.trigger'
        self.clear_event_counter = RootLuIsostageInstanceTriggerClear_event_counter(self._context)
        self.setup_event_counter = RootLuIsostageInstanceTriggerSetup_event_counter(self._context)
        self.update_settings = RootLuIsostageInstanceTriggerUpdate_settings(self._context)
        self.test_connection = RootLuIsostageInstanceTriggerTest_connection(self._context)


class RootLuIsostageInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage.instance'
        self.trigger = RootLuIsostageInstanceTrigger(self._context)
        self.attribute = RootLuIsostageInstanceAttribute(self._context)


class RootLuIsostage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.isostage'
        self.instance = RootLuIsostageInstance(self._context)


class RootLuAnalog_fast_outFast3AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_gain'


class RootLuAnalog_fast_outFast3AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.current_output_value'


class RootLuAnalog_fast_outFast3AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_sig_source_dir'


class RootLuAnalog_fast_outFast3AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.output_gain'


class RootLuAnalog_fast_outFast3AttributeAnalog_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.analog_output.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.analog_output.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.analog_output.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.analog_output.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.analog_output.enum.enabled', int(new_val))


class RootLuAnalog_fast_outFast3AttributeAnalog_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.analog_output'
        self.enum = RootLuAnalog_fast_outFast3AttributeAnalog_outputEnum(self._context)


class RootLuAnalog_fast_outFast3AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def damping(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.modulation.enum.damping'))

    @damping.setter
    def damping(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.modulation.enum.damping', int(new_val))


class RootLuAnalog_fast_outFast3AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.modulation'
        self.enum = RootLuAnalog_fast_outFast3AttributeModulationEnum(self._context)


class RootLuAnalog_fast_outFast3AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_fast_outFast3AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_outFast3AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_outFast3AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.input.enum'

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.fast_in2', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.in_user', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.static', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast3.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast3.attribute.input.enum.ctrl_w_out', int(new_val))


class RootLuAnalog_fast_outFast3AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.input'
        self.enum = RootLuAnalog_fast_outFast3AttributeInputEnum(self._context)


class RootLuAnalog_fast_outFast3AttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.output_offset'


class RootLuAnalog_fast_outFast3AttributeDamping_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.damping_gain'


class RootLuAnalog_fast_outFast3AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.calib_offset'


class RootLuAnalog_fast_outFast3AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute.static_value'


class RootLuAnalog_fast_outFast3Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.attribute'
        self.static_value = RootLuAnalog_fast_outFast3AttributeStatic_value(self._context)
        self.calib_offset = RootLuAnalog_fast_outFast3AttributeCalib_offset(self._context)
        self.damping_gain = RootLuAnalog_fast_outFast3AttributeDamping_gain(self._context)
        self.output_offset = RootLuAnalog_fast_outFast3AttributeOutput_offset(self._context)
        self.input = RootLuAnalog_fast_outFast3AttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_fast_outFast3AttributeCalib_polarity(self._context)
        self.modulation = RootLuAnalog_fast_outFast3AttributeModulation(self._context)
        self.analog_output = RootLuAnalog_fast_outFast3AttributeAnalog_output(self._context)
        self.output_gain = RootLuAnalog_fast_outFast3AttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_fast_outFast3AttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_fast_outFast3AttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_fast_outFast3AttributeCalib_gain(self._context)


class RootLuAnalog_fast_outFast3Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3.trigger'


class RootLuAnalog_fast_outFast3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast3'
        self.trigger = RootLuAnalog_fast_outFast3Trigger(self._context)
        self.attribute = RootLuAnalog_fast_outFast3Attribute(self._context)


class RootLuAnalog_fast_outFast2AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_gain'


class RootLuAnalog_fast_outFast2AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.current_output_value'


class RootLuAnalog_fast_outFast2AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_sig_source_dir'


class RootLuAnalog_fast_outFast2AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.output_gain'


class RootLuAnalog_fast_outFast2AttributeAnalog_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.analog_output.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.analog_output.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.analog_output.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.analog_output.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.analog_output.enum.enabled', int(new_val))


class RootLuAnalog_fast_outFast2AttributeAnalog_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.analog_output'
        self.enum = RootLuAnalog_fast_outFast2AttributeAnalog_outputEnum(self._context)


class RootLuAnalog_fast_outFast2AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def damping(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.modulation.enum.damping'))

    @damping.setter
    def damping(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.modulation.enum.damping', int(new_val))


class RootLuAnalog_fast_outFast2AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.modulation'
        self.enum = RootLuAnalog_fast_outFast2AttributeModulationEnum(self._context)


class RootLuAnalog_fast_outFast2AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_fast_outFast2AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_outFast2AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_outFast2AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.input.enum'

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.fast_in2', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.in_user', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.static', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.fast2.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.fast2.attribute.input.enum.ctrl_w_out', int(new_val))


class RootLuAnalog_fast_outFast2AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.input'
        self.enum = RootLuAnalog_fast_outFast2AttributeInputEnum(self._context)


class RootLuAnalog_fast_outFast2AttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.output_offset'


class RootLuAnalog_fast_outFast2AttributeDamping_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.damping_gain'


class RootLuAnalog_fast_outFast2AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.calib_offset'


class RootLuAnalog_fast_outFast2AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute.static_value'


class RootLuAnalog_fast_outFast2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.attribute'
        self.static_value = RootLuAnalog_fast_outFast2AttributeStatic_value(self._context)
        self.calib_offset = RootLuAnalog_fast_outFast2AttributeCalib_offset(self._context)
        self.damping_gain = RootLuAnalog_fast_outFast2AttributeDamping_gain(self._context)
        self.output_offset = RootLuAnalog_fast_outFast2AttributeOutput_offset(self._context)
        self.input = RootLuAnalog_fast_outFast2AttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_fast_outFast2AttributeCalib_polarity(self._context)
        self.modulation = RootLuAnalog_fast_outFast2AttributeModulation(self._context)
        self.analog_output = RootLuAnalog_fast_outFast2AttributeAnalog_output(self._context)
        self.output_gain = RootLuAnalog_fast_outFast2AttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_fast_outFast2AttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_fast_outFast2AttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_fast_outFast2AttributeCalib_gain(self._context)


class RootLuAnalog_fast_outFast2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2.trigger'


class RootLuAnalog_fast_outFast2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.fast2'
        self.trigger = RootLuAnalog_fast_outFast2Trigger(self._context)
        self.attribute = RootLuAnalog_fast_outFast2Attribute(self._context)


class RootLuAnalog_fast_outExcitationAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_gain'


class RootLuAnalog_fast_outExcitationAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.current_output_value'


class RootLuAnalog_fast_outExcitationAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_sig_source_dir'


class RootLuAnalog_fast_outExcitationAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.output_gain'


class RootLuAnalog_fast_outExcitationAttributeAnalog_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.analog_output.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.analog_output.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.analog_output.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.analog_output.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.analog_output.enum.enabled', int(new_val))


class RootLuAnalog_fast_outExcitationAttributeAnalog_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.analog_output'
        self.enum = RootLuAnalog_fast_outExcitationAttributeAnalog_outputEnum(self._context)


class RootLuAnalog_fast_outExcitationAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def damping(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.modulation.enum.damping'))

    @damping.setter
    def damping(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.modulation.enum.damping', int(new_val))


class RootLuAnalog_fast_outExcitationAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.modulation'
        self.enum = RootLuAnalog_fast_outExcitationAttributeModulationEnum(self._context)


class RootLuAnalog_fast_outExcitationAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_fast_outExcitationAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_outExcitationAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_outExcitationAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.input.enum'

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.fast_in2', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.in_user', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.static', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.excitation.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.excitation.attribute.input.enum.ctrl_w_out', int(new_val))


class RootLuAnalog_fast_outExcitationAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.input'
        self.enum = RootLuAnalog_fast_outExcitationAttributeInputEnum(self._context)


class RootLuAnalog_fast_outExcitationAttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.output_offset'


class RootLuAnalog_fast_outExcitationAttributeDamping_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.damping_gain'


class RootLuAnalog_fast_outExcitationAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.calib_offset'


class RootLuAnalog_fast_outExcitationAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute.static_value'


class RootLuAnalog_fast_outExcitationAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.attribute'
        self.static_value = RootLuAnalog_fast_outExcitationAttributeStatic_value(self._context)
        self.calib_offset = RootLuAnalog_fast_outExcitationAttributeCalib_offset(self._context)
        self.damping_gain = RootLuAnalog_fast_outExcitationAttributeDamping_gain(self._context)
        self.output_offset = RootLuAnalog_fast_outExcitationAttributeOutput_offset(self._context)
        self.input = RootLuAnalog_fast_outExcitationAttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_fast_outExcitationAttributeCalib_polarity(self._context)
        self.modulation = RootLuAnalog_fast_outExcitationAttributeModulation(self._context)
        self.analog_output = RootLuAnalog_fast_outExcitationAttributeAnalog_output(self._context)
        self.output_gain = RootLuAnalog_fast_outExcitationAttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_fast_outExcitationAttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_fast_outExcitationAttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_fast_outExcitationAttributeCalib_gain(self._context)


class RootLuAnalog_fast_outExcitationTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation.trigger'


class RootLuAnalog_fast_outExcitation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.excitation'
        self.trigger = RootLuAnalog_fast_outExcitationTrigger(self._context)
        self.attribute = RootLuAnalog_fast_outExcitationAttribute(self._context)


class RootLuAnalog_fast_outUserAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_gain'


class RootLuAnalog_fast_outUserAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.current_output_value'


class RootLuAnalog_fast_outUserAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_sig_source_dir'


class RootLuAnalog_fast_outUserAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.output_gain'


class RootLuAnalog_fast_outUserAttributeAnalog_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.analog_output.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.analog_output.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.analog_output.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.analog_output.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.analog_output.enum.enabled', int(new_val))


class RootLuAnalog_fast_outUserAttributeAnalog_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.analog_output'
        self.enum = RootLuAnalog_fast_outUserAttributeAnalog_outputEnum(self._context)


class RootLuAnalog_fast_outUserAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.enabled', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def damping(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.modulation.enum.damping'))

    @damping.setter
    def damping(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.modulation.enum.damping', int(new_val))


class RootLuAnalog_fast_outUserAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.modulation'
        self.enum = RootLuAnalog_fast_outUserAttributeModulationEnum(self._context)


class RootLuAnalog_fast_outUserAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_fast_outUserAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_polarity'
        self.enum = RootLuAnalog_fast_outUserAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_fast_outUserAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.input.enum'

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.fast_in2', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def in_user(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.in_user'))

    @in_user.setter
    def in_user(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.in_user', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.static', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_fast_out.user.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_fast_out.user.attribute.input.enum.ctrl_w_out', int(new_val))


class RootLuAnalog_fast_outUserAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.input'
        self.enum = RootLuAnalog_fast_outUserAttributeInputEnum(self._context)


class RootLuAnalog_fast_outUserAttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.output_offset'


class RootLuAnalog_fast_outUserAttributeDamping_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.damping_gain'


class RootLuAnalog_fast_outUserAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.calib_offset'


class RootLuAnalog_fast_outUserAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute.static_value'


class RootLuAnalog_fast_outUserAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.attribute'
        self.static_value = RootLuAnalog_fast_outUserAttributeStatic_value(self._context)
        self.calib_offset = RootLuAnalog_fast_outUserAttributeCalib_offset(self._context)
        self.damping_gain = RootLuAnalog_fast_outUserAttributeDamping_gain(self._context)
        self.output_offset = RootLuAnalog_fast_outUserAttributeOutput_offset(self._context)
        self.input = RootLuAnalog_fast_outUserAttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_fast_outUserAttributeCalib_polarity(self._context)
        self.modulation = RootLuAnalog_fast_outUserAttributeModulation(self._context)
        self.analog_output = RootLuAnalog_fast_outUserAttributeAnalog_output(self._context)
        self.output_gain = RootLuAnalog_fast_outUserAttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_fast_outUserAttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_fast_outUserAttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_fast_outUserAttributeCalib_gain(self._context)


class RootLuAnalog_fast_outUserTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user.trigger'


class RootLuAnalog_fast_outUser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out.user'
        self.trigger = RootLuAnalog_fast_outUserTrigger(self._context)
        self.attribute = RootLuAnalog_fast_outUserAttribute(self._context)


class RootLuAnalog_fast_out(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_fast_out'
        self.user = RootLuAnalog_fast_outUser(self._context)
        self.excitation = RootLuAnalog_fast_outExcitation(self._context)
        self.fast2 = RootLuAnalog_fast_outFast2(self._context)
        self.fast3 = RootLuAnalog_fast_outFast3(self._context)


class RootLuMacro_cmdInstanceAttributeEnable_daq(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.enable_daq'


class RootLuMacro_cmdInstanceAttributeI2_c_address(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.i2_c_address'


class RootLuMacro_cmdInstanceAttributeXy_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.xy_move_speed'


class RootLuMacro_cmdInstanceAttributeAbsolute_pos_mo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.absolute_pos_mo'


class RootLuMacro_cmdInstanceAttributeI2_c_register(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.i2_c_register'


class RootLuMacro_cmdInstanceAttributeMo_move_stop_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_stop_mode.enum'

    @property
    def is_less_than(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.mo_move_stop_mode.enum.is_less_than'))

    @is_less_than.setter
    def is_less_than(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.mo_move_stop_mode.enum.is_less_than', int(new_val))

    @property
    def is_greater_than(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.mo_move_stop_mode.enum.is_greater_than'))

    @is_greater_than.setter
    def is_greater_than(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.mo_move_stop_mode.enum.is_greater_than', int(new_val))


class RootLuMacro_cmdInstanceAttributeMo_move_stop_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_stop_mode'
        self.enum = RootLuMacro_cmdInstanceAttributeMo_move_stop_modeEnum(self._context)


class RootLuMacro_cmdInstanceAttributeMo_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_speed'


class RootLuMacro_cmdInstanceAttributeSystem_abort_event_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.system_abort_event_mask'


class RootLuMacro_cmdInstanceAttributeMo_move_stop_valueEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_stop_value.enum'

    @property
    def z_on(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.mo_move_stop_value.enum.z_on'))

    @z_on.setter
    def z_on(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.mo_move_stop_value.enum.z_on', int(new_val))

    @property
    def z_off(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.mo_move_stop_value.enum.z_off'))

    @z_off.setter
    def z_off(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.mo_move_stop_value.enum.z_off', int(new_val))


class RootLuMacro_cmdInstanceAttributeMo_move_stop_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_stop_value'
        self.enum = RootLuMacro_cmdInstanceAttributeMo_move_stop_valueEnum(self._context)


class RootLuMacro_cmdInstanceAttributeUser_event_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.user_event_id'


class RootLuMacro_cmdInstanceAttributeEnable_daq_sync_end(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.enable_daq_sync_end'


class RootLuMacro_cmdInstanceAttributeAbsolute_y_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.absolute_y_pos'


class RootLuMacro_cmdInstanceAttributeTarget_output_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.target_output_channel'


class RootLuMacro_cmdInstanceAttributeI2_c_busEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.i2_c_bus.enum'

    @property
    def aux(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.i2_c_bus.enum.aux'))

    @aux.setter
    def aux(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.i2_c_bus.enum.aux', int(new_val))

    @property
    def digital_io(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.i2_c_bus.enum.digital_io'))

    @digital_io.setter
    def digital_io(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.i2_c_bus.enum.digital_io', int(new_val))


class RootLuMacro_cmdInstanceAttributeI2_c_bus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.i2_c_bus'
        self.enum = RootLuMacro_cmdInstanceAttributeI2_c_busEnum(self._context)


class RootLuMacro_cmdInstanceAttributeTarget_z_ctrl_output_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.target_z_ctrl_output_mode'


class RootLuMacro_cmdInstanceAttributeRelative_pos_mo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.relative_pos_mo'


class RootLuMacro_cmdInstanceAttributeActive_sampler_set(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.active_sampler_set'


class RootLuMacro_cmdInstanceAttributeAbsolute_x_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.absolute_x_pos'


class RootLuMacro_cmdInstanceAttributePause_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.pause_time'


class RootLuMacro_cmdInstanceAttributeMo_move_stop_feedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.mo_move_stop_feedback_mode'


class RootLuMacro_cmdInstanceAttributeI2_c_data(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.i2_c_data'


class RootLuMacro_cmdInstanceAttributeModulation_outputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.modulation_output.enum'

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.modulation_output.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.modulation_output.enum.position_z', int(new_val))

    @property
    def external_z(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.modulation_output.enum.external_z'))

    @external_z.setter
    def external_z(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.modulation_output.enum.external_z', int(new_val))

    @property
    def tip_voltage(self) -> int:
        return int(self._context.get('root.lu.macro_cmd.instance.attribute.modulation_output.enum.tip_voltage'))

    @tip_voltage.setter
    def tip_voltage(self, new_val:int):
        self._context.set('root.lu.macro_cmd.instance.attribute.modulation_output.enum.tip_voltage', int(new_val))


class RootLuMacro_cmdInstanceAttributeModulation_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute.modulation_output'
        self.enum = RootLuMacro_cmdInstanceAttributeModulation_outputEnum(self._context)


class RootLuMacro_cmdInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.attribute'
        self.modulation_output = RootLuMacro_cmdInstanceAttributeModulation_output(self._context)
        self.i2_c_data = RootLuMacro_cmdInstanceAttributeI2_c_data(self._context)
        self.mo_move_stop_feedback_mode = RootLuMacro_cmdInstanceAttributeMo_move_stop_feedback_mode(self._context)
        self.pause_time = RootLuMacro_cmdInstanceAttributePause_time(self._context)
        self.absolute_x_pos = RootLuMacro_cmdInstanceAttributeAbsolute_x_pos(self._context)
        self.active_sampler_set = RootLuMacro_cmdInstanceAttributeActive_sampler_set(self._context)
        self.relative_pos_mo = RootLuMacro_cmdInstanceAttributeRelative_pos_mo(self._context)
        self.target_z_ctrl_output_mode = RootLuMacro_cmdInstanceAttributeTarget_z_ctrl_output_mode(self._context)
        self.i2_c_bus = RootLuMacro_cmdInstanceAttributeI2_c_bus(self._context)
        self.target_output_channel = RootLuMacro_cmdInstanceAttributeTarget_output_channel(self._context)
        self.absolute_y_pos = RootLuMacro_cmdInstanceAttributeAbsolute_y_pos(self._context)
        self.enable_daq_sync_end = RootLuMacro_cmdInstanceAttributeEnable_daq_sync_end(self._context)
        self.user_event_id = RootLuMacro_cmdInstanceAttributeUser_event_id(self._context)
        self.mo_move_stop_value = RootLuMacro_cmdInstanceAttributeMo_move_stop_value(self._context)
        self.system_abort_event_mask = RootLuMacro_cmdInstanceAttributeSystem_abort_event_mask(self._context)
        self.mo_move_speed = RootLuMacro_cmdInstanceAttributeMo_move_speed(self._context)
        self.mo_move_stop_mode = RootLuMacro_cmdInstanceAttributeMo_move_stop_mode(self._context)
        self.i2_c_register = RootLuMacro_cmdInstanceAttributeI2_c_register(self._context)
        self.absolute_pos_mo = RootLuMacro_cmdInstanceAttributeAbsolute_pos_mo(self._context)
        self.xy_move_speed = RootLuMacro_cmdInstanceAttributeXy_move_speed(self._context)
        self.i2_c_address = RootLuMacro_cmdInstanceAttributeI2_c_address(self._context)
        self.enable_daq = RootLuMacro_cmdInstanceAttributeEnable_daq(self._context)


class RootLuMacro_cmdInstanceTriggerMove_to_stop_value_mo(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.move_to_stop_value_mo'


class RootLuMacro_cmdInstanceTriggerMove_to_rel_mo_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.move_to_rel_mo_pos'


class RootLuMacro_cmdInstanceTriggerStop_z_feedback(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.stop_z_feedback'


class RootLuMacro_cmdInstanceTriggerMove_to_abs_xy_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.move_to_abs_xy_pos'


class RootLuMacro_cmdInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.user_abort'


class RootLuMacro_cmdInstanceTriggerMove_to_abs_mo_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.move_to_abs_mo_pos'


class RootLuMacro_cmdInstanceTriggerUser_event(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.user_event'


class RootLuMacro_cmdInstanceTriggerMake_pause(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.make_pause'


class RootLuMacro_cmdInstanceTriggerWrite_i2_c_data(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.write_i2_c_data'


class RootLuMacro_cmdInstanceTriggerAuto_recalibrate_probe(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.auto_recalibrate_probe'


class RootLuMacro_cmdInstanceTriggerActivate_z_feedback(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger.activate_z_feedback'


class RootLuMacro_cmdInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance.trigger'
        self.activate_z_feedback = RootLuMacro_cmdInstanceTriggerActivate_z_feedback(self._context)
        self.auto_recalibrate_probe = RootLuMacro_cmdInstanceTriggerAuto_recalibrate_probe(self._context)
        self.write_i2_c_data = RootLuMacro_cmdInstanceTriggerWrite_i2_c_data(self._context)
        self.make_pause = RootLuMacro_cmdInstanceTriggerMake_pause(self._context)
        self.user_event = RootLuMacro_cmdInstanceTriggerUser_event(self._context)
        self.move_to_abs_mo_pos = RootLuMacro_cmdInstanceTriggerMove_to_abs_mo_pos(self._context)
        self.user_abort = RootLuMacro_cmdInstanceTriggerUser_abort(self._context)
        self.move_to_abs_xy_pos = RootLuMacro_cmdInstanceTriggerMove_to_abs_xy_pos(self._context)
        self.stop_z_feedback = RootLuMacro_cmdInstanceTriggerStop_z_feedback(self._context)
        self.move_to_rel_mo_pos = RootLuMacro_cmdInstanceTriggerMove_to_rel_mo_pos(self._context)
        self.move_to_stop_value_mo = RootLuMacro_cmdInstanceTriggerMove_to_stop_value_mo(self._context)


class RootLuMacro_cmdInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd.instance'
        self.trigger = RootLuMacro_cmdInstanceTrigger(self._context)
        self.attribute = RootLuMacro_cmdInstanceAttribute(self._context)


class RootLuMacro_cmd(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.macro_cmd'
        self.instance = RootLuMacro_cmdInstance(self._context)


class RootLuThermal_tuningInstanceAttributeBuffer_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance.attribute.buffer_group_id'


class RootLuThermal_tuningInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance.attribute'
        self.buffer_group_id = RootLuThermal_tuningInstanceAttributeBuffer_group_id(self._context)


class RootLuThermal_tuningInstanceTriggerStart_block(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance.trigger.start_block'


class RootLuThermal_tuningInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance.trigger.user_abort'


class RootLuThermal_tuningInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance.trigger'
        self.user_abort = RootLuThermal_tuningInstanceTriggerUser_abort(self._context)
        self.start_block = RootLuThermal_tuningInstanceTriggerStart_block(self._context)


class RootLuThermal_tuningInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning.instance'
        self.trigger = RootLuThermal_tuningInstanceTrigger(self._context)
        self.attribute = RootLuThermal_tuningInstanceAttribute(self._context)


class RootLuThermal_tuning(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.thermal_tuning'
        self.instance = RootLuThermal_tuningInstance(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_gain'


class RootLuAnalog_hi_res_outTip_voltageAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.current_output_value'


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.output_gain'


class RootLuAnalog_hi_res_outTip_voltageAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outTip_voltageAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outTip_voltageAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.slew_rate'


class RootLuAnalog_hi_res_outTip_voltageAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.static_value'


class RootLuAnalog_hi_res_outTip_voltageAttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.output_offset'


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_offset'


class RootLuAnalog_hi_res_outTip_voltageAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.input'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outTip_voltageAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.filter_number'


class RootLuAnalog_hi_res_outTip_voltageAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outTip_voltageAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outTip_voltageAttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outTip_voltageAttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outTip_voltageAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outTip_voltageAttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outTip_voltageAttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outTip_voltageAttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outTip_voltageAttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outTip_voltageAttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outTip_voltageAttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outTip_voltageAttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outTip_voltageAttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outTip_voltageAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outTip_voltageTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage.trigger'


class RootLuAnalog_hi_res_outTip_voltage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.tip_voltage'
        self.trigger = RootLuAnalog_hi_res_outTip_voltageTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outTip_voltageAttribute(self._context)


class RootLuAnalog_hi_res_outApproachAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_gain'


class RootLuAnalog_hi_res_outApproachAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.current_output_value'


class RootLuAnalog_hi_res_outApproachAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.output_gain'


class RootLuAnalog_hi_res_outApproachAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outApproachAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outApproachAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.slew_rate'


class RootLuAnalog_hi_res_outApproachAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.static_value'


class RootLuAnalog_hi_res_outApproachAttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.output_offset'


class RootLuAnalog_hi_res_outApproachAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_offset'


class RootLuAnalog_hi_res_outApproachAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outApproachAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.input'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outApproachAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.filter_number'


class RootLuAnalog_hi_res_outApproachAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outApproachAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outApproachAttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outApproachAttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outApproachAttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outApproachAttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outApproachAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outApproachAttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outApproachAttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outApproachAttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outApproachAttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outApproachAttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outApproachAttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outApproachAttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outApproachAttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outApproachAttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outApproachAttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outApproachAttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outApproachAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outApproachTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach.trigger'


class RootLuAnalog_hi_res_outApproach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.approach'
        self.trigger = RootLuAnalog_hi_res_outApproachTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outApproachAttribute(self._context)


class RootLuAnalog_hi_res_outOut8AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_gain'


class RootLuAnalog_hi_res_outOut8AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.current_output_value'


class RootLuAnalog_hi_res_outOut8AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.output_gain'


class RootLuAnalog_hi_res_outOut8AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outOut8AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outOut8AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.slew_rate'


class RootLuAnalog_hi_res_outOut8AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.static_value'


class RootLuAnalog_hi_res_outOut8AttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.output_offset'


class RootLuAnalog_hi_res_outOut8AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_offset'


class RootLuAnalog_hi_res_outOut8AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outOut8AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.input'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outOut8AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.filter_number'


class RootLuAnalog_hi_res_outOut8AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outOut8Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outOut8AttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outOut8AttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outOut8AttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outOut8AttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outOut8AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outOut8AttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outOut8AttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outOut8AttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outOut8AttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outOut8AttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outOut8AttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outOut8AttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outOut8AttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outOut8AttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outOut8AttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outOut8AttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outOut8AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outOut8Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8.trigger'


class RootLuAnalog_hi_res_outOut8(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out8'
        self.trigger = RootLuAnalog_hi_res_outOut8Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outOut8Attribute(self._context)


class RootLuAnalog_hi_res_outUser1AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_gain'


class RootLuAnalog_hi_res_outUser1AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.current_output_value'


class RootLuAnalog_hi_res_outUser1AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.output_gain'


class RootLuAnalog_hi_res_outUser1AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outUser1AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outUser1AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.slew_rate'


class RootLuAnalog_hi_res_outUser1AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.static_value'


class RootLuAnalog_hi_res_outUser1AttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.output_offset'


class RootLuAnalog_hi_res_outUser1AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_offset'


class RootLuAnalog_hi_res_outUser1AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outUser1AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.input'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outUser1AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.filter_number'


class RootLuAnalog_hi_res_outUser1AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outUser1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outUser1AttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outUser1AttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outUser1AttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outUser1AttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outUser1AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outUser1AttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outUser1AttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outUser1AttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outUser1AttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outUser1AttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outUser1AttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outUser1AttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outUser1AttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outUser1AttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outUser1AttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outUser1AttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outUser1AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outUser1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1.trigger'


class RootLuAnalog_hi_res_outUser1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user1'
        self.trigger = RootLuAnalog_hi_res_outUser1Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outUser1Attribute(self._context)


class RootLuAnalog_hi_res_outUser3AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_gain'


class RootLuAnalog_hi_res_outUser3AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.current_output_value'


class RootLuAnalog_hi_res_outUser3AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.output_gain'


class RootLuAnalog_hi_res_outUser3AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outUser3AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outUser3AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.slew_rate'


class RootLuAnalog_hi_res_outUser3AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.static_value'


class RootLuAnalog_hi_res_outUser3AttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.output_offset'


class RootLuAnalog_hi_res_outUser3AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_offset'


class RootLuAnalog_hi_res_outUser3AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outUser3AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.input'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outUser3AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.filter_number'


class RootLuAnalog_hi_res_outUser3AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outUser3Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outUser3AttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outUser3AttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outUser3AttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outUser3AttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outUser3AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outUser3AttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outUser3AttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outUser3AttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outUser3AttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outUser3AttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outUser3AttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outUser3AttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outUser3AttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outUser3AttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outUser3AttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outUser3AttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outUser3AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outUser3Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3.trigger'


class RootLuAnalog_hi_res_outUser3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user3'
        self.trigger = RootLuAnalog_hi_res_outUser3Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outUser3Attribute(self._context)


class RootLuAnalog_hi_res_outUser4AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_gain'


class RootLuAnalog_hi_res_outUser4AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.current_output_value'


class RootLuAnalog_hi_res_outUser4AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.output_gain'


class RootLuAnalog_hi_res_outUser4AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outUser4AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outUser4AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.slew_rate'


class RootLuAnalog_hi_res_outUser4AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.static_value'


class RootLuAnalog_hi_res_outUser4AttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.output_offset'


class RootLuAnalog_hi_res_outUser4AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_offset'


class RootLuAnalog_hi_res_outUser4AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outUser4AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.input'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outUser4AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.filter_number'


class RootLuAnalog_hi_res_outUser4AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outUser4Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outUser4AttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outUser4AttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outUser4AttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outUser4AttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outUser4AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outUser4AttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outUser4AttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outUser4AttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outUser4AttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outUser4AttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outUser4AttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outUser4AttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outUser4AttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outUser4AttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outUser4AttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outUser4AttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outUser4AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outUser4Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4.trigger'


class RootLuAnalog_hi_res_outUser4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user4'
        self.trigger = RootLuAnalog_hi_res_outUser4Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outUser4Attribute(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_gain'


class RootLuAnalog_hi_res_outPosition_zAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.current_output_value'


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.output_gain'


class RootLuAnalog_hi_res_outPosition_zAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outPosition_zAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outPosition_zAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.slew_rate'


class RootLuAnalog_hi_res_outPosition_zAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.static_value'


class RootLuAnalog_hi_res_outPosition_zAttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.output_offset'


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_offset'


class RootLuAnalog_hi_res_outPosition_zAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.input'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outPosition_zAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.filter_number'


class RootLuAnalog_hi_res_outPosition_zAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outPosition_zAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outPosition_zAttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outPosition_zAttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outPosition_zAttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outPosition_zAttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outPosition_zAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outPosition_zAttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outPosition_zAttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outPosition_zAttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outPosition_zAttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outPosition_zAttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outPosition_zAttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outPosition_zAttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outPosition_zAttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outPosition_zAttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outPosition_zAttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outPosition_zAttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outPosition_zAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outPosition_zTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z.trigger'


class RootLuAnalog_hi_res_outPosition_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_z'
        self.trigger = RootLuAnalog_hi_res_outPosition_zTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outPosition_zAttribute(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_gain'


class RootLuAnalog_hi_res_outPosition_wAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.current_output_value'


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.output_gain'


class RootLuAnalog_hi_res_outPosition_wAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outPosition_wAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outPosition_wAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.slew_rate'


class RootLuAnalog_hi_res_outPosition_wAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.static_value'


class RootLuAnalog_hi_res_outPosition_wAttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.output_offset'


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_offset'


class RootLuAnalog_hi_res_outPosition_wAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.input'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outPosition_wAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.filter_number'


class RootLuAnalog_hi_res_outPosition_wAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outPosition_wAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outPosition_wAttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outPosition_wAttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outPosition_wAttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outPosition_wAttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outPosition_wAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outPosition_wAttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outPosition_wAttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outPosition_wAttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outPosition_wAttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outPosition_wAttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outPosition_wAttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outPosition_wAttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outPosition_wAttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outPosition_wAttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outPosition_wAttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outPosition_wAttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outPosition_wAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outPosition_wTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w.trigger'


class RootLuAnalog_hi_res_outPosition_w(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_w'
        self.trigger = RootLuAnalog_hi_res_outPosition_wTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outPosition_wAttribute(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_gain'


class RootLuAnalog_hi_res_outPosition_xAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.current_output_value'


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.output_gain'


class RootLuAnalog_hi_res_outPosition_xAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outPosition_xAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outPosition_xAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.slew_rate'


class RootLuAnalog_hi_res_outPosition_xAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.static_value'


class RootLuAnalog_hi_res_outPosition_xAttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.output_offset'


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_offset'


class RootLuAnalog_hi_res_outPosition_xAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.input'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outPosition_xAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.filter_number'


class RootLuAnalog_hi_res_outPosition_xAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outPosition_xAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outPosition_xAttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outPosition_xAttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outPosition_xAttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outPosition_xAttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outPosition_xAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outPosition_xAttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outPosition_xAttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outPosition_xAttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outPosition_xAttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outPosition_xAttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outPosition_xAttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outPosition_xAttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outPosition_xAttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outPosition_xAttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outPosition_xAttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outPosition_xAttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outPosition_xAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outPosition_xTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x.trigger'


class RootLuAnalog_hi_res_outPosition_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_x'
        self.trigger = RootLuAnalog_hi_res_outPosition_xTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outPosition_xAttribute(self._context)


class RootLuAnalog_hi_res_outOut7AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_gain'


class RootLuAnalog_hi_res_outOut7AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.current_output_value'


class RootLuAnalog_hi_res_outOut7AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.output_gain'


class RootLuAnalog_hi_res_outOut7AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outOut7AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outOut7AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.slew_rate'


class RootLuAnalog_hi_res_outOut7AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.static_value'


class RootLuAnalog_hi_res_outOut7AttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.output_offset'


class RootLuAnalog_hi_res_outOut7AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_offset'


class RootLuAnalog_hi_res_outOut7AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outOut7AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.input'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outOut7AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.filter_number'


class RootLuAnalog_hi_res_outOut7AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outOut7Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outOut7AttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outOut7AttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outOut7AttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outOut7AttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outOut7AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outOut7AttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outOut7AttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outOut7AttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outOut7AttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outOut7AttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outOut7AttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outOut7AttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outOut7AttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outOut7AttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outOut7AttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outOut7AttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outOut7AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outOut7Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7.trigger'


class RootLuAnalog_hi_res_outOut7(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.out7'
        self.trigger = RootLuAnalog_hi_res_outOut7Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outOut7Attribute(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_gain'


class RootLuAnalog_hi_res_outPosition_yAttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.current_output_value'


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.output_gain'


class RootLuAnalog_hi_res_outPosition_yAttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outPosition_yAttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outPosition_yAttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.slew_rate'


class RootLuAnalog_hi_res_outPosition_yAttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.static_value'


class RootLuAnalog_hi_res_outPosition_yAttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.output_offset'


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_offset'


class RootLuAnalog_hi_res_outPosition_yAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.input'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outPosition_yAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.filter_number'


class RootLuAnalog_hi_res_outPosition_yAttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outPosition_yAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outPosition_yAttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outPosition_yAttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outPosition_yAttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outPosition_yAttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outPosition_yAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outPosition_yAttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outPosition_yAttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outPosition_yAttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outPosition_yAttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outPosition_yAttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outPosition_yAttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outPosition_yAttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outPosition_yAttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outPosition_yAttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outPosition_yAttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outPosition_yAttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outPosition_yAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outPosition_yTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y.trigger'


class RootLuAnalog_hi_res_outPosition_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.position_y'
        self.trigger = RootLuAnalog_hi_res_outPosition_yTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outPosition_yAttribute(self._context)


class RootLuAnalog_hi_res_outUser2AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_gain'


class RootLuAnalog_hi_res_outUser2AttributeCurrent_output_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.current_output_value'


class RootLuAnalog_hi_res_outUser2AttributeCalib_sig_source_dirEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir.enum'

    @property
    def from_output_to_input(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir.enum.from_output_to_input'))

    @from_output_to_input.setter
    def from_output_to_input(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir.enum.from_output_to_input', int(new_val))

    @property
    def from_input_to_output(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir.enum.from_input_to_output'))

    @from_input_to_output.setter
    def from_input_to_output(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir.enum.from_input_to_output', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeCalib_sig_source_dir(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_sig_source_dir'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeCalib_sig_source_dirEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeOutput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.output_gain'


class RootLuAnalog_hi_res_outUser2AttributeModulation_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation_input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeModulation_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.modulation_input'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeModulation_inputEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_binary_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.glitch_corr_binary_vec'


class RootLuAnalog_hi_res_outUser2AttributeModulationEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.modulation.enum'

    @property
    def hi_res_signal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.hi_res_signal'))

    @hi_res_signal.setter
    def hi_res_signal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.hi_res_signal', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.ort_excitation', int(new_val))

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.disabled', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.analyzer2_reference', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.modulation.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeModulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.modulation'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeModulationEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeCalib_lo_word_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_lo_word_gain'


class RootLuAnalog_hi_res_outUser2AttributeSlew_rate(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.slew_rate'


class RootLuAnalog_hi_res_outUser2AttributeStatic_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.static_value'


class RootLuAnalog_hi_res_outUser2AttributeOutput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.output_offset'


class RootLuAnalog_hi_res_outUser2AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_offset'


class RootLuAnalog_hi_res_outUser2AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_outUser2AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeInputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.input.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.input.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeInput(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.input'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeInputEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_enabledEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled.enum.enabled', int(new_val))


class RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.glitch_corr_enabled'
        self.enum = RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_enabledEnum(self._context)


class RootLuAnalog_hi_res_outUser2AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.filter_number'


class RootLuAnalog_hi_res_outUser2AttributeCalib_lo_word_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute.calib_lo_word_delay'


class RootLuAnalog_hi_res_outUser2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.attribute'
        self.calib_lo_word_delay = RootLuAnalog_hi_res_outUser2AttributeCalib_lo_word_delay(self._context)
        self.filter_number = RootLuAnalog_hi_res_outUser2AttributeFilter_number(self._context)
        self.glitch_corr_enabled = RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_enabled(self._context)
        self.input = RootLuAnalog_hi_res_outUser2AttributeInput(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_outUser2AttributeCalib_polarity(self._context)
        self.filter_coeff_vec = RootLuAnalog_hi_res_outUser2AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_outUser2AttributeCalib_offset(self._context)
        self.output_offset = RootLuAnalog_hi_res_outUser2AttributeOutput_offset(self._context)
        self.static_value = RootLuAnalog_hi_res_outUser2AttributeStatic_value(self._context)
        self.slew_rate = RootLuAnalog_hi_res_outUser2AttributeSlew_rate(self._context)
        self.calib_lo_word_gain = RootLuAnalog_hi_res_outUser2AttributeCalib_lo_word_gain(self._context)
        self.modulation = RootLuAnalog_hi_res_outUser2AttributeModulation(self._context)
        self.glitch_corr_binary_vec = RootLuAnalog_hi_res_outUser2AttributeGlitch_corr_binary_vec(self._context)
        self.modulation_input = RootLuAnalog_hi_res_outUser2AttributeModulation_input(self._context)
        self.output_gain = RootLuAnalog_hi_res_outUser2AttributeOutput_gain(self._context)
        self.calib_sig_source_dir = RootLuAnalog_hi_res_outUser2AttributeCalib_sig_source_dir(self._context)
        self.current_output_value = RootLuAnalog_hi_res_outUser2AttributeCurrent_output_value(self._context)
        self.calib_gain = RootLuAnalog_hi_res_outUser2AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_outUser2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2.trigger'


class RootLuAnalog_hi_res_outUser2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out.user2'
        self.trigger = RootLuAnalog_hi_res_outUser2Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_outUser2Attribute(self._context)


class RootLuAnalog_hi_res_out(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_out'
        self.user2 = RootLuAnalog_hi_res_outUser2(self._context)
        self.position_y = RootLuAnalog_hi_res_outPosition_y(self._context)
        self.out7 = RootLuAnalog_hi_res_outOut7(self._context)
        self.position_x = RootLuAnalog_hi_res_outPosition_x(self._context)
        self.position_w = RootLuAnalog_hi_res_outPosition_w(self._context)
        self.position_z = RootLuAnalog_hi_res_outPosition_z(self._context)
        self.user4 = RootLuAnalog_hi_res_outUser4(self._context)
        self.user3 = RootLuAnalog_hi_res_outUser3(self._context)
        self.user1 = RootLuAnalog_hi_res_outUser1(self._context)
        self.out8 = RootLuAnalog_hi_res_outOut8(self._context)
        self.approach = RootLuAnalog_hi_res_outApproach(self._context)
        self.tip_voltage = RootLuAnalog_hi_res_outTip_voltage(self._context)


class RootLuPid_controllerPid_user1AttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_user1AttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuPid_controllerPid_user1AttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuPid_controllerPid_user1AttributeOffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.offset'


class RootLuPid_controllerPid_user1AttributeSelect_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.select_output'


class RootLuPid_controllerPid_user1AttributeReached_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.reached_max'


class RootLuPid_controllerPid_user1AttributeP_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.p_gain'


class RootLuPid_controllerPid_user1AttributeSet_point_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.set_point_gain'


class RootLuPid_controllerPid_user1AttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_user1AttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.set_point_modulation_enable'
        self.enum = RootLuPid_controllerPid_user1AttributeSet_point_modulation_enableEnum(self._context)


class RootLuPid_controllerPid_user1AttributeSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.slope'


class RootLuPid_controllerPid_user1AttributeMedian_filter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.median_filter_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.median_filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.median_filter_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.median_filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.median_filter_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_user1AttributeMedian_filter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.median_filter_enable'
        self.enum = RootLuPid_controllerPid_user1AttributeMedian_filter_enableEnum(self._context)


class RootLuPid_controllerPid_user1AttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_user1AttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuPid_controllerPid_user1AttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuPid_controllerPid_user1AttributeInput_set_pointEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.input_set_point.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_set_point.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_user1AttributeInput_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.input_set_point'
        self.enum = RootLuPid_controllerPid_user1AttributeInput_set_pointEnum(self._context)


class RootLuPid_controllerPid_user1AttributeMax_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.max_value'


class RootLuPid_controllerPid_user1AttributeD_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.d_gain'


class RootLuPid_controllerPid_user1AttributeFeedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.feedback_mode'


class RootLuPid_controllerPid_user1AttributeReached_err_lim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.reached_err_lim'


class RootLuPid_controllerPid_user1AttributeError_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.error_limit'


class RootLuPid_controllerPid_user1AttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.polarity'


class RootLuPid_controllerPid_user1AttributeCompare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.compare_mode'


class RootLuPid_controllerPid_user1AttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.min_value'


class RootLuPid_controllerPid_user1AttributeI_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.i_gain'


class RootLuPid_controllerPid_user1AttributeInput_actualEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.input_actual.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user1.attribute.input_actual.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_user1AttributeInput_actual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.input_actual'
        self.enum = RootLuPid_controllerPid_user1AttributeInput_actualEnum(self._context)


class RootLuPid_controllerPid_user1AttributeReached_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute.reached_min'


class RootLuPid_controllerPid_user1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.attribute'
        self.reached_min = RootLuPid_controllerPid_user1AttributeReached_min(self._context)
        self.input_actual = RootLuPid_controllerPid_user1AttributeInput_actual(self._context)
        self.i_gain = RootLuPid_controllerPid_user1AttributeI_gain(self._context)
        self.min_value = RootLuPid_controllerPid_user1AttributeMin_value(self._context)
        self.compare_mode = RootLuPid_controllerPid_user1AttributeCompare_mode(self._context)
        self.polarity = RootLuPid_controllerPid_user1AttributePolarity(self._context)
        self.error_limit = RootLuPid_controllerPid_user1AttributeError_limit(self._context)
        self.reached_err_lim = RootLuPid_controllerPid_user1AttributeReached_err_lim(self._context)
        self.feedback_mode = RootLuPid_controllerPid_user1AttributeFeedback_mode(self._context)
        self.d_gain = RootLuPid_controllerPid_user1AttributeD_gain(self._context)
        self.max_value = RootLuPid_controllerPid_user1AttributeMax_value(self._context)
        self.input_set_point = RootLuPid_controllerPid_user1AttributeInput_set_point(self._context)
        self.memory_signal_gen_drive_enable = RootLuPid_controllerPid_user1AttributeMemory_signal_gen_drive_enable(self._context)
        self.median_filter_enable = RootLuPid_controllerPid_user1AttributeMedian_filter_enable(self._context)
        self.slope = RootLuPid_controllerPid_user1AttributeSlope(self._context)
        self.set_point_modulation_enable = RootLuPid_controllerPid_user1AttributeSet_point_modulation_enable(self._context)
        self.set_point_gain = RootLuPid_controllerPid_user1AttributeSet_point_gain(self._context)
        self.p_gain = RootLuPid_controllerPid_user1AttributeP_gain(self._context)
        self.reached_max = RootLuPid_controllerPid_user1AttributeReached_max(self._context)
        self.select_output = RootLuPid_controllerPid_user1AttributeSelect_output(self._context)
        self.offset = RootLuPid_controllerPid_user1AttributeOffset(self._context)
        self.memory_signal_gen_position_enable = RootLuPid_controllerPid_user1AttributeMemory_signal_gen_position_enable(self._context)


class RootLuPid_controllerPid_user1TriggerCalibrate_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.trigger.calibrate_offset'


class RootLuPid_controllerPid_user1TriggerClear_pid_accu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.trigger.clear_pid_accu'


class RootLuPid_controllerPid_user1TriggerDrive_to_zero_volt_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.trigger.drive_to_zero_volt_position'


class RootLuPid_controllerPid_user1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1.trigger'
        self.drive_to_zero_volt_position = RootLuPid_controllerPid_user1TriggerDrive_to_zero_volt_position(self._context)
        self.clear_pid_accu = RootLuPid_controllerPid_user1TriggerClear_pid_accu(self._context)
        self.calibrate_offset = RootLuPid_controllerPid_user1TriggerCalibrate_offset(self._context)


class RootLuPid_controllerPid_user1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user1'
        self.trigger = RootLuPid_controllerPid_user1Trigger(self._context)
        self.attribute = RootLuPid_controllerPid_user1Attribute(self._context)


class RootLuPid_controllerPid_wAttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_wAttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuPid_controllerPid_wAttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuPid_controllerPid_wAttributeOffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.offset'


class RootLuPid_controllerPid_wAttributeSelect_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.select_output'


class RootLuPid_controllerPid_wAttributeReached_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.reached_max'


class RootLuPid_controllerPid_wAttributeP_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.p_gain'


class RootLuPid_controllerPid_wAttributeSet_point_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.set_point_gain'


class RootLuPid_controllerPid_wAttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_wAttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.set_point_modulation_enable'
        self.enum = RootLuPid_controllerPid_wAttributeSet_point_modulation_enableEnum(self._context)


class RootLuPid_controllerPid_wAttributeSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.slope'


class RootLuPid_controllerPid_wAttributeMedian_filter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.median_filter_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.median_filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.median_filter_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.median_filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.median_filter_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_wAttributeMedian_filter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.median_filter_enable'
        self.enum = RootLuPid_controllerPid_wAttributeMedian_filter_enableEnum(self._context)


class RootLuPid_controllerPid_wAttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_wAttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuPid_controllerPid_wAttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuPid_controllerPid_wAttributeInput_set_pointEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.input_set_point.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_set_point.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_wAttributeInput_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.input_set_point'
        self.enum = RootLuPid_controllerPid_wAttributeInput_set_pointEnum(self._context)


class RootLuPid_controllerPid_wAttributeMax_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.max_value'


class RootLuPid_controllerPid_wAttributeD_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.d_gain'


class RootLuPid_controllerPid_wAttributeFeedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.feedback_mode'


class RootLuPid_controllerPid_wAttributeReached_err_lim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.reached_err_lim'


class RootLuPid_controllerPid_wAttributeError_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.error_limit'


class RootLuPid_controllerPid_wAttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.polarity'


class RootLuPid_controllerPid_wAttributeCompare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.compare_mode'


class RootLuPid_controllerPid_wAttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.min_value'


class RootLuPid_controllerPid_wAttributeI_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.i_gain'


class RootLuPid_controllerPid_wAttributeInput_actualEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.input_actual.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_w.attribute.input_actual.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_wAttributeInput_actual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.input_actual'
        self.enum = RootLuPid_controllerPid_wAttributeInput_actualEnum(self._context)


class RootLuPid_controllerPid_wAttributeReached_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute.reached_min'


class RootLuPid_controllerPid_wAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.attribute'
        self.reached_min = RootLuPid_controllerPid_wAttributeReached_min(self._context)
        self.input_actual = RootLuPid_controllerPid_wAttributeInput_actual(self._context)
        self.i_gain = RootLuPid_controllerPid_wAttributeI_gain(self._context)
        self.min_value = RootLuPid_controllerPid_wAttributeMin_value(self._context)
        self.compare_mode = RootLuPid_controllerPid_wAttributeCompare_mode(self._context)
        self.polarity = RootLuPid_controllerPid_wAttributePolarity(self._context)
        self.error_limit = RootLuPid_controllerPid_wAttributeError_limit(self._context)
        self.reached_err_lim = RootLuPid_controllerPid_wAttributeReached_err_lim(self._context)
        self.feedback_mode = RootLuPid_controllerPid_wAttributeFeedback_mode(self._context)
        self.d_gain = RootLuPid_controllerPid_wAttributeD_gain(self._context)
        self.max_value = RootLuPid_controllerPid_wAttributeMax_value(self._context)
        self.input_set_point = RootLuPid_controllerPid_wAttributeInput_set_point(self._context)
        self.memory_signal_gen_drive_enable = RootLuPid_controllerPid_wAttributeMemory_signal_gen_drive_enable(self._context)
        self.median_filter_enable = RootLuPid_controllerPid_wAttributeMedian_filter_enable(self._context)
        self.slope = RootLuPid_controllerPid_wAttributeSlope(self._context)
        self.set_point_modulation_enable = RootLuPid_controllerPid_wAttributeSet_point_modulation_enable(self._context)
        self.set_point_gain = RootLuPid_controllerPid_wAttributeSet_point_gain(self._context)
        self.p_gain = RootLuPid_controllerPid_wAttributeP_gain(self._context)
        self.reached_max = RootLuPid_controllerPid_wAttributeReached_max(self._context)
        self.select_output = RootLuPid_controllerPid_wAttributeSelect_output(self._context)
        self.offset = RootLuPid_controllerPid_wAttributeOffset(self._context)
        self.memory_signal_gen_position_enable = RootLuPid_controllerPid_wAttributeMemory_signal_gen_position_enable(self._context)


class RootLuPid_controllerPid_wTriggerCalibrate_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.trigger.calibrate_offset'


class RootLuPid_controllerPid_wTriggerClear_pid_accu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.trigger.clear_pid_accu'


class RootLuPid_controllerPid_wTriggerDrive_to_zero_volt_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.trigger.drive_to_zero_volt_position'


class RootLuPid_controllerPid_wTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w.trigger'
        self.drive_to_zero_volt_position = RootLuPid_controllerPid_wTriggerDrive_to_zero_volt_position(self._context)
        self.clear_pid_accu = RootLuPid_controllerPid_wTriggerClear_pid_accu(self._context)
        self.calibrate_offset = RootLuPid_controllerPid_wTriggerCalibrate_offset(self._context)


class RootLuPid_controllerPid_w(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_w'
        self.trigger = RootLuPid_controllerPid_wTrigger(self._context)
        self.attribute = RootLuPid_controllerPid_wAttribute(self._context)


class RootLuPid_controllerPid_xAttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_xAttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuPid_controllerPid_xAttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuPid_controllerPid_xAttributeOffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.offset'


class RootLuPid_controllerPid_xAttributeSelect_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.select_output'


class RootLuPid_controllerPid_xAttributeReached_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.reached_max'


class RootLuPid_controllerPid_xAttributeP_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.p_gain'


class RootLuPid_controllerPid_xAttributeSet_point_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.set_point_gain'


class RootLuPid_controllerPid_xAttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_xAttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.set_point_modulation_enable'
        self.enum = RootLuPid_controllerPid_xAttributeSet_point_modulation_enableEnum(self._context)


class RootLuPid_controllerPid_xAttributeSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.slope'


class RootLuPid_controllerPid_xAttributeMedian_filter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.median_filter_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.median_filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.median_filter_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.median_filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.median_filter_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_xAttributeMedian_filter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.median_filter_enable'
        self.enum = RootLuPid_controllerPid_xAttributeMedian_filter_enableEnum(self._context)


class RootLuPid_controllerPid_xAttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_xAttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuPid_controllerPid_xAttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuPid_controllerPid_xAttributeInput_set_pointEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.input_set_point.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_set_point.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_xAttributeInput_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.input_set_point'
        self.enum = RootLuPid_controllerPid_xAttributeInput_set_pointEnum(self._context)


class RootLuPid_controllerPid_xAttributeMax_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.max_value'


class RootLuPid_controllerPid_xAttributeD_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.d_gain'


class RootLuPid_controllerPid_xAttributeFeedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.feedback_mode'


class RootLuPid_controllerPid_xAttributeReached_err_lim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.reached_err_lim'


class RootLuPid_controllerPid_xAttributeError_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.error_limit'


class RootLuPid_controllerPid_xAttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.polarity'


class RootLuPid_controllerPid_xAttributeCompare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.compare_mode'


class RootLuPid_controllerPid_xAttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.min_value'


class RootLuPid_controllerPid_xAttributeI_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.i_gain'


class RootLuPid_controllerPid_xAttributeInput_actualEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.input_actual.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_x.attribute.input_actual.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_xAttributeInput_actual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.input_actual'
        self.enum = RootLuPid_controllerPid_xAttributeInput_actualEnum(self._context)


class RootLuPid_controllerPid_xAttributeReached_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute.reached_min'


class RootLuPid_controllerPid_xAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.attribute'
        self.reached_min = RootLuPid_controllerPid_xAttributeReached_min(self._context)
        self.input_actual = RootLuPid_controllerPid_xAttributeInput_actual(self._context)
        self.i_gain = RootLuPid_controllerPid_xAttributeI_gain(self._context)
        self.min_value = RootLuPid_controllerPid_xAttributeMin_value(self._context)
        self.compare_mode = RootLuPid_controllerPid_xAttributeCompare_mode(self._context)
        self.polarity = RootLuPid_controllerPid_xAttributePolarity(self._context)
        self.error_limit = RootLuPid_controllerPid_xAttributeError_limit(self._context)
        self.reached_err_lim = RootLuPid_controllerPid_xAttributeReached_err_lim(self._context)
        self.feedback_mode = RootLuPid_controllerPid_xAttributeFeedback_mode(self._context)
        self.d_gain = RootLuPid_controllerPid_xAttributeD_gain(self._context)
        self.max_value = RootLuPid_controllerPid_xAttributeMax_value(self._context)
        self.input_set_point = RootLuPid_controllerPid_xAttributeInput_set_point(self._context)
        self.memory_signal_gen_drive_enable = RootLuPid_controllerPid_xAttributeMemory_signal_gen_drive_enable(self._context)
        self.median_filter_enable = RootLuPid_controllerPid_xAttributeMedian_filter_enable(self._context)
        self.slope = RootLuPid_controllerPid_xAttributeSlope(self._context)
        self.set_point_modulation_enable = RootLuPid_controllerPid_xAttributeSet_point_modulation_enable(self._context)
        self.set_point_gain = RootLuPid_controllerPid_xAttributeSet_point_gain(self._context)
        self.p_gain = RootLuPid_controllerPid_xAttributeP_gain(self._context)
        self.reached_max = RootLuPid_controllerPid_xAttributeReached_max(self._context)
        self.select_output = RootLuPid_controllerPid_xAttributeSelect_output(self._context)
        self.offset = RootLuPid_controllerPid_xAttributeOffset(self._context)
        self.memory_signal_gen_position_enable = RootLuPid_controllerPid_xAttributeMemory_signal_gen_position_enable(self._context)


class RootLuPid_controllerPid_xTriggerCalibrate_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.trigger.calibrate_offset'


class RootLuPid_controllerPid_xTriggerClear_pid_accu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.trigger.clear_pid_accu'


class RootLuPid_controllerPid_xTriggerDrive_to_zero_volt_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.trigger.drive_to_zero_volt_position'


class RootLuPid_controllerPid_xTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x.trigger'
        self.drive_to_zero_volt_position = RootLuPid_controllerPid_xTriggerDrive_to_zero_volt_position(self._context)
        self.clear_pid_accu = RootLuPid_controllerPid_xTriggerClear_pid_accu(self._context)
        self.calibrate_offset = RootLuPid_controllerPid_xTriggerCalibrate_offset(self._context)


class RootLuPid_controllerPid_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_x'
        self.trigger = RootLuPid_controllerPid_xTrigger(self._context)
        self.attribute = RootLuPid_controllerPid_xAttribute(self._context)


class RootLuPid_controllerPid_user2AttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_user2AttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuPid_controllerPid_user2AttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuPid_controllerPid_user2AttributeOffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.offset'


class RootLuPid_controllerPid_user2AttributeSelect_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.select_output'


class RootLuPid_controllerPid_user2AttributeReached_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.reached_max'


class RootLuPid_controllerPid_user2AttributeP_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.p_gain'


class RootLuPid_controllerPid_user2AttributeSet_point_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.set_point_gain'


class RootLuPid_controllerPid_user2AttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_user2AttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.set_point_modulation_enable'
        self.enum = RootLuPid_controllerPid_user2AttributeSet_point_modulation_enableEnum(self._context)


class RootLuPid_controllerPid_user2AttributeSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.slope'


class RootLuPid_controllerPid_user2AttributeMedian_filter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.median_filter_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.median_filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.median_filter_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.median_filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.median_filter_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_user2AttributeMedian_filter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.median_filter_enable'
        self.enum = RootLuPid_controllerPid_user2AttributeMedian_filter_enableEnum(self._context)


class RootLuPid_controllerPid_user2AttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_user2AttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuPid_controllerPid_user2AttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuPid_controllerPid_user2AttributeInput_set_pointEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.input_set_point.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_set_point.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_user2AttributeInput_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.input_set_point'
        self.enum = RootLuPid_controllerPid_user2AttributeInput_set_pointEnum(self._context)


class RootLuPid_controllerPid_user2AttributeMax_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.max_value'


class RootLuPid_controllerPid_user2AttributeD_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.d_gain'


class RootLuPid_controllerPid_user2AttributeFeedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.feedback_mode'


class RootLuPid_controllerPid_user2AttributeReached_err_lim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.reached_err_lim'


class RootLuPid_controllerPid_user2AttributeError_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.error_limit'


class RootLuPid_controllerPid_user2AttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.polarity'


class RootLuPid_controllerPid_user2AttributeCompare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.compare_mode'


class RootLuPid_controllerPid_user2AttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.min_value'


class RootLuPid_controllerPid_user2AttributeI_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.i_gain'


class RootLuPid_controllerPid_user2AttributeInput_actualEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.input_actual.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_user2.attribute.input_actual.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_user2AttributeInput_actual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.input_actual'
        self.enum = RootLuPid_controllerPid_user2AttributeInput_actualEnum(self._context)


class RootLuPid_controllerPid_user2AttributeReached_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute.reached_min'


class RootLuPid_controllerPid_user2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.attribute'
        self.reached_min = RootLuPid_controllerPid_user2AttributeReached_min(self._context)
        self.input_actual = RootLuPid_controllerPid_user2AttributeInput_actual(self._context)
        self.i_gain = RootLuPid_controllerPid_user2AttributeI_gain(self._context)
        self.min_value = RootLuPid_controllerPid_user2AttributeMin_value(self._context)
        self.compare_mode = RootLuPid_controllerPid_user2AttributeCompare_mode(self._context)
        self.polarity = RootLuPid_controllerPid_user2AttributePolarity(self._context)
        self.error_limit = RootLuPid_controllerPid_user2AttributeError_limit(self._context)
        self.reached_err_lim = RootLuPid_controllerPid_user2AttributeReached_err_lim(self._context)
        self.feedback_mode = RootLuPid_controllerPid_user2AttributeFeedback_mode(self._context)
        self.d_gain = RootLuPid_controllerPid_user2AttributeD_gain(self._context)
        self.max_value = RootLuPid_controllerPid_user2AttributeMax_value(self._context)
        self.input_set_point = RootLuPid_controllerPid_user2AttributeInput_set_point(self._context)
        self.memory_signal_gen_drive_enable = RootLuPid_controllerPid_user2AttributeMemory_signal_gen_drive_enable(self._context)
        self.median_filter_enable = RootLuPid_controllerPid_user2AttributeMedian_filter_enable(self._context)
        self.slope = RootLuPid_controllerPid_user2AttributeSlope(self._context)
        self.set_point_modulation_enable = RootLuPid_controllerPid_user2AttributeSet_point_modulation_enable(self._context)
        self.set_point_gain = RootLuPid_controllerPid_user2AttributeSet_point_gain(self._context)
        self.p_gain = RootLuPid_controllerPid_user2AttributeP_gain(self._context)
        self.reached_max = RootLuPid_controllerPid_user2AttributeReached_max(self._context)
        self.select_output = RootLuPid_controllerPid_user2AttributeSelect_output(self._context)
        self.offset = RootLuPid_controllerPid_user2AttributeOffset(self._context)
        self.memory_signal_gen_position_enable = RootLuPid_controllerPid_user2AttributeMemory_signal_gen_position_enable(self._context)


class RootLuPid_controllerPid_user2TriggerCalibrate_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.trigger.calibrate_offset'


class RootLuPid_controllerPid_user2TriggerClear_pid_accu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.trigger.clear_pid_accu'


class RootLuPid_controllerPid_user2TriggerDrive_to_zero_volt_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.trigger.drive_to_zero_volt_position'


class RootLuPid_controllerPid_user2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2.trigger'
        self.drive_to_zero_volt_position = RootLuPid_controllerPid_user2TriggerDrive_to_zero_volt_position(self._context)
        self.clear_pid_accu = RootLuPid_controllerPid_user2TriggerClear_pid_accu(self._context)
        self.calibrate_offset = RootLuPid_controllerPid_user2TriggerCalibrate_offset(self._context)


class RootLuPid_controllerPid_user2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_user2'
        self.trigger = RootLuPid_controllerPid_user2Trigger(self._context)
        self.attribute = RootLuPid_controllerPid_user2Attribute(self._context)


class RootLuPid_controllerPid_yAttributeMemory_signal_gen_position_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_yAttributeMemory_signal_gen_position_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.memory_signal_gen_position_enable'
        self.enum = RootLuPid_controllerPid_yAttributeMemory_signal_gen_position_enableEnum(self._context)


class RootLuPid_controllerPid_yAttributeOffset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.offset'


class RootLuPid_controllerPid_yAttributeSelect_output(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.select_output'


class RootLuPid_controllerPid_yAttributeReached_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.reached_max'


class RootLuPid_controllerPid_yAttributeP_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.p_gain'


class RootLuPid_controllerPid_yAttributeSet_point_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.set_point_gain'


class RootLuPid_controllerPid_yAttributeSet_point_modulation_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_yAttributeSet_point_modulation_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.set_point_modulation_enable'
        self.enum = RootLuPid_controllerPid_yAttributeSet_point_modulation_enableEnum(self._context)


class RootLuPid_controllerPid_yAttributeSlope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.slope'


class RootLuPid_controllerPid_yAttributeMedian_filter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.median_filter_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.median_filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.median_filter_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.median_filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.median_filter_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_yAttributeMedian_filter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.median_filter_enable'
        self.enum = RootLuPid_controllerPid_yAttributeMedian_filter_enableEnum(self._context)


class RootLuPid_controllerPid_yAttributeMemory_signal_gen_drive_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable.enum.enabled', int(new_val))


class RootLuPid_controllerPid_yAttributeMemory_signal_gen_drive_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.memory_signal_gen_drive_enable'
        self.enum = RootLuPid_controllerPid_yAttributeMemory_signal_gen_drive_enableEnum(self._context)


class RootLuPid_controllerPid_yAttributeInput_set_pointEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.input_set_point.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_set_point.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_yAttributeInput_set_point(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.input_set_point'
        self.enum = RootLuPid_controllerPid_yAttributeInput_set_pointEnum(self._context)


class RootLuPid_controllerPid_yAttributeMax_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.max_value'


class RootLuPid_controllerPid_yAttributeD_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.d_gain'


class RootLuPid_controllerPid_yAttributeFeedback_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.feedback_mode'


class RootLuPid_controllerPid_yAttributeReached_err_lim(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.reached_err_lim'


class RootLuPid_controllerPid_yAttributeError_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.error_limit'


class RootLuPid_controllerPid_yAttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.polarity'


class RootLuPid_controllerPid_yAttributeCompare_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.compare_mode'


class RootLuPid_controllerPid_yAttributeMin_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.min_value'


class RootLuPid_controllerPid_yAttributeI_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.i_gain'


class RootLuPid_controllerPid_yAttributeInput_actualEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.input_actual.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.pid_controller.pid_y.attribute.input_actual.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuPid_controllerPid_yAttributeInput_actual(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.input_actual'
        self.enum = RootLuPid_controllerPid_yAttributeInput_actualEnum(self._context)


class RootLuPid_controllerPid_yAttributeReached_min(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute.reached_min'


class RootLuPid_controllerPid_yAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.attribute'
        self.reached_min = RootLuPid_controllerPid_yAttributeReached_min(self._context)
        self.input_actual = RootLuPid_controllerPid_yAttributeInput_actual(self._context)
        self.i_gain = RootLuPid_controllerPid_yAttributeI_gain(self._context)
        self.min_value = RootLuPid_controllerPid_yAttributeMin_value(self._context)
        self.compare_mode = RootLuPid_controllerPid_yAttributeCompare_mode(self._context)
        self.polarity = RootLuPid_controllerPid_yAttributePolarity(self._context)
        self.error_limit = RootLuPid_controllerPid_yAttributeError_limit(self._context)
        self.reached_err_lim = RootLuPid_controllerPid_yAttributeReached_err_lim(self._context)
        self.feedback_mode = RootLuPid_controllerPid_yAttributeFeedback_mode(self._context)
        self.d_gain = RootLuPid_controllerPid_yAttributeD_gain(self._context)
        self.max_value = RootLuPid_controllerPid_yAttributeMax_value(self._context)
        self.input_set_point = RootLuPid_controllerPid_yAttributeInput_set_point(self._context)
        self.memory_signal_gen_drive_enable = RootLuPid_controllerPid_yAttributeMemory_signal_gen_drive_enable(self._context)
        self.median_filter_enable = RootLuPid_controllerPid_yAttributeMedian_filter_enable(self._context)
        self.slope = RootLuPid_controllerPid_yAttributeSlope(self._context)
        self.set_point_modulation_enable = RootLuPid_controllerPid_yAttributeSet_point_modulation_enable(self._context)
        self.set_point_gain = RootLuPid_controllerPid_yAttributeSet_point_gain(self._context)
        self.p_gain = RootLuPid_controllerPid_yAttributeP_gain(self._context)
        self.reached_max = RootLuPid_controllerPid_yAttributeReached_max(self._context)
        self.select_output = RootLuPid_controllerPid_yAttributeSelect_output(self._context)
        self.offset = RootLuPid_controllerPid_yAttributeOffset(self._context)
        self.memory_signal_gen_position_enable = RootLuPid_controllerPid_yAttributeMemory_signal_gen_position_enable(self._context)


class RootLuPid_controllerPid_yTriggerCalibrate_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.trigger.calibrate_offset'


class RootLuPid_controllerPid_yTriggerClear_pid_accu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.trigger.clear_pid_accu'


class RootLuPid_controllerPid_yTriggerDrive_to_zero_volt_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.trigger.drive_to_zero_volt_position'


class RootLuPid_controllerPid_yTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y.trigger'
        self.drive_to_zero_volt_position = RootLuPid_controllerPid_yTriggerDrive_to_zero_volt_position(self._context)
        self.clear_pid_accu = RootLuPid_controllerPid_yTriggerClear_pid_accu(self._context)
        self.calibrate_offset = RootLuPid_controllerPid_yTriggerCalibrate_offset(self._context)


class RootLuPid_controllerPid_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller.pid_y'
        self.trigger = RootLuPid_controllerPid_yTrigger(self._context)
        self.attribute = RootLuPid_controllerPid_yAttribute(self._context)


class RootLuPid_controller(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.pid_controller'
        self.pid_y = RootLuPid_controllerPid_y(self._context)
        self.pid_user2 = RootLuPid_controllerPid_user2(self._context)
        self.pid_x = RootLuPid_controllerPid_x(self._context)
        self.pid_w = RootLuPid_controllerPid_w(self._context)
        self.pid_user1 = RootLuPid_controllerPid_user1(self._context)


class RootLuComp_dcInstanceAttributeComp_dc_gain_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.comp_dc_gain_z'


class RootLuComp_dcInstanceAttributeCoefficient_index(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.coefficient_index'


class RootLuComp_dcInstanceAttributeComp_dc_gain_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.comp_dc_gain_y'


class RootLuComp_dcInstanceAttributeComp_dc_gain_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute.comp_dc_gain_x'


class RootLuComp_dcInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.attribute'
        self.comp_dc_gain_x = RootLuComp_dcInstanceAttributeComp_dc_gain_x(self._context)
        self.comp_dc_gain_y = RootLuComp_dcInstanceAttributeComp_dc_gain_y(self._context)
        self.coefficient_index = RootLuComp_dcInstanceAttributeCoefficient_index(self._context)
        self.comp_dc_gain_z = RootLuComp_dcInstanceAttributeComp_dc_gain_z(self._context)


class RootLuComp_dcInstanceTriggerRead_current_configuration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.read_current_configuration'


class RootLuComp_dcInstanceTriggerStart_comp_dc_calibration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.start_comp_dc_calibration'


class RootLuComp_dcInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.user_abort'


class RootLuComp_dcInstanceTriggerApply_new_nonlinear_configuration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.apply_new_nonlinear_configuration'


class RootLuComp_dcInstanceTriggerApply_new_configuration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger.apply_new_configuration'


class RootLuComp_dcInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance.trigger'
        self.apply_new_configuration = RootLuComp_dcInstanceTriggerApply_new_configuration(self._context)
        self.apply_new_nonlinear_configuration = RootLuComp_dcInstanceTriggerApply_new_nonlinear_configuration(self._context)
        self.user_abort = RootLuComp_dcInstanceTriggerUser_abort(self._context)
        self.start_comp_dc_calibration = RootLuComp_dcInstanceTriggerStart_comp_dc_calibration(self._context)
        self.read_current_configuration = RootLuComp_dcInstanceTriggerRead_current_configuration(self._context)


class RootLuComp_dcInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc.instance'
        self.trigger = RootLuComp_dcInstanceTrigger(self._context)
        self.attribute = RootLuComp_dcInstanceAttribute(self._context)


class RootLuComp_dc(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comp_dc'
        self.instance = RootLuComp_dcInstance(self._context)


class RootLuOscilloscopeInstanceAttributeFast_input_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute.fast_input_vec'


class RootLuOscilloscopeInstanceAttributeCapture_period(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute.capture_period'


class RootLuOscilloscopeInstanceAttributeCapture_duration(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute.capture_duration'


class RootLuOscilloscopeInstanceAttributeHi_res_input_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute.hi_res_input_vec'


class RootLuOscilloscopeInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.attribute'
        self.hi_res_input_vec = RootLuOscilloscopeInstanceAttributeHi_res_input_vec(self._context)
        self.capture_duration = RootLuOscilloscopeInstanceAttributeCapture_duration(self._context)
        self.capture_period = RootLuOscilloscopeInstanceAttributeCapture_period(self._context)
        self.fast_input_vec = RootLuOscilloscopeInstanceAttributeFast_input_vec(self._context)


class RootLuOscilloscopeInstanceTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.trigger.start'


class RootLuOscilloscopeInstanceTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.trigger.abort'


class RootLuOscilloscopeInstanceTriggerToggle_debug_logging(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.trigger.toggle_debug_logging'


class RootLuOscilloscopeInstanceTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.trigger.stop'


class RootLuOscilloscopeInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.trigger'
        self.stop = RootLuOscilloscopeInstanceTriggerStop(self._context)
        self.toggle_debug_logging = RootLuOscilloscopeInstanceTriggerToggle_debug_logging(self._context)
        self.abort = RootLuOscilloscopeInstanceTriggerAbort(self._context)
        self.start = RootLuOscilloscopeInstanceTriggerStart(self._context)


class RootLuOscilloscopeInstanceBusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.busy.is_busy'


class RootLuOscilloscopeInstanceBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance.busy'
        self.is_busy = RootLuOscilloscopeInstanceBusyIs_busy(self._context)


class RootLuOscilloscopeInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope.instance'
        self.busy = RootLuOscilloscopeInstanceBusy(self._context)
        self.trigger = RootLuOscilloscopeInstanceTrigger(self._context)
        self.attribute = RootLuOscilloscopeInstanceAttribute(self._context)


class RootLuOscilloscope(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.oscilloscope'
        self.instance = RootLuOscilloscopeInstance(self._context)


class RootLuAuto_alignmentInstanceAttributeCurrent_optic_componentEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.current_optic_component.enum'

    @property
    def beam_shifter(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.beam_shifter'))

    @beam_shifter.setter
    def beam_shifter(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.beam_shifter', int(new_val))

    @property
    def readout(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.readout'))

    @readout.setter
    def readout(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.readout', int(new_val))

    @property
    def pte(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.pte'))

    @pte.setter
    def pte(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.pte', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.all', int(new_val))

    @property
    def focus(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.focus'))

    @focus.setter
    def focus(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.current_optic_component.enum.focus', int(new_val))


class RootLuAuto_alignmentInstanceAttributeCurrent_optic_component(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.current_optic_component'
        self.enum = RootLuAuto_alignmentInstanceAttributeCurrent_optic_componentEnum(self._context)


class RootLuAuto_alignmentInstanceAttributePte_optical_center_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.pte_optical_center_y'


class RootLuAuto_alignmentInstanceAttributeReadout_optical_center_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.readout_optical_center_y'


class RootLuAuto_alignmentInstanceAttributePte_optical_center_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.pte_optical_center_x'


class RootLuAuto_alignmentInstanceAttributeAlign_stateEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.align_state.enum'

    @property
    def idle(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.align_state.enum.idle'))

    @idle.setter
    def idle(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.align_state.enum.idle', int(new_val))

    @property
    def failed(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.align_state.enum.failed'))

    @failed.setter
    def failed(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.align_state.enum.failed', int(new_val))

    @property
    def aligned_successfully(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.align_state.enum.aligned_successfully'))

    @aligned_successfully.setter
    def aligned_successfully(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.align_state.enum.aligned_successfully', int(new_val))

    @property
    def running(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.align_state.enum.running'))

    @running.setter
    def running(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.align_state.enum.running', int(new_val))


class RootLuAuto_alignmentInstanceAttributeAlign_state(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.align_state'
        self.enum = RootLuAuto_alignmentInstanceAttributeAlign_stateEnum(self._context)


class RootLuAuto_alignmentInstanceAttributeReadout_optical_center_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.readout_optical_center_x'


class RootLuAuto_alignmentInstanceAttributeComponent_stateEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.component_state.enum'

    @property
    def idle_positioned(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.idle_positioned'))

    @idle_positioned.setter
    def idle_positioned(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.idle_positioned', int(new_val))

    @property
    def coarse_positioning_y(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.coarse_positioning_y'))

    @coarse_positioning_y.setter
    def coarse_positioning_y(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.coarse_positioning_y', int(new_val))

    @property
    def configuring(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.configuring'))

    @configuring.setter
    def configuring(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.configuring', int(new_val))

    @property
    def searching(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.searching'))

    @searching.setter
    def searching(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.searching', int(new_val))

    @property
    def optimizing(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.optimizing'))

    @optimizing.setter
    def optimizing(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.optimizing', int(new_val))

    @property
    def idle_not_positioned(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.idle_not_positioned'))

    @idle_not_positioned.setter
    def idle_not_positioned(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.idle_not_positioned', int(new_val))

    @property
    def coarse_positioning_x(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.component_state.enum.coarse_positioning_x'))

    @coarse_positioning_x.setter
    def coarse_positioning_x(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.component_state.enum.coarse_positioning_x', int(new_val))


class RootLuAuto_alignmentInstanceAttributeComponent_state(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.component_state'
        self.enum = RootLuAuto_alignmentInstanceAttributeComponent_stateEnum(self._context)


class RootLuAuto_alignmentInstanceAttributeSearch_algorithmEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.search_algorithm.enum'

    @property
    def cantilever_between_two_reflecting_edges(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.cantilever_between_two_reflecting_edges'))

    @cantilever_between_two_reflecting_edges.setter
    def cantilever_between_two_reflecting_edges(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.cantilever_between_two_reflecting_edges', int(new_val))

    @property
    def bottom_to_top_stepped(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.bottom_to_top_stepped'))

    @bottom_to_top_stepped.setter
    def bottom_to_top_stepped(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.bottom_to_top_stepped', int(new_val))

    @property
    def minimalistic(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.minimalistic'))

    @minimalistic.setter
    def minimalistic(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.minimalistic', int(new_val))

    @property
    def rhombus_spiral(self) -> int:
        return int(self._context.get('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.rhombus_spiral'))

    @rhombus_spiral.setter
    def rhombus_spiral(self, new_val:int):
        self._context.set('root.lu.auto_alignment.instance.attribute.search_algorithm.enum.rhombus_spiral', int(new_val))


class RootLuAuto_alignmentInstanceAttributeSearch_algorithm(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute.search_algorithm'
        self.enum = RootLuAuto_alignmentInstanceAttributeSearch_algorithmEnum(self._context)


class RootLuAuto_alignmentInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.attribute'
        self.search_algorithm = RootLuAuto_alignmentInstanceAttributeSearch_algorithm(self._context)
        self.component_state = RootLuAuto_alignmentInstanceAttributeComponent_state(self._context)
        self.readout_optical_center_x = RootLuAuto_alignmentInstanceAttributeReadout_optical_center_x(self._context)
        self.align_state = RootLuAuto_alignmentInstanceAttributeAlign_state(self._context)
        self.pte_optical_center_x = RootLuAuto_alignmentInstanceAttributePte_optical_center_x(self._context)
        self.readout_optical_center_y = RootLuAuto_alignmentInstanceAttributeReadout_optical_center_y(self._context)
        self.pte_optical_center_y = RootLuAuto_alignmentInstanceAttributePte_optical_center_y(self._context)
        self.current_optic_component = RootLuAuto_alignmentInstanceAttributeCurrent_optic_component(self._context)


class RootLuAuto_alignmentInstanceTriggerStart_optimization(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.start_optimization'


class RootLuAuto_alignmentInstanceTriggerStart_move_to_optical_center(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.start_move_to_optical_center'


class RootLuAuto_alignmentInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.user_abort'


class RootLuAuto_alignmentInstanceTriggerStart_align(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.start_align'


class RootLuAuto_alignmentInstanceTriggerStart_search_algorithm(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger.start_search_algorithm'


class RootLuAuto_alignmentInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance.trigger'
        self.start_search_algorithm = RootLuAuto_alignmentInstanceTriggerStart_search_algorithm(self._context)
        self.start_align = RootLuAuto_alignmentInstanceTriggerStart_align(self._context)
        self.user_abort = RootLuAuto_alignmentInstanceTriggerUser_abort(self._context)
        self.start_move_to_optical_center = RootLuAuto_alignmentInstanceTriggerStart_move_to_optical_center(self._context)
        self.start_optimization = RootLuAuto_alignmentInstanceTriggerStart_optimization(self._context)


class RootLuAuto_alignmentInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment.instance'
        self.trigger = RootLuAuto_alignmentInstanceTrigger(self._context)
        self.attribute = RootLuAuto_alignmentInstanceAttribute(self._context)


class RootLuAuto_alignment(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.auto_alignment'
        self.instance = RootLuAuto_alignmentInstance(self._context)


class RootLuHv_amplifierInstanceAttributeLast_mode_switch_retvalEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.last_mode_switch_retval.enum'

    @property
    def mode_not_supported(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.last_mode_switch_retval.enum.mode_not_supported'))

    @mode_not_supported.setter
    def mode_not_supported(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.last_mode_switch_retval.enum.mode_not_supported', int(new_val))

    @property
    def ok(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.last_mode_switch_retval.enum.ok'))

    @ok.setter
    def ok(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.last_mode_switch_retval.enum.ok', int(new_val))

    @property
    def interlock_open(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.last_mode_switch_retval.enum.interlock_open'))

    @interlock_open.setter
    def interlock_open(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.last_mode_switch_retval.enum.interlock_open', int(new_val))


class RootLuHv_amplifierInstanceAttributeLast_mode_switch_retval(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.last_mode_switch_retval'
        self.enum = RootLuHv_amplifierInstanceAttributeLast_mode_switch_retvalEnum(self._context)


class RootLuHv_amplifierInstanceAttributeInterlock_open_hv_cable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.interlock_open_hv_cable'


class RootLuHv_amplifierInstanceAttributeMode_targetEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.mode_target.enum'

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.mode_target.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.mode_target.enum.off', int(new_val))

    @property
    def lv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.mode_target.enum.lv'))

    @lv.setter
    def lv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.mode_target.enum.lv', int(new_val))

    @property
    def hv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.mode_target.enum.hv'))

    @hv.setter
    def hv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.mode_target.enum.hv', int(new_val))


class RootLuHv_amplifierInstanceAttributeMode_target(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.mode_target'
        self.enum = RootLuHv_amplifierInstanceAttributeMode_targetEnum(self._context)


class RootLuHv_amplifierInstanceAttributeInterlock_open_cx_cable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.interlock_open_cx_cable'


class RootLuHv_amplifierInstanceAttributePower_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.power_enabled'


class RootLuHv_amplifierInstanceAttributeTemperature(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.temperature'


class RootLuHv_amplifierInstanceAttributeZ_modulation_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.z_modulation_enabled'


class RootLuHv_amplifierInstanceAttributeTypeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.type.enum'

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.type.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.type.enum.not_connected', int(new_val))

    @property
    def hv500(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.type.enum.hv500'))

    @hv500.setter
    def hv500(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.type.enum.hv500', int(new_val))

    @property
    def hv180(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.type.enum.hv180'))

    @hv180.setter
    def hv180(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.type.enum.hv180', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.type.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.type.enum.unknown', int(new_val))

    @property
    def a201(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.type.enum.a201'))

    @a201.setter
    def a201(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.type.enum.a201', int(new_val))


class RootLuHv_amplifierInstanceAttributeType(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.type'
        self.enum = RootLuHv_amplifierInstanceAttributeTypeEnum(self._context)


class RootLuHv_amplifierInstanceAttributeOutput_discharge_delay(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.output_discharge_delay'


class RootLuHv_amplifierInstanceAttributeInterlock_open_user(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.interlock_open_user'


class RootLuHv_amplifierInstanceAttributeMode_currentEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.mode_current.enum'

    @property
    def off(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.mode_current.enum.off'))

    @off.setter
    def off(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.mode_current.enum.off', int(new_val))

    @property
    def lv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.mode_current.enum.lv'))

    @lv.setter
    def lv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.mode_current.enum.lv', int(new_val))

    @property
    def hv(self) -> int:
        return int(self._context.get('root.lu.hv_amplifier.instance.attribute.mode_current.enum.hv'))

    @hv.setter
    def hv(self, new_val:int):
        self._context.set('root.lu.hv_amplifier.instance.attribute.mode_current.enum.hv', int(new_val))


class RootLuHv_amplifierInstanceAttributeMode_current(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.mode_current'
        self.enum = RootLuHv_amplifierInstanceAttributeMode_currentEnum(self._context)


class RootLuHv_amplifierInstanceAttributeHv_module_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute.hv_module_enabled'


class RootLuHv_amplifierInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.attribute'
        self.hv_module_enabled = RootLuHv_amplifierInstanceAttributeHv_module_enabled(self._context)
        self.mode_current = RootLuHv_amplifierInstanceAttributeMode_current(self._context)
        self.interlock_open_user = RootLuHv_amplifierInstanceAttributeInterlock_open_user(self._context)
        self.output_discharge_delay = RootLuHv_amplifierInstanceAttributeOutput_discharge_delay(self._context)
        self.type = RootLuHv_amplifierInstanceAttributeType(self._context)
        self.z_modulation_enabled = RootLuHv_amplifierInstanceAttributeZ_modulation_enabled(self._context)
        self.temperature = RootLuHv_amplifierInstanceAttributeTemperature(self._context)
        self.power_enabled = RootLuHv_amplifierInstanceAttributePower_enabled(self._context)
        self.interlock_open_cx_cable = RootLuHv_amplifierInstanceAttributeInterlock_open_cx_cable(self._context)
        self.mode_target = RootLuHv_amplifierInstanceAttributeMode_target(self._context)
        self.interlock_open_hv_cable = RootLuHv_amplifierInstanceAttributeInterlock_open_hv_cable(self._context)
        self.last_mode_switch_retval = RootLuHv_amplifierInstanceAttributeLast_mode_switch_retval(self._context)


class RootLuHv_amplifierInstanceTriggerEnable_module(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.trigger.enable_module'


class RootLuHv_amplifierInstanceTriggerDisable_power(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.trigger.disable_power'


class RootLuHv_amplifierInstanceTriggerEnable_z_modulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.trigger.enable_z_modulation'


class RootLuHv_amplifierInstanceTriggerSwitch_to_target_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.trigger.switch_to_target_mode'


class RootLuHv_amplifierInstanceTriggerDepreciated_6(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.trigger.depreciated_6'


class RootLuHv_amplifierInstanceTriggerDisable_z_modulation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.trigger.disable_z_modulation'


class RootLuHv_amplifierInstanceTriggerEnable_power(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.trigger.enable_power'


class RootLuHv_amplifierInstanceTriggerStart_switch_to_target_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.trigger.start_switch_to_target_mode'


class RootLuHv_amplifierInstanceTriggerDisable_module(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.trigger.disable_module'


class RootLuHv_amplifierInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance.trigger'
        self.disable_module = RootLuHv_amplifierInstanceTriggerDisable_module(self._context)
        self.start_switch_to_target_mode = RootLuHv_amplifierInstanceTriggerStart_switch_to_target_mode(self._context)
        self.enable_power = RootLuHv_amplifierInstanceTriggerEnable_power(self._context)
        self.disable_z_modulation = RootLuHv_amplifierInstanceTriggerDisable_z_modulation(self._context)
        self.depreciated_6 = RootLuHv_amplifierInstanceTriggerDepreciated_6(self._context)
        self.switch_to_target_mode = RootLuHv_amplifierInstanceTriggerSwitch_to_target_mode(self._context)
        self.enable_z_modulation = RootLuHv_amplifierInstanceTriggerEnable_z_modulation(self._context)
        self.disable_power = RootLuHv_amplifierInstanceTriggerDisable_power(self._context)
        self.enable_module = RootLuHv_amplifierInstanceTriggerEnable_module(self._context)


class RootLuHv_amplifierInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier.instance'
        self.trigger = RootLuHv_amplifierInstanceTrigger(self._context)
        self.attribute = RootLuHv_amplifierInstanceAttribute(self._context)


class RootLuHv_amplifier(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.hv_amplifier'
        self.instance = RootLuHv_amplifierInstance(self._context)


class RootLuTimerProc0AttributeCounter_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.counter_value'


class RootLuTimerProc0AttributeModeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.mode.enum'

    @property
    def event_counter(self) -> int:
        return int(self._context.get('root.lu.timer.proc0.attribute.mode.enum.event_counter'))

    @event_counter.setter
    def event_counter(self, new_val:int):
        self._context.set('root.lu.timer.proc0.attribute.mode.enum.event_counter', int(new_val))

    @property
    def delay_timer(self) -> int:
        return int(self._context.get('root.lu.timer.proc0.attribute.mode.enum.delay_timer'))

    @delay_timer.setter
    def delay_timer(self, new_val:int):
        self._context.set('root.lu.timer.proc0.attribute.mode.enum.delay_timer', int(new_val))


class RootLuTimerProc0AttributeMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.mode'
        self.enum = RootLuTimerProc0AttributeModeEnum(self._context)


class RootLuTimerProc0AttributeDelay_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.delay_time'


class RootLuTimerProc0AttributeCounter_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.counter_input.enum'

    @property
    def digital_sync1(self) -> int:
        return int(self._context.get('root.lu.timer.proc0.attribute.counter_input.enum.digital_sync1'))

    @digital_sync1.setter
    def digital_sync1(self, new_val:int):
        self._context.set('root.lu.timer.proc0.attribute.counter_input.enum.digital_sync1', int(new_val))

    @property
    def digital_sync2(self) -> int:
        return int(self._context.get('root.lu.timer.proc0.attribute.counter_input.enum.digital_sync2'))

    @digital_sync2.setter
    def digital_sync2(self, new_val:int):
        self._context.set('root.lu.timer.proc0.attribute.counter_input.enum.digital_sync2', int(new_val))


class RootLuTimerProc0AttributeCounter_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.counter_input'
        self.enum = RootLuTimerProc0AttributeCounter_inputEnum(self._context)


class RootLuTimerProc0AttributeCurrent_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.current_time'


class RootLuTimerProc0AttributeCounter_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute.counter_max'


class RootLuTimerProc0Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.attribute'
        self.counter_max = RootLuTimerProc0AttributeCounter_max(self._context)
        self.current_time = RootLuTimerProc0AttributeCurrent_time(self._context)
        self.counter_input = RootLuTimerProc0AttributeCounter_input(self._context)
        self.delay_time = RootLuTimerProc0AttributeDelay_time(self._context)
        self.mode = RootLuTimerProc0AttributeMode(self._context)
        self.counter_value = RootLuTimerProc0AttributeCounter_value(self._context)


class RootLuTimerProc0TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.trigger.start'


class RootLuTimerProc0TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.trigger.abort'


class RootLuTimerProc0TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.trigger.stop'


class RootLuTimerProc0Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.trigger'
        self.stop = RootLuTimerProc0TriggerStop(self._context)
        self.abort = RootLuTimerProc0TriggerAbort(self._context)
        self.start = RootLuTimerProc0TriggerStart(self._context)


class RootLuTimerProc0BusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.busy.is_busy'


class RootLuTimerProc0Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0.busy'
        self.is_busy = RootLuTimerProc0BusyIs_busy(self._context)


class RootLuTimerProc0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.proc0'
        self.busy = RootLuTimerProc0Busy(self._context)
        self.trigger = RootLuTimerProc0Trigger(self._context)
        self.attribute = RootLuTimerProc0Attribute(self._context)


class RootLuTimerDbg1AttributeCounter_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.counter_value'


class RootLuTimerDbg1AttributeModeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.mode.enum'

    @property
    def event_counter(self) -> int:
        return int(self._context.get('root.lu.timer.dbg1.attribute.mode.enum.event_counter'))

    @event_counter.setter
    def event_counter(self, new_val:int):
        self._context.set('root.lu.timer.dbg1.attribute.mode.enum.event_counter', int(new_val))

    @property
    def delay_timer(self) -> int:
        return int(self._context.get('root.lu.timer.dbg1.attribute.mode.enum.delay_timer'))

    @delay_timer.setter
    def delay_timer(self, new_val:int):
        self._context.set('root.lu.timer.dbg1.attribute.mode.enum.delay_timer', int(new_val))


class RootLuTimerDbg1AttributeMode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.mode'
        self.enum = RootLuTimerDbg1AttributeModeEnum(self._context)


class RootLuTimerDbg1AttributeDelay_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.delay_time'


class RootLuTimerDbg1AttributeCounter_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.counter_input.enum'

    @property
    def digital_sync1(self) -> int:
        return int(self._context.get('root.lu.timer.dbg1.attribute.counter_input.enum.digital_sync1'))

    @digital_sync1.setter
    def digital_sync1(self, new_val:int):
        self._context.set('root.lu.timer.dbg1.attribute.counter_input.enum.digital_sync1', int(new_val))

    @property
    def digital_sync2(self) -> int:
        return int(self._context.get('root.lu.timer.dbg1.attribute.counter_input.enum.digital_sync2'))

    @digital_sync2.setter
    def digital_sync2(self, new_val:int):
        self._context.set('root.lu.timer.dbg1.attribute.counter_input.enum.digital_sync2', int(new_val))


class RootLuTimerDbg1AttributeCounter_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.counter_input'
        self.enum = RootLuTimerDbg1AttributeCounter_inputEnum(self._context)


class RootLuTimerDbg1AttributeCurrent_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.current_time'


class RootLuTimerDbg1AttributeCounter_max(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute.counter_max'


class RootLuTimerDbg1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.attribute'
        self.counter_max = RootLuTimerDbg1AttributeCounter_max(self._context)
        self.current_time = RootLuTimerDbg1AttributeCurrent_time(self._context)
        self.counter_input = RootLuTimerDbg1AttributeCounter_input(self._context)
        self.delay_time = RootLuTimerDbg1AttributeDelay_time(self._context)
        self.mode = RootLuTimerDbg1AttributeMode(self._context)
        self.counter_value = RootLuTimerDbg1AttributeCounter_value(self._context)


class RootLuTimerDbg1TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.trigger.start'


class RootLuTimerDbg1TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.trigger.abort'


class RootLuTimerDbg1TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.trigger.stop'


class RootLuTimerDbg1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.trigger'
        self.stop = RootLuTimerDbg1TriggerStop(self._context)
        self.abort = RootLuTimerDbg1TriggerAbort(self._context)
        self.start = RootLuTimerDbg1TriggerStart(self._context)


class RootLuTimerDbg1BusyIs_busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.busy.is_busy'


class RootLuTimerDbg1Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1.busy'
        self.is_busy = RootLuTimerDbg1BusyIs_busy(self._context)


class RootLuTimerDbg1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer.dbg1'
        self.busy = RootLuTimerDbg1Busy(self._context)
        self.trigger = RootLuTimerDbg1Trigger(self._context)
        self.attribute = RootLuTimerDbg1Attribute(self._context)


class RootLuTimer(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.timer'
        self.dbg1 = RootLuTimerDbg1(self._context)
        self.proc0 = RootLuTimerProc0(self._context)


class RootLuComparatorComparator2AttributeFilter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.filter_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.filter_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.filter_enable.enum.enabled', int(new_val))


class RootLuComparatorComparator2AttributeFilter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.filter_enable'
        self.enum = RootLuComparatorComparator2AttributeFilter_enableEnum(self._context)


class RootLuComparatorComparator2AttributeSourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.source.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.source.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuComparatorComparator2AttributeSource(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.source'
        self.enum = RootLuComparatorComparator2AttributeSourceEnum(self._context)


class RootLuComparatorComparator2AttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.polarity.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.polarity.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.polarity.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator2.attribute.polarity.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator2.attribute.polarity.enum.equal_or_higher_than', int(new_val))


class RootLuComparatorComparator2AttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.polarity'
        self.enum = RootLuComparatorComparator2AttributePolarityEnum(self._context)


class RootLuComparatorComparator2AttributeLevel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.level'


class RootLuComparatorComparator2AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute.filter_coeff_vec'


class RootLuComparatorComparator2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.attribute'
        self.filter_coeff_vec = RootLuComparatorComparator2AttributeFilter_coeff_vec(self._context)
        self.level = RootLuComparatorComparator2AttributeLevel(self._context)
        self.polarity = RootLuComparatorComparator2AttributePolarity(self._context)
        self.source = RootLuComparatorComparator2AttributeSource(self._context)
        self.filter_enable = RootLuComparatorComparator2AttributeFilter_enable(self._context)


class RootLuComparatorComparator2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2.trigger'


class RootLuComparatorComparator2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator2'
        self.trigger = RootLuComparatorComparator2Trigger(self._context)
        self.attribute = RootLuComparatorComparator2Attribute(self._context)


class RootLuComparatorComparator1AttributeFilter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.filter_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.filter_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.filter_enable.enum.enabled', int(new_val))


class RootLuComparatorComparator1AttributeFilter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.filter_enable'
        self.enum = RootLuComparatorComparator1AttributeFilter_enableEnum(self._context)


class RootLuComparatorComparator1AttributeSourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.source.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.source.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuComparatorComparator1AttributeSource(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.source'
        self.enum = RootLuComparatorComparator1AttributeSourceEnum(self._context)


class RootLuComparatorComparator1AttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.polarity.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.polarity.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.polarity.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator1.attribute.polarity.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator1.attribute.polarity.enum.equal_or_higher_than', int(new_val))


class RootLuComparatorComparator1AttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.polarity'
        self.enum = RootLuComparatorComparator1AttributePolarityEnum(self._context)


class RootLuComparatorComparator1AttributeLevel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.level'


class RootLuComparatorComparator1AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute.filter_coeff_vec'


class RootLuComparatorComparator1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.attribute'
        self.filter_coeff_vec = RootLuComparatorComparator1AttributeFilter_coeff_vec(self._context)
        self.level = RootLuComparatorComparator1AttributeLevel(self._context)
        self.polarity = RootLuComparatorComparator1AttributePolarity(self._context)
        self.source = RootLuComparatorComparator1AttributeSource(self._context)
        self.filter_enable = RootLuComparatorComparator1AttributeFilter_enable(self._context)


class RootLuComparatorComparator1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1.trigger'


class RootLuComparatorComparator1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator1'
        self.trigger = RootLuComparatorComparator1Trigger(self._context)
        self.attribute = RootLuComparatorComparator1Attribute(self._context)


class RootLuComparatorComparator3AttributeFilter_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.filter_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.filter_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.filter_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.filter_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.filter_enable.enum.enabled', int(new_val))


class RootLuComparatorComparator3AttributeFilter_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.filter_enable'
        self.enum = RootLuComparatorComparator3AttributeFilter_enableEnum(self._context)


class RootLuComparatorComparator3AttributeSourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.source.enum'

    @property
    def ctrl_x_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_x_out'))

    @ctrl_x_out.setter
    def ctrl_x_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_x_out', int(new_val))

    @property
    def ort_baseline_corrected(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ort_baseline_corrected'))

    @ort_baseline_corrected.setter
    def ort_baseline_corrected(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ort_baseline_corrected', int(new_val))

    @property
    def memory_gen_drive_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_z'))

    @memory_gen_drive_z.setter
    def memory_gen_drive_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_z', int(new_val))

    @property
    def in_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_user4'))

    @in_user4.setter
    def in_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_user4', int(new_val))

    @property
    def ramp_gen_user4(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_user4'))

    @ramp_gen_user4.setter
    def ramp_gen_user4(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_user4', int(new_val))

    @property
    def memory_gen_out7(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_out7'))

    @memory_gen_out7.setter
    def memory_gen_out7(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_out7', int(new_val))

    @property
    def analyzer2_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_y'))

    @analyzer2_y.setter
    def analyzer2_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_y', int(new_val))

    @property
    def analyzer1_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_y'))

    @analyzer1_y.setter
    def analyzer1_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_y', int(new_val))

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_user3', int(new_val))

    @property
    def gen_test_dynamic(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.gen_test_dynamic'))

    @gen_test_dynamic.setter
    def gen_test_dynamic(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.gen_test_dynamic', int(new_val))

    @property
    def memory_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_x'))

    @memory_gen_position_x.setter
    def memory_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_x', int(new_val))

    @property
    def ctrl_user1_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_user1_out'))

    @ctrl_user1_out.setter
    def ctrl_user1_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_user1_out', int(new_val))

    @property
    def analyzer1_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_reference'))

    @analyzer1_reference.setter
    def analyzer1_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_reference', int(new_val))

    @property
    def analyzer2_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_ctrl_amplitude'))

    @analyzer2_ctrl_amplitude.setter
    def analyzer2_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_ctrl_amplitude', int(new_val))

    @property
    def ramp_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_position_y'))

    @ramp_gen_position_y.setter
    def ramp_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_position_y', int(new_val))

    @property
    def in_user2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_user2'))

    @in_user2.setter
    def in_user2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_user2', int(new_val))

    @property
    def ramp_gen_max_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_max_z'))

    @ramp_gen_max_z.setter
    def ramp_gen_max_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_max_z', int(new_val))

    @property
    def ramp_gen_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_tip_voltage'))

    @ramp_gen_tip_voltage.setter
    def ramp_gen_tip_voltage(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_tip_voltage', int(new_val))

    @property
    def in_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_position_z'))

    @in_position_z.setter
    def in_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_position_z', int(new_val))

    @property
    def analyzer2_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_amplitude'))

    @analyzer2_amplitude.setter
    def analyzer2_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_amplitude', int(new_val))

    @property
    def ctrl_z_in(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_in'))

    @ctrl_z_in.setter
    def ctrl_z_in(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_in', int(new_val))

    @property
    def memory_gen_drive_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_y'))

    @memory_gen_drive_y.setter
    def memory_gen_drive_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_y', int(new_val))

    @property
    def analyzer2_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_ctrl_delta_f'))

    @analyzer2_ctrl_delta_f.setter
    def analyzer2_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_ctrl_delta_f', int(new_val))

    @property
    def in_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_position_x'))

    @in_position_x.setter
    def in_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_position_x', int(new_val))

    @property
    def in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_deflection'))

    @in_deflection.setter
    def in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_deflection', int(new_val))

    @property
    def analyzer1_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_amplitude'))

    @analyzer1_amplitude.setter
    def analyzer1_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_amplitude', int(new_val))

    @property
    def in_detector_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_detector_sum'))

    @in_detector_sum.setter
    def in_detector_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_detector_sum', int(new_val))

    @property
    def ort_baseline(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ort_baseline'))

    @ort_baseline.setter
    def ort_baseline(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ort_baseline', int(new_val))

    @property
    def analyzer1_ctrl_amplitude(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_ctrl_amplitude'))

    @analyzer1_ctrl_amplitude.setter
    def analyzer1_ctrl_amplitude(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_ctrl_amplitude', int(new_val))

    @property
    def analyzer1_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_x'))

    @analyzer1_x.setter
    def analyzer1_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_x', int(new_val))

    @property
    def analyzer1_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_phase'))

    @analyzer1_phase.setter
    def analyzer1_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_phase', int(new_val))

    @property
    def in6(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in6'))

    @in6.setter
    def in6(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in6', int(new_val))

    @property
    def fast_in_deflection(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.fast_in_deflection'))

    @fast_in_deflection.setter
    def fast_in_deflection(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.fast_in_deflection', int(new_val))

    @property
    def ramp_gen_approach(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_approach'))

    @ramp_gen_approach.setter
    def ramp_gen_approach(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_approach', int(new_val))

    @property
    def analyzer2_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_x'))

    @analyzer2_x.setter
    def analyzer2_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_x', int(new_val))

    @property
    def fast_in2(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.fast_in2'))

    @fast_in2.setter
    def fast_in2(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.fast_in2', int(new_val))

    @property
    def in_user1(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_user1'))

    @in_user1.setter
    def in_user1(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_user1', int(new_val))

    @property
    def ctrl_z_sum(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_sum'))

    @ctrl_z_sum.setter
    def ctrl_z_sum(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_sum', int(new_val))

    @property
    def memory_gen_drive_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_x'))

    @memory_gen_drive_x.setter
    def memory_gen_drive_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_drive_x', int(new_val))

    @property
    def ramp_gen_alternate_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_alternate_z'))

    @ramp_gen_alternate_z.setter
    def ramp_gen_alternate_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_alternate_z', int(new_val))

    @property
    def ctrl_user2_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_user2_out'))

    @ctrl_user2_out.setter
    def ctrl_user2_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_user2_out', int(new_val))

    @property
    def static(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.static'))

    @static.setter
    def static(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.static', int(new_val))

    @property
    def ramp_gen_test(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_test'))

    @ramp_gen_test.setter
    def ramp_gen_test(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_test', int(new_val))

    @property
    def ramp_gen_position_x(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_position_x'))

    @ramp_gen_position_x.setter
    def ramp_gen_position_x(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_position_x', int(new_val))

    @property
    def ort_excitation(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ort_excitation'))

    @ort_excitation.setter
    def ort_excitation(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ort_excitation', int(new_val))

    @property
    def ctrl_z_nominal(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_nominal'))

    @ctrl_z_nominal.setter
    def ctrl_z_nominal(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_nominal', int(new_val))

    @property
    def ramp_gen_plane_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_plane_z'))

    @ramp_gen_plane_z.setter
    def ramp_gen_plane_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_plane_z', int(new_val))

    @property
    def ramp_gen_ctrl_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_ctrl_z'))

    @ramp_gen_ctrl_z.setter
    def ramp_gen_ctrl_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ramp_gen_ctrl_z', int(new_val))

    @property
    def ort_free_wave(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ort_free_wave'))

    @ort_free_wave.setter
    def ort_free_wave(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ort_free_wave', int(new_val))

    @property
    def analyzer2_reference(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_reference'))

    @analyzer2_reference.setter
    def analyzer2_reference(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_reference', int(new_val))

    @property
    def ort_amplitude_reduction(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ort_amplitude_reduction'))

    @ort_amplitude_reduction.setter
    def ort_amplitude_reduction(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ort_amplitude_reduction', int(new_val))

    @property
    def ort_adhesion_value(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ort_adhesion_value'))

    @ort_adhesion_value.setter
    def ort_adhesion_value(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ort_adhesion_value', int(new_val))

    @property
    def ctrl_z_pid_command(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_pid_command'))

    @ctrl_z_pid_command.setter
    def ctrl_z_pid_command(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_pid_command', int(new_val))

    @property
    def ort_adhesion_position(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ort_adhesion_position'))

    @ort_adhesion_position.setter
    def ort_adhesion_position(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ort_adhesion_position', int(new_val))

    @property
    def in_tip_current(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_tip_current'))

    @in_tip_current.setter
    def in_tip_current(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_tip_current', int(new_val))

    @property
    def ctrl_y_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_y_out'))

    @ctrl_y_out.setter
    def ctrl_y_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_y_out', int(new_val))

    @property
    def memory_gen_position_z(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_z'))

    @memory_gen_position_z.setter
    def memory_gen_position_z(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_z', int(new_val))

    @property
    def ctrl_z_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_out'))

    @ctrl_z_out.setter
    def ctrl_z_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_out', int(new_val))

    @property
    def memory_gen_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_y'))

    @memory_gen_position_y.setter
    def memory_gen_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_position_y', int(new_val))

    @property
    def memory_gen_out8(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_out8'))

    @memory_gen_out8.setter
    def memory_gen_out8(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.memory_gen_out8', int(new_val))

    @property
    def in_position_y(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_position_y'))

    @in_position_y.setter
    def in_position_y(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_position_y', int(new_val))

    @property
    def in_lateral(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.in_lateral'))

    @in_lateral.setter
    def in_lateral(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.in_lateral', int(new_val))

    @property
    def fast_in_user(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.fast_in_user'))

    @fast_in_user.setter
    def fast_in_user(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.fast_in_user', int(new_val))

    @property
    def analyzer2_phase(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_phase'))

    @analyzer2_phase.setter
    def analyzer2_phase(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer2_phase', int(new_val))

    @property
    def ctrl_w_out(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_w_out'))

    @ctrl_w_out.setter
    def ctrl_w_out(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_w_out', int(new_val))

    @property
    def ctrl_z_error(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_error'))

    @ctrl_z_error.setter
    def ctrl_z_error(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.ctrl_z_error', int(new_val))

    @property
    def analyzer1_ctrl_delta_f(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_ctrl_delta_f'))

    @analyzer1_ctrl_delta_f.setter
    def analyzer1_ctrl_delta_f(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.source.enum.analyzer1_ctrl_delta_f', int(new_val))


class RootLuComparatorComparator3AttributeSource(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.source'
        self.enum = RootLuComparatorComparator3AttributeSourceEnum(self._context)


class RootLuComparatorComparator3AttributePolarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.polarity.enum'

    @property
    def equal_or_lower_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.polarity.enum.equal_or_lower_than'))

    @equal_or_lower_than.setter
    def equal_or_lower_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.polarity.enum.equal_or_lower_than', int(new_val))

    @property
    def equal_or_higher_than(self) -> int:
        return int(self._context.get('root.lu.comparator.comparator3.attribute.polarity.enum.equal_or_higher_than'))

    @equal_or_higher_than.setter
    def equal_or_higher_than(self, new_val:int):
        self._context.set('root.lu.comparator.comparator3.attribute.polarity.enum.equal_or_higher_than', int(new_val))


class RootLuComparatorComparator3AttributePolarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.polarity'
        self.enum = RootLuComparatorComparator3AttributePolarityEnum(self._context)


class RootLuComparatorComparator3AttributeLevel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.level'


class RootLuComparatorComparator3AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute.filter_coeff_vec'


class RootLuComparatorComparator3Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.attribute'
        self.filter_coeff_vec = RootLuComparatorComparator3AttributeFilter_coeff_vec(self._context)
        self.level = RootLuComparatorComparator3AttributeLevel(self._context)
        self.polarity = RootLuComparatorComparator3AttributePolarity(self._context)
        self.source = RootLuComparatorComparator3AttributeSource(self._context)
        self.filter_enable = RootLuComparatorComparator3AttributeFilter_enable(self._context)


class RootLuComparatorComparator3Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3.trigger'


class RootLuComparatorComparator3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator.comparator3'
        self.trigger = RootLuComparatorComparator3Trigger(self._context)
        self.attribute = RootLuComparatorComparator3Attribute(self._context)


class RootLuComparator(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.comparator'
        self.comparator3 = RootLuComparatorComparator3(self._context)
        self.comparator1 = RootLuComparatorComparator1(self._context)
        self.comparator2 = RootLuComparatorComparator2(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out2_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum'

    @property
    def event_rising_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_rising_edge_pulse'))

    @event_rising_edge_pulse.setter
    def event_rising_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_rising_edge_pulse', int(new_val))

    @property
    def event_level(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_level'))

    @event_level.setter
    def event_level(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_level', int(new_val))

    @property
    def static_level(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.static_level'))

    @static_level.setter
    def static_level(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.static_level', int(new_val))

    @property
    def event_falling_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_falling_edge_pulse'))

    @event_falling_edge_pulse.setter
    def event_falling_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_falling_edge_pulse', int(new_val))

    @property
    def event_rising_and_falling_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_rising_and_falling_edge_pulse'))

    @event_rising_and_falling_edge_pulse.setter
    def event_rising_and_falling_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_mode.enum.event_rising_and_falling_edge_pulse', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out2_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_mode'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out2_modeEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_in2_levelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_in2_level.enum'

    @property
    def low(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_in2_level.enum.low'))

    @low.setter
    def low(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_in2_level.enum.low', int(new_val))

    @property
    def high(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_in2_level.enum.high'))

    @high.setter
    def high(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_in2_level.enum.high', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_in2_level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_in2_level'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_in2_levelEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out1_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum'

    @property
    def event_rising_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_rising_edge_pulse'))

    @event_rising_edge_pulse.setter
    def event_rising_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_rising_edge_pulse', int(new_val))

    @property
    def event_level(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_level'))

    @event_level.setter
    def event_level(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_level', int(new_val))

    @property
    def static_level(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.static_level'))

    @static_level.setter
    def static_level(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.static_level', int(new_val))

    @property
    def event_falling_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_falling_edge_pulse'))

    @event_falling_edge_pulse.setter
    def event_falling_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_falling_edge_pulse', int(new_val))

    @property
    def event_rising_and_falling_edge_pulse(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_rising_and_falling_edge_pulse'))

    @event_rising_and_falling_edge_pulse.setter
    def event_rising_and_falling_edge_pulse(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_mode.enum.event_rising_and_falling_edge_pulse', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out1_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_mode'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out1_modeEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out2_event_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum'

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator1_true', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ext_event1_true', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def comparator3_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator3_true', int(new_val))

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_user4_done', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.user_abort_event_true', int(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_approach_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ext_event0_true', int(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.data_capture_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.and_mask0_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.timer_proc0_done', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_planez_done', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event1_true', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event2_true', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.soft_event0_true', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.mem_sig_gen_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.unused_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.comparator2_true', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.data_sampling_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_event_source.enum.ramp_gen_test_done', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out2_event_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_event_source'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out2_event_sourceEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_in1_levelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_in1_level.enum'

    @property
    def low(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_in1_level.enum.low'))

    @low.setter
    def low(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_in1_level.enum.low', int(new_val))

    @property
    def high(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_in1_level.enum.high'))

    @high.setter
    def high(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_in1_level.enum.high', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_in1_level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_in1_level'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_in1_levelEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out2_levelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_level.enum'

    @property
    def low(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_level.enum.low'))

    @low.setter
    def low(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_level.enum.low', int(new_val))

    @property
    def high(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_level.enum.high'))

    @high.setter
    def high(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_level.enum.high', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out2_level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_level'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out2_levelEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out1_levelEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_level.enum'

    @property
    def low(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_level.enum.low'))

    @low.setter
    def low(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_level.enum.low', int(new_val))

    @property
    def high(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_level.enum.high'))

    @high.setter
    def high(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_level.enum.high', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out1_level(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_level'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out1_levelEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out2_pulseEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum'

    @property
    def t20_ms(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t20_ms'))

    @t20_ms.setter
    def t20_ms(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t20_ms', int(new_val))

    @property
    def t500_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t500_us'))

    @t500_us.setter
    def t500_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t500_us', int(new_val))

    @property
    def t50_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t50_us'))

    @t50_us.setter
    def t50_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t50_us', int(new_val))

    @property
    def t0_5_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t0_5_us'))

    @t0_5_us.setter
    def t0_5_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t0_5_us', int(new_val))

    @property
    def t5_ms(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t5_ms'))

    @t5_ms.setter
    def t5_ms(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t5_ms', int(new_val))

    @property
    def t5_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t5_us'))

    @t5_us.setter
    def t5_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_pulse.enum.t5_us', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out2_pulse(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_pulse'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out2_pulseEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out1_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_enable.enum.enabled', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out1_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_enable'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out1_enableEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out1_pulseEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum'

    @property
    def t20_ms(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t20_ms'))

    @t20_ms.setter
    def t20_ms(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t20_ms', int(new_val))

    @property
    def t500_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t500_us'))

    @t500_us.setter
    def t500_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t500_us', int(new_val))

    @property
    def t50_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t50_us'))

    @t50_us.setter
    def t50_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t50_us', int(new_val))

    @property
    def t0_5_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t0_5_us'))

    @t0_5_us.setter
    def t0_5_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t0_5_us', int(new_val))

    @property
    def t5_ms(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t5_ms'))

    @t5_ms.setter
    def t5_ms(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t5_ms', int(new_val))

    @property
    def t5_us(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t5_us'))

    @t5_us.setter
    def t5_us(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_pulse.enum.t5_us', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out1_pulse(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_pulse'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out1_pulseEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out1_event_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum'

    @property
    def comparator1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator1_true'))

    @comparator1_true.setter
    def comparator1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator1_true', int(new_val))

    @property
    def ext_event1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ext_event1_true'))

    @ext_event1_true.setter
    def ext_event1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ext_event1_true', int(new_val))

    @property
    def ramp_gen_ctrlz_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_ctrlz_done'))

    @ramp_gen_ctrlz_done.setter
    def ramp_gen_ctrlz_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_ctrlz_done', int(new_val))

    @property
    def comparator3_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator3_true'))

    @comparator3_true.setter
    def comparator3_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator3_true', int(new_val))

    @property
    def ramp_gen_user4_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_user4_done'))

    @ramp_gen_user4_done.setter
    def ramp_gen_user4_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_user4_done', int(new_val))

    @property
    def user_abort_event_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.user_abort_event_true'))

    @user_abort_event_true.setter
    def user_abort_event_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.user_abort_event_true', int(new_val))

    @property
    def z_ctrl_reached_error_limit_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_error_limit_true'))

    @z_ctrl_reached_error_limit_true.setter
    def z_ctrl_reached_error_limit_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_error_limit_true', int(new_val))

    @property
    def timer_dbg1_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.timer_dbg1_done'))

    @timer_dbg1_done.setter
    def timer_dbg1_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.timer_dbg1_done', int(new_val))

    @property
    def ramp_gen_approach_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_approach_done'))

    @ramp_gen_approach_done.setter
    def ramp_gen_approach_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_approach_done', int(new_val))

    @property
    def z_ctrl_reached_max_z_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_max_z_true'))

    @z_ctrl_reached_max_z_true.setter
    def z_ctrl_reached_max_z_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_max_z_true', int(new_val))

    @property
    def ramp_gen_tipvoltage_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_tipvoltage_done'))

    @ramp_gen_tipvoltage_done.setter
    def ramp_gen_tipvoltage_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_tipvoltage_done', int(new_val))

    @property
    def ext_event0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ext_event0_true'))

    @ext_event0_true.setter
    def ext_event0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ext_event0_true', int(new_val))

    @property
    def ramp_gen_positionx_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_positionx_done'))

    @ramp_gen_positionx_done.setter
    def ramp_gen_positionx_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_positionx_done', int(new_val))

    @property
    def ramp_gen_positiony_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_positiony_done'))

    @ramp_gen_positiony_done.setter
    def ramp_gen_positiony_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_positiony_done', int(new_val))

    @property
    def data_capture_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.data_capture_done'))

    @data_capture_done.setter
    def data_capture_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.data_capture_done', int(new_val))

    @property
    def and_mask0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.and_mask0_true'))

    @and_mask0_true.setter
    def and_mask0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.and_mask0_true', int(new_val))

    @property
    def timer_proc0_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.timer_proc0_done'))

    @timer_proc0_done.setter
    def timer_proc0_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.timer_proc0_done', int(new_val))

    @property
    def ramp_gen_planez_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_planez_done'))

    @ramp_gen_planez_done.setter
    def ramp_gen_planez_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_planez_done', int(new_val))

    @property
    def soft_event1_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event1_true'))

    @soft_event1_true.setter
    def soft_event1_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event1_true', int(new_val))

    @property
    def soft_event2_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event2_true'))

    @soft_event2_true.setter
    def soft_event2_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event2_true', int(new_val))

    @property
    def soft_event0_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event0_true'))

    @soft_event0_true.setter
    def soft_event0_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.soft_event0_true', int(new_val))

    @property
    def mem_sig_gen_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.mem_sig_gen_done'))

    @mem_sig_gen_done.setter
    def mem_sig_gen_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.mem_sig_gen_done', int(new_val))

    @property
    def z_ctrl_reached_min_z_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_min_z_true'))

    @z_ctrl_reached_min_z_true.setter
    def z_ctrl_reached_min_z_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.z_ctrl_reached_min_z_true', int(new_val))

    @property
    def unused_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.unused_done'))

    @unused_done.setter
    def unused_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.unused_done', int(new_val))

    @property
    def comparator2_true(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator2_true'))

    @comparator2_true.setter
    def comparator2_true(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.comparator2_true', int(new_val))

    @property
    def ramp_gen_alternatez_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_alternatez_done'))

    @ramp_gen_alternatez_done.setter
    def ramp_gen_alternatez_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_alternatez_done', int(new_val))

    @property
    def ramp_gen_maxz_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_maxz_done'))

    @ramp_gen_maxz_done.setter
    def ramp_gen_maxz_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_maxz_done', int(new_val))

    @property
    def data_sampling_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.data_sampling_done'))

    @data_sampling_done.setter
    def data_sampling_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.data_sampling_done', int(new_val))

    @property
    def ramp_gen_test_done(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_test_done'))

    @ramp_gen_test_done.setter
    def ramp_gen_test_done(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out1_event_source.enum.ramp_gen_test_done', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out1_event_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out1_event_source'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out1_event_sourceEnum(self._context)


class RootLuDigi_user_ioInstanceAttributeDigi_out2_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.digi_user_io.instance.attribute.digi_out2_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.digi_user_io.instance.attribute.digi_out2_enable.enum.enabled', int(new_val))


class RootLuDigi_user_ioInstanceAttributeDigi_out2_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute.digi_out2_enable'
        self.enum = RootLuDigi_user_ioInstanceAttributeDigi_out2_enableEnum(self._context)


class RootLuDigi_user_ioInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.attribute'
        self.digi_out2_enable = RootLuDigi_user_ioInstanceAttributeDigi_out2_enable(self._context)
        self.digi_out1_event_source = RootLuDigi_user_ioInstanceAttributeDigi_out1_event_source(self._context)
        self.digi_out1_pulse = RootLuDigi_user_ioInstanceAttributeDigi_out1_pulse(self._context)
        self.digi_out1_enable = RootLuDigi_user_ioInstanceAttributeDigi_out1_enable(self._context)
        self.digi_out2_pulse = RootLuDigi_user_ioInstanceAttributeDigi_out2_pulse(self._context)
        self.digi_out1_level = RootLuDigi_user_ioInstanceAttributeDigi_out1_level(self._context)
        self.digi_out2_level = RootLuDigi_user_ioInstanceAttributeDigi_out2_level(self._context)
        self.digi_in1_level = RootLuDigi_user_ioInstanceAttributeDigi_in1_level(self._context)
        self.digi_out2_event_source = RootLuDigi_user_ioInstanceAttributeDigi_out2_event_source(self._context)
        self.digi_out1_mode = RootLuDigi_user_ioInstanceAttributeDigi_out1_mode(self._context)
        self.digi_in2_level = RootLuDigi_user_ioInstanceAttributeDigi_in2_level(self._context)
        self.digi_out2_mode = RootLuDigi_user_ioInstanceAttributeDigi_out2_mode(self._context)


class RootLuDigi_user_ioInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance.trigger'


class RootLuDigi_user_ioInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io.instance'
        self.trigger = RootLuDigi_user_ioInstanceTrigger(self._context)
        self.attribute = RootLuDigi_user_ioInstanceAttribute(self._context)


class RootLuDigi_user_io(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.digi_user_io'
        self.instance = RootLuDigi_user_ioInstance(self._context)


class RootLuScanInstanceAttributeFirst_line_repetition(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.first_line_repetition'


class RootLuScanInstanceAttributeGeneratorEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.generator.enum'

    @property
    def linear_line(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.generator.enum.linear_line'))

    @linear_line.setter
    def linear_line(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.generator.enum.linear_line', int(new_val))

    @property
    def generic_frame_fast(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.generator.enum.generic_frame_fast'))

    @generic_frame_fast.setter
    def generic_frame_fast(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.generator.enum.generic_frame_fast', int(new_val))

    @property
    def generic_line(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.generator.enum.generic_line'))

    @generic_line.setter
    def generic_line(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.generator.enum.generic_line', int(new_val))

    @property
    def generic_frame(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.generator.enum.generic_frame'))

    @generic_frame.setter
    def generic_frame(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.generator.enum.generic_frame', int(new_val))


class RootLuScanInstanceAttributeGenerator(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.generator'
        self.enum = RootLuScanInstanceAttributeGeneratorEnum(self._context)


class RootLuScanInstanceAttributeContour_data_channel(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.contour_data_channel'


class RootLuScanInstanceAttributeSlow_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.slow_range'


class RootLuScanInstanceAttributeSnd_scan_dynamic_amplitude_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_dynamic_amplitude_enabled'


class RootLuScanInstanceAttributeSlow_axis_move_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.slow_axis_move_mode.enum'

    @property
    def serpentine(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.serpentine'))

    @serpentine.setter
    def serpentine(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.serpentine', int(new_val))

    @property
    def stepwise(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.stepwise'))

    @stepwise.setter
    def stepwise(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.stepwise', int(new_val))

    @property
    def continuous(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.continuous'))

    @continuous.setter
    def continuous(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.slow_axis_move_mode.enum.continuous', int(new_val))


class RootLuScanInstanceAttributeSlow_axis_move_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.slow_axis_move_mode'
        self.enum = RootLuScanInstanceAttributeSlow_axis_move_modeEnum(self._context)


class RootLuScanInstanceAttributeZ_rotation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.z_rotation'


class RootLuScanInstanceAttributeY_rotation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.y_rotation'


class RootLuScanInstanceAttributeSnd_scan_dynamic_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_dynamic_amplitude'


class RootLuScanInstanceAttributeOverscan_points(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.overscan_points'


class RootLuScanInstanceAttributeSnd_scan_enable_dark_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_enable_dark_mode'


class RootLuScanInstanceAttributeSnd_scan_force_modulation_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_force_modulation_amplitude'


class RootLuScanInstanceAttributeX_rotation(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.x_rotation'


class RootLuScanInstanceAttributeMove_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.move_mode.enum'

    @property
    def controlled(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.move_mode.enum.controlled'))

    @controlled.setter
    def controlled(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.move_mode.enum.controlled', int(new_val))

    @property
    def lifted(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.move_mode.enum.lifted'))

    @lifted.setter
    def lifted(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.move_mode.enum.lifted', int(new_val))


class RootLuScanInstanceAttributeMove_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.move_mode'
        self.enum = RootLuScanInstanceAttributeMove_modeEnum(self._context)


class RootLuScanInstanceAttributeZ_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.z_offset'


class RootLuScanInstanceAttributeSlow_points(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.slow_points'


class RootLuScanInstanceAttributeContour_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.contour_enabled'


class RootLuScanInstanceAttributeSnd_scan_snd_lock_in_excitation_amplitude_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_snd_lock_in_excitation_amplitude_enabled'


class RootLuScanInstanceAttributeFast_range(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.fast_range'


class RootLuScanInstanceAttributeSlow_increment(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.slow_increment'


class RootLuScanInstanceAttributeLinearization_enableEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.linearization_enable.enum'

    @property
    def disabled(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.linearization_enable.enum.disabled'))

    @disabled.setter
    def disabled(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.linearization_enable.enum.disabled', int(new_val))

    @property
    def enabled(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.linearization_enable.enum.enabled'))

    @enabled.setter
    def enabled(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.linearization_enable.enum.enabled', int(new_val))


class RootLuScanInstanceAttributeLinearization_enable(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.linearization_enable'
        self.enum = RootLuScanInstanceAttributeLinearization_enableEnum(self._context)


class RootLuScanInstanceAttributeAuto_readjust_probe_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.auto_readjust_probe_enabled'


class RootLuScanInstanceAttributeScan_direction_slow_axisEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.scan_direction_slow_axis.enum'

    @property
    def downward(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.scan_direction_slow_axis.enum.downward'))

    @downward.setter
    def downward(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.scan_direction_slow_axis.enum.downward', int(new_val))

    @property
    def upward(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.scan_direction_slow_axis.enum.upward'))

    @upward.setter
    def upward(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.scan_direction_slow_axis.enum.upward', int(new_val))


class RootLuScanInstanceAttributeScan_direction_slow_axis(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.scan_direction_slow_axis'
        self.enum = RootLuScanInstanceAttributeScan_direction_slow_axisEnum(self._context)


class RootLuScanInstanceAttributeSnd_scan_force_modulation_amplitude_enabled(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_force_modulation_amplitude_enabled'


class RootLuScanInstanceAttributeXy_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.xy_move_speed'


class RootLuScanInstanceAttributeLine_z_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.line_z_offset'


class RootLuScanInstanceAttributeY_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.y_offset'


class RootLuScanInstanceAttributeX_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.x_offset'


class RootLuScanInstanceAttributeSnd_scan_snd_lock_in_excitation_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_snd_lock_in_excitation_amplitude'


class RootLuScanInstanceAttributeSnd_scan_enable_kpfm(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.snd_scan_enable_kpfm'


class RootLuScanInstanceAttributeFast_points(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.fast_points'


class RootLuScanInstanceAttributeReadjust_lift_height(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.readjust_lift_height'


class RootLuScanInstanceAttributeLine_scanningEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.line_scanning.enum'

    @property
    def interlaced(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.line_scanning.enum.interlaced'))

    @interlaced.setter
    def interlaced(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.line_scanning.enum.interlaced', int(new_val))

    @property
    def standard(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.line_scanning.enum.standard'))

    @standard.setter
    def standard(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.line_scanning.enum.standard', int(new_val))

    @property
    def snd_scan_only(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.line_scanning.enum.snd_scan_only'))

    @snd_scan_only.setter
    def snd_scan_only(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.line_scanning.enum.snd_scan_only', int(new_val))

    @property
    def dual_scan(self) -> int:
        return int(self._context.get('root.lu.scan.instance.attribute.line_scanning.enum.dual_scan'))

    @dual_scan.setter
    def dual_scan(self, new_val:int):
        self._context.set('root.lu.scan.instance.attribute.line_scanning.enum.dual_scan', int(new_val))


class RootLuScanInstanceAttributeLine_scanning(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.line_scanning'
        self.enum = RootLuScanInstanceAttributeLine_scanningEnum(self._context)


class RootLuScanInstanceAttributeTime_per_line(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.time_per_line'


class RootLuScanInstanceAttributeBackward_fast_points(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.backward_fast_points'


class RootLuScanInstanceAttributeZ_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute.z_move_speed'


class RootLuScanInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.attribute'
        self.z_move_speed = RootLuScanInstanceAttributeZ_move_speed(self._context)
        self.backward_fast_points = RootLuScanInstanceAttributeBackward_fast_points(self._context)
        self.time_per_line = RootLuScanInstanceAttributeTime_per_line(self._context)
        self.line_scanning = RootLuScanInstanceAttributeLine_scanning(self._context)
        self.readjust_lift_height = RootLuScanInstanceAttributeReadjust_lift_height(self._context)
        self.fast_points = RootLuScanInstanceAttributeFast_points(self._context)
        self.snd_scan_enable_kpfm = RootLuScanInstanceAttributeSnd_scan_enable_kpfm(self._context)
        self.snd_scan_snd_lock_in_excitation_amplitude = RootLuScanInstanceAttributeSnd_scan_snd_lock_in_excitation_amplitude(self._context)
        self.x_offset = RootLuScanInstanceAttributeX_offset(self._context)
        self.y_offset = RootLuScanInstanceAttributeY_offset(self._context)
        self.line_z_offset = RootLuScanInstanceAttributeLine_z_offset(self._context)
        self.xy_move_speed = RootLuScanInstanceAttributeXy_move_speed(self._context)
        self.snd_scan_force_modulation_amplitude_enabled = RootLuScanInstanceAttributeSnd_scan_force_modulation_amplitude_enabled(self._context)
        self.scan_direction_slow_axis = RootLuScanInstanceAttributeScan_direction_slow_axis(self._context)
        self.auto_readjust_probe_enabled = RootLuScanInstanceAttributeAuto_readjust_probe_enabled(self._context)
        self.linearization_enable = RootLuScanInstanceAttributeLinearization_enable(self._context)
        self.slow_increment = RootLuScanInstanceAttributeSlow_increment(self._context)
        self.fast_range = RootLuScanInstanceAttributeFast_range(self._context)
        self.snd_scan_snd_lock_in_excitation_amplitude_enabled = RootLuScanInstanceAttributeSnd_scan_snd_lock_in_excitation_amplitude_enabled(self._context)
        self.contour_enabled = RootLuScanInstanceAttributeContour_enabled(self._context)
        self.slow_points = RootLuScanInstanceAttributeSlow_points(self._context)
        self.z_offset = RootLuScanInstanceAttributeZ_offset(self._context)
        self.move_mode = RootLuScanInstanceAttributeMove_mode(self._context)
        self.x_rotation = RootLuScanInstanceAttributeX_rotation(self._context)
        self.snd_scan_force_modulation_amplitude = RootLuScanInstanceAttributeSnd_scan_force_modulation_amplitude(self._context)
        self.snd_scan_enable_dark_mode = RootLuScanInstanceAttributeSnd_scan_enable_dark_mode(self._context)
        self.overscan_points = RootLuScanInstanceAttributeOverscan_points(self._context)
        self.snd_scan_dynamic_amplitude = RootLuScanInstanceAttributeSnd_scan_dynamic_amplitude(self._context)
        self.y_rotation = RootLuScanInstanceAttributeY_rotation(self._context)
        self.z_rotation = RootLuScanInstanceAttributeZ_rotation(self._context)
        self.slow_axis_move_mode = RootLuScanInstanceAttributeSlow_axis_move_mode(self._context)
        self.snd_scan_dynamic_amplitude_enabled = RootLuScanInstanceAttributeSnd_scan_dynamic_amplitude_enabled(self._context)
        self.slow_range = RootLuScanInstanceAttributeSlow_range(self._context)
        self.contour_data_channel = RootLuScanInstanceAttributeContour_data_channel(self._context)
        self.generator = RootLuScanInstanceAttributeGenerator(self._context)
        self.first_line_repetition = RootLuScanInstanceAttributeFirst_line_repetition(self._context)


class RootLuScanInstanceTriggerDo_set_xy_sensor_data_acquisition(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.do_set_xy_sensor_data_acquisition'


class RootLuScanInstanceTriggerStart_do_frame(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.start_do_frame'


class RootLuScanInstanceTriggerStart_move_to_start_and_do_frame_quick(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.start_move_to_start_and_do_frame_quick'


class RootLuScanInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.user_abort'


class RootLuScanInstanceTriggerOffset_xyz(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.offset_xyz'


class RootLuScanInstanceTriggerStart_move_to_start(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.start_move_to_start'


class RootLuScanInstanceTriggerStart_move_to_start_and_do_frame(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger.start_move_to_start_and_do_frame'


class RootLuScanInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance.trigger'
        self.start_move_to_start_and_do_frame = RootLuScanInstanceTriggerStart_move_to_start_and_do_frame(self._context)
        self.start_move_to_start = RootLuScanInstanceTriggerStart_move_to_start(self._context)
        self.offset_xyz = RootLuScanInstanceTriggerOffset_xyz(self._context)
        self.user_abort = RootLuScanInstanceTriggerUser_abort(self._context)
        self.start_move_to_start_and_do_frame_quick = RootLuScanInstanceTriggerStart_move_to_start_and_do_frame_quick(self._context)
        self.start_do_frame = RootLuScanInstanceTriggerStart_do_frame(self._context)
        self.do_set_xy_sensor_data_acquisition = RootLuScanInstanceTriggerDo_set_xy_sensor_data_acquisition(self._context)


class RootLuScanInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan.instance'
        self.trigger = RootLuScanInstanceTrigger(self._context)
        self.attribute = RootLuScanInstanceAttribute(self._context)


class RootLuScan(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.scan'
        self.instance = RootLuScanInstance(self._context)


class RootLuDirect_motor_controlInstanceAttributeTransaction_move_destination(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.transaction_move_destination'


class RootLuDirect_motor_controlInstanceAttributeLayout_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.layout_status.enum'

    @property
    def initialized(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.layout_status.enum.initialized'))

    @initialized.setter
    def initialized(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.layout_status.enum.initialized', int(new_val))

    @property
    def uninitialized(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.layout_status.enum.uninitialized'))

    @uninitialized.setter
    def uninitialized(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.layout_status.enum.uninitialized', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeLayout_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.layout_status'
        self.enum = RootLuDirect_motor_controlInstanceAttributeLayout_statusEnum(self._context)


class RootLuDirect_motor_controlInstanceAttributeAxis_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_status.enum'

    @property
    def idle_referenced(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_status.enum.idle_referenced'))

    @idle_referenced.setter
    def idle_referenced(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_status.enum.idle_referenced', int(new_val))

    @property
    def referencing(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_status.enum.referencing'))

    @referencing.setter
    def referencing(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_status.enum.referencing', int(new_val))

    @property
    def idle_unreferenced(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_status.enum.idle_unreferenced'))

    @idle_unreferenced.setter
    def idle_unreferenced(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_status.enum.idle_unreferenced', int(new_val))

    @property
    def moving(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_status.enum.moving'))

    @moving.setter
    def moving(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_status.enum.moving', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeAxis_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_status'
        self.enum = RootLuDirect_motor_controlInstanceAttributeAxis_statusEnum(self._context)


class RootLuDirect_motor_controlInstanceAttributeAxis_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_position'


class RootLuDirect_motor_controlInstanceAttributeAxis_last_reference_move_distance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_last_reference_move_distance'


class RootLuDirect_motor_controlInstanceAttributeAxis_max_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_max_speed'


class RootLuDirect_motor_controlInstanceAttributeTransaction_move_relativeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.transaction_move_relative.enum'

    @property
    def relative(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.transaction_move_relative.enum.relative'))

    @relative.setter
    def relative(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.transaction_move_relative.enum.relative', int(new_val))

    @property
    def absolute(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.transaction_move_relative.enum.absolute'))

    @absolute.setter
    def absolute(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.transaction_move_relative.enum.absolute', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeTransaction_move_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.transaction_move_relative'
        self.enum = RootLuDirect_motor_controlInstanceAttributeTransaction_move_relativeEnum(self._context)


class RootLuDirect_motor_controlInstanceAttributeAxis_speed_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_speed_factor'


class RootLuDirect_motor_controlInstanceAttributeCurrent_axisEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.current_axis.enum'

    @property
    def approach_2(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_2'))

    @approach_2.setter
    def approach_2(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_2', int(new_val))

    @property
    def photodiode_detector_vert(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photodiode_detector_vert'))

    @photodiode_detector_vert.setter
    def photodiode_detector_vert(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photodiode_detector_vert', int(new_val))

    @property
    def beam_deflection_spot_vert(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.beam_deflection_spot_vert'))

    @beam_deflection_spot_vert.setter
    def beam_deflection_spot_vert(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.beam_deflection_spot_vert', int(new_val))

    @property
    def focus_cantilever_light_source(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.focus_cantilever_light_source'))

    @focus_cantilever_light_source.setter
    def focus_cantilever_light_source(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.focus_cantilever_light_source', int(new_val))

    @property
    def x_axis(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.x_axis'))

    @x_axis.setter
    def x_axis(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.x_axis', int(new_val))

    @property
    def y_axis(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.y_axis'))

    @y_axis.setter
    def y_axis(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.y_axis', int(new_val))

    @property
    def approach_0(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_0'))

    @approach_0.setter
    def approach_0(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_0', int(new_val))

    @property
    def approach_1(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_1'))

    @approach_1.setter
    def approach_1(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach_1', int(new_val))

    @property
    def beam_deflection_spot_horz(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.beam_deflection_spot_horz'))

    @beam_deflection_spot_horz.setter
    def beam_deflection_spot_horz(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.beam_deflection_spot_horz', int(new_val))

    @property
    def photothermal_excitation_spot_vert(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photothermal_excitation_spot_vert'))

    @photothermal_excitation_spot_vert.setter
    def photothermal_excitation_spot_vert(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photothermal_excitation_spot_vert', int(new_val))

    @property
    def photothermal_excitation_spot_horz(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photothermal_excitation_spot_horz'))

    @photothermal_excitation_spot_horz.setter
    def photothermal_excitation_spot_horz(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photothermal_excitation_spot_horz', int(new_val))

    @property
    def photodiode_detector_horz(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photodiode_detector_horz'))

    @photodiode_detector_horz.setter
    def photodiode_detector_horz(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.photodiode_detector_horz', int(new_val))

    @property
    def lens_gimbal(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.lens_gimbal'))

    @lens_gimbal.setter
    def lens_gimbal(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.lens_gimbal', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.all', int(new_val))

    @property
    def approach(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach'))

    @approach.setter
    def approach(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_axis.enum.approach', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeCurrent_axis(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.current_axis'
        self.enum = RootLuDirect_motor_controlInstanceAttributeCurrent_axisEnum(self._context)


class RootLuDirect_motor_controlInstanceAttributeAxis_limit_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum'

    @property
    def in_no_limit(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_no_limit'))

    @in_no_limit.setter
    def in_no_limit(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_no_limit', int(new_val))

    @property
    def in_limit(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_limit'))

    @in_limit.setter
    def in_limit(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_limit', int(new_val))

    @property
    def in_upper_limit(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_upper_limit'))

    @in_upper_limit.setter
    def in_upper_limit(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_upper_limit', int(new_val))

    @property
    def in_both_limits(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_both_limits'))

    @in_both_limits.setter
    def in_both_limits(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_both_limits', int(new_val))

    @property
    def in_lower_limit(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_lower_limit'))

    @in_lower_limit.setter
    def in_lower_limit(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.axis_limit_status.enum.in_lower_limit', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeAxis_limit_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.axis_limit_status'
        self.enum = RootLuDirect_motor_controlInstanceAttributeAxis_limit_statusEnum(self._context)


class RootLuDirect_motor_controlInstanceAttributeMove_adjust(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.move_adjust'


class RootLuDirect_motor_controlInstanceAttributeCurrent_layoutEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.current_layout.enum'

    @property
    def p6_mount(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.p6_mount'))

    @p6_mount.setter
    def p6_mount(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.p6_mount', int(new_val))

    @property
    def core(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.core'))

    @core.setter
    def core(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.core', int(new_val))

    @property
    def arac(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.arac'))

    @arac.setter
    def arac(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.arac', int(new_val))

    @property
    def dummy4(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy4'))

    @dummy4.setter
    def dummy4(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy4', int(new_val))

    @property
    def dummy2(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy2'))

    @dummy2.setter
    def dummy2(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy2', int(new_val))

    @property
    def dummy3(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy3'))

    @dummy3.setter
    def dummy3(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.dummy3', int(new_val))

    @property
    def sim(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.sim'))

    @sim.setter
    def sim(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.sim', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.all', int(new_val))

    @property
    def p6(self) -> int:
        return int(self._context.get('root.lu.direct_motor_control.instance.attribute.current_layout.enum.p6'))

    @p6.setter
    def p6(self, new_val:int):
        self._context.set('root.lu.direct_motor_control.instance.attribute.current_layout.enum.p6', int(new_val))


class RootLuDirect_motor_controlInstanceAttributeCurrent_layout(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute.current_layout'
        self.enum = RootLuDirect_motor_controlInstanceAttributeCurrent_layoutEnum(self._context)


class RootLuDirect_motor_controlInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.attribute'
        self.current_layout = RootLuDirect_motor_controlInstanceAttributeCurrent_layout(self._context)
        self.move_adjust = RootLuDirect_motor_controlInstanceAttributeMove_adjust(self._context)
        self.axis_limit_status = RootLuDirect_motor_controlInstanceAttributeAxis_limit_status(self._context)
        self.current_axis = RootLuDirect_motor_controlInstanceAttributeCurrent_axis(self._context)
        self.axis_speed_factor = RootLuDirect_motor_controlInstanceAttributeAxis_speed_factor(self._context)
        self.transaction_move_relative = RootLuDirect_motor_controlInstanceAttributeTransaction_move_relative(self._context)
        self.axis_max_speed = RootLuDirect_motor_controlInstanceAttributeAxis_max_speed(self._context)
        self.axis_last_reference_move_distance = RootLuDirect_motor_controlInstanceAttributeAxis_last_reference_move_distance(self._context)
        self.axis_position = RootLuDirect_motor_controlInstanceAttributeAxis_position(self._context)
        self.axis_status = RootLuDirect_motor_controlInstanceAttributeAxis_status(self._context)
        self.layout_status = RootLuDirect_motor_controlInstanceAttributeLayout_status(self._context)
        self.transaction_move_destination = RootLuDirect_motor_controlInstanceAttributeTransaction_move_destination(self._context)


class RootLuDirect_motor_controlInstanceTriggerPosition_zero_axis(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.position_zero_axis'


class RootLuDirect_motor_controlInstanceTriggerReset_transaction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.reset_transaction'


class RootLuDirect_motor_controlInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.user_abort'


class RootLuDirect_motor_controlInstanceTriggerCommit_transaction(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.commit_transaction'


class RootLuDirect_motor_controlInstanceTriggerSearch_reference(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.search_reference'


class RootLuDirect_motor_controlInstanceTriggerAdd_transaction_move(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger.add_transaction_move'


class RootLuDirect_motor_controlInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance.trigger'
        self.add_transaction_move = RootLuDirect_motor_controlInstanceTriggerAdd_transaction_move(self._context)
        self.search_reference = RootLuDirect_motor_controlInstanceTriggerSearch_reference(self._context)
        self.commit_transaction = RootLuDirect_motor_controlInstanceTriggerCommit_transaction(self._context)
        self.user_abort = RootLuDirect_motor_controlInstanceTriggerUser_abort(self._context)
        self.reset_transaction = RootLuDirect_motor_controlInstanceTriggerReset_transaction(self._context)
        self.position_zero_axis = RootLuDirect_motor_controlInstanceTriggerPosition_zero_axis(self._context)


class RootLuDirect_motor_controlInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control.instance'
        self.trigger = RootLuDirect_motor_controlInstanceTrigger(self._context)
        self.attribute = RootLuDirect_motor_controlInstanceAttribute(self._context)


class RootLuDirect_motor_control(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.direct_motor_control'
        self.instance = RootLuDirect_motor_controlInstance(self._context)


class RootLuAnalog_hi_res_inIn6AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.calib_gain'


class RootLuAnalog_hi_res_inIn6AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.input_gain'


class RootLuAnalog_hi_res_inIn6AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.current_input_value'


class RootLuAnalog_hi_res_inIn6AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.filter_number'


class RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inIn6AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.input_offset'


class RootLuAnalog_hi_res_inIn6AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inIn6AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inIn6AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inIn6AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.in6.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.in6.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inIn6AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inIn6AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inIn6AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.calib_offset'


class RootLuAnalog_hi_res_inIn6AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inIn6Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inIn6AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inIn6AttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inIn6AttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inIn6AttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inIn6AttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inIn6AttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inIn6AttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inIn6AttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inIn6AttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inIn6AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inIn6Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6.trigger'


class RootLuAnalog_hi_res_inIn6(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.in6'
        self.trigger = RootLuAnalog_hi_res_inIn6Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inIn6Attribute(self._context)


class RootLuAnalog_hi_res_inPosition_xAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.calib_gain'


class RootLuAnalog_hi_res_inPosition_xAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.input_gain'


class RootLuAnalog_hi_res_inPosition_xAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.current_input_value'


class RootLuAnalog_hi_res_inPosition_xAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.filter_number'


class RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inPosition_xAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.input_offset'


class RootLuAnalog_hi_res_inPosition_xAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inPosition_xAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inPosition_xAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inPosition_xAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_x.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_x.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inPosition_xAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inPosition_xAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inPosition_xAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.calib_offset'


class RootLuAnalog_hi_res_inPosition_xAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inPosition_xAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inPosition_xAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inPosition_xAttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inPosition_xAttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inPosition_xAttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inPosition_xAttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inPosition_xAttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inPosition_xAttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inPosition_xAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inPosition_xAttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inPosition_xAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inPosition_xTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x.trigger'


class RootLuAnalog_hi_res_inPosition_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_x'
        self.trigger = RootLuAnalog_hi_res_inPosition_xTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inPosition_xAttribute(self._context)


class RootLuAnalog_hi_res_inUser1AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.calib_gain'


class RootLuAnalog_hi_res_inUser1AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.input_gain'


class RootLuAnalog_hi_res_inUser1AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.current_input_value'


class RootLuAnalog_hi_res_inUser1AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.filter_number'


class RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inUser1AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.input_offset'


class RootLuAnalog_hi_res_inUser1AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inUser1AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inUser1AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inUser1AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user1.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user1.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inUser1AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inUser1AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inUser1AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.calib_offset'


class RootLuAnalog_hi_res_inUser1AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inUser1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inUser1AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inUser1AttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inUser1AttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inUser1AttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inUser1AttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inUser1AttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inUser1AttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inUser1AttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inUser1AttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inUser1AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inUser1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1.trigger'


class RootLuAnalog_hi_res_inUser1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user1'
        self.trigger = RootLuAnalog_hi_res_inUser1Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inUser1Attribute(self._context)


class RootLuAnalog_hi_res_inPosition_yAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.calib_gain'


class RootLuAnalog_hi_res_inPosition_yAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.input_gain'


class RootLuAnalog_hi_res_inPosition_yAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.current_input_value'


class RootLuAnalog_hi_res_inPosition_yAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.filter_number'


class RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inPosition_yAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.input_offset'


class RootLuAnalog_hi_res_inPosition_yAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inPosition_yAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inPosition_yAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inPosition_yAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_y.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_y.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inPosition_yAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inPosition_yAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inPosition_yAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.calib_offset'


class RootLuAnalog_hi_res_inPosition_yAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inPosition_yAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inPosition_yAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inPosition_yAttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inPosition_yAttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inPosition_yAttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inPosition_yAttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inPosition_yAttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inPosition_yAttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inPosition_yAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inPosition_yAttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inPosition_yAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inPosition_yTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y.trigger'


class RootLuAnalog_hi_res_inPosition_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_y'
        self.trigger = RootLuAnalog_hi_res_inPosition_yTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inPosition_yAttribute(self._context)


class RootLuAnalog_hi_res_inUser3AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.calib_gain'


class RootLuAnalog_hi_res_inUser3AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.input_gain'


class RootLuAnalog_hi_res_inUser3AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.current_input_value'


class RootLuAnalog_hi_res_inUser3AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.filter_number'


class RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inUser3AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.input_offset'


class RootLuAnalog_hi_res_inUser3AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inUser3AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inUser3AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inUser3AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user3.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user3.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inUser3AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inUser3AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inUser3AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.calib_offset'


class RootLuAnalog_hi_res_inUser3AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inUser3Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inUser3AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inUser3AttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inUser3AttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inUser3AttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inUser3AttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inUser3AttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inUser3AttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inUser3AttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inUser3AttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inUser3AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inUser3Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3.trigger'


class RootLuAnalog_hi_res_inUser3(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user3'
        self.trigger = RootLuAnalog_hi_res_inUser3Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inUser3Attribute(self._context)


class RootLuAnalog_hi_res_inUser4AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.calib_gain'


class RootLuAnalog_hi_res_inUser4AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.input_gain'


class RootLuAnalog_hi_res_inUser4AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.current_input_value'


class RootLuAnalog_hi_res_inUser4AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.filter_number'


class RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inUser4AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.input_offset'


class RootLuAnalog_hi_res_inUser4AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inUser4AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inUser4AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inUser4AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user4.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user4.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inUser4AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inUser4AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inUser4AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.calib_offset'


class RootLuAnalog_hi_res_inUser4AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inUser4Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inUser4AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inUser4AttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inUser4AttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inUser4AttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inUser4AttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inUser4AttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inUser4AttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inUser4AttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inUser4AttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inUser4AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inUser4Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4.trigger'


class RootLuAnalog_hi_res_inUser4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user4'
        self.trigger = RootLuAnalog_hi_res_inUser4Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inUser4Attribute(self._context)


class RootLuAnalog_hi_res_inTip_currentAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.calib_gain'


class RootLuAnalog_hi_res_inTip_currentAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.input_gain'


class RootLuAnalog_hi_res_inTip_currentAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.current_input_value'


class RootLuAnalog_hi_res_inTip_currentAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.filter_number'


class RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inTip_currentAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.input_offset'


class RootLuAnalog_hi_res_inTip_currentAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inTip_currentAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inTip_currentAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inTip_currentAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.tip_current.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.tip_current.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inTip_currentAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inTip_currentAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inTip_currentAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.calib_offset'


class RootLuAnalog_hi_res_inTip_currentAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inTip_currentAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inTip_currentAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inTip_currentAttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inTip_currentAttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inTip_currentAttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inTip_currentAttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inTip_currentAttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inTip_currentAttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inTip_currentAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inTip_currentAttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inTip_currentAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inTip_currentTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current.trigger'


class RootLuAnalog_hi_res_inTip_current(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.tip_current'
        self.trigger = RootLuAnalog_hi_res_inTip_currentTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inTip_currentAttribute(self._context)


class RootLuAnalog_hi_res_inPosition_zAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.calib_gain'


class RootLuAnalog_hi_res_inPosition_zAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.input_gain'


class RootLuAnalog_hi_res_inPosition_zAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.current_input_value'


class RootLuAnalog_hi_res_inPosition_zAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.filter_number'


class RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inPosition_zAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.input_offset'


class RootLuAnalog_hi_res_inPosition_zAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inPosition_zAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inPosition_zAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inPosition_zAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.position_z.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.position_z.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inPosition_zAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inPosition_zAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inPosition_zAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.calib_offset'


class RootLuAnalog_hi_res_inPosition_zAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inPosition_zAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inPosition_zAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inPosition_zAttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inPosition_zAttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inPosition_zAttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inPosition_zAttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inPosition_zAttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inPosition_zAttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inPosition_zAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inPosition_zAttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inPosition_zAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inPosition_zTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z.trigger'


class RootLuAnalog_hi_res_inPosition_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.position_z'
        self.trigger = RootLuAnalog_hi_res_inPosition_zTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inPosition_zAttribute(self._context)


class RootLuAnalog_hi_res_inDeflectionAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.calib_gain'


class RootLuAnalog_hi_res_inDeflectionAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.input_gain'


class RootLuAnalog_hi_res_inDeflectionAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.current_input_value'


class RootLuAnalog_hi_res_inDeflectionAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.filter_number'


class RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inDeflectionAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.input_offset'


class RootLuAnalog_hi_res_inDeflectionAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inDeflectionAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inDeflectionAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inDeflectionAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.deflection.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.deflection.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inDeflectionAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inDeflectionAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inDeflectionAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.calib_offset'


class RootLuAnalog_hi_res_inDeflectionAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inDeflectionAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inDeflectionAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inDeflectionAttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inDeflectionAttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inDeflectionAttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inDeflectionAttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inDeflectionAttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inDeflectionAttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inDeflectionAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inDeflectionAttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inDeflectionAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inDeflectionTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection.trigger'


class RootLuAnalog_hi_res_inDeflection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.deflection'
        self.trigger = RootLuAnalog_hi_res_inDeflectionTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inDeflectionAttribute(self._context)


class RootLuAnalog_hi_res_inMain2AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.calib_gain'


class RootLuAnalog_hi_res_inMain2AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.input_gain'


class RootLuAnalog_hi_res_inMain2AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.current_input_value'


class RootLuAnalog_hi_res_inMain2AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.filter_number'


class RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inMain2AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.input_offset'


class RootLuAnalog_hi_res_inMain2AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inMain2AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inMain2AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inMain2AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.main2.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.main2.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inMain2AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inMain2AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inMain2AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.calib_offset'


class RootLuAnalog_hi_res_inMain2AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inMain2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inMain2AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inMain2AttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inMain2AttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inMain2AttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inMain2AttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inMain2AttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inMain2AttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inMain2AttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inMain2AttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inMain2AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inMain2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2.trigger'


class RootLuAnalog_hi_res_inMain2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.main2'
        self.trigger = RootLuAnalog_hi_res_inMain2Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inMain2Attribute(self._context)


class RootLuAnalog_hi_res_inDetector_sumAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.calib_gain'


class RootLuAnalog_hi_res_inDetector_sumAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.input_gain'


class RootLuAnalog_hi_res_inDetector_sumAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.current_input_value'


class RootLuAnalog_hi_res_inDetector_sumAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.filter_number'


class RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inDetector_sumAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.input_offset'


class RootLuAnalog_hi_res_inDetector_sumAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inDetector_sumAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inDetector_sumAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inDetector_sumAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inDetector_sumAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inDetector_sumAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inDetector_sumAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.calib_offset'


class RootLuAnalog_hi_res_inDetector_sumAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inDetector_sumAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inDetector_sumAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inDetector_sumAttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inDetector_sumAttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inDetector_sumAttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inDetector_sumAttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inDetector_sumAttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inDetector_sumAttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inDetector_sumAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inDetector_sumAttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inDetector_sumAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inDetector_sumTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum.trigger'


class RootLuAnalog_hi_res_inDetector_sum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.detector_sum'
        self.trigger = RootLuAnalog_hi_res_inDetector_sumTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inDetector_sumAttribute(self._context)


class RootLuAnalog_hi_res_inLateralAttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.calib_gain'


class RootLuAnalog_hi_res_inLateralAttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.input_gain'


class RootLuAnalog_hi_res_inLateralAttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.current_input_value'


class RootLuAnalog_hi_res_inLateralAttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.filter_number'


class RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inLateralAttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.input_offset'


class RootLuAnalog_hi_res_inLateralAttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inLateralAttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inLateralAttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inLateralAttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.lateral.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.lateral.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inLateralAttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inLateralAttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inLateralAttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.calib_offset'


class RootLuAnalog_hi_res_inLateralAttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inLateralAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inLateralAttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inLateralAttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inLateralAttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inLateralAttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inLateralAttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inLateralAttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inLateralAttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inLateralAttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inLateralAttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inLateralAttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inLateralTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral.trigger'


class RootLuAnalog_hi_res_inLateral(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.lateral'
        self.trigger = RootLuAnalog_hi_res_inLateralTrigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inLateralAttribute(self._context)


class RootLuAnalog_hi_res_inUser2AttributeCalib_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.calib_gain'


class RootLuAnalog_hi_res_inUser2AttributeInput_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.input_gain'


class RootLuAnalog_hi_res_inUser2AttributeCurrent_input_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.current_input_value'


class RootLuAnalog_hi_res_inUser2AttributeFilter_number(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.filter_number'


class RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_idEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum'

    @property
    def position_x(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_x'))

    @position_x.setter
    def position_x(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_x', int(new_val))

    @property
    def position_y(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_y'))

    @position_y.setter
    def position_y(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_y', int(new_val))

    @property
    def self(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.self'))

    @self.setter
    def self(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.self', int(new_val))

    @property
    def position_z(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_z'))

    @position_z.setter
    def position_z(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id.enum.position_z', int(new_val))


class RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_id'
        self.enum = RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_idEnum(self._context)


class RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_coefficient_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.cross_coupling_axis_coefficient_vec'


class RootLuAnalog_hi_res_inUser2AttributeInput_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.input_offset'


class RootLuAnalog_hi_res_inUser2AttributeCalib_polarityEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.calib_polarity.enum'

    @property
    def positive(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.calib_polarity.enum.positive'))

    @positive.setter
    def positive(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.calib_polarity.enum.positive', int(new_val))

    @property
    def negative(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.calib_polarity.enum.negative'))

    @negative.setter
    def negative(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.calib_polarity.enum.negative', int(new_val))


class RootLuAnalog_hi_res_inUser2AttributeCalib_polarity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.calib_polarity'
        self.enum = RootLuAnalog_hi_res_inUser2AttributeCalib_polarityEnum(self._context)


class RootLuAnalog_hi_res_inUser2AttributeFilter_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.filter_mode.enum'

    @property
    def no_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.filter_mode.enum.no_filter'))

    @no_filter.setter
    def no_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.filter_mode.enum.no_filter', int(new_val))

    @property
    def low_pass_filter(self) -> int:
        return int(self._context.get('root.lu.analog_hi_res_in.user2.attribute.filter_mode.enum.low_pass_filter'))

    @low_pass_filter.setter
    def low_pass_filter(self, new_val:int):
        self._context.set('root.lu.analog_hi_res_in.user2.attribute.filter_mode.enum.low_pass_filter', int(new_val))


class RootLuAnalog_hi_res_inUser2AttributeFilter_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.filter_mode'
        self.enum = RootLuAnalog_hi_res_inUser2AttributeFilter_modeEnum(self._context)


class RootLuAnalog_hi_res_inUser2AttributeCalib_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.calib_offset'


class RootLuAnalog_hi_res_inUser2AttributeFilter_coeff_vec(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute.filter_coeff_vec'


class RootLuAnalog_hi_res_inUser2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.attribute'
        self.filter_coeff_vec = RootLuAnalog_hi_res_inUser2AttributeFilter_coeff_vec(self._context)
        self.calib_offset = RootLuAnalog_hi_res_inUser2AttributeCalib_offset(self._context)
        self.filter_mode = RootLuAnalog_hi_res_inUser2AttributeFilter_mode(self._context)
        self.calib_polarity = RootLuAnalog_hi_res_inUser2AttributeCalib_polarity(self._context)
        self.input_offset = RootLuAnalog_hi_res_inUser2AttributeInput_offset(self._context)
        self.cross_coupling_axis_coefficient_vec = RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_coefficient_vec(self._context)
        self.cross_coupling_axis_id = RootLuAnalog_hi_res_inUser2AttributeCross_coupling_axis_id(self._context)
        self.filter_number = RootLuAnalog_hi_res_inUser2AttributeFilter_number(self._context)
        self.current_input_value = RootLuAnalog_hi_res_inUser2AttributeCurrent_input_value(self._context)
        self.input_gain = RootLuAnalog_hi_res_inUser2AttributeInput_gain(self._context)
        self.calib_gain = RootLuAnalog_hi_res_inUser2AttributeCalib_gain(self._context)


class RootLuAnalog_hi_res_inUser2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2.trigger'


class RootLuAnalog_hi_res_inUser2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in.user2'
        self.trigger = RootLuAnalog_hi_res_inUser2Trigger(self._context)
        self.attribute = RootLuAnalog_hi_res_inUser2Attribute(self._context)


class RootLuAnalog_hi_res_in(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.analog_hi_res_in'
        self.user2 = RootLuAnalog_hi_res_inUser2(self._context)
        self.lateral = RootLuAnalog_hi_res_inLateral(self._context)
        self.detector_sum = RootLuAnalog_hi_res_inDetector_sum(self._context)
        self.main2 = RootLuAnalog_hi_res_inMain2(self._context)
        self.deflection = RootLuAnalog_hi_res_inDeflection(self._context)
        self.position_z = RootLuAnalog_hi_res_inPosition_z(self._context)
        self.tip_current = RootLuAnalog_hi_res_inTip_current(self._context)
        self.user4 = RootLuAnalog_hi_res_inUser4(self._context)
        self.user3 = RootLuAnalog_hi_res_inUser3(self._context)
        self.position_y = RootLuAnalog_hi_res_inPosition_y(self._context)
        self.user1 = RootLuAnalog_hi_res_inUser1(self._context)
        self.position_x = RootLuAnalog_hi_res_inPosition_x(self._context)
        self.in6 = RootLuAnalog_hi_res_inIn6(self._context)


class RootLuCantilever_propertiesInstanceAttributeDeflection_sensitivity(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.deflection_sensitivity'


class RootLuCantilever_propertiesInstanceAttributeWidth(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.width'


class RootLuCantilever_propertiesInstanceAttributeResonance_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.resonance_frequency'


class RootLuCantilever_propertiesInstanceAttributeLength(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.length'


class RootLuCantilever_propertiesInstanceAttributeAlign_strategyEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.align_strategy.enum'

    @property
    def search_for_reflecting_edges(self) -> int:
        return int(self._context.get('root.lu.cantilever_properties.instance.attribute.align_strategy.enum.search_for_reflecting_edges'))

    @search_for_reflecting_edges.setter
    def search_for_reflecting_edges(self, new_val:int):
        self._context.set('root.lu.cantilever_properties.instance.attribute.align_strategy.enum.search_for_reflecting_edges', int(new_val))

    @property
    def standard(self) -> int:
        return int(self._context.get('root.lu.cantilever_properties.instance.attribute.align_strategy.enum.standard'))

    @standard.setter
    def standard(self, new_val:int):
        self._context.set('root.lu.cantilever_properties.instance.attribute.align_strategy.enum.standard', int(new_val))


class RootLuCantilever_propertiesInstanceAttributeAlign_strategy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.align_strategy'
        self.enum = RootLuCantilever_propertiesInstanceAttributeAlign_strategyEnum(self._context)


class RootLuCantilever_propertiesInstanceAttributeSpring_constant(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.spring_constant'


class RootLuCantilever_propertiesInstanceAttributeTip_half_angle(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.tip_half_angle'


class RootLuCantilever_propertiesInstanceAttributeShapeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.shape.enum'

    @property
    def rectangular(self) -> int:
        return int(self._context.get('root.lu.cantilever_properties.instance.attribute.shape.enum.rectangular'))

    @rectangular.setter
    def rectangular(self, new_val:int):
        self._context.set('root.lu.cantilever_properties.instance.attribute.shape.enum.rectangular', int(new_val))

    @property
    def triangular(self) -> int:
        return int(self._context.get('root.lu.cantilever_properties.instance.attribute.shape.enum.triangular'))

    @triangular.setter
    def triangular(self, new_val:int):
        self._context.set('root.lu.cantilever_properties.instance.attribute.shape.enum.triangular', int(new_val))


class RootLuCantilever_propertiesInstanceAttributeShape(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.shape'
        self.enum = RootLuCantilever_propertiesInstanceAttributeShapeEnum(self._context)


class RootLuCantilever_propertiesInstanceAttributeQ_factor(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.q_factor'


class RootLuCantilever_propertiesInstanceAttributeTip_radius(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute.tip_radius'


class RootLuCantilever_propertiesInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.attribute'
        self.tip_radius = RootLuCantilever_propertiesInstanceAttributeTip_radius(self._context)
        self.q_factor = RootLuCantilever_propertiesInstanceAttributeQ_factor(self._context)
        self.shape = RootLuCantilever_propertiesInstanceAttributeShape(self._context)
        self.tip_half_angle = RootLuCantilever_propertiesInstanceAttributeTip_half_angle(self._context)
        self.spring_constant = RootLuCantilever_propertiesInstanceAttributeSpring_constant(self._context)
        self.align_strategy = RootLuCantilever_propertiesInstanceAttributeAlign_strategy(self._context)
        self.length = RootLuCantilever_propertiesInstanceAttributeLength(self._context)
        self.resonance_frequency = RootLuCantilever_propertiesInstanceAttributeResonance_frequency(self._context)
        self.width = RootLuCantilever_propertiesInstanceAttributeWidth(self._context)
        self.deflection_sensitivity = RootLuCantilever_propertiesInstanceAttributeDeflection_sensitivity(self._context)


class RootLuCantilever_propertiesInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance.trigger'


class RootLuCantilever_propertiesInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties.instance'
        self.trigger = RootLuCantilever_propertiesInstanceTrigger(self._context)
        self.attribute = RootLuCantilever_propertiesInstanceAttribute(self._context)


class RootLuCantilever_properties(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.cantilever_properties'
        self.instance = RootLuCantilever_propertiesInstance(self._context)


class RootLuLithoInstanceAttributeMod_rel_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.mod_rel_value'


class RootLuLithoInstanceAttributeOp_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.op_mode.enum'

    @property
    def dynamic_afm(self) -> int:
        return int(self._context.get('root.lu.litho.instance.attribute.op_mode.enum.dynamic_afm'))

    @dynamic_afm.setter
    def dynamic_afm(self, new_val:int):
        self._context.set('root.lu.litho.instance.attribute.op_mode.enum.dynamic_afm', int(new_val))

    @property
    def stm(self) -> int:
        return int(self._context.get('root.lu.litho.instance.attribute.op_mode.enum.stm'))

    @stm.setter
    def stm(self, new_val:int):
        self._context.set('root.lu.litho.instance.attribute.op_mode.enum.stm', int(new_val))

    @property
    def user(self) -> int:
        return int(self._context.get('root.lu.litho.instance.attribute.op_mode.enum.user'))

    @user.setter
    def user(self, new_val:int):
        self._context.set('root.lu.litho.instance.attribute.op_mode.enum.user', int(new_val))

    @property
    def static_afm(self) -> int:
        return int(self._context.get('root.lu.litho.instance.attribute.op_mode.enum.static_afm'))

    @static_afm.setter
    def static_afm(self, new_val:int):
        self._context.set('root.lu.litho.instance.attribute.op_mode.enum.static_afm', int(new_val))

    @property
    def z_modulation(self) -> int:
        return int(self._context.get('root.lu.litho.instance.attribute.op_mode.enum.z_modulation'))

    @z_modulation.setter
    def z_modulation(self, new_val:int):
        self._context.set('root.lu.litho.instance.attribute.op_mode.enum.z_modulation', int(new_val))


class RootLuLithoInstanceAttributeOp_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.op_mode'
        self.enum = RootLuLithoInstanceAttributeOp_modeEnum(self._context)


class RootLuLithoInstanceAttributeXy_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.xy_move_speed'


class RootLuLithoInstanceAttributeAbsolute_y_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.absolute_y_pos'


class RootLuLithoInstanceAttributeZ_move_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.z_move_speed'


class RootLuLithoInstanceAttributeMove_z_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.move_z_pos'


class RootLuLithoInstanceAttributeAbsolute_x_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.absolute_x_pos'


class RootLuLithoInstanceAttributePause_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute.pause_time'


class RootLuLithoInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.attribute'
        self.pause_time = RootLuLithoInstanceAttributePause_time(self._context)
        self.absolute_x_pos = RootLuLithoInstanceAttributeAbsolute_x_pos(self._context)
        self.move_z_pos = RootLuLithoInstanceAttributeMove_z_pos(self._context)
        self.z_move_speed = RootLuLithoInstanceAttributeZ_move_speed(self._context)
        self.absolute_y_pos = RootLuLithoInstanceAttributeAbsolute_y_pos(self._context)
        self.xy_move_speed = RootLuLithoInstanceAttributeXy_move_speed(self._context)
        self.op_mode = RootLuLithoInstanceAttributeOp_mode(self._context)
        self.mod_rel_value = RootLuLithoInstanceAttributeMod_rel_value(self._context)


class RootLuLithoInstanceTriggerMove_to_abs_xy_pos(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.move_to_abs_xy_pos'


class RootLuLithoInstanceTriggerFirst_cmd_item(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.first_cmd_item'


class RootLuLithoInstanceTriggerMove_to_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.move_to_z'


class RootLuLithoInstanceTriggerMake_pause(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.make_pause'


class RootLuLithoInstanceTriggerNext_cmd_item(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.next_cmd_item'


class RootLuLithoInstanceTriggerEnd_sequence(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.end_sequence'


class RootLuLithoInstanceTriggerStart_sequence(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.start_sequence'


class RootLuLithoInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger.user_abort'


class RootLuLithoInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance.trigger'
        self.user_abort = RootLuLithoInstanceTriggerUser_abort(self._context)
        self.start_sequence = RootLuLithoInstanceTriggerStart_sequence(self._context)
        self.end_sequence = RootLuLithoInstanceTriggerEnd_sequence(self._context)
        self.next_cmd_item = RootLuLithoInstanceTriggerNext_cmd_item(self._context)
        self.make_pause = RootLuLithoInstanceTriggerMake_pause(self._context)
        self.move_to_z = RootLuLithoInstanceTriggerMove_to_z(self._context)
        self.first_cmd_item = RootLuLithoInstanceTriggerFirst_cmd_item(self._context)
        self.move_to_abs_xy_pos = RootLuLithoInstanceTriggerMove_to_abs_xy_pos(self._context)


class RootLuLithoInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho.instance'
        self.trigger = RootLuLithoInstanceTrigger(self._context)
        self.attribute = RootLuLithoInstanceAttribute(self._context)


class RootLuLitho(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.litho'
        self.instance = RootLuLithoInstance(self._context)


class RootLuFrequency_sweep_genInstanceAttributeSensor_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.sensor_amplitude'


class RootLuFrequency_sweep_genInstanceAttributeStep_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.step_time'


class RootLuFrequency_sweep_genInstanceAttributeStart_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.start_frequency'


class RootLuFrequency_sweep_genInstanceAttributeSweep_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.sweep_amplitude'


class RootLuFrequency_sweep_genInstanceAttributeLu_sig_analyzer_inst_noEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no.enum'

    @property
    def inst1(self) -> int:
        return int(self._context.get('root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no.enum.inst1'))

    @inst1.setter
    def inst1(self, new_val:int):
        self._context.set('root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no.enum.inst1', int(new_val))

    @property
    def inst2(self) -> int:
        return int(self._context.get('root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no.enum.inst2'))

    @inst2.setter
    def inst2(self, new_val:int):
        self._context.set('root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no.enum.inst2', int(new_val))


class RootLuFrequency_sweep_genInstanceAttributeLu_sig_analyzer_inst_no(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.lu_sig_analyzer_inst_no'
        self.enum = RootLuFrequency_sweep_genInstanceAttributeLu_sig_analyzer_inst_noEnum(self._context)


class RootLuFrequency_sweep_genInstanceAttributeData_group_id(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.data_group_id'


class RootLuFrequency_sweep_genInstanceAttributeSettle_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.settle_time'


class RootLuFrequency_sweep_genInstanceAttributeEnd_frequency(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.end_frequency'


class RootLuFrequency_sweep_genInstanceAttributeData_points(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.data_points'


class RootLuFrequency_sweep_genInstanceAttributeReference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute.reference_amplitude'


class RootLuFrequency_sweep_genInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.attribute'
        self.reference_amplitude = RootLuFrequency_sweep_genInstanceAttributeReference_amplitude(self._context)
        self.data_points = RootLuFrequency_sweep_genInstanceAttributeData_points(self._context)
        self.end_frequency = RootLuFrequency_sweep_genInstanceAttributeEnd_frequency(self._context)
        self.settle_time = RootLuFrequency_sweep_genInstanceAttributeSettle_time(self._context)
        self.data_group_id = RootLuFrequency_sweep_genInstanceAttributeData_group_id(self._context)
        self.lu_sig_analyzer_inst_no = RootLuFrequency_sweep_genInstanceAttributeLu_sig_analyzer_inst_no(self._context)
        self.sweep_amplitude = RootLuFrequency_sweep_genInstanceAttributeSweep_amplitude(self._context)
        self.start_frequency = RootLuFrequency_sweep_genInstanceAttributeStart_frequency(self._context)
        self.step_time = RootLuFrequency_sweep_genInstanceAttributeStep_time(self._context)
        self.sensor_amplitude = RootLuFrequency_sweep_genInstanceAttributeSensor_amplitude(self._context)


class RootLuFrequency_sweep_genInstanceTriggerStart_set_reference_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.trigger.start_set_reference_amplitude'


class RootLuFrequency_sweep_genInstanceTriggerUser_abort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.trigger.user_abort'


class RootLuFrequency_sweep_genInstanceTriggerStart_set_sensor_amplitude(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.trigger.start_set_sensor_amplitude'


class RootLuFrequency_sweep_genInstanceTriggerStart_frequency_sweep(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.trigger.start_frequency_sweep'


class RootLuFrequency_sweep_genInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance.trigger'
        self.start_frequency_sweep = RootLuFrequency_sweep_genInstanceTriggerStart_frequency_sweep(self._context)
        self.start_set_sensor_amplitude = RootLuFrequency_sweep_genInstanceTriggerStart_set_sensor_amplitude(self._context)
        self.user_abort = RootLuFrequency_sweep_genInstanceTriggerUser_abort(self._context)
        self.start_set_reference_amplitude = RootLuFrequency_sweep_genInstanceTriggerStart_set_reference_amplitude(self._context)


class RootLuFrequency_sweep_genInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen.instance'
        self.trigger = RootLuFrequency_sweep_genInstanceTrigger(self._context)
        self.attribute = RootLuFrequency_sweep_genInstanceAttribute(self._context)


class RootLuFrequency_sweep_gen(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.frequency_sweep_gen'
        self.instance = RootLuFrequency_sweep_genInstance(self._context)


class RootLuRamp_generatorTestAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.lower_limit'


class RootLuRamp_generatorTestAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorTestAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.status'
        self.enum = RootLuRamp_generatorTestAttributeStatusEnum(self._context)


class RootLuRamp_generatorTestAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorTestAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorTestAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorTestAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.current_value'


class RootLuRamp_generatorTestAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.end_value_absolute'


class RootLuRamp_generatorTestAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.end_value_relative'


class RootLuRamp_generatorTestAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.test.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.test.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorTestAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.moving_mode'
        self.enum = RootLuRamp_generatorTestAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorTestAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.moving_speed'


class RootLuRamp_generatorTestAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.upper_limit'


class RootLuRamp_generatorTestAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute.moving_time'


class RootLuRamp_generatorTestAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.attribute'
        self.moving_time = RootLuRamp_generatorTestAttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorTestAttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorTestAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorTestAttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorTestAttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorTestAttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorTestAttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorTestAttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorTestAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorTestAttributeLower_limit(self._context)


class RootLuRamp_generatorTestTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.trigger.prepare'


class RootLuRamp_generatorTestTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.trigger.abort'


class RootLuRamp_generatorTestTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.trigger.start'


class RootLuRamp_generatorTestTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.trigger.stop'


class RootLuRamp_generatorTestTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.trigger'
        self.stop = RootLuRamp_generatorTestTriggerStop(self._context)
        self.start = RootLuRamp_generatorTestTriggerStart(self._context)
        self.abort = RootLuRamp_generatorTestTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorTestTriggerPrepare(self._context)


class RootLuRamp_generatorTestBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.busy.is_moving'


class RootLuRamp_generatorTestBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test.busy'
        self.is_moving = RootLuRamp_generatorTestBusyIs_moving(self._context)


class RootLuRamp_generatorTest(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.test'
        self.busy = RootLuRamp_generatorTestBusy(self._context)
        self.trigger = RootLuRamp_generatorTestTrigger(self._context)
        self.attribute = RootLuRamp_generatorTestAttribute(self._context)


class RootLuRamp_generatorAlternate_zAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.lower_limit'


class RootLuRamp_generatorAlternate_zAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorAlternate_zAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.status'
        self.enum = RootLuRamp_generatorAlternate_zAttributeStatusEnum(self._context)


class RootLuRamp_generatorAlternate_zAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorAlternate_zAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorAlternate_zAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorAlternate_zAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.current_value'


class RootLuRamp_generatorAlternate_zAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.end_value_absolute'


class RootLuRamp_generatorAlternate_zAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.end_value_relative'


class RootLuRamp_generatorAlternate_zAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.alternate_z.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.alternate_z.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorAlternate_zAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.moving_mode'
        self.enum = RootLuRamp_generatorAlternate_zAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorAlternate_zAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.moving_speed'


class RootLuRamp_generatorAlternate_zAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.upper_limit'


class RootLuRamp_generatorAlternate_zAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute.moving_time'


class RootLuRamp_generatorAlternate_zAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.attribute'
        self.moving_time = RootLuRamp_generatorAlternate_zAttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorAlternate_zAttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorAlternate_zAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorAlternate_zAttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorAlternate_zAttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorAlternate_zAttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorAlternate_zAttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorAlternate_zAttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorAlternate_zAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorAlternate_zAttributeLower_limit(self._context)


class RootLuRamp_generatorAlternate_zTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.trigger.prepare'


class RootLuRamp_generatorAlternate_zTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.trigger.abort'


class RootLuRamp_generatorAlternate_zTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.trigger.start'


class RootLuRamp_generatorAlternate_zTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.trigger.stop'


class RootLuRamp_generatorAlternate_zTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.trigger'
        self.stop = RootLuRamp_generatorAlternate_zTriggerStop(self._context)
        self.start = RootLuRamp_generatorAlternate_zTriggerStart(self._context)
        self.abort = RootLuRamp_generatorAlternate_zTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorAlternate_zTriggerPrepare(self._context)


class RootLuRamp_generatorAlternate_zBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.busy.is_moving'


class RootLuRamp_generatorAlternate_zBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z.busy'
        self.is_moving = RootLuRamp_generatorAlternate_zBusyIs_moving(self._context)


class RootLuRamp_generatorAlternate_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.alternate_z'
        self.busy = RootLuRamp_generatorAlternate_zBusy(self._context)
        self.trigger = RootLuRamp_generatorAlternate_zTrigger(self._context)
        self.attribute = RootLuRamp_generatorAlternate_zAttribute(self._context)


class RootLuRamp_generatorUser1AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.lower_limit'


class RootLuRamp_generatorUser1AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorUser1AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.status'
        self.enum = RootLuRamp_generatorUser1AttributeStatusEnum(self._context)


class RootLuRamp_generatorUser1AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorUser1AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorUser1AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorUser1AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.current_value'


class RootLuRamp_generatorUser1AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.end_value_absolute'


class RootLuRamp_generatorUser1AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.end_value_relative'


class RootLuRamp_generatorUser1AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user1.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user1.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorUser1AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.moving_mode'
        self.enum = RootLuRamp_generatorUser1AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorUser1AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.moving_speed'


class RootLuRamp_generatorUser1AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.upper_limit'


class RootLuRamp_generatorUser1AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute.moving_time'


class RootLuRamp_generatorUser1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.attribute'
        self.moving_time = RootLuRamp_generatorUser1AttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorUser1AttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorUser1AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorUser1AttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorUser1AttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorUser1AttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorUser1AttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorUser1AttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorUser1AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorUser1AttributeLower_limit(self._context)


class RootLuRamp_generatorUser1TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.trigger.prepare'


class RootLuRamp_generatorUser1TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.trigger.abort'


class RootLuRamp_generatorUser1TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.trigger.start'


class RootLuRamp_generatorUser1TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.trigger.stop'


class RootLuRamp_generatorUser1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.trigger'
        self.stop = RootLuRamp_generatorUser1TriggerStop(self._context)
        self.start = RootLuRamp_generatorUser1TriggerStart(self._context)
        self.abort = RootLuRamp_generatorUser1TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorUser1TriggerPrepare(self._context)


class RootLuRamp_generatorUser1BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.busy.is_moving'


class RootLuRamp_generatorUser1Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1.busy'
        self.is_moving = RootLuRamp_generatorUser1BusyIs_moving(self._context)


class RootLuRamp_generatorUser1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user1'
        self.busy = RootLuRamp_generatorUser1Busy(self._context)
        self.trigger = RootLuRamp_generatorUser1Trigger(self._context)
        self.attribute = RootLuRamp_generatorUser1Attribute(self._context)


class RootLuRamp_generatorVirtual0AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.lower_limit'


class RootLuRamp_generatorVirtual0AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorVirtual0AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.status'
        self.enum = RootLuRamp_generatorVirtual0AttributeStatusEnum(self._context)


class RootLuRamp_generatorVirtual0AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorVirtual0AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorVirtual0AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorVirtual0AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.current_value'


class RootLuRamp_generatorVirtual0AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.end_value_absolute'


class RootLuRamp_generatorVirtual0AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.end_value_relative'


class RootLuRamp_generatorVirtual0AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual0.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual0.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorVirtual0AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.moving_mode'
        self.enum = RootLuRamp_generatorVirtual0AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorVirtual0AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.moving_speed'


class RootLuRamp_generatorVirtual0AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.upper_limit'


class RootLuRamp_generatorVirtual0AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute.moving_time'


class RootLuRamp_generatorVirtual0Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.attribute'
        self.moving_time = RootLuRamp_generatorVirtual0AttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorVirtual0AttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorVirtual0AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorVirtual0AttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorVirtual0AttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorVirtual0AttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorVirtual0AttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorVirtual0AttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorVirtual0AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorVirtual0AttributeLower_limit(self._context)


class RootLuRamp_generatorVirtual0TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.trigger.prepare'


class RootLuRamp_generatorVirtual0TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.trigger.abort'


class RootLuRamp_generatorVirtual0TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.trigger.start'


class RootLuRamp_generatorVirtual0TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.trigger.stop'


class RootLuRamp_generatorVirtual0Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.trigger'
        self.stop = RootLuRamp_generatorVirtual0TriggerStop(self._context)
        self.start = RootLuRamp_generatorVirtual0TriggerStart(self._context)
        self.abort = RootLuRamp_generatorVirtual0TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorVirtual0TriggerPrepare(self._context)


class RootLuRamp_generatorVirtual0BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.busy.is_moving'


class RootLuRamp_generatorVirtual0Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0.busy'
        self.is_moving = RootLuRamp_generatorVirtual0BusyIs_moving(self._context)


class RootLuRamp_generatorVirtual0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual0'
        self.busy = RootLuRamp_generatorVirtual0Busy(self._context)
        self.trigger = RootLuRamp_generatorVirtual0Trigger(self._context)
        self.attribute = RootLuRamp_generatorVirtual0Attribute(self._context)


class RootLuRamp_generatorTip_voltageAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.lower_limit'


class RootLuRamp_generatorTip_voltageAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorTip_voltageAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.status'
        self.enum = RootLuRamp_generatorTip_voltageAttributeStatusEnum(self._context)


class RootLuRamp_generatorTip_voltageAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorTip_voltageAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorTip_voltageAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorTip_voltageAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.current_value'


class RootLuRamp_generatorTip_voltageAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.end_value_absolute'


class RootLuRamp_generatorTip_voltageAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.end_value_relative'


class RootLuRamp_generatorTip_voltageAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.tip_voltage.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.tip_voltage.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorTip_voltageAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.moving_mode'
        self.enum = RootLuRamp_generatorTip_voltageAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorTip_voltageAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.moving_speed'


class RootLuRamp_generatorTip_voltageAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.upper_limit'


class RootLuRamp_generatorTip_voltageAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute.moving_time'


class RootLuRamp_generatorTip_voltageAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.attribute'
        self.moving_time = RootLuRamp_generatorTip_voltageAttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorTip_voltageAttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorTip_voltageAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorTip_voltageAttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorTip_voltageAttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorTip_voltageAttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorTip_voltageAttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorTip_voltageAttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorTip_voltageAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorTip_voltageAttributeLower_limit(self._context)


class RootLuRamp_generatorTip_voltageTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.trigger.prepare'


class RootLuRamp_generatorTip_voltageTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.trigger.abort'


class RootLuRamp_generatorTip_voltageTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.trigger.start'


class RootLuRamp_generatorTip_voltageTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.trigger.stop'


class RootLuRamp_generatorTip_voltageTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.trigger'
        self.stop = RootLuRamp_generatorTip_voltageTriggerStop(self._context)
        self.start = RootLuRamp_generatorTip_voltageTriggerStart(self._context)
        self.abort = RootLuRamp_generatorTip_voltageTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorTip_voltageTriggerPrepare(self._context)


class RootLuRamp_generatorTip_voltageBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.busy.is_moving'


class RootLuRamp_generatorTip_voltageBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage.busy'
        self.is_moving = RootLuRamp_generatorTip_voltageBusyIs_moving(self._context)


class RootLuRamp_generatorTip_voltage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.tip_voltage'
        self.busy = RootLuRamp_generatorTip_voltageBusy(self._context)
        self.trigger = RootLuRamp_generatorTip_voltageTrigger(self._context)
        self.attribute = RootLuRamp_generatorTip_voltageAttribute(self._context)


class RootLuRamp_generatorPlane_zAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.lower_limit'


class RootLuRamp_generatorPlane_zAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorPlane_zAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.status'
        self.enum = RootLuRamp_generatorPlane_zAttributeStatusEnum(self._context)


class RootLuRamp_generatorPlane_zAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorPlane_zAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorPlane_zAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorPlane_zAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.current_value'


class RootLuRamp_generatorPlane_zAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.end_value_absolute'


class RootLuRamp_generatorPlane_zAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.end_value_relative'


class RootLuRamp_generatorPlane_zAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.plane_z.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.plane_z.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorPlane_zAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.moving_mode'
        self.enum = RootLuRamp_generatorPlane_zAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorPlane_zAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.moving_speed'


class RootLuRamp_generatorPlane_zAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.upper_limit'


class RootLuRamp_generatorPlane_zAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute.moving_time'


class RootLuRamp_generatorPlane_zAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.attribute'
        self.moving_time = RootLuRamp_generatorPlane_zAttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorPlane_zAttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorPlane_zAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorPlane_zAttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorPlane_zAttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorPlane_zAttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorPlane_zAttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorPlane_zAttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorPlane_zAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorPlane_zAttributeLower_limit(self._context)


class RootLuRamp_generatorPlane_zTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.trigger.prepare'


class RootLuRamp_generatorPlane_zTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.trigger.abort'


class RootLuRamp_generatorPlane_zTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.trigger.start'


class RootLuRamp_generatorPlane_zTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.trigger.stop'


class RootLuRamp_generatorPlane_zTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.trigger'
        self.stop = RootLuRamp_generatorPlane_zTriggerStop(self._context)
        self.start = RootLuRamp_generatorPlane_zTriggerStart(self._context)
        self.abort = RootLuRamp_generatorPlane_zTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorPlane_zTriggerPrepare(self._context)


class RootLuRamp_generatorPlane_zBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.busy.is_moving'


class RootLuRamp_generatorPlane_zBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z.busy'
        self.is_moving = RootLuRamp_generatorPlane_zBusyIs_moving(self._context)


class RootLuRamp_generatorPlane_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.plane_z'
        self.busy = RootLuRamp_generatorPlane_zBusy(self._context)
        self.trigger = RootLuRamp_generatorPlane_zTrigger(self._context)
        self.attribute = RootLuRamp_generatorPlane_zAttribute(self._context)


class RootLuRamp_generatorUser4AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.lower_limit'


class RootLuRamp_generatorUser4AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorUser4AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.status'
        self.enum = RootLuRamp_generatorUser4AttributeStatusEnum(self._context)


class RootLuRamp_generatorUser4AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorUser4AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorUser4AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorUser4AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.current_value'


class RootLuRamp_generatorUser4AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.end_value_absolute'


class RootLuRamp_generatorUser4AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.end_value_relative'


class RootLuRamp_generatorUser4AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user4.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user4.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorUser4AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.moving_mode'
        self.enum = RootLuRamp_generatorUser4AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorUser4AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.moving_speed'


class RootLuRamp_generatorUser4AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.upper_limit'


class RootLuRamp_generatorUser4AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute.moving_time'


class RootLuRamp_generatorUser4Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.attribute'
        self.moving_time = RootLuRamp_generatorUser4AttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorUser4AttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorUser4AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorUser4AttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorUser4AttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorUser4AttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorUser4AttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorUser4AttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorUser4AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorUser4AttributeLower_limit(self._context)


class RootLuRamp_generatorUser4TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.trigger.prepare'


class RootLuRamp_generatorUser4TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.trigger.abort'


class RootLuRamp_generatorUser4TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.trigger.start'


class RootLuRamp_generatorUser4TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.trigger.stop'


class RootLuRamp_generatorUser4Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.trigger'
        self.stop = RootLuRamp_generatorUser4TriggerStop(self._context)
        self.start = RootLuRamp_generatorUser4TriggerStart(self._context)
        self.abort = RootLuRamp_generatorUser4TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorUser4TriggerPrepare(self._context)


class RootLuRamp_generatorUser4BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.busy.is_moving'


class RootLuRamp_generatorUser4Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4.busy'
        self.is_moving = RootLuRamp_generatorUser4BusyIs_moving(self._context)


class RootLuRamp_generatorUser4(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user4'
        self.busy = RootLuRamp_generatorUser4Busy(self._context)
        self.trigger = RootLuRamp_generatorUser4Trigger(self._context)
        self.attribute = RootLuRamp_generatorUser4Attribute(self._context)


class RootLuRamp_generatorApproachAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.lower_limit'


class RootLuRamp_generatorApproachAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorApproachAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.status'
        self.enum = RootLuRamp_generatorApproachAttributeStatusEnum(self._context)


class RootLuRamp_generatorApproachAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorApproachAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorApproachAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorApproachAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.current_value'


class RootLuRamp_generatorApproachAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.end_value_absolute'


class RootLuRamp_generatorApproachAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.end_value_relative'


class RootLuRamp_generatorApproachAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.approach.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.approach.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorApproachAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.moving_mode'
        self.enum = RootLuRamp_generatorApproachAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorApproachAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.moving_speed'


class RootLuRamp_generatorApproachAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.upper_limit'


class RootLuRamp_generatorApproachAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute.moving_time'


class RootLuRamp_generatorApproachAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.attribute'
        self.moving_time = RootLuRamp_generatorApproachAttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorApproachAttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorApproachAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorApproachAttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorApproachAttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorApproachAttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorApproachAttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorApproachAttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorApproachAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorApproachAttributeLower_limit(self._context)


class RootLuRamp_generatorApproachTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.trigger.prepare'


class RootLuRamp_generatorApproachTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.trigger.abort'


class RootLuRamp_generatorApproachTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.trigger.start'


class RootLuRamp_generatorApproachTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.trigger.stop'


class RootLuRamp_generatorApproachTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.trigger'
        self.stop = RootLuRamp_generatorApproachTriggerStop(self._context)
        self.start = RootLuRamp_generatorApproachTriggerStart(self._context)
        self.abort = RootLuRamp_generatorApproachTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorApproachTriggerPrepare(self._context)


class RootLuRamp_generatorApproachBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.busy.is_moving'


class RootLuRamp_generatorApproachBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach.busy'
        self.is_moving = RootLuRamp_generatorApproachBusyIs_moving(self._context)


class RootLuRamp_generatorApproach(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.approach'
        self.busy = RootLuRamp_generatorApproachBusy(self._context)
        self.trigger = RootLuRamp_generatorApproachTrigger(self._context)
        self.attribute = RootLuRamp_generatorApproachAttribute(self._context)


class RootLuRamp_generatorVirtual1AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.lower_limit'


class RootLuRamp_generatorVirtual1AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorVirtual1AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.status'
        self.enum = RootLuRamp_generatorVirtual1AttributeStatusEnum(self._context)


class RootLuRamp_generatorVirtual1AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorVirtual1AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorVirtual1AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorVirtual1AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.current_value'


class RootLuRamp_generatorVirtual1AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.end_value_absolute'


class RootLuRamp_generatorVirtual1AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.end_value_relative'


class RootLuRamp_generatorVirtual1AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual1.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual1.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorVirtual1AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.moving_mode'
        self.enum = RootLuRamp_generatorVirtual1AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorVirtual1AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.moving_speed'


class RootLuRamp_generatorVirtual1AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.upper_limit'


class RootLuRamp_generatorVirtual1AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute.moving_time'


class RootLuRamp_generatorVirtual1Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.attribute'
        self.moving_time = RootLuRamp_generatorVirtual1AttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorVirtual1AttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorVirtual1AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorVirtual1AttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorVirtual1AttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorVirtual1AttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorVirtual1AttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorVirtual1AttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorVirtual1AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorVirtual1AttributeLower_limit(self._context)


class RootLuRamp_generatorVirtual1TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.trigger.prepare'


class RootLuRamp_generatorVirtual1TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.trigger.abort'


class RootLuRamp_generatorVirtual1TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.trigger.start'


class RootLuRamp_generatorVirtual1TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.trigger.stop'


class RootLuRamp_generatorVirtual1Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.trigger'
        self.stop = RootLuRamp_generatorVirtual1TriggerStop(self._context)
        self.start = RootLuRamp_generatorVirtual1TriggerStart(self._context)
        self.abort = RootLuRamp_generatorVirtual1TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorVirtual1TriggerPrepare(self._context)


class RootLuRamp_generatorVirtual1BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.busy.is_moving'


class RootLuRamp_generatorVirtual1Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1.busy'
        self.is_moving = RootLuRamp_generatorVirtual1BusyIs_moving(self._context)


class RootLuRamp_generatorVirtual1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual1'
        self.busy = RootLuRamp_generatorVirtual1Busy(self._context)
        self.trigger = RootLuRamp_generatorVirtual1Trigger(self._context)
        self.attribute = RootLuRamp_generatorVirtual1Attribute(self._context)


class RootLuRamp_generatorVirtual2AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.lower_limit'


class RootLuRamp_generatorVirtual2AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorVirtual2AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.status'
        self.enum = RootLuRamp_generatorVirtual2AttributeStatusEnum(self._context)


class RootLuRamp_generatorVirtual2AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorVirtual2AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorVirtual2AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorVirtual2AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.current_value'


class RootLuRamp_generatorVirtual2AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.end_value_absolute'


class RootLuRamp_generatorVirtual2AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.end_value_relative'


class RootLuRamp_generatorVirtual2AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.virtual2.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.virtual2.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorVirtual2AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.moving_mode'
        self.enum = RootLuRamp_generatorVirtual2AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorVirtual2AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.moving_speed'


class RootLuRamp_generatorVirtual2AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.upper_limit'


class RootLuRamp_generatorVirtual2AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute.moving_time'


class RootLuRamp_generatorVirtual2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.attribute'
        self.moving_time = RootLuRamp_generatorVirtual2AttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorVirtual2AttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorVirtual2AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorVirtual2AttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorVirtual2AttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorVirtual2AttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorVirtual2AttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorVirtual2AttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorVirtual2AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorVirtual2AttributeLower_limit(self._context)


class RootLuRamp_generatorVirtual2TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.trigger.prepare'


class RootLuRamp_generatorVirtual2TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.trigger.abort'


class RootLuRamp_generatorVirtual2TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.trigger.start'


class RootLuRamp_generatorVirtual2TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.trigger.stop'


class RootLuRamp_generatorVirtual2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.trigger'
        self.stop = RootLuRamp_generatorVirtual2TriggerStop(self._context)
        self.start = RootLuRamp_generatorVirtual2TriggerStart(self._context)
        self.abort = RootLuRamp_generatorVirtual2TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorVirtual2TriggerPrepare(self._context)


class RootLuRamp_generatorVirtual2BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.busy.is_moving'


class RootLuRamp_generatorVirtual2Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2.busy'
        self.is_moving = RootLuRamp_generatorVirtual2BusyIs_moving(self._context)


class RootLuRamp_generatorVirtual2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.virtual2'
        self.busy = RootLuRamp_generatorVirtual2Busy(self._context)
        self.trigger = RootLuRamp_generatorVirtual2Trigger(self._context)
        self.attribute = RootLuRamp_generatorVirtual2Attribute(self._context)


class RootLuRamp_generatorCtrl_zAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.lower_limit'


class RootLuRamp_generatorCtrl_zAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorCtrl_zAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.status'
        self.enum = RootLuRamp_generatorCtrl_zAttributeStatusEnum(self._context)


class RootLuRamp_generatorCtrl_zAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorCtrl_zAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorCtrl_zAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorCtrl_zAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.current_value'


class RootLuRamp_generatorCtrl_zAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.end_value_absolute'


class RootLuRamp_generatorCtrl_zAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.end_value_relative'


class RootLuRamp_generatorCtrl_zAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.ctrl_z.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.ctrl_z.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorCtrl_zAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.moving_mode'
        self.enum = RootLuRamp_generatorCtrl_zAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorCtrl_zAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.moving_speed'


class RootLuRamp_generatorCtrl_zAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.upper_limit'


class RootLuRamp_generatorCtrl_zAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute.moving_time'


class RootLuRamp_generatorCtrl_zAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.attribute'
        self.moving_time = RootLuRamp_generatorCtrl_zAttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorCtrl_zAttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorCtrl_zAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorCtrl_zAttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorCtrl_zAttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorCtrl_zAttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorCtrl_zAttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorCtrl_zAttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorCtrl_zAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorCtrl_zAttributeLower_limit(self._context)


class RootLuRamp_generatorCtrl_zTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.trigger.prepare'


class RootLuRamp_generatorCtrl_zTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.trigger.abort'


class RootLuRamp_generatorCtrl_zTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.trigger.start'


class RootLuRamp_generatorCtrl_zTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.trigger.stop'


class RootLuRamp_generatorCtrl_zTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.trigger'
        self.stop = RootLuRamp_generatorCtrl_zTriggerStop(self._context)
        self.start = RootLuRamp_generatorCtrl_zTriggerStart(self._context)
        self.abort = RootLuRamp_generatorCtrl_zTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorCtrl_zTriggerPrepare(self._context)


class RootLuRamp_generatorCtrl_zBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.busy.is_moving'


class RootLuRamp_generatorCtrl_zBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z.busy'
        self.is_moving = RootLuRamp_generatorCtrl_zBusyIs_moving(self._context)


class RootLuRamp_generatorCtrl_z(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.ctrl_z'
        self.busy = RootLuRamp_generatorCtrl_zBusy(self._context)
        self.trigger = RootLuRamp_generatorCtrl_zTrigger(self._context)
        self.attribute = RootLuRamp_generatorCtrl_zAttribute(self._context)


class RootLuRamp_generatorPosition_xAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.lower_limit'


class RootLuRamp_generatorPosition_xAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorPosition_xAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.status'
        self.enum = RootLuRamp_generatorPosition_xAttributeStatusEnum(self._context)


class RootLuRamp_generatorPosition_xAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorPosition_xAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorPosition_xAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorPosition_xAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.current_value'


class RootLuRamp_generatorPosition_xAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.end_value_absolute'


class RootLuRamp_generatorPosition_xAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.end_value_relative'


class RootLuRamp_generatorPosition_xAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_x.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_x.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorPosition_xAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.moving_mode'
        self.enum = RootLuRamp_generatorPosition_xAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorPosition_xAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.moving_speed'


class RootLuRamp_generatorPosition_xAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.upper_limit'


class RootLuRamp_generatorPosition_xAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute.moving_time'


class RootLuRamp_generatorPosition_xAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.attribute'
        self.moving_time = RootLuRamp_generatorPosition_xAttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorPosition_xAttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorPosition_xAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorPosition_xAttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorPosition_xAttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorPosition_xAttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorPosition_xAttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorPosition_xAttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorPosition_xAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorPosition_xAttributeLower_limit(self._context)


class RootLuRamp_generatorPosition_xTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.trigger.prepare'


class RootLuRamp_generatorPosition_xTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.trigger.abort'


class RootLuRamp_generatorPosition_xTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.trigger.start'


class RootLuRamp_generatorPosition_xTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.trigger.stop'


class RootLuRamp_generatorPosition_xTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.trigger'
        self.stop = RootLuRamp_generatorPosition_xTriggerStop(self._context)
        self.start = RootLuRamp_generatorPosition_xTriggerStart(self._context)
        self.abort = RootLuRamp_generatorPosition_xTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorPosition_xTriggerPrepare(self._context)


class RootLuRamp_generatorPosition_xBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.busy.is_moving'


class RootLuRamp_generatorPosition_xBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x.busy'
        self.is_moving = RootLuRamp_generatorPosition_xBusyIs_moving(self._context)


class RootLuRamp_generatorPosition_x(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_x'
        self.busy = RootLuRamp_generatorPosition_xBusy(self._context)
        self.trigger = RootLuRamp_generatorPosition_xTrigger(self._context)
        self.attribute = RootLuRamp_generatorPosition_xAttribute(self._context)


class RootLuRamp_generatorPosition_yAttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.lower_limit'


class RootLuRamp_generatorPosition_yAttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorPosition_yAttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.status'
        self.enum = RootLuRamp_generatorPosition_yAttributeStatusEnum(self._context)


class RootLuRamp_generatorPosition_yAttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorPosition_yAttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorPosition_yAttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorPosition_yAttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.current_value'


class RootLuRamp_generatorPosition_yAttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.end_value_absolute'


class RootLuRamp_generatorPosition_yAttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.end_value_relative'


class RootLuRamp_generatorPosition_yAttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.position_y.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.position_y.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorPosition_yAttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.moving_mode'
        self.enum = RootLuRamp_generatorPosition_yAttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorPosition_yAttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.moving_speed'


class RootLuRamp_generatorPosition_yAttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.upper_limit'


class RootLuRamp_generatorPosition_yAttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute.moving_time'


class RootLuRamp_generatorPosition_yAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.attribute'
        self.moving_time = RootLuRamp_generatorPosition_yAttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorPosition_yAttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorPosition_yAttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorPosition_yAttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorPosition_yAttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorPosition_yAttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorPosition_yAttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorPosition_yAttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorPosition_yAttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorPosition_yAttributeLower_limit(self._context)


class RootLuRamp_generatorPosition_yTriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.trigger.prepare'


class RootLuRamp_generatorPosition_yTriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.trigger.abort'


class RootLuRamp_generatorPosition_yTriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.trigger.start'


class RootLuRamp_generatorPosition_yTriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.trigger.stop'


class RootLuRamp_generatorPosition_yTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.trigger'
        self.stop = RootLuRamp_generatorPosition_yTriggerStop(self._context)
        self.start = RootLuRamp_generatorPosition_yTriggerStart(self._context)
        self.abort = RootLuRamp_generatorPosition_yTriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorPosition_yTriggerPrepare(self._context)


class RootLuRamp_generatorPosition_yBusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.busy.is_moving'


class RootLuRamp_generatorPosition_yBusy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y.busy'
        self.is_moving = RootLuRamp_generatorPosition_yBusyIs_moving(self._context)


class RootLuRamp_generatorPosition_y(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.position_y'
        self.busy = RootLuRamp_generatorPosition_yBusy(self._context)
        self.trigger = RootLuRamp_generatorPosition_yTrigger(self._context)
        self.attribute = RootLuRamp_generatorPosition_yAttribute(self._context)


class RootLuRamp_generatorUser2AttributeLower_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.lower_limit'


class RootLuRamp_generatorUser2AttributeStatusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.status.enum'

    @property
    def reached_lower_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.status.enum.reached_lower_limit'))

    @reached_lower_limit.setter
    def reached_lower_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.status.enum.reached_lower_limit', int(new_val))

    @property
    def reached_upper_limit(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.status.enum.reached_upper_limit'))

    @reached_upper_limit.setter
    def reached_upper_limit(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.status.enum.reached_upper_limit', int(new_val))

    @property
    def stopped_by_external_event(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.status.enum.stopped_by_external_event'))

    @stopped_by_external_event.setter
    def stopped_by_external_event(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.status.enum.stopped_by_external_event', int(new_val))

    @property
    def is_moving(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.status.enum.is_moving'))

    @is_moving.setter
    def is_moving(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.status.enum.is_moving', int(new_val))

    @property
    def reached_endposition(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.status.enum.reached_endposition'))

    @reached_endposition.setter
    def reached_endposition(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.status.enum.reached_endposition', int(new_val))


class RootLuRamp_generatorUser2AttributeStatus(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.status'
        self.enum = RootLuRamp_generatorUser2AttributeStatusEnum(self._context)


class RootLuRamp_generatorUser2AttributeEnd_value_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.end_value_mode.enum'

    @property
    def move_to_absolute(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.end_value_mode.enum.move_to_absolute'))

    @move_to_absolute.setter
    def move_to_absolute(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.end_value_mode.enum.move_to_absolute', int(new_val))

    @property
    def move_relative(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.end_value_mode.enum.move_relative'))

    @move_relative.setter
    def move_relative(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.end_value_mode.enum.move_relative', int(new_val))


class RootLuRamp_generatorUser2AttributeEnd_value_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.end_value_mode'
        self.enum = RootLuRamp_generatorUser2AttributeEnd_value_modeEnum(self._context)


class RootLuRamp_generatorUser2AttributeCurrent_value(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.current_value'


class RootLuRamp_generatorUser2AttributeEnd_value_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.end_value_absolute'


class RootLuRamp_generatorUser2AttributeEnd_value_relative(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.end_value_relative'


class RootLuRamp_generatorUser2AttributeMoving_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.moving_mode.enum'

    @property
    def fix_speed(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.moving_mode.enum.fix_speed'))

    @fix_speed.setter
    def fix_speed(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.moving_mode.enum.fix_speed', int(new_val))

    @property
    def fix_time(self) -> int:
        return int(self._context.get('root.lu.ramp_generator.user2.attribute.moving_mode.enum.fix_time'))

    @fix_time.setter
    def fix_time(self, new_val:int):
        self._context.set('root.lu.ramp_generator.user2.attribute.moving_mode.enum.fix_time', int(new_val))


class RootLuRamp_generatorUser2AttributeMoving_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.moving_mode'
        self.enum = RootLuRamp_generatorUser2AttributeMoving_modeEnum(self._context)


class RootLuRamp_generatorUser2AttributeMoving_speed(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.moving_speed'


class RootLuRamp_generatorUser2AttributeUpper_limit(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.upper_limit'


class RootLuRamp_generatorUser2AttributeMoving_time(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute.moving_time'


class RootLuRamp_generatorUser2Attribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.attribute'
        self.moving_time = RootLuRamp_generatorUser2AttributeMoving_time(self._context)
        self.upper_limit = RootLuRamp_generatorUser2AttributeUpper_limit(self._context)
        self.moving_speed = RootLuRamp_generatorUser2AttributeMoving_speed(self._context)
        self.moving_mode = RootLuRamp_generatorUser2AttributeMoving_mode(self._context)
        self.end_value_relative = RootLuRamp_generatorUser2AttributeEnd_value_relative(self._context)
        self.end_value_absolute = RootLuRamp_generatorUser2AttributeEnd_value_absolute(self._context)
        self.current_value = RootLuRamp_generatorUser2AttributeCurrent_value(self._context)
        self.end_value_mode = RootLuRamp_generatorUser2AttributeEnd_value_mode(self._context)
        self.status = RootLuRamp_generatorUser2AttributeStatus(self._context)
        self.lower_limit = RootLuRamp_generatorUser2AttributeLower_limit(self._context)


class RootLuRamp_generatorUser2TriggerPrepare(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.trigger.prepare'


class RootLuRamp_generatorUser2TriggerAbort(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.trigger.abort'


class RootLuRamp_generatorUser2TriggerStart(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.trigger.start'


class RootLuRamp_generatorUser2TriggerStop(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.trigger.stop'


class RootLuRamp_generatorUser2Trigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.trigger'
        self.stop = RootLuRamp_generatorUser2TriggerStop(self._context)
        self.start = RootLuRamp_generatorUser2TriggerStart(self._context)
        self.abort = RootLuRamp_generatorUser2TriggerAbort(self._context)
        self.prepare = RootLuRamp_generatorUser2TriggerPrepare(self._context)


class RootLuRamp_generatorUser2BusyIs_moving(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.busy.is_moving'


class RootLuRamp_generatorUser2Busy(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2.busy'
        self.is_moving = RootLuRamp_generatorUser2BusyIs_moving(self._context)


class RootLuRamp_generatorUser2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator.user2'
        self.busy = RootLuRamp_generatorUser2Busy(self._context)
        self.trigger = RootLuRamp_generatorUser2Trigger(self._context)
        self.attribute = RootLuRamp_generatorUser2Attribute(self._context)


class RootLuRamp_generator(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.ramp_generator'
        self.user2 = RootLuRamp_generatorUser2(self._context)
        self.position_y = RootLuRamp_generatorPosition_y(self._context)
        self.position_x = RootLuRamp_generatorPosition_x(self._context)
        self.ctrl_z = RootLuRamp_generatorCtrl_z(self._context)
        self.virtual2 = RootLuRamp_generatorVirtual2(self._context)
        self.virtual1 = RootLuRamp_generatorVirtual1(self._context)
        self.approach = RootLuRamp_generatorApproach(self._context)
        self.user4 = RootLuRamp_generatorUser4(self._context)
        self.plane_z = RootLuRamp_generatorPlane_z(self._context)
        self.tip_voltage = RootLuRamp_generatorTip_voltage(self._context)
        self.virtual0 = RootLuRamp_generatorVirtual0(self._context)
        self.user1 = RootLuRamp_generatorUser1(self._context)
        self.alternate_z = RootLuRamp_generatorAlternate_z(self._context)
        self.test = RootLuRamp_generatorTest(self._context)


class RootLuSystem_infraInstanceAttributeApproach_motor_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_status.enum'

    @property
    def min_in(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.min_in'))

    @min_in.setter
    def min_in(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.min_in', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.not_connected', int(new_val))

    @property
    def error(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.error'))

    @error.setter
    def error(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.error', int(new_val))

    @property
    def dummy_0(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.dummy_0'))

    @dummy_0.setter
    def dummy_0(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.dummy_0', int(new_val))

    @property
    def max_out(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.max_out'))

    @max_out.setter
    def max_out(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.max_out', int(new_val))

    @property
    def in_range(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_status.enum.in_range'))

    @in_range.setter
    def in_range(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_status.enum.in_range', int(new_val))


class RootLuSystem_infraInstanceAttributeApproach_motor_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_status'
        self.enum = RootLuSystem_infraInstanceAttributeApproach_motor_statusEnum(self._context)


class RootLuSystem_infraInstanceAttributeApproach_motor_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_position'


class RootLuSystem_infraInstanceAttributeCurrent_clock_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_clock_source.enum'

    @property
    def external(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_clock_source.enum.external'))

    @external.setter
    def external(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_clock_source.enum.external', int(new_val))

    @property
    def internal(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_clock_source.enum.internal'))

    @internal.setter
    def internal(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_clock_source.enum.internal', int(new_val))


class RootLuSystem_infraInstanceAttributeCurrent_clock_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_clock_source'
        self.enum = RootLuSystem_infraInstanceAttributeCurrent_clock_sourceEnum(self._context)


class RootLuSystem_infraInstanceAttributeCurrent_scanhead_tilt_positionEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum'

    @property
    def open_pos(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.open_pos'))

    @open_pos.setter
    def open_pos(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.open_pos', int(new_val))

    @property
    def working_pos(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.working_pos'))

    @working_pos.setter
    def working_pos(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.working_pos', int(new_val))

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_scanhead_tilt_position.enum.undefined', int(new_val))


class RootLuSystem_infraInstanceAttributeCurrent_scanhead_tilt_position(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_scanhead_tilt_position'
        self.enum = RootLuSystem_infraInstanceAttributeCurrent_scanhead_tilt_positionEnum(self._context)


class RootLuSystem_infraInstanceAttributeDeflection_offset(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.deflection_offset'


class RootLuSystem_infraInstanceAttributeEnable10_hz_update_sensor_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.enable10_hz_update_sensor_status'


class RootLuSystem_infraInstanceAttributeFast_out2_output_maskEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum'

    @property
    def none(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.none'))

    @none.setter
    def none(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.none', int(new_val))

    @property
    def monitor1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.monitor1'))

    @monitor1.setter
    def monitor1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.monitor1', int(new_val))

    @property
    def tip_voltage_or_user_out_a(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.tip_voltage_or_user_out_a'))

    @tip_voltage_or_user_out_a.setter
    def tip_voltage_or_user_out_a(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.tip_voltage_or_user_out_a', int(new_val))

    @property
    def user_out1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.user_out1'))

    @user_out1.setter
    def user_out1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.user_out1', int(new_val))

    @property
    def user_out_b(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.user_out_b'))

    @user_out_b.setter
    def user_out_b(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.user_out_b', int(new_val))

    @property
    def all(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.all'))

    @all.setter
    def all(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.all', int(new_val))

    @property
    def monitor2(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.monitor2'))

    @monitor2.setter
    def monitor2(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.fast_out2_output_mask.enum.monitor2', int(new_val))


class RootLuSystem_infraInstanceAttributeFast_out2_output_mask(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.fast_out2_output_mask'
        self.enum = RootLuSystem_infraInstanceAttributeFast_out2_output_maskEnum(self._context)


class RootLuSystem_infraInstanceAttributeLaser_power_current(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.laser_power_current'


class RootLuSystem_infraInstanceAttributeMain_in2_couplingEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_coupling.enum'

    @property
    def ac_coupling(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_coupling.enum.ac_coupling'))

    @ac_coupling.setter
    def ac_coupling(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_coupling.enum.ac_coupling', int(new_val))

    @property
    def dc_coupling(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_coupling.enum.dc_coupling'))

    @dc_coupling.setter
    def dc_coupling(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_coupling.enum.dc_coupling', int(new_val))


class RootLuSystem_infraInstanceAttributeMain_in2_coupling(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_coupling'
        self.enum = RootLuSystem_infraInstanceAttributeMain_in2_couplingEnum(self._context)


class RootLuSystem_infraInstanceAttributeMain_in2_gainEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_gain.enum'

    @property
    def gain16(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain16'))

    @gain16.setter
    def gain16(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain16', int(new_val))

    @property
    def gain1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain1'))

    @gain1.setter
    def gain1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain1', int(new_val))

    @property
    def gain4(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain4'))

    @gain4.setter
    def gain4(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_gain.enum.gain4', int(new_val))


class RootLuSystem_infraInstanceAttributeMain_in2_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_gain'
        self.enum = RootLuSystem_infraInstanceAttributeMain_in2_gainEnum(self._context)


class RootLuSystem_infraInstanceAttributeMain_in2_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_input.enum'

    @property
    def user2(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.user2'))

    @user2.setter
    def user2(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.user2', int(new_val))

    @property
    def lateral(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.lateral'))

    @lateral.setter
    def lateral(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.lateral', int(new_val))

    @property
    def deflection(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.deflection'))

    @deflection.setter
    def deflection(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.deflection', int(new_val))

    @property
    def test_ana_gnd(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_ana_gnd'))

    @test_ana_gnd.setter
    def test_ana_gnd(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_ana_gnd', int(new_val))

    @property
    def tip_current(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.tip_current'))

    @tip_current.setter
    def tip_current(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.tip_current', int(new_val))

    @property
    def user3(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.user3'))

    @user3.setter
    def user3(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.user3', int(new_val))

    @property
    def test_ref(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_ref'))

    @test_ref.setter
    def test_ref(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_ref', int(new_val))

    @property
    def user1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.user1'))

    @user1.setter
    def user1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.user1', int(new_val))

    @property
    def test_tip_voltage(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_tip_voltage'))

    @test_tip_voltage.setter
    def test_tip_voltage(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in2_input.enum.test_tip_voltage', int(new_val))


class RootLuSystem_infraInstanceAttributeMain_in2_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in2_input'
        self.enum = RootLuSystem_infraInstanceAttributeMain_in2_inputEnum(self._context)


class RootLuSystem_infraInstanceAttributeScan_head_type(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.scan_head_type'


class RootLuSystem_infraInstanceAttributeSensor_light(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.sensor_light'


class RootLuSystem_infraInstanceAttributeTip_signal_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.tip_signal_mode.enum'

    @property
    def external_feedthrough(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.external_feedthrough'))

    @external_feedthrough.setter
    def external_feedthrough(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.external_feedthrough', int(new_val))

    @property
    def voltage_output(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.voltage_output'))

    @voltage_output.setter
    def voltage_output(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.voltage_output', int(new_val))

    @property
    def current_sense_input(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.current_sense_input'))

    @current_sense_input.setter
    def current_sense_input(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_signal_mode.enum.current_sense_input', int(new_val))


class RootLuSystem_infraInstanceAttributeTip_signal_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.tip_signal_mode'
        self.enum = RootLuSystem_infraInstanceAttributeTip_signal_modeEnum(self._context)


class RootLuSystem_infraInstanceAttributeCurrent_video_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_video_source.enum'

    @property
    def top_view(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_video_source.enum.top_view'))

    @top_view.setter
    def top_view(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_video_source.enum.top_view', int(new_val))

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_video_source.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_video_source.enum.undefined', int(new_val))

    @property
    def side_view(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.current_video_source.enum.side_view'))

    @side_view.setter
    def side_view(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.current_video_source.enum.side_view', int(new_val))


class RootLuSystem_infraInstanceAttributeCurrent_video_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.current_video_source'
        self.enum = RootLuSystem_infraInstanceAttributeCurrent_video_sourceEnum(self._context)


class RootLuSystem_infraInstanceAttributeInterface_box_typeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.interface_box_type.enum'

    @property
    def i100(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100'))

    @i100.setter
    def i100(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100', int(new_val))

    @property
    def not_connected(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.not_connected'))

    @not_connected.setter
    def not_connected(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.not_connected', int(new_val))

    @property
    def i100_integrated(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100_integrated'))

    @i100_integrated.setter
    def i100_integrated(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100_integrated', int(new_val))

    @property
    def i100_afsem(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100_afsem'))

    @i100_afsem.setter
    def i100_afsem(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.i100_afsem', int(new_val))

    @property
    def icxcytomass(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxcytomass'))

    @icxcytomass.setter
    def icxcytomass(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxcytomass', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.unknown', int(new_val))

    @property
    def icxarac(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxarac'))

    @icxarac.setter
    def icxarac(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxarac', int(new_val))

    @property
    def icxp6(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxp6'))

    @icxp6.setter
    def icxp6(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxp6', int(new_val))

    @property
    def icxflex(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxflex'))

    @icxflex.setter
    def icxflex(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.interface_box_type.enum.icxflex', int(new_val))


class RootLuSystem_infraInstanceAttributeInterface_box_type(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.interface_box_type'
        self.enum = RootLuSystem_infraInstanceAttributeInterface_box_typeEnum(self._context)


class RootLuSystem_infraInstanceAttributeHas_scanhead_tilt_detection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.has_scanhead_tilt_detection'


class RootLuSystem_infraInstanceAttributeMain_in1_couplingEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in1_coupling.enum'

    @property
    def ac_coupling(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in1_coupling.enum.ac_coupling'))

    @ac_coupling.setter
    def ac_coupling(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in1_coupling.enum.ac_coupling', int(new_val))

    @property
    def dc_coupling(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in1_coupling.enum.dc_coupling'))

    @dc_coupling.setter
    def dc_coupling(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in1_coupling.enum.dc_coupling', int(new_val))


class RootLuSystem_infraInstanceAttributeMain_in1_coupling(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in1_coupling'
        self.enum = RootLuSystem_infraInstanceAttributeMain_in1_couplingEnum(self._context)


class RootLuSystem_infraInstanceAttributeAfm_sensor_status_normalized(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.afm_sensor_status_normalized'


class RootLuSystem_infraInstanceAttributeControl_laser_power(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.control_laser_power'


class RootLuSystem_infraInstanceAttributeSensor_value_normalized(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.sensor_value_normalized'


class RootLuSystem_infraInstanceAttributeController_typeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.controller_type.enum'

    @property
    def core_afm(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.core_afm'))

    @core_afm.setter
    def core_afm(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.core_afm', int(new_val))

    @property
    def c3000(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.c3000'))

    @c3000.setter
    def c3000(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.c3000', int(new_val))

    @property
    def unknown(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.unknown'))

    @unknown.setter
    def unknown(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.unknown', int(new_val))

    @property
    def cx(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.cx'))

    @cx.setter
    def cx(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.cx', int(new_val))

    @property
    def c3000_i(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.controller_type.enum.c3000_i'))

    @c3000_i.setter
    def c3000_i(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.controller_type.enum.c3000_i', int(new_val))


class RootLuSystem_infraInstanceAttributeController_type(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.controller_type'
        self.enum = RootLuSystem_infraInstanceAttributeController_typeEnum(self._context)


class RootLuSystem_infraInstanceAttributeLaser_power_lock(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.laser_power_lock'


class RootLuSystem_infraInstanceAttributeDepreciated_0(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.depreciated_0'


class RootLuSystem_infraInstanceAttributeController_temperature(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.controller_temperature'


class RootLuSystem_infraInstanceAttributeAfm_sensor_statusEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.afm_sensor_status.enum'

    @property
    def ok(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.ok'))

    @ok.setter
    def ok(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.ok', int(new_val))

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.undefined', int(new_val))

    @property
    def fail(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.fail'))

    @fail.setter
    def fail(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.fail', int(new_val))

    @property
    def low(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.low'))

    @low.setter
    def low(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.low', int(new_val))

    @property
    def high(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.high'))

    @high.setter
    def high(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_status.enum.high', int(new_val))


class RootLuSystem_infraInstanceAttributeAfm_sensor_status(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.afm_sensor_status'
        self.enum = RootLuSystem_infraInstanceAttributeAfm_sensor_statusEnum(self._context)


class RootLuSystem_infraInstanceAttributeDepreciated_2(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.depreciated_2'


class RootLuSystem_infraInstanceAttributeTip_current_or_in_user3_inputEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum'

    @property
    def in_user3(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.in_user3'))

    @in_user3.setter
    def in_user3(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.in_user3', int(new_val))

    @property
    def tip_current(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.tip_current'))

    @tip_current.setter
    def tip_current(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.tip_current', int(new_val))

    @property
    def ana_gnd(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.ana_gnd'))

    @ana_gnd.setter
    def ana_gnd(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input.enum.ana_gnd', int(new_val))


class RootLuSystem_infraInstanceAttributeTip_current_or_in_user3_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.tip_current_or_in_user3_input'
        self.enum = RootLuSystem_infraInstanceAttributeTip_current_or_in_user3_inputEnum(self._context)


class RootLuSystem_infraInstanceAttributeExtra_in1_input(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.extra_in1_input'


class RootLuSystem_infraInstanceAttributeDepreciated_1(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.depreciated_1'


class RootLuSystem_infraInstanceAttributeTarget_clock_sourceEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.target_clock_source.enum'

    @property
    def external(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.target_clock_source.enum.external'))

    @external.setter
    def external(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.target_clock_source.enum.external', int(new_val))

    @property
    def internal(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.target_clock_source.enum.internal'))

    @internal.setter
    def internal(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.target_clock_source.enum.internal', int(new_val))


class RootLuSystem_infraInstanceAttributeTarget_clock_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.target_clock_source'
        self.enum = RootLuSystem_infraInstanceAttributeTarget_clock_sourceEnum(self._context)


class RootLuSystem_infraInstanceAttributeApproach_motor_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_mode.enum'

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.undefined', int(new_val))

    @property
    def limit_switches(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.limit_switches'))

    @limit_switches.setter
    def limit_switches(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.limit_switches', int(new_val))

    @property
    def position_sensor(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.position_sensor'))

    @position_sensor.setter
    def position_sensor(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.approach_motor_mode.enum.position_sensor', int(new_val))


class RootLuSystem_infraInstanceAttributeApproach_motor_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_mode'
        self.enum = RootLuSystem_infraInstanceAttributeApproach_motor_modeEnum(self._context)


class RootLuSystem_infraInstanceAttributeFriction_normalized(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.friction_normalized'


class RootLuSystem_infraInstanceAttributeMain_in1_gainEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in1_gain.enum'

    @property
    def gain16(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain16'))

    @gain16.setter
    def gain16(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain16', int(new_val))

    @property
    def gain1(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain1'))

    @gain1.setter
    def gain1(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain1', int(new_val))

    @property
    def gain4(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain4'))

    @gain4.setter
    def gain4(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.main_in1_gain.enum.gain4', int(new_val))


class RootLuSystem_infraInstanceAttributeMain_in1_gain(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.main_in1_gain'
        self.enum = RootLuSystem_infraInstanceAttributeMain_in1_gainEnum(self._context)


class RootLuSystem_infraInstanceAttributeApproach_motor_status_normalized(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.approach_motor_status_normalized'


class RootLuSystem_infraInstanceAttributeAfm_sensor_modeEnum(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.afm_sensor_mode.enum'

    @property
    def laser_drive(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.laser_drive'))

    @laser_drive.setter
    def laser_drive(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.laser_drive', int(new_val))

    @property
    def detector_intensity(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.detector_intensity'))

    @detector_intensity.setter
    def detector_intensity(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.detector_intensity', int(new_val))

    @property
    def laser_power(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.laser_power'))

    @laser_power.setter
    def laser_power(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.laser_power', int(new_val))

    @property
    def undefined(self) -> int:
        return int(self._context.get('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.undefined'))

    @undefined.setter
    def undefined(self, new_val:int):
        self._context.set('root.lu.system_infra.instance.attribute.afm_sensor_mode.enum.undefined', int(new_val))


class RootLuSystem_infraInstanceAttributeAfm_sensor_mode(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.afm_sensor_mode'
        self.enum = RootLuSystem_infraInstanceAttributeAfm_sensor_modeEnum(self._context)


class RootLuSystem_infraInstanceAttributeHas_video_source_detection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.has_video_source_detection'


class RootLuSystem_infraInstanceAttributeLaser_power_absolute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute.laser_power_absolute'


class RootLuSystem_infraInstanceAttribute(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.attribute'
        self.laser_power_absolute = RootLuSystem_infraInstanceAttributeLaser_power_absolute(self._context)
        self.has_video_source_detection = RootLuSystem_infraInstanceAttributeHas_video_source_detection(self._context)
        self.afm_sensor_mode = RootLuSystem_infraInstanceAttributeAfm_sensor_mode(self._context)
        self.approach_motor_status_normalized = RootLuSystem_infraInstanceAttributeApproach_motor_status_normalized(self._context)
        self.main_in1_gain = RootLuSystem_infraInstanceAttributeMain_in1_gain(self._context)
        self.friction_normalized = RootLuSystem_infraInstanceAttributeFriction_normalized(self._context)
        self.approach_motor_mode = RootLuSystem_infraInstanceAttributeApproach_motor_mode(self._context)
        self.target_clock_source = RootLuSystem_infraInstanceAttributeTarget_clock_source(self._context)
        self.depreciated_1 = RootLuSystem_infraInstanceAttributeDepreciated_1(self._context)
        self.extra_in1_input = RootLuSystem_infraInstanceAttributeExtra_in1_input(self._context)
        self.tip_current_or_in_user3_input = RootLuSystem_infraInstanceAttributeTip_current_or_in_user3_input(self._context)
        self.depreciated_2 = RootLuSystem_infraInstanceAttributeDepreciated_2(self._context)
        self.afm_sensor_status = RootLuSystem_infraInstanceAttributeAfm_sensor_status(self._context)
        self.controller_temperature = RootLuSystem_infraInstanceAttributeController_temperature(self._context)
        self.depreciated_0 = RootLuSystem_infraInstanceAttributeDepreciated_0(self._context)
        self.laser_power_lock = RootLuSystem_infraInstanceAttributeLaser_power_lock(self._context)
        self.controller_type = RootLuSystem_infraInstanceAttributeController_type(self._context)
        self.sensor_value_normalized = RootLuSystem_infraInstanceAttributeSensor_value_normalized(self._context)
        self.control_laser_power = RootLuSystem_infraInstanceAttributeControl_laser_power(self._context)
        self.afm_sensor_status_normalized = RootLuSystem_infraInstanceAttributeAfm_sensor_status_normalized(self._context)
        self.main_in1_coupling = RootLuSystem_infraInstanceAttributeMain_in1_coupling(self._context)
        self.has_scanhead_tilt_detection = RootLuSystem_infraInstanceAttributeHas_scanhead_tilt_detection(self._context)
        self.interface_box_type = RootLuSystem_infraInstanceAttributeInterface_box_type(self._context)
        self.current_video_source = RootLuSystem_infraInstanceAttributeCurrent_video_source(self._context)
        self.tip_signal_mode = RootLuSystem_infraInstanceAttributeTip_signal_mode(self._context)
        self.sensor_light = RootLuSystem_infraInstanceAttributeSensor_light(self._context)
        self.scan_head_type = RootLuSystem_infraInstanceAttributeScan_head_type(self._context)
        self.main_in2_input = RootLuSystem_infraInstanceAttributeMain_in2_input(self._context)
        self.main_in2_gain = RootLuSystem_infraInstanceAttributeMain_in2_gain(self._context)
        self.main_in2_coupling = RootLuSystem_infraInstanceAttributeMain_in2_coupling(self._context)
        self.laser_power_current = RootLuSystem_infraInstanceAttributeLaser_power_current(self._context)
        self.fast_out2_output_mask = RootLuSystem_infraInstanceAttributeFast_out2_output_mask(self._context)
        self.enable10_hz_update_sensor_status = RootLuSystem_infraInstanceAttributeEnable10_hz_update_sensor_status(self._context)
        self.deflection_offset = RootLuSystem_infraInstanceAttributeDeflection_offset(self._context)
        self.current_scanhead_tilt_position = RootLuSystem_infraInstanceAttributeCurrent_scanhead_tilt_position(self._context)
        self.current_clock_source = RootLuSystem_infraInstanceAttributeCurrent_clock_source(self._context)
        self.approach_motor_position = RootLuSystem_infraInstanceAttributeApproach_motor_position(self._context)
        self.approach_motor_status = RootLuSystem_infraInstanceAttributeApproach_motor_status(self._context)


class RootLuSystem_infraInstanceTriggerDetect_scan_head_arrival_removal(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.trigger.detect_scan_head_arrival_removal'


class RootLuSystem_infraInstanceTriggerDetect_scan_head_lever_change(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.trigger.detect_scan_head_lever_change'


class RootLuSystem_infraInstanceTriggerSwitch_clock_source(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.trigger.switch_clock_source'


class RootLuSystem_infraInstanceTriggerDetect_limit_switch_status_info_change(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.trigger.detect_limit_switch_status_info_change'


class RootLuSystem_infraInstanceTrigger(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance.trigger'
        self.detect_limit_switch_status_info_change = RootLuSystem_infraInstanceTriggerDetect_limit_switch_status_info_change(self._context)
        self.switch_clock_source = RootLuSystem_infraInstanceTriggerSwitch_clock_source(self._context)
        self.detect_scan_head_lever_change = RootLuSystem_infraInstanceTriggerDetect_scan_head_lever_change(self._context)
        self.detect_scan_head_arrival_removal = RootLuSystem_infraInstanceTriggerDetect_scan_head_arrival_removal(self._context)


class RootLuSystem_infraInstance(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra.instance'
        self.trigger = RootLuSystem_infraInstanceTrigger(self._context)
        self.attribute = RootLuSystem_infraInstanceAttribute(self._context)


class RootLuSystem_infra(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu.system_infra'
        self.instance = RootLuSystem_infraInstance(self._context)


class RootLu(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.lu'
        self.system_infra = RootLuSystem_infra(self._context)
        self.ramp_generator = RootLuRamp_generator(self._context)
        self.frequency_sweep_gen = RootLuFrequency_sweep_gen(self._context)
        self.litho = RootLuLitho(self._context)
        self.cantilever_properties = RootLuCantilever_properties(self._context)
        self.analog_hi_res_in = RootLuAnalog_hi_res_in(self._context)
        self.direct_motor_control = RootLuDirect_motor_control(self._context)
        self.scan = RootLuScan(self._context)
        self.digi_user_io = RootLuDigi_user_io(self._context)
        self.comparator = RootLuComparator(self._context)
        self.timer = RootLuTimer(self._context)
        self.hv_amplifier = RootLuHv_amplifier(self._context)
        self.auto_alignment = RootLuAuto_alignment(self._context)
        self.oscilloscope = RootLuOscilloscope(self._context)
        self.comp_dc = RootLuComp_dc(self._context)
        self.pid_controller = RootLuPid_controller(self._context)
        self.analog_hi_res_out = RootLuAnalog_hi_res_out(self._context)
        self.thermal_tuning = RootLuThermal_tuning(self._context)
        self.macro_cmd = RootLuMacro_cmd(self._context)
        self.analog_fast_out = RootLuAnalog_fast_out(self._context)
        self.isostage = RootLuIsostage(self._context)
        self.z_controller_ex = RootLuZ_controller_ex(self._context)
        self.data_acquisition = RootLuData_acquisition(self._context)
        self.test = RootLuTest(self._context)
        self.system = RootLuSystem(self._context)
        self.event_manager = RootLuEvent_manager(self._context)
        self.sequencer = RootLuSequencer(self._context)
        self.mainboard_relays = RootLuMainboard_relays(self._context)
        self.scanhead = RootLuScanhead(self._context)
        self.signal_analyzer = RootLuSignal_analyzer(self._context)
        self.analog_fast_in = RootLuAnalog_fast_in(self._context)
        self.memory_signal_gen = RootLuMemory_signal_gen(self._context)
        self.spec = RootLuSpec(self._context)
        self.sensor_control = RootLuSensor_control(self._context)
        self.rescan = RootLuRescan(self._context)
        self.position_control = RootLuPosition_control(self._context)
        self.approach = RootLuApproach(self._context)
        self.ort = RootLuOrt(self._context)

    def load_lu_interface_shared(self, *args) -> Any:
        return self._context.call('root.lu.load_lu_interface_shared', *args)


class RootUtil(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.util'

    def num_table_invert(self, *args) -> Any:
        return self._context.call('root.util.num_table_invert', *args)

    def filter_string_array_begin(self, *args) -> Any:
        return self._context.call('root.util.filter_string_array_begin', *args)

    def list_table_tables(self, *args) -> Any:
        return self._context.call('root.util.list_table_tables', *args)

    def to_string(self, *args) -> Any:
        return self._context.call('root.util.to_string', *args)

    def list_table_functions(self, *args) -> Any:
        return self._context.call('root.util.list_table_functions', *args)

    def array_concat(self, *args) -> Any:
        return self._context.call('root.util.array_concat', *args)

    def list_table_all(self, *args) -> Any:
        return self._context.call('root.util.list_table_all', *args)

    def to_snake_case(self, *args) -> Any:
        return self._context.call('root.util.to_snake_case', *args)

    def prequire(self, *args) -> Any:
        return self._context.call('root.util.prequire', *args)

    def make_property(self, *args) -> Any:
        return self._context.call('root.util.make_property', *args)

    def list_table_vars(self, *args) -> Any:
        return self._context.call('root.util.list_table_vars', *args)

    def table_append(self, *args) -> Any:
        return self._context.call('root.util.table_append', *args)

    def list_table_elements(self, *args) -> Any:
        return self._context.call('root.util.list_table_elements', *args)

    def deep_copy(self, *args) -> Any:
        return self._context.call('root.util.deep_copy', *args)

    def deep_compare(self, *args) -> Any:
        return self._context.call('root.util.deep_compare', *args)


class RootWorkflowHardware_detection(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow.hardware_detection'


class RootWorkflowCantilever_browser(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow.cantilever_browser'


class RootWorkflowCamera(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow.camera'


class RootWorkflowManager(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow.manager'

    @property
    def session_name(self) -> str:
        return str(self._context.get('root.workflow.manager.session_name'))

    @session_name.setter
    def session_name(self, new_val:str):
        self._context.set('root.workflow.manager.session_name', str(new_val))


class RootWorkflow(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.workflow'
        self.manager = RootWorkflowManager(self._context)
        self.camera = RootWorkflowCamera(self._context)
        self.cantilever_browser = RootWorkflowCantilever_browser(self._context)
        self.hardware_detection = RootWorkflowHardware_detection(self._context)


class RootCoreI2c(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.i2c'


class RootCoreCore_options_store(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.core_options_store'


class RootCoreScript_server(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.script_server'


class RootCoreStorage(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.storage'

    def is_file_open(self, *args) -> Any:
        return self._context.call('root.core.storage.is_file_open', *args)

    def close_file(self, *args) -> Any:
        return self._context.call('root.core.storage.close_file', *args)

    def open_file(self, *args) -> Any:
        return self._context.call('root.core.storage.open_file', *args)


class RootCoreVshi(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.vshi'


class RootCoreHw_modules(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.hw_modules'


class RootCoreCamera(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.camera'


class RootCoreSpm_controller_discovery(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core.spm_controller_discovery'


class RootCore(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root.core'
        self.spm_controller_discovery = RootCoreSpm_controller_discovery(self._context)
        self.camera = RootCoreCamera(self._context)
        self.hw_modules = RootCoreHw_modules(self._context)
        self.vshi = RootCoreVshi(self._context)
        self.storage = RootCoreStorage(self._context)
        self.script_server = RootCoreScript_server(self._context)
        self.core_options_store = RootCoreCore_options_store(self._context)
        self.i2c = RootCoreI2c(self._context)


class Root(wrap.CmdTreeNode):
    def __init__(self, context: 'StudioScriptContext'):
        super().__init__()
        self._context = context
        self._lua_tree_name = 'root'
        self.core = RootCore(self._context)
        self.workflow = RootWorkflow(self._context)
        self.util = RootUtil(self._context)
        self.lu = RootLu(self._context)
        self.session = RootSession(self._context)
        self.seq = RootSeq(self._context)
        self.test = RootTest(self._context)

    def log_error(self, *args) -> Any:
        return self._context.call('root.log_error', *args)

    def log_info(self, *args) -> Any:
        return self._context.call('root.log_info', *args)

    def log_warn(self, *args) -> Any:
        return self._context.call('root.log_warn', *args)

    def log_debug(self, *args) -> Any:
        return self._context.call('root.log_debug', *args)

    def log_fatal(self, *args) -> Any:
        return self._context.call('root.log_fatal', *args)

    @property
    def init_complete(self) -> bool:
        return bool(self._context.get('root.init_complete'))

    @init_complete.setter
    def init_complete(self, new_val:bool):
        self._context.set('root.init_complete', bool(new_val))


