(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{500:function(e,t,n){"use strict";n.r(t);var a=n(288),r=n.n(a),c=n(72),l=n.n(c),o=n(14),i=n.n(o),u=n(0),s=n.n(u),m=n(4),p=n(301),d=n.n(p),f=n(35),b=n.n(f),g=n(51),v=n.n(g),h=n(295),y=n.n(h),O=n(1),E=n(345),j=n.n(E),C=n(353),N=n.n(C),S=n(7),w=n(8),P=n(47),k=n(317),R=n(289),I=n(293),_=n(50),x=n(354),L=n(33),T=n.n(L),q=n(34),z=n.n(q),D=n(129),M=n.n(D),B=n(36),A=n.n(B),F=n(37),U=n.n(F),J=n(21),V=n.n(J),G=n(3),H=n.n(G),K=n(39);function Q(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=V()(e);if(t){var r=V()(this).constructor;n=Reflect.construct(a,arguments,r)}else n=a.apply(this,arguments);return U()(this,n)}}var W=function(e){A()(n,e);var t=Q(n);function n(e){var a;return T()(this,n),a=t.call(this,e),r()(M()(a),"setValue",(function(e){a.props.handleChange(e)})),r()(M()(a),"loadCustomMenu",(function(){return new Promise((function(e){if("external"===a.props.type)import("".concat(Object(K.a)(),"/custom/").concat(a.props.fileName,".js")).then((function(t){var n=t.default;e(n)}));else{var t=Object(P.d)().meta.name;require(["app/".concat(t,"/js/build/custom/").concat(a.props.fileName)],(function(t){return e(t)}))}}))})),a.state={loading:!0},a.shouldRender=!0,a}return z()(n,[{key:"componentDidMount",value:function(){var e=this,t=Object(P.d)();this.setState({loading:!0}),this.loadCustomMenu().then((function(n){new n(t,e.el,e.setValue).render(),e.setState({loading:!1})}))}},{key:"shouldComponentUpdate",value:function(e,t){return!(t.loading||!this.shouldRender)&&(this.shouldRender=!1,!0)}},{key:"render",value:function(){var e=this;return s.a.createElement(s.a.Fragment,null,this.state.loading&&Object(S._)("Loading..."),s.a.createElement("span",{ref:function(t){e.el=t},style:{visibility:this.state.loading?"hidden":"visible"}}))}}]),n}(u.Component);W.propTypes={fileName:H.a.string.isRequired,type:H.a.string,handleChange:H.a.func};var X=W,Y=n(361),Z=n(322),$=n(362),ee=n(130),te=n.n(ee),ne=n(76),ae=n.n(ne),re=n(15),ce=n(325);function le(e){var t=e.handleRequestClose,n=e.serviceName,a=e.mode,r=e.stanzaName,c=e.formLabel,o=Object(u.useRef)(),i=Object(u.useState)(!1),m=l()(i,2),p=m[0],f=m[1],g=Object(S._)("Submit");a===I.c?g=Object(S._)("Add"):a===I.a?g=Object(S._)("Clone Input"):a===I.d&&(g=Object(S._)("Update"));var v={boxShadow:Object(re.useSplunkTheme)().embossShadow,padding:"1%",backgroundColor:"white"};return s.a.createElement(d.a,{gutter:8},s.a.createElement(d.a.Row,{style:{padding:"5px 0px"}},s.a.createElement(d.a.Column,null,s.a.createElement(k.a,null,s.a.createElement(te.a,{onClick:t},Object(S._)("Inputs"))," > ",Object(S._)(c)))),s.a.createElement(d.a.Row,null,s.a.createElement(d.a.Column,{span:2}),s.a.createElement(d.a.Column,{span:8,style:v},s.a.createElement(ce.a,{ref:o,page:_.b,serviceName:n,mode:a,stanzaName:r,handleFormSubmit:function(e,n){f(e),n&&t()}})),s.a.createElement(d.a.Column,{span:2})),s.a.createElement(d.a.Row,null,s.a.createElement(d.a.Column,{span:7}),s.a.createElement(d.a.Column,{span:3,style:{textAlign:"right"}},s.a.createElement(b.a,{appearance:"secondary",onClick:t,label:Object(S._)("Cancel"),disabled:p}),s.a.createElement(b.a,{appearance:"primary",label:p?s.a.createElement(ae.a,null):g,onClick:function(){o.current.handleSubmit()&&t()},disabled:p})),s.a.createElement(d.a.Column,{span:2})))}le.propTypes={handleRequestClose:H.a.func,serviceName:H.a.string,mode:H.a.string,stanzaName:H.a.string,formLabel:H.a.string};var oe,ie=Object(u.memo)(le),ue=n(321);function se(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function me(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?se(Object(n),!0).forEach((function(t){r()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):se(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var pe=Object(O.default)(d.a.Row)(oe||(oe=i()(["\n    padding: 5px 0px;\n\n    .dropdown {\n        text-align: right;\n    }\n\n    .input_button {\n        text-align: right;\n        margin-right: 0px;\n    }\n"])));t.default=function(){var e,t,n=Object(u.useState)({open:!1}),a=l()(n,2),r=a[0],c=a[1],o=Object(P.d)(),i=o.pages.inputs,p=i.services,f=i.title,g=i.description,h=i.menu,O=!!(null===(e=o.pages.inputs)||void 0===e?void 0:e.table),E=Object(u.useState)(p[0].name),C=l()(E,2),L=C[0],T=C[1],q=Object(u.useState)((null===(t=p[0])||void 0===t?void 0:t.description)||""),z=l()(q,2),D=z[0],M=z[1],B=Object(u.useState)(p[0].title),A=l()(B,2),F=A[0],U=A[1],J=s.a.createElement(b.a,{appearance:"primary",id:"addInputBtn",label:Object(S._)("Create New Input"),isMenu:!0}),V=[I.a,I.c,I.d],G=p.map((function(e){return e.name})),H=Object(m.d)(),K=Object(ue.a)();Object(u.useEffect)((function(){Q(),W()}),[H.location.search]);var Q=function(){var e=p.find((function(e){return e.name===K.get("service")}));K&&e&&V.includes(K.get("action"))&&!r.open?K.get("action")!==I.c&&r.stanzaName?c(me(me({},r),{},{open:!0,isInputPageStyle:!0,serviceName:K.get("service"),mode:K.get("action")})):c(me(me({},r),{},{open:!0,isInputPageStyle:!0,serviceName:K.get("service"),formLabel:"Create ".concat(null==e?void 0:e.title),mode:I.c})):K.get("service")&&K.get("action")||!r.open||!r.isInputPageStyle||c(me(me({},r),{},{open:!1}))},W=function(){K&&G.includes(K.get("service"))&&T(K.get("service"))},ee=function(e,t){var n=p.find((function(t){return t.name===e})).style===x.b;c(me(me({},r),{},{open:!0,serviceName:e,mode:I.c,formLabel:"Add ".concat(t),isInputPageStyle:n})),n&&(K.set("service",e),K.set("action",I.c),H.push({search:K.toString()}))},te=function(){c(me(me({},r),{},{open:!1}))},ne=function(e,t){var n,a=null===(n=p.find((function(t){return t.name===e.serviceName})))||void 0===n?void 0:n.title;c(me(me({},r),{},{open:!0,isInputPageStyle:!0,serviceName:e.serviceName,stanzaName:e.name,formLabel:t===I.a?"Clone ".concat(a):"Update ".concat(a),mode:t})),K.set("service",e.serviceName),K.set("action",t),H.push({search:K.toString()})},ae=function(){c(me(me({},r),{},{open:!1})),K.delete("service"),K.delete("action"),H.push({search:K.toString()})},re=function(e){var t=e.service;ee(t,p.find((function(e){return e.name===t})).title)},ce=Object(u.useCallback)((function(e,t){var n=t.selectedTabId;T(n);var a=p.find((function(e){return e.name===n}));a&&(M(a.description),U(a.title)),K.set("service",n),H.push({search:K.toString()})}),[L]);return s.a.createElement($.a,null,s.a.createElement(R.a,{value:null},r.isInputPageStyle&&r.open?s.a.createElement(ie,{open:r.open,handleRequestClose:ae,serviceName:r.serviceName,stanzaName:r.stanzaName,mode:r.mode,formLabel:r.formLabel}):null," ",s.a.createElement("div",{style:r.isInputPageStyle&&r.open?{display:"none"}:{display:"block"}},s.a.createElement(d.a,{gutter:8},s.a.createElement(pe,null,s.a.createElement(d.a.Column,{span:9},s.a.createElement(k.b,null,O?Object(S._)(f||""):Object(S._)(F)),s.a.createElement(k.a,null,O?Object(S._)(g||""):Object(S._)(D||""))),O?!p||null!=h&&h.src?s.a.createElement(d.a.Column,{span:3,className:"input_button"},s.a.createElement(X,{fileName:h.src,type:h.type,handleChange:re})):p.length>1?s.a.createElement(d.a.Column,{className:"dropdown",span:3},s.a.createElement(v.a,{toggle:J},s.a.createElement(y.a,{onClick:function(e){var t=p[p.findIndex((function(t){return t.title===e.target.innerText}))].name;ee(t,e.target.innerText)}},p.map((function(e){return s.a.createElement(y.a.Item,{key:e.name},e.title)}))))):s.a.createElement(d.a.Column,{span:3,className:"input_button"},s.a.createElement(b.a,{label:Object(w.a)(100),appearance:"primary",id:"addInputBtn",onClick:function(){ee(p[0].name,p[0].title)}})):null)),O?s.a.createElement(Y.a,{page:_.b,handleOpenPageStyleDialog:ne}):s.a.createElement(s.a.Fragment,null,s.a.createElement(N.a,{activeTabId:L,onChange:ce},p.map((function(e){return s.a.createElement(N.a.Tab,{key:e.name,label:Object(S._)(e.title),tabId:e.name}," ")}))),p.map((function(e){return s.a.createElement("div",{key:e.name,style:e.name!==L?{display:"none"}:{display:"block"},id:"".concat(e.name,"Tab")},s.a.createElement(Y.a,{page:_.b,serviceName:e.name,handleRequestModalOpen:function(){return ee(e.name,e.title)},handleOpenPageStyleDialog:ne}))}))),s.a.createElement(j.a,{position:"top-right"}),!r.isInputPageStyle&&r.open?s.a.createElement(Z.a,{page:_.b,open:r.open,handleRequestClose:te,serviceName:r.serviceName,mode:I.c,formLabel:r.formLabel}):null)))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,