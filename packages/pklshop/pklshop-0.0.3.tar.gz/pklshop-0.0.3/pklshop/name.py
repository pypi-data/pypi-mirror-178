# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_name.ipynb.

# %% auto 0
__all__ = ['rally', 'players', 'game', 'team', 'match', 'shot', 'tournament', 'get_team_name', 'get_team_id', 'get_player_name',
           'get_player_id']

# %% ../nbs/02_name.ipynb 3
from .data import *
import pandas as pd

# %% ../nbs/02_name.ipynb 4
#! Need to think about how to store these tables so that functions can use them
#! but don't want to have to pass specific tables every time
rally = get_tab_as_df("rally")
players = get_tab_as_df("player")
game = get_tab_as_df("game")
team = get_tab_as_df("team")
match = get_tab_as_df("match")
shot = get_tab_as_df("shot")
tournament = get_tab_as_df("tournament") 

# %% ../nbs/02_name.ipynb 5
def get_team_name(team_id: str, team_df: pd.DataFrame = team) -> str:
    '''
    Returns the name of the team with team_id
    Optionally pass a team_df to use a different table
    '''
    if team_id in team_df.team_id.values:
        return team_df[team_df.team_id == team_id].team_nm.values[0]
    else:
        raise ValueError(f"team_id \"{team_id}\" not found in team_df")

def get_team_id(team_name: str, team_df: pd.DataFrame = team) -> str:
    '''
    Returns the team_id of the team with team_name
    Optionally pass a team_df to use a different table
    '''
    if team_name in team_df.team_nm.values:
        return team_df[team_df.team_nm == team_name].team_id.values[0]
    else:
        raise ValueError(f"team_name \"{team_name}\" not found in team_df")

def get_player_name(player_id: str, player_df: pd.DataFrame = players) -> str:
    '''
    Returns the name of the player with player_id
    Optionally pass a player_df to use a different table
    '''
    if player_id in player_df.player_id.values:
        return player_df[player_df.player_id == player_id].first_nm.values[0] + " " + player_df[player_df.player_id == player_id].last_nm.values[0]
    else:
        raise ValueError(f"player_id \"{player_id}\" not found in player_df")

def get_player_id(player_name: str, player_df: pd.DataFrame = players) -> str:
    '''
    Returns the player_id of the player with player_name
    Optionally pass a player_df to use a different table
    '''
    full_names = player_df.first_nm.values + " " + player_df.last_nm.values
    if player_name in full_names:
        return full_names[full_names == player_name][0]
    else:
        raise ValueError(f"player_name \"{player_name}\" not found in player_df")
