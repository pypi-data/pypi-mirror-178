{"version":3,"file":"podcast-form.js","sources":["../../../../static_src/admin/js/podcast-form.js"],"sourcesContent":["import $ from 'jquery';\n\nconst debounce = (callback, wait) => {\n  let timeoutId = null;\n\n  return (...args) => {\n    window.clearTimeout(timeoutId);\n    timeoutId = window.setTimeout(() => {\n      callback(...args);\n    }, wait);\n  };\n};\n\n/**\n * Format the time from seconds to HH:MM:SS.\n * @param {Number} seconds\n * @return {String}\n */\nconst formatDuration = (seconds) => {\n  return new Date(1000 * seconds).toISOString().substr(11, 8);\n};\n\n$(function () {\n  const fileInput = document.querySelector('input#id_sound_file');\n  const currentFileUrl = document.querySelector(\n    '[data-contentpath=\"sound_file\"] a'\n  );\n  const urlInput = document.querySelector('input#id_sound_url');\n  const durationInput = document.querySelector('input#id_duration');\n  const isValidInput = document.querySelector('input#id_is_sound_valid');\n\n  // Retreive the audio source (external or internal url) from the form fields\n  const getSource = () => {\n    if (currentFileUrl) {\n      return currentFileUrl.href;\n    }\n\n    if (urlInput) {\n      return urlInput.value;\n    }\n  };\n\n  // Create a new Audio object with the current sound_url value or the sound\n  // file to validate it and set the duration value with the audio duration\n  const retrieve = debounce((src) => {\n    isValidInput.value = '0';\n\n    if (!src) {\n      durationInput.value = '';\n      return;\n    }\n\n    const audio = new Audio();\n    audio.preload = 'metadata';\n\n    audio.addEventListener('error', () => {\n      durationInput.value = '';\n    });\n    audio.addEventListener('loadedmetadata', () => {\n      isValidInput.value = '1';\n      durationInput.value =\n        audio.duration === Infinity ? '' : formatDuration(audio.duration);\n    });\n\n    audio.src = src;\n  }, 500);\n\n  urlInput.addEventListener('input', () => {\n    retrieve(urlInput.value);\n  });\n  console.log('yes');\n  if (fileInput) {\n    fileInput.addEventListener('input', () => {\n      const tmpUrl = URL.createObjectURL(fileInput.files[0]);\n      retrieve(tmpUrl);\n    });\n  }\n\n  retrieve(getSource());\n});\n"],"names":["callback","wait","timeoutId","fileInput","document","querySelector","currentFileUrl","urlInput","durationInput","isValidInput","retrieve","src","value","audio","Audio","preload","addEventListener","seconds","duration","Infinity","Date","toISOString","substr","args","window","clearTimeout","setTimeout","console","log","tmpUrl","URL","createObjectURL","files","href"],"mappings":"gHAsBE,eApBgBA,EAAUC,EACtBC,EAoBEC,EAAYC,SAASC,cAAc,uBACnCC,EAAiBF,SAASC,cAC9B,qCAEIE,EAAWH,SAASC,cAAc,sBAClCG,EAAgBJ,SAASC,cAAc,qBACvCI,EAAeL,SAASC,cAAc,2BAetCK,GA1CUV,EA0CU,SAACW,MACzBF,EAAaG,MAAQ,IAEhBD,OAKCE,EAAQ,IAAIC,MAClBD,EAAME,QAAU,WAEhBF,EAAMG,iBAAiB,SAAS,WAC9BR,EAAcI,MAAQ,MAExBC,EAAMG,iBAAiB,kBAAkB,WAxCtB,IAACC,EAyClBR,EAAaG,MAAQ,IACrBJ,EAAcI,MACZC,EAAMK,WAAaC,EAAAA,EAAW,IA3CdF,EA2CkCJ,EAAMK,SA1CvD,IAAIE,KAAK,IAAOH,GAASI,cAAcC,OAAO,GAAI,OA6CvDT,EAAMF,IAAMA,OAhBVH,EAAcI,MAAQ,IA9CAX,EA+DvB,IA9DCC,EAAY,KAET,sCAAIqB,2BAAAA,kBACTC,OAAOC,aAAavB,GACpBA,EAAYsB,OAAOE,YAAW,WAC5B1B,eAAYuB,KACXtB,KA0DLM,EAASS,iBAAiB,SAAS,WACjCN,EAASH,EAASK,UAEpBe,QAAQC,IAAI,OACRzB,GACFA,EAAUa,iBAAiB,SAAS,eAC5Ba,EAASC,IAAIC,gBAAgB5B,EAAU6B,MAAM,IACnDtB,EAASmB,MAIbnB,EA7CMJ,EACKA,EAAe2B,KAGpB1B,EACKA,EAASK"}