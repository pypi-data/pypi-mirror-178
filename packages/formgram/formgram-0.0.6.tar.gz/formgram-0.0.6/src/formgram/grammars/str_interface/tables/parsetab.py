


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "ARROW NEWLINE NONTERMINAL OR TERMINALtrim : start\n            | NEWLINE trimstart : production newlines productions\n            | production newlines\n            | production\n            newlines : NEWLINE\n            | NEWLINE newlines\n        productions : production newlines productions\n        | production newlines\n        | productionproduction : side ARROW\n        | side ARROW right_hand_sidesright_hand_sides : side OR right_hand_sides\n        | OR right_hand_sides\n        | side\n        | side ORside : NONTERMINAL side\n        | NONTERMINAL\n        side : TERMINAL side\n        | TERMINAL"

_lr_action_items = {
    "NEWLINE": (
        [
            0,
            3,
            4,
            6,
            7,
            10,
            11,
            12,
            13,
            14,
            17,
            18,
            21,
            22,
            24,
        ],
        [
            3,
            3,
            10,
            -18,
            -20,
            10,
            -11,
            -17,
            -19,
            10,
            -15,
            -12,
            -16,
            -14,
            -13,
        ],
    ),
    "NONTERMINAL": (
        [
            0,
            3,
            6,
            7,
            9,
            10,
            11,
            16,
            19,
            20,
            21,
        ],
        [
            6,
            6,
            6,
            6,
            6,
            -6,
            6,
            -7,
            6,
            6,
            6,
        ],
    ),
    "TERMINAL": (
        [
            0,
            3,
            6,
            7,
            9,
            10,
            11,
            16,
            19,
            20,
            21,
        ],
        [
            7,
            7,
            7,
            7,
            7,
            -6,
            7,
            -7,
            7,
            7,
            7,
        ],
    ),
    "$end": (
        [
            1,
            2,
            4,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            20,
            21,
            22,
            23,
            24,
        ],
        [
            0,
            -1,
            -5,
            -18,
            -20,
            -2,
            -4,
            -6,
            -11,
            -17,
            -19,
            -10,
            -3,
            -7,
            -15,
            -12,
            -9,
            -16,
            -14,
            -8,
            -13,
        ],
    ),
    "ARROW": (
        [
            5,
            6,
            7,
            12,
            13,
        ],
        [
            11,
            -18,
            -20,
            -17,
            -19,
        ],
    ),
    "OR": (
        [
            6,
            7,
            11,
            12,
            13,
            17,
            19,
            21,
        ],
        [
            -18,
            -20,
            19,
            -17,
            -19,
            21,
            19,
            19,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "trim": (
        [
            0,
            3,
        ],
        [
            1,
            8,
        ],
    ),
    "start": (
        [
            0,
            3,
        ],
        [
            2,
            2,
        ],
    ),
    "production": (
        [
            0,
            3,
            9,
            20,
        ],
        [
            4,
            4,
            14,
            14,
        ],
    ),
    "side": (
        [
            0,
            3,
            6,
            7,
            9,
            11,
            19,
            20,
            21,
        ],
        [
            5,
            5,
            12,
            13,
            5,
            17,
            17,
            5,
            17,
        ],
    ),
    "newlines": (
        [
            4,
            10,
            14,
        ],
        [
            9,
            16,
            20,
        ],
    ),
    "productions": (
        [
            9,
            20,
        ],
        [
            15,
            23,
        ],
    ),
    "right_hand_sides": (
        [
            11,
            19,
            21,
        ],
        [
            18,
            22,
            24,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> trim", "S'", 1, None, None, None),
    ("trim -> start", "trim", 1, "p_trim", "backus_naur_parser.py", 116),
    ("trim -> NEWLINE trim", "trim", 2, "p_trim", "backus_naur_parser.py", 117),
    (
        "start -> production newlines productions",
        "start",
        3,
        "p_start",
        "backus_naur_parser.py",
        127,
    ),
    (
        "start -> production newlines",
        "start",
        2,
        "p_start",
        "backus_naur_parser.py",
        128,
    ),
    ("start -> production", "start", 1, "p_start", "backus_naur_parser.py", 129),
    ("newlines -> NEWLINE", "newlines", 1, "p_newlines", "backus_naur_parser.py", 144),
    (
        "newlines -> NEWLINE newlines",
        "newlines",
        2,
        "p_newlines",
        "backus_naur_parser.py",
        145,
    ),
    (
        "productions -> production newlines productions",
        "productions",
        3,
        "p_productions",
        "backus_naur_parser.py",
        150,
    ),
    (
        "productions -> production newlines",
        "productions",
        2,
        "p_productions",
        "backus_naur_parser.py",
        151,
    ),
    (
        "productions -> production",
        "productions",
        1,
        "p_productions",
        "backus_naur_parser.py",
        152,
    ),
    (
        "production -> side ARROW",
        "production",
        2,
        "p_production",
        "backus_naur_parser.py",
        163,
    ),
    (
        "production -> side ARROW right_hand_sides",
        "production",
        3,
        "p_production",
        "backus_naur_parser.py",
        164,
    ),
    (
        "right_hand_sides -> side OR right_hand_sides",
        "right_hand_sides",
        3,
        "p_right_hand_sides",
        "backus_naur_parser.py",
        181,
    ),
    (
        "right_hand_sides -> OR right_hand_sides",
        "right_hand_sides",
        2,
        "p_right_hand_sides",
        "backus_naur_parser.py",
        182,
    ),
    (
        "right_hand_sides -> side",
        "right_hand_sides",
        1,
        "p_right_hand_sides",
        "backus_naur_parser.py",
        183,
    ),
    (
        "right_hand_sides -> side OR",
        "right_hand_sides",
        2,
        "p_right_hand_sides",
        "backus_naur_parser.py",
        184,
    ),
    (
        "side -> NONTERMINAL side",
        "side",
        2,
        "p_side_NONTERMINAL",
        "backus_naur_parser.py",
        212,
    ),
    (
        "side -> NONTERMINAL",
        "side",
        1,
        "p_side_NONTERMINAL",
        "backus_naur_parser.py",
        213,
    ),
    (
        "side -> TERMINAL side",
        "side",
        2,
        "p_side_TERMINAL",
        "backus_naur_parser.py",
        221,
    ),
    ("side -> TERMINAL", "side", 1, "p_side_TERMINAL", "backus_naur_parser.py", 222),
]
